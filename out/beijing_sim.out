Loading house from data/beijing/house_clean.csv
Loading airbnb from data/beijing/airbnb_clean.csv
Current house columns Index(['cid', 'DOM', 'followers', 'square', 'livingRoom', 'drawingRoom',
       'kitchen', 'bathRoom', 'floor', 'constructionTime', 'ladderRatio',
       'elevator', 'fiveYearsProperty', 'subway', 'did_2', 'did_3', 'did_4',
       'did_5', 'did_6', 'did_7', 'did_8', 'did_9', 'did_10', 'did_11',
       'did_12', 'did_13', 'bt_2', 'bt_3', 'bt_4', 'rc_2', 'rc_3', 'rc_4',
       'bs_2', 'bs_3', 'bs_4', 'bs_5', 'bs_6', 'ty_2014', 'ty_2015', 'ty_2016',
       'ty_2017', 'ty_2018', 'tm_2', 'tm_3', 'tm_4', 'tm_5', 'tm_6', 'tm_7',
       'tm_8', 'tm_9', 'tm_10', 'tm_11', 'tm_12', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'price', 'minimum_nights', 'number_of_reviews',
       'reviews_per_month', 'calculated_host_listings_count',
       'availability_365', 'nbr_丰台区 ', 'nbr_大兴区 ', 'nbr_密云县 ', 'nbr_平谷区 ',
       'nbr_延庆县 ', 'nbr_怀柔区 ', 'nbr_房山区', 'nbr_昌平区', 'nbr_朝阳区 ', 'nbr_海淀区',
       'nbr_石景山区', 'nbr_西城区', 'nbr_通州区 ', 'nbr_门头沟区 ', 'nbr_顺义区 ',
       'rt_Private room', 'rt_Shared room'],
      dtype='object')
Splitting data
Splitting...
Matching training set
Constructing tree
Query tree
Calculate sim_scores
Saving raw sim scores
Done scaling
Got 98735 samples in A
Setting index
Linking records
Step 1 done.
Finished Linking, got 9873500 samples
Filling null values
extracting data to numpy arrays
Matching validation set
Constructing tree
Query tree
Calculate sim_scores
Done scaling
Got 14105 samples in A
Setting index
Linking records
Step 1 done.
Finished Linking, got 1410500 samples
Filling null values
extracting data to numpy arrays
Matching test set
Constructing tree
Query tree
Calculate sim_scores
Done scaling
Got 28210 samples in A
Setting index
Linking records
Step 1 done.
Finished Linking, got 2821000 samples
Filling null values
extracting data to numpy arrays
Replace NaN with mean value
Train done.
Validation done.
Test done.
Scaling X
Scale done.
Replace NaN with mean value
Train done.
Validation done.
Test done.
Scaling X
Scale done.
Scaling y
Scale done
Grouping data
Done
Checking if B is sorted by similarity: False
Sorting data
Done
Retrieve data
Done
Grouping data
Done
Checking if B is sorted by similarity: False
Sorting data
Done
Retrieve data
Done
Grouping data
Done
Checking if B is sorted by similarity: False
Sorting data
Done
Retrieve data
Done
Saving data to cache
Saved
Calculating noise scale
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Preparing time (sec): 209
Initializing dataloader
Done
Prepare for training
Start training
SplitNN summary
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
SplitNN                                  [128, 10]                 --
├─ModuleList: 1-1                        --                        --
│    └─MLP: 2-3                          [128, 100]                (recursive)
├─MLP: 1                                 --                        --
│    └─ModuleList: 2-2                   --                        21,110
│    │    └─Linear: 3-5                  [128, 100]                (recursive)
│    │    └─Linear: 3-6                  [128, 10]                 (recursive)
├─ModuleList: 1-1                        --                        --
│    └─MLP: 2-3                          [128, 100]                (recursive)
│    │    └─ModuleList: 3-3              --                        30,900
│    └─MLP: 2-4                          [128, 100]                --
│    │    └─ModuleList: 3-4              --                        24,900
├─MLP: 1-2                               [128, 10]                 21,110
│    └─ModuleList: 2-2                   --                        21,110
│    │    └─Linear: 3-5                  [128, 100]                (recursive)
│    │    └─Linear: 3-6                  [128, 10]                 (recursive)
==========================================================================================
Total params: 76,910
Trainable params: 76,910
Non-trainable params: 0
Total mult-adds (M): 12.55
==========================================================================================
Input size (MB): 0.04
Forward/backward pass size (MB): 0.61
Params size (MB): 0.22
Estimated Total Size (MB): 0.88
==========================================================================================
Merge model summary
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
ConvModel                                [1, 1]                    --
├─Conv2d: 1-1                            [1, 8, 106, 10]           64
├─Dropout: 1-2                           [1, 8480]                 --
├─Linear: 1-3                            [1, 400]                  3,392,400
├─Dropout: 1-4                           [1, 400]                  --
├─Linear: 1-5                            [1, 1]                    401
==========================================================================================
Total params: 3,392,865
Trainable params: 3,392,865
Non-trainable params: 0
Total mult-adds (M): 3.46
==========================================================================================
Input size (MB): 0.00
Forward/backward pass size (MB): 0.07
Params size (MB): 13.57
Estimated Total Size (MB): 13.65
==========================================================================================
Similarity model summary
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
MLP                                      [1, 1]                    --
├─ModuleList: 1-1                        --                        --
│    └─Linear: 2-1                       [1, 10]                   20
│    └─Linear: 2-2                       [1, 1]                    11
==========================================================================================
Total params: 31
Trainable params: 31
Non-trainable params: 0
Total mult-adds (M): 0.00
==========================================================================================
Input size (MB): 0.00
Forward/backward pass size (MB): 0.00
Params size (MB): 0.00
Estimated Total Size (MB): 0.00
==========================================================================================
n_classes=2
task=regression
model_name=beijing_fedsim_p_1E+00_2022-07-28-15-55-47
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cpu
test_batch_size=4096
train_batch_size=128
learning_rate=0.001
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/beijing_fedsim_p_1E+00_2022-07-28-15-55-47.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f8405fd9550>, <metric.rmse.RMSE object at 0x7f8405fd9d30>]
hidden_sizes=[200, 100]
model=SplitNN(
  (agg_model): MLP(
    (fc_layers): ModuleList(
      (0): Linear(in_features=200, out_features=100, bias=True)
      (1): Linear(in_features=100, out_features=10, bias=True)
    )
  )
  (local_models): ModuleList(
    (0): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=53, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
    (1): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=23, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f8405fd9df0>
dataset_type=real
drop_key=True
num_common_features=2
tree_radius=0.01
tree_leaf_size=100
knn_k=100
grid_min=(115.5, 39)
grid_max=(116.5, 40)
grid_width=(0.1, 0.1)
sim_scaler=StandardScaler()
filter_top_k=None
link_n_jobs=-1
psig_p=7
sim_leak_p=1
link_threshold_t=0.01
link_epsilon=0.03
n_hash_lsh=20
edit_distance_threshold=1
n_hash_func=10
collision_rate=0.05
qgram_q=2
link_delta=0.03
feature_wise_sim=False
blocking_method=knn
center_threshold=0.5
n_clusters=100
local_hidden_sizes=[[200], [200]]
cut_dims=[100, 100]
agg_hidden_sizes=[100]
scale_analysis=None
disable_weight=False
disable_sort=False
mlp_merge=None
use_sim=True
use_conv=True
conv_kernel_v_size=7
conv_n_channels=8
merge_dropout_p=0.3
raw_output_dim=10
log_dir=log/beijing_fedsim_p_1E+00_2022-07-28-15-55-47/
update_sim_freq=1
sim_model_save_path=ckp/beijing_fedsim_p_1E+00_2022-07-28-15-55-47_sim.pth
merge_model_save_path=ckp/beijing_fedsim_p_1E+00_2022-07-28-15-55-47_merge.pth
sim_batch_size=128
sim_weight_decay=1e-05
sim_learning_rate=0.001
merge_model=ConvModel(
  (conv1): Conv2d(1, 8, kernel_size=(7, 1), stride=(1, 1), padding=(6, 0))
  (fc1): Linear(in_features=8480, out_features=400, bias=True)
  (fc2): Linear(in_features=400, out_features=1, bias=True)
  (dropout1): Dropout(p=0.3, inplace=False)
  (dropout2): Dropout(p=0.3, inplace=False)
)
sim_model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=1, out_features=10, bias=True)
    (1): Linear(in_features=10, out_features=1, bias=True)
  )
)
sim_hidden_sizes=[10]
merge_hidden_sizes=[400]
data1_shape=(141050, 55)
data2_shape=(27827, 25)
