  0%|          | 0/54068 [00:00<?, ?it/s]  4%|▎         | 1917/54068 [00:00<00:02, 19163.85it/s]  7%|▋         | 3834/54068 [00:00<00:02, 17708.21it/s] 10%|█         | 5652/54068 [00:00<00:02, 17911.08it/s] 14%|█▍        | 7449/54068 [00:00<00:02, 15645.01it/s] 17%|█▋        | 9050/54068 [00:00<00:03, 14011.58it/s] 19%|█▉        | 10491/54068 [00:00<00:03, 12956.99it/s] 22%|██▏       | 11816/54068 [00:00<00:03, 11122.76it/s] 25%|██▍       | 13394/54068 [00:00<00:03, 12294.82it/s] 27%|██▋       | 14752/54068 [00:01<00:03, 12634.45it/s] 30%|███       | 16273/54068 [00:01<00:02, 13340.13it/s] 33%|███▎      | 17856/54068 [00:01<00:02, 14040.22it/s] 36%|███▌      | 19364/54068 [00:01<00:02, 14337.96it/s] 39%|███▊      | 20825/54068 [00:01<00:03, 10390.66it/s] 41%|████      | 22033/54068 [00:01<00:03, 8863.28it/s]  43%|████▎     | 23065/54068 [00:01<00:03, 8195.61it/s] 44%|████▍     | 23985/54068 [00:02<00:04, 7170.07it/s] 46%|████▌     | 24781/54068 [00:02<00:04, 6463.65it/s] 47%|████▋     | 25483/54068 [00:02<00:04, 6181.21it/s] 48%|████▊     | 26135/54068 [00:02<00:05, 5048.24it/s] 49%|████▉     | 26685/54068 [00:02<00:05, 4911.40it/s] 50%|█████     | 27204/54068 [00:02<00:05, 4859.62it/s] 51%|█████     | 27708/54068 [00:03<00:07, 3702.80it/s] 52%|█████▏    | 28225/54068 [00:03<00:06, 3994.04it/s] 53%|█████▎    | 28699/54068 [00:03<00:06, 4158.82it/s] 54%|█████▍    | 29252/54068 [00:03<00:05, 4487.14it/s] 55%|█████▌    | 29806/54068 [00:03<00:05, 4756.11it/s] 56%|█████▋    | 30421/54068 [00:03<00:04, 5127.53it/s] 57%|█████▋    | 31068/54068 [00:03<00:04, 5495.81it/s] 59%|█████▊    | 31639/54068 [00:03<00:04, 5133.98it/s] 60%|█████▉    | 32171/54068 [00:03<00:04, 5068.58it/s] 61%|██████    | 32796/54068 [00:04<00:03, 5391.60it/s] 62%|██████▏   | 33347/54068 [00:04<00:04, 4730.16it/s] 63%|██████▎   | 33842/54068 [00:04<00:04, 4084.55it/s] 63%|██████▎   | 34278/54068 [00:04<00:05, 3835.86it/s] 65%|██████▍   | 34925/54068 [00:04<00:04, 4470.58it/s] 65%|██████▌   | 35401/54068 [00:04<00:04, 4394.04it/s] 66%|██████▋   | 35860/54068 [00:04<00:04, 4401.90it/s] 67%|██████▋   | 36314/54068 [00:05<00:04, 3712.15it/s] 68%|██████▊   | 36711/54068 [00:05<00:04, 3664.52it/s] 70%|██████▉   | 37841/54068 [00:05<00:02, 5592.75it/s] 72%|███████▏  | 39016/54068 [00:05<00:02, 7225.00it/s] 75%|███████▌  | 40650/54068 [00:05<00:01, 9728.93it/s] 78%|███████▊  | 41969/54068 [00:05<00:01, 10701.90it/s] 80%|████████  | 43308/54068 [00:05<00:00, 11471.10it/s] 82%|████████▏ | 44494/54068 [00:05<00:01, 7586.15it/s]  84%|████████▍ | 45451/54068 [00:06<00:01, 7496.60it/s] 86%|████████▋ | 46762/54068 [00:06<00:00, 8744.48it/s] 88%|████████▊ | 47776/54068 [00:06<00:00, 7527.25it/s] 90%|████████▉ | 48650/54068 [00:06<00:00, 6831.34it/s] 91%|█████████▏| 49422/54068 [00:06<00:00, 6059.44it/s] 93%|█████████▎| 50096/54068 [00:06<00:00, 5497.78it/s] 94%|█████████▍| 50694/54068 [00:07<00:00, 4772.73it/s] 95%|█████████▍| 51288/54068 [00:07<00:00, 5010.04it/s] 96%|█████████▋| 52069/54068 [00:07<00:00, 5642.08it/s] 97%|█████████▋| 52681/54068 [00:07<00:00, 5402.35it/s] 99%|█████████▉| 53446/54068 [00:07<00:00, 5951.65it/s]100%|██████████| 54068/54068 [00:07<00:00, 7186.35it/s]
  0%|          | 0/7725 [00:00<?, ?it/s] 20%|██        | 1576/7725 [00:00<00:00, 12902.12it/s] 51%|█████     | 3934/7725 [00:00<00:00, 18657.13it/s] 76%|███████▌  | 5853/7725 [00:00<00:00, 16596.05it/s]100%|██████████| 7725/7725 [00:00<00:00, 17744.79it/s]
  0%|          | 0/15449 [00:00<?, ?it/s] 19%|█▊        | 2879/15449 [00:00<00:00, 28780.76it/s] 37%|███▋      | 5758/15449 [00:00<00:00, 23433.88it/s] 53%|█████▎    | 8163/15449 [00:00<00:00, 17832.90it/s] 66%|██████▌   | 10191/15449 [00:00<00:00, 18574.61it/s] 80%|████████  | 12412/15449 [00:00<00:00, 19674.68it/s] 94%|█████████▎| 14466/15449 [00:00<00:00, 19752.44it/s]100%|██████████| 15449/15449 [00:00<00:00, 19495.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.56it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.27it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.70it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.63it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.69it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.53it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.46it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.81it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.28it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.70it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.22it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.53it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.06it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.80it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.21it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.03it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.84it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.83it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.58it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.26it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.10it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.70it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.80it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.93it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.47it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.66it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.07it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.48it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.34it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.01it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.68it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.70it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.50it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.44it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.80it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.55it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.01it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.88it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.99it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.51it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.18it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.21it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.54it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.12it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.72it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.27it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.58it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.66it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.40it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.84it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.63it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.81it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.25it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.86it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.64it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.77it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.57it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Calculating noise scale
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
Preparing time (sec): 40
Loading data
Prepare for training
Start training
================================================================================
                                    Kernel Shape Output Shape  Params  \
Layer                                                                   
0_local_models.0.fc_layers.Linear_0    [90, 200]  [4096, 200]   18200   
1_local_models.0.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
2_local_models.1.fc_layers.Linear_0   [156, 200]  [4096, 200]   31400   
3_local_models.1.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
4_agg_model.fc_layers.Linear_0        [200, 400]  [4096, 400]   80400   
5_agg_model.fc_layers.Linear_1          [400, 1]    [4096, 1]     401   

                                     Mult-Adds  
Layer                                           
0_local_models.0.fc_layers.Linear_0      18000  
1_local_models.0.fc_layers.Linear_1      20000  
2_local_models.1.fc_layers.Linear_0      31200  
3_local_models.1.fc_layers.Linear_1      20000  
4_agg_model.fc_layers.Linear_0           80000  
5_agg_model.fc_layers.Linear_1             400  
--------------------------------------------------------------------------------
                      Totals
Total params          170601
Trainable params      170601
Non-trainable params       0
Mult-Adds             169600
================================================================================
n_classes=2
task=regression
model_name=company_top1sim_2022-08-10-19-24-55
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:7
test_batch_size=4096
train_batch_size=4096
learning_rate=0.001
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_top1sim_2022-08-10-19-24-55.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['rmse', 'r2_score', 'mae']
metrics_f=[<metric.rmse.RMSE object at 0x7f3704768d30>, <metric.r2_score.R2Score object at 0x7f3704768190>, <metric.mae.MAE object at 0x7f3704768a00>]
hidden_sizes=[200, 100]
model=SplitNN(
  (agg_model): MLP(
    (fc_layers): ModuleList(
      (0): Linear(in_features=200, out_features=400, bias=True)
      (1): Linear(in_features=400, out_features=1, bias=True)
    )
  )
  (local_models): ModuleList(
    (0): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=90, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
    (1): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=156, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f3704768970>
dataset_type=real
drop_key=True
num_common_features=1
tree_radius=0.01
tree_leaf_size=1000
knn_k=50
grid_min=-10.0
grid_max=10.0
grid_width=1.5
sim_scaler=StandardScaler()
filter_top_k=None
link_n_jobs=1
psig_p=4
sim_leak_p=1.0
link_threshold_t=0.1
link_epsilon=0.1
n_hash_lsh=50
edit_distance_threshold=10
n_hash_func=50
collision_rate=0.01
qgram_q=4
link_delta=0.01
feature_wise_sim=False
blocking_method=knn_str
center_threshold=0.5
n_clusters=100
local_hidden_sizes=[[200], [200]]
cut_dims=[100, 100]
agg_hidden_sizes=[400]
scale_analysis=None
data1_shape=(77225, 91)
data2_shape=(220583, 157)
Epoch 1: Loss:            : Train 0.0000, Val 0.1820, Test 0.1816
          RMSE             : Train 1626796.8319, Val 1567580.1361, Test 1566144.0103
          R2_Score         : Train -50.2160, Val -50.3738, Test -47.0335
          MAE              : Train 1610351.5587, Val 1550663.7251, Test 1549331.5185
Best:
          RMSE             : Train 1626796.8319, Val 1567580.1361, Test 1566144.0103
          R2_Score         : Train -50.2160, Val -50.3738, Test -47.0335
          MAE              : Train 1610351.5587, Val 1550663.7251, Test 1549331.5185
Epoch 2: Loss:            : Train 0.0000, Val 0.1549, Test 0.1547
          RMSE             : Train 1511152.7692, Val 1446274.4340, Test 1445536.6097
          R2_Score         : Train -43.1932, Val -42.7304, Test -39.9203
          MAE              : Train 1491889.1335, Val 1425582.9015, Test 1425136.7970
Best:
          RMSE             : Train 1511152.7692, Val 1446274.4340, Test 1445536.6097
          R2_Score         : Train -43.1932, Val -42.7304, Test -39.9203
          MAE              : Train 1491889.1335, Val 1425582.9015, Test 1425136.7970
Epoch 3: Loss:            : Train 0.0000, Val 0.1269, Test 0.1269
          RMSE             : Train 1383675.6405, Val 1309302.6382, Test 1309075.3317
          R2_Score         : Train -36.0517, Val -34.8395, Test -32.5591
          MAE              : Train 1359755.5366, Val 1282748.5500, Test 1283199.1367
Best:
          RMSE             : Train 1383675.6405, Val 1309302.6382, Test 1309075.3317
          R2_Score         : Train -36.0517, Val -34.8395, Test -32.5591
          MAE              : Train 1359755.5366, Val 1282748.5500, Test 1283199.1367
Epoch 4: Loss:            : Train 0.0000, Val 0.0987, Test 0.0987
          RMSE             : Train 1239148.9537, Val 1154789.6906, Test 1154904.9898
          R2_Score         : Train -28.7157, Val -26.8797, Test -25.1200
          MAE              : Train 1208362.6876, Val 1120476.2659, Test 1121005.5296
Best:
          RMSE             : Train 1239148.9537, Val 1154789.6906, Test 1154904.9898
          R2_Score         : Train -28.7157, Val -26.8797, Test -25.1200
          MAE              : Train 1208362.6876, Val 1120476.2659, Test 1121005.5296
Epoch 5: Loss:            : Train 0.0000, Val 0.0720, Test 0.0720

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.66it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.31it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.56it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.04it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.86it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.85it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.64it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.21it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.69it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.11it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.97it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.55it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.17it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.88it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.19it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.26it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  7.30it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.56it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.95it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.19it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.43it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.74it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.64it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.36it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.27it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.05it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.77it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.38it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.80it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.49it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.20it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.63it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.58it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.39it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.07it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.05it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.06it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.29it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.22it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.85it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.49it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.77it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.15it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.64it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.17it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.65it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  4.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.88it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.80it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.24it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.26it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.80it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.94it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.26it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.49it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.48it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.71it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.14it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.66it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.53it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.00it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.57it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.15it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.36it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.82it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.60it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.50it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.81it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.31it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.65it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.70it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.48it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.83it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.55it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.31it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.67it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.92it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.32it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.77it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.25it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.14it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.88it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.19it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.90it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.34it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.17it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.59it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.16it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.22it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.09it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.03it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.15it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.78it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.70it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.45it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.61it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.01it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.51it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.01it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.88it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.33it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.59it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.84it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.94it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.71it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.47it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.07it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.91it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.72it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.10it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.66it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.48it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.98it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.49it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.91it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.00it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.49it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.74it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  1.91it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.70it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.94it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.14it/s]Train:  14%|█▍        | 2/14 [00:00<00:05,  2.27it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.14it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.01it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.89it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.77it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.37it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.22it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.61it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.33it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.47it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.97it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.29it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.78it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.00it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.09it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.70it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.88it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.53it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.90it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.56it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.21it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.09it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.37it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.46it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.08it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.93it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.30it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.35it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.70it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.74it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.30it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.03it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.96it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.57it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.08it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.38it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.19it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.08it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.78it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.96it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.05it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.87it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.91it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:08,  1.58it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.70it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.55it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.18it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.63it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.44it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.01it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  4.32it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.24it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.91it/s]Train:  79%|███████▊  | 11/14 [00:03<00:00,  3.31it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.99it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.37it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.39it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.49it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.43it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.95it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.38it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.86it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.11it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  3.28it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.76it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.74it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.44it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.91it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.56it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.71it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.17it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.69it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.28it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.48it/s]          RMSE             : Train 1078070.0466, Val 985868.4395, Test 986211.0576
          R2_Score         : Train -21.4923, Val -19.3198, Test -18.0467
          MAE              : Train 1038095.7727, Val 942315.4214, Test 942284.2420
Best:
          RMSE             : Train 1078070.0466, Val 985868.4395, Test 986211.0576
          R2_Score         : Train -21.4923, Val -19.3198, Test -18.0467
          MAE              : Train 1038095.7727, Val 942315.4214, Test 942284.2420
Epoch 6: Loss:            : Train 0.0000, Val 0.0487, Test 0.0487
          RMSE             : Train 906345.3069, Val 810868.6237, Test 811387.3162
          R2_Score         : Train -14.8974, Val -12.7462, Test -11.8925
          MAE              : Train 855788.9543, Val 757985.1199, Test 758068.7227
Best:
          RMSE             : Train 906345.3069, Val 810868.6237, Test 811387.3162
          R2_Score         : Train -14.8974, Val -12.7462, Test -11.8925
          MAE              : Train 855788.9543, Val 757985.1199, Test 758068.7227
Epoch 7: Loss:            : Train 0.0000, Val 0.0304, Test 0.0305
          RMSE             : Train 733439.4023, Val 640931.8099, Test 641824.3902
          R2_Score         : Train -9.4104, Val -7.5883, Test -7.0670
          MAE              : Train 674162.5965, Val 581464.3658, Test 581617.3484
Best:
          RMSE             : Train 733439.4023, Val 640931.8099, Test 641824.3902
          R2_Score         : Train -9.4104, Val -7.5883, Test -7.0670
          MAE              : Train 674162.5965, Val 581464.3658, Test 581617.3484
Epoch 8: Loss:            : Train 0.0000, Val 0.0176, Test 0.0178
          RMSE             : Train 571314.4843, Val 488080.9870, Test 489780.0822
          R2_Score         : Train -5.3167, Val -3.9804, Test -3.6977
          MAE              : Train 507344.9745, Val 425979.7747, Test 426895.3958
Best:
          RMSE             : Train 571314.4843, Val 488080.9870, Test 489780.0822
          R2_Score         : Train -5.3167, Val -3.9804, Test -3.6977
          MAE              : Train 507344.9745, Val 425979.7747, Test 426895.3958
Epoch 9: Loss:            : Train 0.0000, Val 0.0098, Test 0.0100
          RMSE             : Train 432116.1833, Val 363940.6977, Test 367060.0887
          R2_Score         : Train -2.6136, Val -1.7691, Test -1.6385
          MAE              : Train 367088.8658, Val 302368.2628, Test 303308.0751
Best:
          RMSE             : Train 432116.1833, Val 363940.6977, Test 367060.0887
          R2_Score         : Train -2.6136, Val -1.7691, Test -1.6385
          MAE              : Train 367088.8658, Val 302368.2628, Test 303308.0751
Epoch 10: Loss:            : Train 0.0000, Val 0.0057, Test 0.0060
          RMSE             : Train 327003.5781, Val 278223.8493, Test 283260.0320
          R2_Score         : Train -1.0694, Val -0.6183, Test -0.5713
          MAE              : Train 260994.2878, Val 214971.4762, Test 215683.7066
Best:
          RMSE             : Train 327003.5781, Val 278223.8493, Test 283260.0320
          R2_Score         : Train -1.0694, Val -0.6183, Test -0.5713
          MAE              : Train 260994.2878, Val 214971.4762, Test 215683.7066
Epoch 11: Loss:            : Train 0.0000, Val 0.0040, Test 0.0043
          RMSE             : Train 262635.6114, Val 233365.3989, Test 240194.6327
          R2_Score         : Train -0.3349, Val -0.1386, Test -0.1298
          MAE              : Train 190054.5391, Val 161185.5284, Test 161587.8035
Best:
          RMSE             : Train 262635.6114, Val 233365.3989, Test 240194.6327
          R2_Score         : Train -0.3349, Val -0.1386, Test -0.1298
          MAE              : Train 190054.5391, Val 161185.5284, Test 161587.8035
Epoch 12: Loss:            : Train 0.0000, Val 0.0035, Test 0.0038
          RMSE             : Train 234388.5023, Val 217360.0570, Test 225176.6873
          R2_Score         : Train -0.0632, Val 0.0123, Test 0.0070
          MAE              : Train 149094.3289, Val 132028.7631, Test 132934.1986
Best:
          RMSE             : Train 234388.5023, Val 217360.0570, Test 225176.6873
          R2_Score         : Train -0.0632, Val 0.0123, Test 0.0070
          MAE              : Train 149094.3289, Val 132028.7631, Test 132934.1986
Epoch 13: Loss:            : Train 0.0000, Val 0.0032, Test 0.0034
          RMSE             : Train 224282.3116, Val 207275.5442, Test 215144.6715
          R2_Score         : Train 0.0265, Val 0.1018, Test 0.0936
          MAE              : Train 128679.9639, Val 120363.2178, Test 121321.6642
Best:
          RMSE             : Train 224282.3116, Val 207275.5442, Test 215144.6715
          R2_Score         : Train 0.0265, Val 0.1018, Test 0.0936
          MAE              : Train 128679.9639, Val 120363.2178, Test 121321.6642
Epoch 14: Loss:            : Train 0.0000, Val 0.0027, Test 0.0029
          RMSE             : Train 210769.5324, Val 191677.4800, Test 198851.4147
          R2_Score         : Train 0.1403, Val 0.2319, Test 0.2256
          MAE              : Train 121525.4782, Val 118021.8597, Test 118571.5749
Best:
          RMSE             : Train 210769.5324, Val 191677.4800, Test 198851.4147
          R2_Score         : Train 0.1403, Val 0.2319, Test 0.2256
          MAE              : Train 121525.4782, Val 118021.8597, Test 118571.5749
Epoch 15: Loss:            : Train 0.0000, Val 0.0023, Test 0.0025
          RMSE             : Train 193993.2396, Val 175438.2589, Test 181464.9442
          R2_Score         : Train 0.2717, Val 0.3565, Test 0.3551
          MAE              : Train 119028.7968, Val 114585.0483, Test 114973.3029
Best:
          RMSE             : Train 193993.2396, Val 175438.2589, Test 181464.9442
          R2_Score         : Train 0.2717, Val 0.3565, Test 0.3551
          MAE              : Train 119028.7968, Val 114585.0483, Test 114973.3029
Epoch 16: Loss:            : Train 0.0000, Val 0.0018, Test 0.0020
          RMSE             : Train 176743.5941, Val 157754.2887, Test 162573.2737
          R2_Score         : Train 0.3955, Val 0.4797, Test 0.4824
          MAE              : Train 113019.0100, Val 105312.9233, Test 105647.6613
Best:
          RMSE             : Train 176743.5941, Val 157754.2887, Test 162573.2737
          R2_Score         : Train 0.3955, Val 0.4797, Test 0.4824
          MAE              : Train 113019.0100, Val 105312.9233, Test 105647.6613
Epoch 17: Loss:            : Train 0.0000, Val 0.0014, Test 0.0015
          RMSE             : Train 157078.7737, Val 138736.4362, Test 142407.2513
          R2_Score         : Train 0.5225, Val 0.5976, Test 0.6029
          MAE              : Train 101609.6523, Val 92422.5171, Test 92882.7564
Best:
          RMSE             : Train 157078.7737, Val 138736.4362, Test 142407.2513
          R2_Score         : Train 0.5225, Val 0.5976, Test 0.6029
          MAE              : Train 101609.6523, Val 92422.5171, Test 92882.7564
Epoch 18: Loss:            : Train 0.0000, Val 0.0011, Test 0.0011
          RMSE             : Train 136911.1026, Val 120312.8125, Test 122665.3671
          R2_Score         : Train 0.6372, Val 0.6974, Test 0.7053
          MAE              : Train 88513.0521, Val 79885.5032, Test 79971.2480
Best:
          RMSE             : Train 136911.1026, Val 120312.8125, Test 122665.3671
          R2_Score         : Train 0.6372, Val 0.6974, Test 0.7053
          MAE              : Train 88513.0521, Val 79885.5032, Test 79971.2480
Epoch 19: Loss:            : Train 0.0000, Val 0.0008, Test 0.0008
          RMSE             : Train 118254.8946, Val 105145.7437, Test 106278.4899
          R2_Score         : Train 0.7294, Val 0.7689, Test 0.7788
          MAE              : Train 75664.1761, Val 67250.4086, Test 66899.5097
Best:
          RMSE             : Train 118254.8946, Val 105145.7437, Test 106278.4899
          R2_Score         : Train 0.7294, Val 0.7689, Test 0.7788
          MAE              : Train 75664.1761, Val 67250.4086, Test 66899.5097
Epoch 20: Loss:            : Train 0.0000, Val 0.0007, Test 0.0007
          RMSE             : Train 103452.4501, Val 94381.6271, Test 95354.0490

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.00it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.30it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.75it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.33it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.85it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.05it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  4.67it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.52it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.13it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.44it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.85it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.79it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.35it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.11it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.96it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.14it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.75it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.02it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.65it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.12it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.60it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.52it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.31it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.12it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.58it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.56it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.15it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.03it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.26it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.89it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.43it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.10it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.96it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.02it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.23it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.74it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.79it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.21it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.04it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.53it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.03it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.68it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.42it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.10it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.30it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.05it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.36it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.62it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.94it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.09it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.18it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.79it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.30it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.99it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.18it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.90it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.21it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.33it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.40it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.58it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.77it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.07it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.34it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.57it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.25it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.66it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.81it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.85it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.18it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.28it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.74it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.83it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.16it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.32it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.15it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.45it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.37it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.35it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.62it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.41it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.18it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.58it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.62it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.11it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.13it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.24it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.32it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.10it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.00it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  3.17it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.24it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.32it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.32it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.11it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.08it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.45it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.61it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.17it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.50it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  3.87it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.35it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.63it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.89it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.09it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.66it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.35it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.66it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.75it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.07it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.75it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.10it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.88it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.80it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.95it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:09,  1.42it/s]Train:  14%|█▍        | 2/14 [00:00<00:05,  2.35it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  3.57it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.41it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.92it/s]Train:  43%|████▎     | 6/14 [00:02<00:02,  2.77it/s]Train:  50%|█████     | 7/14 [00:02<00:02,  3.19it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.80it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.02it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.55it/s]Train:  79%|███████▊  | 11/14 [00:03<00:00,  3.33it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  4.02it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.66it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  3.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.84it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.02it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.51it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.91it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.95it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.25it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.09it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.10it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.00it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.24it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.63it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.73it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.90it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.21it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:08,  1.47it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.82it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.31it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.25it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.95it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.85it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.22it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.62it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.08it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.32it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.33it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.45it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.89it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.53it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.85it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.30it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.49it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.86it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.56it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.21it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.16it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.36it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.45it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.85it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.23it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.92it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.90it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.71it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.40it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.50it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.30it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.73it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.89it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.70it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.29it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.99it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.33it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.57it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.94it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.45it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.26it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.97it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.66it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.37it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.98it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.07it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.86it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.24it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.64it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.08it/s]          R2_Score         : Train 0.7929, Val 0.8138, Test 0.8219
          MAE              : Train 62946.9158, Val 56829.1813, Test 56400.5459
Best:
          RMSE             : Train 103452.4501, Val 94381.6271, Test 95354.0490
          R2_Score         : Train 0.7929, Val 0.8138, Test 0.8219
          MAE              : Train 62946.9158, Val 56829.1813, Test 56400.5459
Epoch 21: Loss:            : Train 0.0000, Val 0.0005, Test 0.0006
          RMSE             : Train 93189.3323, Val 85407.5985, Test 86821.1832
          R2_Score         : Train 0.8319, Val 0.8475, Test 0.8524
          MAE              : Train 54660.7369, Val 51319.5766, Test 50999.3667
Best:
          RMSE             : Train 93189.3323, Val 85407.5985, Test 86821.1832
          R2_Score         : Train 0.8319, Val 0.8475, Test 0.8524
          MAE              : Train 54660.7369, Val 51319.5766, Test 50999.3667
Epoch 22: Loss:            : Train 0.0000, Val 0.0004, Test 0.0005
          RMSE             : Train 84437.0481, Val 77640.9501, Test 79568.5555
          R2_Score         : Train 0.8620, Val 0.8740, Test 0.8760
          MAE              : Train 50396.4707, Val 47876.6195, Test 47517.3153
Best:
          RMSE             : Train 84437.0481, Val 77640.9501, Test 79568.5555
          R2_Score         : Train 0.8620, Val 0.8740, Test 0.8760
          MAE              : Train 50396.4707, Val 47876.6195, Test 47517.3153
Epoch 23: Loss:            : Train 0.0000, Val 0.0004, Test 0.0004
          RMSE             : Train 77159.5147, Val 71575.0698, Test 73838.2908
          R2_Score         : Train 0.8848, Val 0.8929, Test 0.8932
          MAE              : Train 46952.1121, Val 44251.9620, Test 43889.0664
Best:
          RMSE             : Train 77159.5147, Val 71575.0698, Test 73838.2908
          R2_Score         : Train 0.8848, Val 0.8929, Test 0.8932
          MAE              : Train 46952.1121, Val 44251.9620, Test 43889.0664
Epoch 24: Loss:            : Train 0.0000, Val 0.0003, Test 0.0004
          RMSE             : Train 71667.1182, Val 67049.2603, Test 69612.6497
          R2_Score         : Train 0.9006, Val 0.9060, Test 0.9051
          MAE              : Train 42907.6629, Val 40754.7201, Test 40413.5410
Best:
          RMSE             : Train 71667.1182, Val 67049.2603, Test 69612.6497
          R2_Score         : Train 0.9006, Val 0.9060, Test 0.9051
          MAE              : Train 42907.6629, Val 40754.7201, Test 40413.5410
Epoch 25: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 67404.6868, Val 63369.6393, Test 66131.1762
          R2_Score         : Train 0.9121, Val 0.9160, Test 0.9144
          MAE              : Train 39594.5903, Val 37669.8517, Test 37501.2840
Best:
          RMSE             : Train 67404.6868, Val 63369.6393, Test 66131.1762
          R2_Score         : Train 0.9121, Val 0.9160, Test 0.9144
          MAE              : Train 39594.5903, Val 37669.8517, Test 37501.2840
Epoch 26: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 64036.4762, Val 60043.5657, Test 63349.0645
          R2_Score         : Train 0.9206, Val 0.9246, Test 0.9214
          MAE              : Train 37118.8024, Val 35089.3570, Test 35174.3744
Best:
          RMSE             : Train 64036.4762, Val 60043.5657, Test 63349.0645
          R2_Score         : Train 0.9206, Val 0.9246, Test 0.9214
          MAE              : Train 37118.8024, Val 35089.3570, Test 35174.3744
Epoch 27: Loss:            : Train 0.0000, Val 0.0002, Test 0.0003
          RMSE             : Train 60575.1383, Val 57296.7168, Test 60243.7488
          R2_Score         : Train 0.9290, Val 0.9314, Test 0.9289
          MAE              : Train 34653.8461, Val 33308.5786, Test 33351.5346
Best:
          RMSE             : Train 60575.1383, Val 57296.7168, Test 60243.7488
          R2_Score         : Train 0.9290, Val 0.9314, Test 0.9289
          MAE              : Train 34653.8461, Val 33308.5786, Test 33351.5346
Epoch 28: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 57482.8393, Val 55258.2524, Test 57754.7285
          R2_Score         : Train 0.9361, Val 0.9362, Test 0.9347
          MAE              : Train 33028.8656, Val 31784.2700, Test 31801.0428
Best:
          RMSE             : Train 57482.8393, Val 55258.2524, Test 57754.7285
          R2_Score         : Train 0.9361, Val 0.9362, Test 0.9347
          MAE              : Train 33028.8656, Val 31784.2700, Test 31801.0428
Epoch 29: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 55472.3567, Val 54043.3564, Test 56299.0122
          R2_Score         : Train 0.9404, Val 0.9389, Test 0.9379
          MAE              : Train 31454.5168, Val 30870.3420, Test 30785.6206
Best:
          RMSE             : Train 55472.3567, Val 54043.3564, Test 56299.0122
          R2_Score         : Train 0.9404, Val 0.9389, Test 0.9379
          MAE              : Train 31454.5168, Val 30870.3420, Test 30785.6206
Epoch 30: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 53969.8174, Val 53119.3976, Test 54912.4754
          R2_Score         : Train 0.9436, Val 0.9410, Test 0.9409
          MAE              : Train 30590.8334, Val 29613.0561, Test 29609.2864
Best:
          RMSE             : Train 53969.8174, Val 53119.3976, Test 54912.4754
          R2_Score         : Train 0.9436, Val 0.9410, Test 0.9409
          MAE              : Train 30590.8334, Val 29613.0561, Test 29609.2864
Epoch 31: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 52584.4419, Val 52761.2766, Test 53954.6649
          R2_Score         : Train 0.9465, Val 0.9418, Test 0.9430
          MAE              : Train 29565.3417, Val 29181.0808, Test 28868.9467
Best:
          RMSE             : Train 52584.4419, Val 52761.2766, Test 53954.6649
          R2_Score         : Train 0.9465, Val 0.9418, Test 0.9430
          MAE              : Train 29565.3417, Val 29181.0808, Test 28868.9467
Epoch 32: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 51484.5619, Val 51578.5431, Test 52888.5154
          R2_Score         : Train 0.9487, Val 0.9444, Test 0.9452
          MAE              : Train 28782.2545, Val 28609.6657, Test 28358.2383
Best:
          RMSE             : Train 51484.5619, Val 51578.5431, Test 52888.5154
          R2_Score         : Train 0.9487, Val 0.9444, Test 0.9452
          MAE              : Train 28782.2545, Val 28609.6657, Test 28358.2383
Epoch 33: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 50299.9102, Val 50675.1506, Test 51657.7440
          R2_Score         : Train 0.9510, Val 0.9463, Test 0.9477
          MAE              : Train 27997.7854, Val 27725.3905, Test 27449.1871
Best:
          RMSE             : Train 50299.9102, Val 50675.1506, Test 51657.7440
          R2_Score         : Train 0.9510, Val 0.9463, Test 0.9477
          MAE              : Train 27997.7854, Val 27725.3905, Test 27449.1871
Epoch 34: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 49212.8760, Val 50534.1744, Test 50895.3842
          R2_Score         : Train 0.9531, Val 0.9466, Test 0.9493
          MAE              : Train 27401.2755, Val 27609.0800, Test 27087.3992
Best:
          RMSE             : Train 49212.8760, Val 50534.1744, Test 50895.3842
          R2_Score         : Train 0.9531, Val 0.9466, Test 0.9493
          MAE              : Train 27401.2755, Val 27609.0800, Test 27087.3992
Epoch 35: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 48375.6910, Val 50117.7202, Test 50353.5305
          R2_Score         : Train 0.9547, Val 0.9475, Test 0.9503
          MAE              : Train 26871.2294, Val 26961.8510, Test 26682.3794
Best:
          RMSE             : Train 48375.6910, Val 50117.7202, Test 50353.5305
          R2_Score         : Train 0.9547, Val 0.9475, Test 0.9503

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.14it/s]Train:  14%|█▍        | 2/14 [00:00<00:06,  1.83it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  2.82it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.79it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.81it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.86it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  4.56it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  6.10it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.39it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.02it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.97it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.57it/s]Test:  75%|███████▌  | 3/4 [00:01<00:00,  2.41it/s]Test: 100%|██████████| 4/4 [00:01<00:00,  3.20it/s]Test: 100%|██████████| 4/4 [00:01<00:00,  3.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.93it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.34it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.86it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.67it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.46it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.04it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.23it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.60it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.78it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.66it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.84it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.09it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.19it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.02it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.49it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.99it/s]Train:  14%|█▍        | 2/14 [00:01<00:06,  1.79it/s]Train:  21%|██▏       | 3/14 [00:01<00:04,  2.58it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  3.21it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.79it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.74it/s]Train:  50%|█████     | 7/14 [00:02<00:01,  4.21it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  4.72it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.73it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.17it/s]Train:  79%|███████▊  | 11/14 [00:03<00:01,  2.85it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  2.86it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  3.45it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  3.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.32it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.21it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.07it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.50it/s]Train:  21%|██▏       | 3/14 [00:01<00:05,  1.89it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.52it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.30it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.96it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.80it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.38it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.01it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.57it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  2.72it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  3.38it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.03it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  3.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.31it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.85it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.84it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.62it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.41it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.78it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.87it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.44it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.58it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.12it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.44it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.01it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.35it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.86it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.15it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.47it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.10it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.75it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.31it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.47it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.25it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.94it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.23it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.79it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.63it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.01it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.37it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.02it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.21it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.22it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.85it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.29it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.14it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.67it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.47it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.55it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.28it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.74it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.77it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.72it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.93it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.72it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.98it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.50it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.11it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.08it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.49it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.78it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.00it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.58it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.39it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.73it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.31it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.43it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.22it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.77it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.22it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.10it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.96it/s]Test:  50%|█████     | 2/4 [00:00<00:01,  1.94it/s]Test:  75%|███████▌  | 3/4 [00:01<00:00,  2.87it/s]Test: 100%|██████████| 4/4 [00:01<00:00,  3.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.98it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.89it/s]Train:  21%|██▏       | 3/14 [00:01<00:04,  2.22it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.85it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.19it/s]Train:  50%|█████     | 7/14 [00:02<00:02,  2.76it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.31it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.19it/s]Train:  79%|███████▊  | 11/14 [00:03<00:00,  4.80it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  4.15it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.22it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  3.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.85it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.83it/s]Test:  75%|███████▌  | 3/4 [00:01<00:00,  2.32it/s]Test: 100%|██████████| 4/4 [00:01<00:00,  3.38it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.80it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.17it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.37it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.35it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.23it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.73it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.07it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.43it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.11it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.15it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.64it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.19it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.98it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.20it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.75it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.64it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.85it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.82it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.52it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  2.98it/s]Train:  50%|█████     | 7/14 [00:02<00:02,  3.40it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.95it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.05it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.19it/s]Train:  79%|███████▊  | 11/14 [00:03<00:00,  3.96it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  4.77it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.32it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.68it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.98it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.86it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.00it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.46it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.97it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.33it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.30it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.26it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.35it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.76it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.49it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.44it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.07it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.27it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.53it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.48it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.51it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.18it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.09it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.00it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.71it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.46it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.43it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.57it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.28it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.25it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.03it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.75it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.08it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.83it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.37it/s]Train:  50%|█████     | 7/14 [00:02<00:02,  3.01it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.34it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.62it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.44it/s]Train:  79%|███████▊  | 11/14 [00:03<00:00,  3.62it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.71it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.56it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.41it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.28it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.23it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.58it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.37it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.94it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.97it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.82it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.54it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.34it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.51it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.80it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.65it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.28it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  5.14it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.77it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.20it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.55it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.58it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.14it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.42it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.69it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  3.33it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.42it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.08it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.93it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.86it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.55it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.46it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.99it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.65it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.47it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.50it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.32it/s]          MAE              : Train 26871.2294, Val 26961.8510, Test 26682.3794
Epoch 36: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 47692.6818, Val 49722.4463, Test 49828.0570
          R2_Score         : Train 0.9560, Val 0.9483, Test 0.9514
          MAE              : Train 26474.8330, Val 26677.3354, Test 26189.1147
Best:
          RMSE             : Train 47692.6818, Val 49722.4463, Test 49828.0570
          R2_Score         : Train 0.9560, Val 0.9483, Test 0.9514
          MAE              : Train 26474.8330, Val 26677.3354, Test 26189.1147
Epoch 37: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 46966.5599, Val 48784.4621, Test 48773.2588
          R2_Score         : Train 0.9573, Val 0.9502, Test 0.9534
          MAE              : Train 26093.1019, Val 26035.0124, Test 25728.0391
Best:
          RMSE             : Train 46966.5599, Val 48784.4621, Test 48773.2588
          R2_Score         : Train 0.9573, Val 0.9502, Test 0.9534
          MAE              : Train 26093.1019, Val 26035.0124, Test 25728.0391
Epoch 38: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 46186.7277, Val 47881.0620, Test 47761.3716
          R2_Score         : Train 0.9587, Val 0.9521, Test 0.9553
          MAE              : Train 25532.3859, Val 25785.4462, Test 25225.4476
Best:
          RMSE             : Train 46186.7277, Val 47881.0620, Test 47761.3716
          R2_Score         : Train 0.9587, Val 0.9521, Test 0.9553
          MAE              : Train 25532.3859, Val 25785.4462, Test 25225.4476
Epoch 39: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 45373.0972, Val 48411.9235, Test 47562.4477
          R2_Score         : Train 0.9602, Val 0.9510, Test 0.9557
          MAE              : Train 25004.2589, Val 25605.5988, Test 25085.8757
Best:
          RMSE             : Train 46186.7277, Val 47881.0620, Test 47761.3716
          R2_Score         : Train 0.9587, Val 0.9521, Test 0.9553
          MAE              : Train 25532.3859, Val 25785.4462, Test 25225.4476
Epoch 40: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 44753.7671, Val 47001.8141, Test 46854.0807
          R2_Score         : Train 0.9612, Val 0.9538, Test 0.9570
          MAE              : Train 24710.4487, Val 24981.7078, Test 24566.5603
Best:
          RMSE             : Train 44753.7671, Val 47001.8141, Test 46854.0807
          R2_Score         : Train 0.9612, Val 0.9538, Test 0.9570
          MAE              : Train 24710.4487, Val 24981.7078, Test 24566.5603
Epoch 41: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 44326.7100, Val 46870.3001, Test 46779.5531
          R2_Score         : Train 0.9620, Val 0.9541, Test 0.9571
          MAE              : Train 24331.5628, Val 24683.6566, Test 24412.3453
Best:
          RMSE             : Train 44326.7100, Val 46870.3001, Test 46779.5531
          R2_Score         : Train 0.9620, Val 0.9541, Test 0.9571
          MAE              : Train 24331.5628, Val 24683.6566, Test 24412.3453
Epoch 42: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43578.2579, Val 47712.4068, Test 47010.6461
          R2_Score         : Train 0.9632, Val 0.9524, Test 0.9567
          MAE              : Train 24009.6564, Val 24670.1233, Test 24147.6435
Best:
          RMSE             : Train 44326.7100, Val 46870.3001, Test 46779.5531
          R2_Score         : Train 0.9620, Val 0.9541, Test 0.9571
          MAE              : Train 24331.5628, Val 24683.6566, Test 24412.3453
Epoch 43: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43185.7146, Val 46356.5908, Test 46280.0863
          R2_Score         : Train 0.9639, Val 0.9551, Test 0.9581
          MAE              : Train 23709.5595, Val 24233.0289, Test 23917.9400
Best:
          RMSE             : Train 43185.7146, Val 46356.5908, Test 46280.0863
          R2_Score         : Train 0.9639, Val 0.9551, Test 0.9581
          MAE              : Train 23709.5595, Val 24233.0289, Test 23917.9400
Epoch 44: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 42624.9331, Val 45727.1849, Test 45736.0540
          R2_Score         : Train 0.9648, Val 0.9563, Test 0.9590
          MAE              : Train 23390.0597, Val 24013.2969, Test 23574.7646
Best:
          RMSE             : Train 42624.9331, Val 45727.1849, Test 45736.0540
          R2_Score         : Train 0.9648, Val 0.9563, Test 0.9590
          MAE              : Train 23390.0597, Val 24013.2969, Test 23574.7646
Epoch 45: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 42384.4670, Val 46198.2532, Test 46013.8904
          R2_Score         : Train 0.9652, Val 0.9554, Test 0.9585
          MAE              : Train 23193.3217, Val 23975.5646, Test 23408.0239
Best:
          RMSE             : Train 42624.9331, Val 45727.1849, Test 45736.0540
          R2_Score         : Train 0.9648, Val 0.9563, Test 0.9590
          MAE              : Train 23390.0597, Val 24013.2969, Test 23574.7646
Epoch 46: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 41857.5169, Val 45645.3510, Test 45257.2712
          R2_Score         : Train 0.9661, Val 0.9564, Test 0.9599
          MAE              : Train 23031.4077, Val 23569.5248, Test 23302.3917
Best:
          RMSE             : Train 41857.5169, Val 45645.3510, Test 45257.2712
          R2_Score         : Train 0.9661, Val 0.9564, Test 0.9599
          MAE              : Train 23031.4077, Val 23569.5248, Test 23302.3917
Epoch 47: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 41412.2232, Val 45707.7357, Test 45030.7383
          R2_Score         : Train 0.9668, Val 0.9563, Test 0.9603
          MAE              : Train 22752.1811, Val 23485.0038, Test 22892.4430
Best:
          RMSE             : Train 41857.5169, Val 45645.3510, Test 45257.2712
          R2_Score         : Train 0.9661, Val 0.9564, Test 0.9599
          MAE              : Train 23031.4077, Val 23569.5248, Test 23302.3917
Epoch 48: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 41200.6924, Val 45588.4484, Test 44841.3834
          R2_Score         : Train 0.9671, Val 0.9565, Test 0.9606
          MAE              : Train 22566.3187, Val 23344.0682, Test 22881.1707
Best:
          RMSE             : Train 41200.6924, Val 45588.4484, Test 44841.3834
          R2_Score         : Train 0.9671, Val 0.9565, Test 0.9606
          MAE              : Train 22566.3187, Val 23344.0682, Test 22881.1707
Epoch 49: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 40587.4724, Val 44951.1318, Test 44368.9321
          R2_Score         : Train 0.9681, Val 0.9578, Test 0.9614
          MAE              : Train 22193.0503, Val 22947.4622, Test 22543.3184
Best:
          RMSE             : Train 40587.4724, Val 44951.1318, Test 44368.9321
          R2_Score         : Train 0.9681, Val 0.9578, Test 0.9614
          MAE              : Train 22193.0503, Val 22947.4622, Test 22543.3184
Epoch 50: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 40068.4264, Val 44845.5997, Test 43848.1833
          R2_Score         : Train 0.9689, Val 0.9580, Test 0.9623
          MAE              : Train 21864.5710, Val 22863.1964, Test 22315.5720
Best:
          RMSE             : Train 40068.4264, Val 44845.5997, Test 43848.1833
          R2_Score         : Train 0.9689, Val 0.9580, Test 0.9623
          MAE              : Train 21864.5710, Val 22863.1964, Test 22315.5720
Epoch 51: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 39555.0851, Val 44856.7844, Test 44802.4576
          R2_Score         : Train 0.9697, Val 0.9579, Test 0.9607

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.19it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.77it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.94it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.15it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.89it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.45it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.64it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.80it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.96it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.63it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.23it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.28it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.19it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.92it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.20it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.48it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.20it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.17it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.66it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.91it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.29it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  1.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.80it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.82it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.94it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.54it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.85it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.03it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.30it/s]Train:  43%|████▎     | 6/14 [00:01<00:03,  2.57it/s]Train:  50%|█████     | 7/14 [00:02<00:02,  3.08it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.76it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.60it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.47it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.19it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  5.65it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.06it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.43it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.12it/s]Train:  21%|██▏       | 3/14 [00:01<00:04,  2.49it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  3.16it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.60it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.15it/s]Train:  50%|█████     | 7/14 [00:02<00:02,  3.43it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.69it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.17it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.71it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.75it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  3.97it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.04it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.27it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.80it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.40it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.71it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.74it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.34it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.28it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.85it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  2.96it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.77it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.63it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.73it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.23it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.34it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.26it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:09,  1.31it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.72it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.63it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.58it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.12it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.98it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.54it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.33it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.65it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.24it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.40it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.09it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.23it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:05,  2.01it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  3.09it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.05it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.01it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.32it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.36it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  4.15it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  5.00it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.90it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.69it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.89it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.69it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.15it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.82it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.44it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.50it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.37it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.82it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.81it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.52it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.51it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.69it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.78it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.41it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.80it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.57it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  3.17it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.96it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.77it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.49it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.65it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.39it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.63it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.17it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.77it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.99it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.65it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.58it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.50it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.16it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.33it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.18it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.01it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.93it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.26it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.13it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.81it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.76it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.18it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.93it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.85it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.10it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.46it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.17it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.36it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.79it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.11it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.87it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.88it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.17it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.35it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.30it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.04it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.67it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.23it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.90it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.38it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.79it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.40it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.03it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.01it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.81it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.66it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.57it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.01it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.48it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.71it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.01it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.40it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.54it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.80it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.20it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.68it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.82it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.75it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.30it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.93it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.90it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.70it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.61it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.94it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  3.77it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.84it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.58it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.87it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.83it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.70it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.67it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.34it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.28it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.74it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.09it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.96it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.54it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.17it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.69it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.34it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.85it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.16it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.41it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.02it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.83it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.79it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.59it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.88it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.91it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.73it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.37it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.84it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.41it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.55it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.72it/s]          MAE              : Train 21574.3044, Val 22543.5989, Test 22021.6293
Best:
          RMSE             : Train 40068.4264, Val 44845.5997, Test 43848.1833
          R2_Score         : Train 0.9689, Val 0.9580, Test 0.9623
          MAE              : Train 21864.5710, Val 22863.1964, Test 22315.5720
Epoch 52: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 39500.8570, Val 44700.8170, Test 43472.4228
          R2_Score         : Train 0.9698, Val 0.9582, Test 0.9630
          MAE              : Train 21422.0926, Val 22243.9560, Test 21659.6995
Best:
          RMSE             : Train 39500.8570, Val 44700.8170, Test 43472.4228
          R2_Score         : Train 0.9698, Val 0.9582, Test 0.9630
          MAE              : Train 21422.0926, Val 22243.9560, Test 21659.6995
Epoch 53: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 39043.5081, Val 44844.8455, Test 44009.4466
          R2_Score         : Train 0.9705, Val 0.9580, Test 0.9621
          MAE              : Train 21157.5325, Val 22585.3768, Test 22017.1117
Best:
          RMSE             : Train 39500.8570, Val 44700.8170, Test 43472.4228
          R2_Score         : Train 0.9698, Val 0.9582, Test 0.9630
          MAE              : Train 21422.0926, Val 22243.9560, Test 21659.6995
Epoch 54: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 38546.1792, Val 45477.5857, Test 44663.5447
          R2_Score         : Train 0.9712, Val 0.9568, Test 0.9609
          MAE              : Train 20903.3388, Val 22250.0816, Test 21742.6877
Best:
          RMSE             : Train 39500.8570, Val 44700.8170, Test 43472.4228
          R2_Score         : Train 0.9698, Val 0.9582, Test 0.9630
          MAE              : Train 21422.0926, Val 22243.9560, Test 21659.6995
Epoch 55: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38649.3669, Val 44355.7888, Test 43842.8398
          R2_Score         : Train 0.9711, Val 0.9589, Test 0.9624
          MAE              : Train 20876.3455, Val 22052.5903, Test 21608.7059
Best:
          RMSE             : Train 38649.3669, Val 44355.7888, Test 43842.8398
          R2_Score         : Train 0.9711, Val 0.9589, Test 0.9624
          MAE              : Train 20876.3455, Val 22052.5903, Test 21608.7059
Epoch 56: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38296.9681, Val 43130.4937, Test 43359.7501
          R2_Score         : Train 0.9716, Val 0.9611, Test 0.9632
          MAE              : Train 20624.8380, Val 21646.7796, Test 21217.3998
Best:
          RMSE             : Train 38296.9681, Val 43130.4937, Test 43359.7501
          R2_Score         : Train 0.9716, Val 0.9611, Test 0.9632
          MAE              : Train 20624.8380, Val 21646.7796, Test 21217.3998
Epoch 57: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38014.9708, Val 44153.8239, Test 44211.5810
          R2_Score         : Train 0.9720, Val 0.9592, Test 0.9617
          MAE              : Train 20421.1972, Val 21642.6506, Test 21328.3335
Best:
          RMSE             : Train 38296.9681, Val 43130.4937, Test 43359.7501
          R2_Score         : Train 0.9716, Val 0.9611, Test 0.9632
          MAE              : Train 20624.8380, Val 21646.7796, Test 21217.3998
Epoch 58: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 37638.2388, Val 44094.9669, Test 43271.8939
          R2_Score         : Train 0.9726, Val 0.9594, Test 0.9633
          MAE              : Train 20271.9236, Val 21603.5777, Test 21020.7841
Best:
          RMSE             : Train 38296.9681, Val 43130.4937, Test 43359.7501
          R2_Score         : Train 0.9716, Val 0.9611, Test 0.9632
          MAE              : Train 20624.8380, Val 21646.7796, Test 21217.3998
Epoch 59: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 37150.4701, Val 44771.7809, Test 43868.1723
          R2_Score         : Train 0.9733, Val 0.9581, Test 0.9623
          MAE              : Train 19916.6881, Val 21734.9610, Test 21293.2982
Best:
          RMSE             : Train 38296.9681, Val 43130.4937, Test 43359.7501
          R2_Score         : Train 0.9716, Val 0.9611, Test 0.9632
          MAE              : Train 20624.8380, Val 21646.7796, Test 21217.3998
Epoch 60: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36992.9618, Val 43585.6352, Test 43041.2465
          R2_Score         : Train 0.9735, Val 0.9603, Test 0.9637
          MAE              : Train 19868.7152, Val 21345.9006, Test 20893.8228
Best:
          RMSE             : Train 38296.9681, Val 43130.4937, Test 43359.7501
          R2_Score         : Train 0.9716, Val 0.9611, Test 0.9632
          MAE              : Train 20624.8380, Val 21646.7796, Test 21217.3998
Epoch 61: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36925.4688, Val 42428.2668, Test 42485.0708
          R2_Score         : Train 0.9736, Val 0.9624, Test 0.9647
          MAE              : Train 19825.9628, Val 20807.1023, Test 20460.2869
Best:
          RMSE             : Train 36925.4688, Val 42428.2668, Test 42485.0708
          R2_Score         : Train 0.9736, Val 0.9624, Test 0.9647
          MAE              : Train 19825.9628, Val 20807.1023, Test 20460.2869
Epoch 62: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36653.9496, Val 43002.0047, Test 43301.4329
          R2_Score         : Train 0.9740, Val 0.9613, Test 0.9633
          MAE              : Train 19541.5585, Val 20786.7684, Test 20515.6422
Best:
          RMSE             : Train 36925.4688, Val 42428.2668, Test 42485.0708
          R2_Score         : Train 0.9736, Val 0.9624, Test 0.9647
          MAE              : Train 19825.9628, Val 20807.1023, Test 20460.2869
Epoch 63: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36288.8018, Val 44015.9206, Test 42811.0037
          R2_Score         : Train 0.9745, Val 0.9595, Test 0.9641
          MAE              : Train 19354.7548, Val 20750.3945, Test 20215.3413
Best:
          RMSE             : Train 36925.4688, Val 42428.2668, Test 42485.0708
          R2_Score         : Train 0.9736, Val 0.9624, Test 0.9647
          MAE              : Train 19825.9628, Val 20807.1023, Test 20460.2869
Epoch 64: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36129.6967, Val 43883.3185, Test 43154.8345
          R2_Score         : Train 0.9747, Val 0.9597, Test 0.9635
          MAE              : Train 19229.7791, Val 20705.1609, Test 20262.5469
Best:
          RMSE             : Train 36925.4688, Val 42428.2668, Test 42485.0708
          R2_Score         : Train 0.9736, Val 0.9624, Test 0.9647
          MAE              : Train 19825.9628, Val 20807.1023, Test 20460.2869
Epoch 65: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35955.0428, Val 42692.1693, Test 42398.0911
          R2_Score         : Train 0.9750, Val 0.9619, Test 0.9648
          MAE              : Train 19136.2148, Val 20355.2763, Test 19969.5853
Best:
          RMSE             : Train 36925.4688, Val 42428.2668, Test 42485.0708
          R2_Score         : Train 0.9736, Val 0.9624, Test 0.9647
          MAE              : Train 19825.9628, Val 20807.1023, Test 20460.2869
Epoch 66: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35615.0159, Val 43195.8539, Test 42950.1657
          R2_Score         : Train 0.9755, Val 0.9610, Test 0.9639
          MAE              : Train 18866.1562, Val 20507.0161, Test 20121.0987
Best:
          RMSE             : Train 36925.4688, Val 42428.2668, Test 42485.0708
          R2_Score         : Train 0.9736, Val 0.9624, Test 0.9647
          MAE              : Train 19825.9628, Val 20807.1023, Test 20460.2869

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.68it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.11it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.30it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.63it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.12it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.75it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.48it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.90it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.62it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.03it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.79it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.13it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.61it/s]Train:  14%|█▍        | 2/14 [00:00<00:06,  1.91it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  2.97it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.45it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.38it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.41it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.99it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  4.83it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  6.55it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.97it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.56it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.32it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.88it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.31it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.91it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.65it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.60it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.07it/s]Train:  36%|███▌      | 5/14 [00:01<00:03,  2.52it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.18it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.00it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.54it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.58it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.15it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.04it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.30it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.02it/s]Train:  14%|█▍        | 2/14 [00:00<00:06,  1.92it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  2.96it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.93it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.36it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.80it/s]Train:  50%|█████     | 7/14 [00:02<00:02,  3.35it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.34it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.21it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  4.09it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.77it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.53it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.25it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.71it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.17it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.78it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.15it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  5.73it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.65it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.58it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.42it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.09it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.63it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.59it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.60it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.76it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.88it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.23it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.85it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.70it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.05it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.46it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.60it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.18it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.50it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.98it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.66it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.38it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.31it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.93it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.70it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.23it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.39it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.13it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.86it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 10.63it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.25it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.24it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.26it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  8.34it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.45it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.02it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.84it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.53it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.25it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 19.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.43it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.73it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.13it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.36it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.85it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.94it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.60it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.45it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.90it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.18it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.84it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.38it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.95it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.70it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.46it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.04it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.55it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.19it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.98it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.49it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.89it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.39it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.56it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.74it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.30it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.58it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.07it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.24it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.49it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.16it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.63it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.49it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.80it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.56it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.45it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.93it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.15it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.04it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.35it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.87it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.06it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.58it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.77it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.74it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.40it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.16it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.68it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.77it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.63it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.31it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.27it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.31it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.79it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.49it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.12it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.51it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.01it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.12it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.41it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.73it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.47it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.23it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.64it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.40it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.29it/s]Epoch 67: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35337.3428, Val 42372.9858, Test 42180.9119
          R2_Score         : Train 0.9758, Val 0.9625, Test 0.9652
          MAE              : Train 18703.1772, Val 20155.0163, Test 19788.7677
Best:
          RMSE             : Train 35337.3428, Val 42372.9858, Test 42180.9119
          R2_Score         : Train 0.9758, Val 0.9625, Test 0.9652
          MAE              : Train 18703.1772, Val 20155.0163, Test 19788.7677
Epoch 68: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35517.7034, Val 43947.3435, Test 43519.2182
          R2_Score         : Train 0.9756, Val 0.9596, Test 0.9629
          MAE              : Train 18799.5174, Val 20736.1739, Test 20472.3157
Best:
          RMSE             : Train 35337.3428, Val 42372.9858, Test 42180.9119
          R2_Score         : Train 0.9758, Val 0.9625, Test 0.9652
          MAE              : Train 18703.1772, Val 20155.0163, Test 19788.7677
Epoch 69: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35229.0341, Val 43103.8553, Test 42308.2894
          R2_Score         : Train 0.9760, Val 0.9612, Test 0.9649
          MAE              : Train 18671.2472, Val 20215.4022, Test 19801.6255
Best:
          RMSE             : Train 35337.3428, Val 42372.9858, Test 42180.9119
          R2_Score         : Train 0.9758, Val 0.9625, Test 0.9652
          MAE              : Train 18703.1772, Val 20155.0163, Test 19788.7677
Epoch 70: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34955.3909, Val 42626.0476, Test 43312.9986
          R2_Score         : Train 0.9764, Val 0.9620, Test 0.9633
          MAE              : Train 18409.5155, Val 20202.9451, Test 19984.5267
Best:
          RMSE             : Train 35337.3428, Val 42372.9858, Test 42180.9119
          R2_Score         : Train 0.9758, Val 0.9625, Test 0.9652
          MAE              : Train 18703.1772, Val 20155.0163, Test 19788.7677
Epoch 71: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34813.2573, Val 42587.6309, Test 42768.2153
          R2_Score         : Train 0.9765, Val 0.9621, Test 0.9642
          MAE              : Train 18394.0671, Val 19839.8717, Test 19566.3194
Best:
          RMSE             : Train 35337.3428, Val 42372.9858, Test 42180.9119
          R2_Score         : Train 0.9758, Val 0.9625, Test 0.9652
          MAE              : Train 18703.1772, Val 20155.0163, Test 19788.7677
Epoch 72: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34760.3096, Val 42731.3006, Test 42727.3492
          R2_Score         : Train 0.9766, Val 0.9618, Test 0.9642
          MAE              : Train 18308.5210, Val 19953.0292, Test 19586.1636
Best:
          RMSE             : Train 35337.3428, Val 42372.9858, Test 42180.9119
          R2_Score         : Train 0.9758, Val 0.9625, Test 0.9652
          MAE              : Train 18703.1772, Val 20155.0163, Test 19788.7677
Epoch 73: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34330.0590, Val 42332.2083, Test 42787.1749
          R2_Score         : Train 0.9772, Val 0.9625, Test 0.9641
          MAE              : Train 18123.9667, Val 19984.6419, Test 19670.6797
Best:
          RMSE             : Train 34330.0590, Val 42332.2083, Test 42787.1749
          R2_Score         : Train 0.9772, Val 0.9625, Test 0.9641
          MAE              : Train 18123.9667, Val 19984.6419, Test 19670.6797
Epoch 74: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34747.9485, Val 42184.8288, Test 42535.9675
          R2_Score         : Train 0.9766, Val 0.9628, Test 0.9646
          MAE              : Train 18202.6711, Val 19665.8253, Test 19377.9269
Best:
          RMSE             : Train 34747.9485, Val 42184.8288, Test 42535.9675
          R2_Score         : Train 0.9766, Val 0.9628, Test 0.9646
          MAE              : Train 18202.6711, Val 19665.8253, Test 19377.9269
Epoch 75: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34755.9091, Val 43205.1516, Test 43666.8959
          R2_Score         : Train 0.9766, Val 0.9610, Test 0.9627
          MAE              : Train 18167.0920, Val 20085.7937, Test 19934.9576
Best:
          RMSE             : Train 34747.9485, Val 42184.8288, Test 42535.9675
          R2_Score         : Train 0.9766, Val 0.9628, Test 0.9646
          MAE              : Train 18202.6711, Val 19665.8253, Test 19377.9269
Epoch 76: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34160.5848, Val 41820.3381, Test 42495.4052
          R2_Score         : Train 0.9774, Val 0.9634, Test 0.9646
          MAE              : Train 17955.6469, Val 19374.1152, Test 19197.6733
Best:
          RMSE             : Train 34160.5848, Val 41820.3381, Test 42495.4052
          R2_Score         : Train 0.9774, Val 0.9634, Test 0.9646
          MAE              : Train 17955.6469, Val 19374.1152, Test 19197.6733
Epoch 77: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33652.5253, Val 41901.3933, Test 42576.7277
          R2_Score         : Train 0.9781, Val 0.9633, Test 0.9645
          MAE              : Train 17645.2148, Val 19692.1248, Test 19377.7652
Best:
          RMSE             : Train 34160.5848, Val 41820.3381, Test 42495.4052
          R2_Score         : Train 0.9774, Val 0.9634, Test 0.9646
          MAE              : Train 17955.6469, Val 19374.1152, Test 19197.6733
Epoch 78: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33739.4338, Val 41526.7583, Test 42767.0532
          R2_Score         : Train 0.9780, Val 0.9639, Test 0.9642
          MAE              : Train 17734.1366, Val 19306.2889, Test 19181.2844
Best:
          RMSE             : Train 33739.4338, Val 41526.7583, Test 42767.0532
          R2_Score         : Train 0.9780, Val 0.9639, Test 0.9642
          MAE              : Train 17734.1366, Val 19306.2889, Test 19181.2844
Epoch 79: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33252.2841, Val 41394.2036, Test 42302.4031
          R2_Score         : Train 0.9786, Val 0.9642, Test 0.9650
          MAE              : Train 17349.7691, Val 19187.2397, Test 19039.0175
Best:
          RMSE             : Train 33252.2841, Val 41394.2036, Test 42302.4031
          R2_Score         : Train 0.9786, Val 0.9642, Test 0.9650
          MAE              : Train 17349.7691, Val 19187.2397, Test 19039.0175
Epoch 80: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33216.8297, Val 41605.4825, Test 42625.1527
          R2_Score         : Train 0.9786, Val 0.9638, Test 0.9644
          MAE              : Train 17399.6039, Val 19167.6853, Test 19022.8415
Best:
          RMSE             : Train 33252.2841, Val 41394.2036, Test 42302.4031
          R2_Score         : Train 0.9786, Val 0.9642, Test 0.9650
          MAE              : Train 17349.7691, Val 19187.2397, Test 19039.0175
Epoch 81: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33143.4798, Val 41686.3338, Test 42464.1867
          R2_Score         : Train 0.9787, Val 0.9637, Test 0.9647
          MAE              : Train 17271.4484, Val 19126.7408, Test 18954.9689
Best:
          RMSE             : Train 33252.2841, Val 41394.2036, Test 42302.4031
          R2_Score         : Train 0.9786, Val 0.9642, Test 0.9650
          MAE              : Train 17349.7691, Val 19187.2397, Test 19039.0175
Epoch 82: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33067.5238, Val 42004.5854, Test 42959.5467
          R2_Score         : Train 0.9788, Val 0.9631, Test 0.9639
          MAE              : Train 17332.5703, Val 18963.3336, Test 18774.4507
Best:

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.59it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.31it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.52it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.64it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.74it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.69it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.34it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.01it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.65it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.01it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.17it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.07it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.69it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.89it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.20it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.29it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.88it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.18it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.58it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.09it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.01it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.35it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.58it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.88it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.52it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.94it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.19it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.95it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.96it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.33it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.11it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.61it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.10it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.09it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.54it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.44it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.03it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.84it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.34it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.91it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.40it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.63it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.27it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.14it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.67it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.09it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.36it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.57it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.24it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.18it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.62it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.95it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.41it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.01it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.32it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.48it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.00it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.23it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.45it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.79it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.29it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.18it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.64it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.85it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.12it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.19it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.71it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.50it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.24it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.48it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.06it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.38it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.54it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.69it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.72it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.15it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.66it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.56it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.39it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.55it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.56it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.09it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.53it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.40it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.00it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.41it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.84it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.68it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.79it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.53it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.32it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.89it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.65it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.00it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.02it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.17it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.62it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.36it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.73it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.02it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.63it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.41it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.08it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.36it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.77it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.96it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.02it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.26it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.71it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00,  9.90it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.98it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.46it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 20.90it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.44it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.79it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.82it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.94it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.08it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.93it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.34it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.50it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.30it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.15it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.63it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.47it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 12.91it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.67it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.36it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.86it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.36it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.30it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.13it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.57it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.94it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  9.42it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.01it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.81it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.01it/s]          RMSE             : Train 33252.2841, Val 41394.2036, Test 42302.4031
          R2_Score         : Train 0.9786, Val 0.9642, Test 0.9650
          MAE              : Train 17349.7691, Val 19187.2397, Test 19039.0175
Epoch 83: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33027.7674, Val 42342.8456, Test 43327.5224
          R2_Score         : Train 0.9789, Val 0.9625, Test 0.9632
          MAE              : Train 17221.4488, Val 18971.7163, Test 18959.4259
Best:
          RMSE             : Train 33252.2841, Val 41394.2036, Test 42302.4031
          R2_Score         : Train 0.9786, Val 0.9642, Test 0.9650
          MAE              : Train 17349.7691, Val 19187.2397, Test 19039.0175
Epoch 84: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32914.3227, Val 41260.8968, Test 42256.6870
          R2_Score         : Train 0.9790, Val 0.9644, Test 0.9650
          MAE              : Train 17133.9216, Val 18908.7409, Test 18770.7374
Best:
          RMSE             : Train 32914.3227, Val 41260.8968, Test 42256.6870
          R2_Score         : Train 0.9790, Val 0.9644, Test 0.9650
          MAE              : Train 17133.9216, Val 18908.7409, Test 18770.7374
Epoch 85: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32547.0910, Val 41629.0877, Test 42306.9325
          R2_Score         : Train 0.9795, Val 0.9638, Test 0.9649
          MAE              : Train 17052.9195, Val 19024.2909, Test 18853.5930
Best:
          RMSE             : Train 32914.3227, Val 41260.8968, Test 42256.6870
          R2_Score         : Train 0.9790, Val 0.9644, Test 0.9650
          MAE              : Train 17133.9216, Val 18908.7409, Test 18770.7374
Epoch 86: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32554.8416, Val 40847.9584, Test 41928.7705
          R2_Score         : Train 0.9795, Val 0.9651, Test 0.9656
          MAE              : Train 16950.5267, Val 18653.2364, Test 18531.9094
Best:
          RMSE             : Train 32554.8416, Val 40847.9584, Test 41928.7705
          R2_Score         : Train 0.9795, Val 0.9651, Test 0.9656
          MAE              : Train 16950.5267, Val 18653.2364, Test 18531.9094
Epoch 87: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 88: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32177.6020, Val 43083.3000, Test 43860.4241
          R2_Score         : Train 0.9800, Val 0.9612, Test 0.9623
          MAE              : Train 16928.8176, Val 18881.2068, Test 18901.5032
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 89: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32175.8946, Val 43168.6782, Test 43433.6238
          R2_Score         : Train 0.9800, Val 0.9610, Test 0.9631
          MAE              : Train 16724.5500, Val 18652.2113, Test 18581.3530
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 90: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32231.8725, Val 42496.4738, Test 43736.6952
          R2_Score         : Train 0.9799, Val 0.9622, Test 0.9625
          MAE              : Train 16655.5098, Val 19026.8384, Test 19010.3123
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 91: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31739.1575, Val 41469.1365, Test 42518.7254
          R2_Score         : Train 0.9805, Val 0.9640, Test 0.9646
          MAE              : Train 16483.4534, Val 18556.8318, Test 18476.0364
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 92: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31520.3858, Val 41042.0193, Test 42558.8366
          R2_Score         : Train 0.9808, Val 0.9648, Test 0.9645
          MAE              : Train 16372.9986, Val 18257.7816, Test 18217.2965
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 93: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31757.0753, Val 41468.3122, Test 42740.6163
          R2_Score         : Train 0.9805, Val 0.9640, Test 0.9642
          MAE              : Train 16396.1970, Val 18416.6246, Test 18345.6609
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 94: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32016.3084, Val 41411.7620, Test 43047.7244
          R2_Score         : Train 0.9802, Val 0.9641, Test 0.9637
          MAE              : Train 16473.1253, Val 18307.5641, Test 18339.2662
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 95: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31680.3905, Val 42163.9407, Test 43374.4950
          R2_Score         : Train 0.9806, Val 0.9628, Test 0.9632
          MAE              : Train 16309.5095, Val 18477.7189, Test 18568.5572
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 96: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31326.2168, Val 42577.8388, Test 43270.0889
          R2_Score         : Train 0.9810, Val 0.9621, Test 0.9633
          MAE              : Train 16180.9445, Val 18425.2585, Test 18308.4149
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 97: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 30932.8748, Val 40899.3693, Test 42715.8914
          R2_Score         : Train 0.9815, Val 0.9650, Test 0.9643
          MAE              : Train 15977.0309, Val 18324.3107, Test 18352.2116
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 98: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.09it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.81it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.95it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.83it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.55it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.00it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.17it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.66it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.74it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.14it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.63it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.16it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.55it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.72it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 20.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.06it/s]
          RMSE             : Train 31145.7391, Val 41445.0017, Test 43335.0915
          R2_Score         : Train 0.9812, Val 0.9641, Test 0.9632
          MAE              : Train 16027.3120, Val 18199.1509, Test 18157.6017
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 99: Loss:            : Train 0.0000, Val 0.0001, Test 0.0002
          RMSE             : Train 30952.5091, Val 43337.6126, Test 45269.2487
          R2_Score         : Train 0.9815, Val 0.9607, Test 0.9599
          MAE              : Train 15951.9820, Val 18381.8212, Test 18521.2353
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Epoch 100: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31019.4395, Val 42076.1999, Test 43103.3740
          R2_Score         : Train 0.9814, Val 0.9630, Test 0.9636
          MAE              : Train 15979.0418, Val 18143.5286, Test 18072.0346
Best:
          RMSE             : Train 32229.6176, Val 40665.5189, Test 42483.9927
          R2_Score         : Train 0.9799, Val 0.9654, Test 0.9647
          MAE              : Train 16736.8959, Val 18945.4315, Test 18917.1718
Training time (sec): 334
