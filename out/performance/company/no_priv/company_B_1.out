  0%|          | 0/54068 [00:00<?, ?it/s]  2%|▏         | 1034/54068 [00:00<00:05, 10337.64it/s]  4%|▍         | 2085/54068 [00:00<00:05, 10336.31it/s]  6%|▌         | 3119/54068 [00:00<00:07, 6641.81it/s]   7%|▋         | 3893/54068 [00:00<00:07, 6514.06it/s] 10%|▉         | 5189/54068 [00:00<00:05, 8332.46it/s] 16%|█▋        | 8805/54068 [00:00<00:02, 16325.73it/s] 22%|██▏       | 12044/54068 [00:00<00:02, 20997.66it/s] 27%|██▋       | 14341/54068 [00:00<00:01, 20465.86it/s] 31%|███▏      | 16999/54068 [00:01<00:01, 22204.50it/s] 38%|███▊      | 20484/54068 [00:01<00:01, 25856.94it/s] 45%|████▍     | 24160/54068 [00:01<00:01, 29040.15it/s] 52%|█████▏    | 27903/54068 [00:01<00:00, 31509.53it/s] 58%|█████▊    | 31122/54068 [00:01<00:00, 25700.40it/s] 63%|██████▎   | 33911/54068 [00:01<00:00, 25979.03it/s] 68%|██████▊   | 36666/54068 [00:01<00:00, 22941.20it/s] 74%|███████▍  | 40056/54068 [00:01<00:00, 25654.35it/s] 81%|████████  | 43631/54068 [00:02<00:00, 28290.73it/s] 87%|████████▋ | 46955/54068 [00:02<00:00, 29634.15it/s] 93%|█████████▎| 50044/54068 [00:02<00:00, 25536.77it/s] 98%|█████████▊| 52777/54068 [00:02<00:00, 22053.51it/s]100%|██████████| 54068/54068 [00:02<00:00, 21680.00it/s]
  0%|          | 0/7725 [00:00<?, ?it/s] 18%|█▊        | 1358/7725 [00:00<00:00, 13578.39it/s] 35%|███▌      | 2716/7725 [00:00<00:00, 6942.50it/s]  81%|████████  | 6250/7725 [00:00<00:00, 15475.11it/s]100%|██████████| 7725/7725 [00:00<00:00, 14534.75it/s]
  0%|          | 0/15449 [00:00<?, ?it/s]  6%|▌         | 933/15449 [00:00<00:01, 9325.65it/s] 12%|█▏        | 1866/15449 [00:00<00:02, 6291.36it/s] 17%|█▋        | 2552/15449 [00:00<00:01, 6488.98it/s] 26%|██▋       | 4086/15449 [00:00<00:01, 9501.47it/s] 35%|███▍      | 5367/15449 [00:00<00:00, 10577.68it/s] 50%|████▉     | 7672/15449 [00:00<00:00, 14548.01it/s] 60%|██████    | 9321/15449 [00:00<00:00, 15154.10it/s] 72%|███████▏  | 11050/15449 [00:00<00:00, 15809.61it/s] 82%|████████▏ | 12664/15449 [00:00<00:00, 15151.83it/s] 96%|█████████▌| 14852/15449 [00:01<00:00, 17129.13it/s]100%|██████████| 15449/15449 [00:01<00:00, 13745.63it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 16.10it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.34it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.57it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.80it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.46it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.76it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.78it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.75it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.70it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.37it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 17.32it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.17it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.66it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.93it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.30it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.52it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.22it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 20.97it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 23.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.75it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.93it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.42it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.28it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 20.83it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.55it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.03it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.64it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 16.53it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.90it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.50it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.57it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.34it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.64it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 17.07it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 16.55it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 19.62it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.57it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.49it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.15it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 19.78it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.92it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 16.16it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.62it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.35it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.55it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.04it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 23.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 26.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.50it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.59it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.51it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.59it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.03it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.19it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.82it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.85it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.78it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.30it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.86it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.53it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.72it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.50it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.28it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.69it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.87it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.10it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.12it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.27it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.46it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.59it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.44it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.12it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.44it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.18it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 18.02it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.96it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.99it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.54it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.53it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 17.83it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.32it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.60it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.02it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.58it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.58it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 156 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0   [156, 200]  [4096, 200]   31400      31200
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           51601
Trainable params       51601
Non-trainable params       0
Mult-Adds              51300
=================================================================
n_classes=2
task=regression
model_name=company_fedsim_2022-09-08-21-27-43
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:0
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_fedsim_2022-09-08-21-27-43.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f04878df190>, <metric.rmse.RMSE object at 0x7f04878df1f0>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=156, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f04878df100>
Epoch 1: Loss:            : Train 0.1796, Val 0.1571, Test 0.1570
          R2_Score         : Train -46.2750, Val -43.3476, Test -40.5382
          RMSE             : Train 1562953.9173, Val 1456444.4861, Test 1456408.7634
Best:
          R2_Score         : Train -46.2750, Val -43.3476, Test -40.5382
          RMSE             : Train 1562953.9173, Val 1456444.4861, Test 1456408.7634
Epoch 2: Loss:            : Train 0.1374, Val 0.1171, Test 0.1173
          R2_Score         : Train -35.1334, Val -32.0679, Test -30.0262
          RMSE             : Train 1366422.0421, Val 1257656.1829, Test 1258705.1861
Best:
          R2_Score         : Train -35.1334, Val -32.0679, Test -30.0262
          RMSE             : Train 1366422.0421, Val 1257656.1829, Test 1258705.1861
Epoch 3: Loss:            : Train 0.0992, Val 0.0818, Test 0.0821
          R2_Score         : Train -25.2105, Val -22.0959, Test -20.7101
          RMSE             : Train 1163771.7703, Val 1051057.9836, Test 1052907.0840
Best:
          R2_Score         : Train -25.2105, Val -22.0959, Test -20.7101
          RMSE             : Train 1163771.7703, Val 1051057.9836, Test 1052907.0840
Epoch 4: Loss:            : Train 0.0671, Val 0.0530, Test 0.0533
          R2_Score         : Train -16.7380, Val -13.9678, Test -13.1014
          RMSE             : Train 957376.3341, Val 846132.5562, Test 848575.1462
Best:
          R2_Score         : Train -16.7380, Val -13.9678, Test -13.1014
          RMSE             : Train 957376.3341, Val 846132.5562, Test 848575.1462
Epoch 5: Loss:            : Train 0.0421, Val 0.0317, Test 0.0320
          R2_Score         : Train -10.1268, Val -7.9575, Test -7.4713
          RMSE             : Train 758254.7588, Val 654564.5535, Test 657708.7704
Best:
          R2_Score         : Train -10.1268, Val -7.9575, Test -7.4713
          RMSE             : Train 758254.7588, Val 654564.5535, Test 657708.7704
Epoch 6: Loss:            : Train 0.0245, Val 0.0178, Test 0.0180
          R2_Score         : Train -5.4914, Val -4.0116, Test -3.7714
          RMSE             : Train 579163.6013, Val 489604.8712, Test 493610.5681
Best:
          R2_Score         : Train -5.4914, Val -4.0116, Test -3.7714
          RMSE             : Train 579163.6013, Val 489604.8712, Test 493610.5681
Epoch 7: Loss:            : Train 0.0136, Val 0.0097, Test 0.0099
          R2_Score         : Train -2.6114, Val -1.7301, Test -1.6298
          RMSE             : Train 431985.9557, Val 361367.2028, Test 366454.7418
Best:
          R2_Score         : Train -2.6114, Val -1.7301, Test -1.6298
          RMSE             : Train 431985.9557, Val 361367.2028, Test 366454.7418
Epoch 8: Loss:            : Train 0.0077, Val 0.0057, Test 0.0060
          R2_Score         : Train -1.0468, Val -0.6084, Test -0.5751
          RMSE             : Train 325215.5456, Val 277366.2397, Test 283606.2401
Best:
          R2_Score         : Train -1.0468, Val -0.6084, Test -0.5751
          RMSE             : Train 325215.5456, Val 277366.2397, Test 283606.2401
Epoch 9: Loss:            : Train 0.0051, Val 0.0043, Test 0.0045
          R2_Score         : Train -0.3480, Val -0.1956, Test -0.1867
          RMSE             : Train 263925.9430, Val 239143.1647, Test 246172.2082
Best:
          R2_Score         : Train -0.3480, Val -0.1956, Test -0.1867
          RMSE             : Train 263925.9430, Val 239143.1647, Test 246172.2082
Epoch 10: Loss:            : Train 0.0044, Val 0.0040, Test 0.0043
          R2_Score         : Train -0.1441, Val -0.1345, Test -0.1290
          RMSE             : Train 243145.1705, Val 232950.1121, Test 240109.4841
Best:
          R2_Score         : Train -0.1441, Val -0.1345, Test -0.1290
          RMSE             : Train 243145.1705, Val 232950.1121, Test 240109.4841
Epoch 11: Loss:            : Train 0.0043, Val 0.0039, Test 0.0041
          R2_Score         : Train -0.1172, Val -0.0900, Test -0.0784
          RMSE             : Train 240266.6704, Val 228331.0238, Test 234668.6318
Best:
          R2_Score         : Train -0.1172, Val -0.0900, Test -0.0784
          RMSE             : Train 240266.6704, Val 228331.0238, Test 234668.6318
Epoch 12: Loss:            : Train 0.0040, Val 0.0038, Test 0.0039
          R2_Score         : Train -0.0545, Val -0.0590, Test -0.0365
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.00it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.97it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.37it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.17it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 12.63it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.45it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.41it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.88it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 23.92it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.68it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.36it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.43it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.71it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.65it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.57it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.73it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.49it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 19.68it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.57it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.26it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.93it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.58it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 28.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 25.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.26it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.62it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.59it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.83it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 17.11it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 15.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.71it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 31.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 21.62it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.96it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 19.80it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.88it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.92it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.54it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 26.66it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 16.70it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 20.27it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.25it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.44it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.32it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 17.19it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.02it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 16.25it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.39it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.49it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.63it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 18.03it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.31it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.24it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.01it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.01it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.29it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.78it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.02it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.60it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.30it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.40it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 24.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.64it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.69it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.24it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.17it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.82it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.58it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.08it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.60it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.34it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.51it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.34it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.85it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.12it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.33it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.86it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.15it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.13it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.61it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.10it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.64it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.43it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.71it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.84it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.10it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.83it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.75it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 13.85it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.12it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.81it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.05it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 17.21it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.92it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.21it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.26it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.15it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.33it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.99it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.63it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.17it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 17.26it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.57it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.93it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.39it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.17it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.66it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.18it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.34it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.42it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.83it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.06it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 19.33it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.88it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 16.49it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.37it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.83it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.81it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.44it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.38it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.46it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.77it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.01it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.36it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.39it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.47it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 10.30it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.40it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.20it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.81it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.70it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.57it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.55it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.54it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.00it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.73it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.15it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.69it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.11it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.27it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.78it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.24it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.78it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.69it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.80it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.77it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.89it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 17.51it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.00it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.14it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.26it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 26.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.96it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.09it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.99it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.53it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.65it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.82it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.53it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.51it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.74it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.29it/s]
          RMSE             : Train 233424.5746, Val 225060.5333, Test 230059.1411
Best:
          R2_Score         : Train -0.0545, Val -0.0590, Test -0.0365
          RMSE             : Train 233424.5746, Val 225060.5333, Test 230059.1411
Epoch 13: Loss:            : Train 0.0039, Val 0.0037, Test 0.0039
          R2_Score         : Train -0.0216, Val -0.0357, Test -0.0159
          RMSE             : Train 229760.1797, Val 222576.7830, Test 227766.9690
Best:
          R2_Score         : Train -0.0216, Val -0.0357, Test -0.0159
          RMSE             : Train 229760.1797, Val 222576.7830, Test 227766.9690
Epoch 14: Loss:            : Train 0.0039, Val 0.0036, Test 0.0038
          R2_Score         : Train -0.0084, Val -0.0255, Test -0.0054
          RMSE             : Train 228272.9053, Val 221480.7930, Test 226587.1474
Best:
          R2_Score         : Train -0.0084, Val -0.0255, Test -0.0054
          RMSE             : Train 228272.9053, Val 221480.7930, Test 226587.1474
Epoch 15: Loss:            : Train 0.0039, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0005, Val -0.0182, Test -0.0012
          RMSE             : Train 227256.6542, Val 220683.3004, Test 226113.3342
Best:
          R2_Score         : Train 0.0005, Val -0.0182, Test -0.0012
          RMSE             : Train 227256.6542, Val 220683.3004, Test 226113.3342
Epoch 16: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0044, Val -0.0156, Test 0.0017
          RMSE             : Train 226818.3669, Val 220409.7962, Test 225787.3529
Best:
          R2_Score         : Train 0.0044, Val -0.0156, Test 0.0017
          RMSE             : Train 226818.3669, Val 220409.7962, Test 225787.3529
Epoch 17: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0065, Val -0.0152, Test 0.0018
          RMSE             : Train 226577.5988, Val 220357.5489, Test 225769.0807
Best:
          R2_Score         : Train 0.0065, Val -0.0152, Test 0.0018
          RMSE             : Train 226577.5988, Val 220357.5489, Test 225769.0807
Epoch 18: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0074, Val -0.0129, Test 0.0036
          RMSE             : Train 226469.8326, Val 220113.1322, Test 225563.3527
Best:
          R2_Score         : Train 0.0074, Val -0.0129, Test 0.0036
          RMSE             : Train 226469.8326, Val 220113.1322, Test 225563.3527
Epoch 19: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0102, Val -0.0070, Test 0.0056
          RMSE             : Train 226159.2408, Val 219468.8492, Test 225338.7440
Best:
          R2_Score         : Train 0.0102, Val -0.0070, Test 0.0056
          RMSE             : Train 226159.2408, Val 219468.8492, Test 225338.7440
Epoch 20: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0115, Val -0.0073, Test 0.0053
          RMSE             : Train 226009.3076, Val 219500.9608, Test 225376.7358
Best:
          R2_Score         : Train 0.0102, Val -0.0070, Test 0.0056
          RMSE             : Train 226159.2408, Val 219468.8492, Test 225338.7440
Epoch 21: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0125, Val -0.0095, Test 0.0057
          RMSE             : Train 225890.0496, Val 219744.0182, Test 225327.5538
Best:
          R2_Score         : Train 0.0102, Val -0.0070, Test 0.0056
          RMSE             : Train 226159.2408, Val 219468.8492, Test 225338.7440
Epoch 22: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0128, Val -0.0058, Test 0.0060
          RMSE             : Train 225857.6626, Val 219336.1301, Test 225290.1891
Best:
          R2_Score         : Train 0.0128, Val -0.0058, Test 0.0060
          RMSE             : Train 225857.6626, Val 219336.1301, Test 225290.1891
Epoch 23: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0135, Val -0.0049, Test 0.0068
          RMSE             : Train 225777.0816, Val 219245.6056, Test 225203.6379
Best:
          R2_Score         : Train 0.0135, Val -0.0049, Test 0.0068
          RMSE             : Train 225777.0816, Val 219245.6056, Test 225203.6379
Epoch 24: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0133, Val -0.0061, Test 0.0074
          RMSE             : Train 225804.8727, Val 219368.9652, Test 225133.4540
Best:
          R2_Score         : Train 0.0135, Val -0.0049, Test 0.0068
          RMSE             : Train 225777.0816, Val 219245.6056, Test 225203.6379
Epoch 25: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 26: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0136, Val -0.0072, Test 0.0059
          RMSE             : Train 225765.6050, Val 219491.8511, Test 225303.8358
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 27: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0142, Val -0.0042, Test 0.0078
          RMSE             : Train 225699.9001, Val 219165.1019, Test 225089.8332
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 28: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0148, Val -0.0047, Test 0.0072
          RMSE             : Train 225627.7864, Val 219222.5942, Test 225156.6443
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 29: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0146, Val -0.0051, Test 0.0069
          RMSE             : Train 225655.8814, Val 219260.8927, Test 225193.4789
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 30: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0152, Val -0.0035, Test 0.0080
          RMSE             : Train 225583.1164, Val 219083.0167, Test 225071.7857
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 31: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0145, Val -0.0054, Test 0.0058
          RMSE             : Train 225660.1195, Val 219289.4105, Test 225315.2418
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 32: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0156, Val -0.0049, Test 0.0076
          RMSE             : Train 225534.5923, Val 219244.1485, Test 225112.2553
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 33: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0148, Val -0.0027, Test 0.0074
          RMSE             : Train 225622.2434, Val 219003.2020, Test 225140.7040
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 34: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0154, Val -0.0041, Test 0.0074
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.93it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.71it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.62it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.68it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.98it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.18it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.08it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.73it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.13it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.04it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.47it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.84it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.15it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.57it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.03it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.51it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.37it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.98it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.91it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.12it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.49it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.62it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.98it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.01it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.67it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.52it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.71it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.90it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.03it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 23.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 15.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.80it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.96it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.93it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.17it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.83it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.54it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.62it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 14.52it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.86it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.66it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.84it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.63it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.27it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.63it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 16.60it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.04it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.13it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.44it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.51it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.67it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.54it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.02it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.83it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.35it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.08it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.39it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.62it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.43it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.68it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.40it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.55it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.87it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.26it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.78it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.75it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.80it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.67it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.44it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.07it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.05it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.31it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.58it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 34.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.37it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.08it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.67it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.74it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.71it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.17it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.43it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.52it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.66it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.68it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.64it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.85it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.01it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 12.60it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.27it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.89it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 34.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.52it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.23it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.31it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.00it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.95it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.23it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.10it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.02it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.14it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.84it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.12it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.07it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.25it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.60it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.62it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.44it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.44it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.62it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.53it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.53it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.28it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.40it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.48it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.58it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.77it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.76it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.06it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.52it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.26it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.62it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.35it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.57it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 13.59it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.93it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.48it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.83it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.14it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.95it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.19it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.34it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.30it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.28it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.98it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.35it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.80it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.75it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.59it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.21it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.37it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.25it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.38it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.84it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.72it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.10it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.91it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.24it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.98it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.01it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.81it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.24it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.53it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.46it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.46it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 12.91it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.35it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.42it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.43it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.57it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.95it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.32it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  4.80it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 24.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.11it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.32it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.80it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.50it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.71it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.10it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.65it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.76it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.29it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.68it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.31it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.82it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.95it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.81it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.40it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.39it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.16it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.88it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.96it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.33it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.32it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.01it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.96it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.26it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.03it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.89it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.57it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.77it/s]
          RMSE             : Train 225557.6695, Val 219147.7294, Test 225140.6106
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 35: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0150, Val -0.0029, Test 0.0072
          RMSE             : Train 225599.3483, Val 219026.2234, Test 225156.6597
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 36: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0160, Val -0.0067, Test 0.0067
          RMSE             : Train 225485.1527, Val 219433.2393, Test 225212.8840
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 37: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0162, Val -0.0036, Test 0.0067
          RMSE             : Train 225466.5169, Val 219101.7155, Test 225214.7634
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 38: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0162, Val -0.0037, Test 0.0078
          RMSE             : Train 225471.1352, Val 219109.2840, Test 225090.0844
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 39: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0158, Val -0.0032, Test 0.0079
          RMSE             : Train 225507.6369, Val 219058.0626, Test 225079.0998
Best:
          R2_Score         : Train 0.0132, Val -0.0026, Test 0.0090
          RMSE             : Train 225815.9447, Val 218986.5897, Test 224957.8840
Epoch 40: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 41: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0157, Val -0.0042, Test 0.0072
          RMSE             : Train 225529.0656, Val 219162.8196, Test 225162.5029
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 42: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0067, Test 0.0059
          RMSE             : Train 225415.4623, Val 219432.3690, Test 225301.4844
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 43: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0058, Test 0.0059
          RMSE             : Train 225407.9052, Val 219343.5546, Test 225304.5012
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 44: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0151, Val -0.0075, Test 0.0054
          RMSE             : Train 225592.9984, Val 219525.5032, Test 225369.1466
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 45: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0051, Test 0.0060
          RMSE             : Train 225403.3588, Val 219264.0822, Test 225297.4618
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 46: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0157, Val -0.0039, Test 0.0057
          RMSE             : Train 225528.7930, Val 219135.8016, Test 225326.4679
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 47: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0165, Val -0.0079, Test 0.0047
          RMSE             : Train 225436.3832, Val 219562.1007, Test 225437.2633
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 48: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0160, Val -0.0090, Test 0.0044
          RMSE             : Train 225487.9829, Val 219689.4381, Test 225474.1333
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 49: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0031, Test 0.0070
          RMSE             : Train 225390.2486, Val 219040.5020, Test 225176.7698
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 50: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0058, Test 0.0069
          RMSE             : Train 225420.9565, Val 219342.5871, Test 225189.8019
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 51: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0043, Test 0.0070
          RMSE             : Train 225364.1405, Val 219176.7044, Test 225182.8038
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 52: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0025, Test 0.0074
          RMSE             : Train 225388.0238, Val 218975.7772, Test 225133.6218
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 53: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0165, Val -0.0043, Test 0.0066
          RMSE             : Train 225432.1469, Val 219170.9883, Test 225229.0074
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 54: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0163, Val -0.0063, Test 0.0068
          RMSE             : Train 225455.0113, Val 219397.1676, Test 225203.1463
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 55: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0041, Test 0.0063
          RMSE             : Train 225384.5594, Val 219152.8196, Test 225266.2586
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 56: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0158, Val -0.0057, Test 0.0061
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.46it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.60it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.75it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.71it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.07it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.43it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.42it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.39it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.26it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.66it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 22.01it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.67it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.24it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.75it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.25it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 17.45it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.77it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.01it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.18it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.28it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.63it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.02it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.72it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.96it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.32it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.47it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.28it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.15it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 17.98it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 17.70it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 21.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.20it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.44it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.65it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.41it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.92it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 30.25it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 15.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 17.18it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.05it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.99it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.45it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.06it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 23.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.88it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.89it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.77it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.75it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.15it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.12it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.39it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.00it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.10it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.40it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.46it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.62it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.11it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.76it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.26it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.43it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.33it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.24it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.46it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.55it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.05it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 29.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 17.50it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.72it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.06it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.41it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.07it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.82it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.10it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.06it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.27it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.33it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 17.12it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.74it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 20.81it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.51it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.27it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.35it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.87it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.54it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.04it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  9.44it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.84it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.39it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.56it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.04it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.78it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.51it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.13it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.80it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.59it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.99it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.20it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.55it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.37it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.12it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.15it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.05it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.85it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 16.46it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.91it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.77it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.91it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 25.95it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 19.13it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.43it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.36it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.23it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.83it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 23.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.83it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.17it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.10it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 18.21it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.34it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.54it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.69it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.37it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.42it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.61it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.54it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.78it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.60it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.41it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.67it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 15.54it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.27it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 17.85it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.10it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.28it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.49it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.12it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.59it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.03it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.69it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.79it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.77it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.55it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.41it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.54it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.08it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.27it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.05it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.94it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.83it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.12it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.38it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.92it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.57it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.04it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.10it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.88it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.44it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.96it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.03it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.40it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.52it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.10it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.24it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.61it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.14it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.48it/s]
          RMSE             : Train 225517.8727, Val 219329.7342, Test 225288.9246
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 57: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0056, Test 0.0061
          RMSE             : Train 225360.0782, Val 219319.0848, Test 225288.4709
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 58: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0054, Test 0.0067
          RMSE             : Train 225363.7639, Val 219296.2262, Test 225215.3904
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 59: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0023, Test 0.0064
          RMSE             : Train 225317.7001, Val 218959.8976, Test 225254.9180
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 60: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0179, Val -0.0040, Test 0.0063
          RMSE             : Train 225268.5406, Val 219141.4536, Test 225256.9089
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 61: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0062, Test 0.0065
          RMSE             : Train 225360.3122, Val 219385.7307, Test 225244.3923
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 62: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0048, Test 0.0068
          RMSE             : Train 225379.6210, Val 219233.3238, Test 225206.6117
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 63: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0052, Test 0.0059
          RMSE             : Train 225338.2261, Val 219273.9987, Test 225307.3287
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 64: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0050, Test 0.0061
          RMSE             : Train 225344.7898, Val 219255.9061, Test 225280.4150
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 65: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0065, Test 0.0059
          RMSE             : Train 225373.1134, Val 219414.8015, Test 225308.4912
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 66: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0040, Test 0.0068
          RMSE             : Train 225297.0671, Val 219146.0484, Test 225205.6178
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 67: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0172, Val -0.0021, Test 0.0075
          RMSE             : Train 225354.7105, Val 218939.9833, Test 225124.0615
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 68: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0181, Val -0.0074, Test 0.0042
          RMSE             : Train 225250.4734, Val 219510.6382, Test 225502.7784
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 69: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0059, Test 0.0065
          RMSE             : Train 225343.5613, Val 219351.0641, Test 225236.6166
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 70: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0021, Test 0.0068
          RMSE             : Train 225256.7355, Val 218930.4428, Test 225208.8422
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 71: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0039, Test 0.0073
          RMSE             : Train 225342.3662, Val 219129.7507, Test 225152.6287
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 72: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0183, Val -0.0069, Test 0.0051
          RMSE             : Train 225229.2087, Val 219456.5500, Test 225395.9815
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 73: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0049, Test 0.0049
          RMSE             : Train 225404.2300, Val 219240.8250, Test 225418.3598
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 74: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0165, Val -0.0088, Test 0.0056
          RMSE             : Train 225438.0046, Val 219661.7194, Test 225346.4008
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 75: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0056, Test 0.0059
          RMSE             : Train 225296.6145, Val 219314.1825, Test 225302.7607
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 76: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0179, Val -0.0055, Test 0.0069
          RMSE             : Train 225278.1399, Val 219301.5717, Test 225197.0543
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 77: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0054, Test 0.0071
          RMSE             : Train 225314.8826, Val 219291.4488, Test 225172.8544
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 78: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0179, Val -0.0050, Test 0.0060
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.95it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.73it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.74it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.86it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.03it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.75it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 10.95it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.46it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.30it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.93it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.13it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.93it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.76it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.71it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.96it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.85it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.06it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.09it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.12it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.15it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.17it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 16.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.43it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 19.41it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 16.48it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 23.43it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.32it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.57it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.76it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.48it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.95it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.35it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.96it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.51it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.62it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.94it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.95it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.94it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.19it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.69it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.24it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.93it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.00it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.65it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.10it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 35.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 35.26it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.40it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.98it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 16.56it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 20.01it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 12.91it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 25.13it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 19.20it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 21.48it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.61it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 20.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.88it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.85it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.19it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.27it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.65it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.19it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.00it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.14it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 12.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 15.67it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.26it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.18it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.51it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.61it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.81it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.66it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.22it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.49it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.18it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.65it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.94it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.12it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 14.19it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.16it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.99it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.97it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 17.55it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 12.30it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 30.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.83it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 10.76it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.27it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.57it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.18it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.62it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.80it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.51it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.64it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.65it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 30.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.20it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.44it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.53it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  8.62it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.19it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.01it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.38it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.86it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.16it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.91it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.46it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.50it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.69it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.35it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 25.80it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.46it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 24.41it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.32it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.58it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.24it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.32it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.35it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.55it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.28it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 17.30it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.89it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.48it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 12.93it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.54it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.58it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.91it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.44it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.23it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.52it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.91it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.99it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.45it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.47it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.23it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 25.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 22.49it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.69it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.73it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.63it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.35it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.62it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 26.19it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.00it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.12it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00,  8.39it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.97it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.82it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.87it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.36it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.45it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.49it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.99it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.79it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.13it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 14.55it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 17.56it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.95it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.82it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.29it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.92it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.95it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.36it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 17.12it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.00it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.61it/s]
          RMSE             : Train 225277.1807, Val 219250.8209, Test 225292.9944
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 79: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0179, Val -0.0045, Test 0.0070
          RMSE             : Train 225268.3295, Val 219191.6378, Test 225179.3599
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 80: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0174, Val -0.0059, Test 0.0055
          RMSE             : Train 225330.4566, Val 219352.3512, Test 225351.8172
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 81: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0045, Test 0.0065
          RMSE             : Train 225261.2587, Val 219193.4022, Test 225242.4843
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 82: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0060, Test 0.0061
          RMSE             : Train 225320.1600, Val 219360.0132, Test 225279.4175
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 83: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0172, Val -0.0059, Test 0.0049
          RMSE             : Train 225349.1659, Val 219353.3263, Test 225424.8858
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 84: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0188, Val -0.0046, Test 0.0057
          RMSE             : Train 225174.1759, Val 219208.1222, Test 225328.5711
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 85: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0085, Test 0.0045
          RMSE             : Train 225311.0570, Val 219634.6461, Test 225468.8851
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 86: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0181, Val -0.0041, Test 0.0066
          RMSE             : Train 225254.2818, Val 219157.7188, Test 225224.7826
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 87: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0184, Val -0.0047, Test 0.0077
          RMSE             : Train 225220.3410, Val 219219.5993, Test 225105.2277
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 88: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0058, Test 0.0054
          RMSE             : Train 225359.2431, Val 219343.5177, Test 225361.0994
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 89: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0062, Test 0.0071
          RMSE             : Train 225306.6716, Val 219382.8097, Test 225174.4257
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 90: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0185, Val -0.0042, Test 0.0075
          RMSE             : Train 225204.0402, Val 219159.1490, Test 225124.3785
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 91: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0184, Val -0.0034, Test 0.0069
          RMSE             : Train 225216.4930, Val 219075.9141, Test 225188.9909
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 92: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0185, Val -0.0055, Test 0.0081
          RMSE             : Train 225199.1600, Val 219305.8001, Test 225055.4821
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 93: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0186, Val -0.0052, Test 0.0064
          RMSE             : Train 225191.2694, Val 219277.9974, Test 225255.6899
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 94: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0185, Val -0.0052, Test 0.0060
          RMSE             : Train 225205.5877, Val 219268.2428, Test 225300.6326
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 95: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0185, Val -0.0039, Test 0.0071
          RMSE             : Train 225202.2621, Val 219135.8905, Test 225170.0537
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 96: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0183, Val -0.0044, Test 0.0073
          RMSE             : Train 225228.7509, Val 219189.6557, Test 225147.4289
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 97: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0186, Val -0.0031, Test 0.0072
          RMSE             : Train 225190.7941, Val 219045.5992, Test 225154.4231
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 98: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0183, Val -0.0083, Test 0.0046
          RMSE             : Train 225226.0082, Val 219614.2187, Test 225457.7701
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 99: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0183, Val -0.0026, Test 0.0079
          RMSE             : Train 225228.7093, Val 218990.9305, Test 225081.4745
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
Epoch 100: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0185, Val -0.0070, Test 0.0058

          RMSE             : Train 225200.1421, Val 219473.6667, Test 225317.5901
Best:
          R2_Score         : Train 0.0162, Val -0.0018, Test 0.0077
          RMSE             : Train 225462.7875, Val 218900.8234, Test 225097.6724
