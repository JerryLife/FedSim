  0%|          | 0/54068 [00:00<?, ?it/s]  1%|          | 313/54068 [00:00<00:17, 3098.00it/s]  6%|▋         | 3418/54068 [00:00<00:02, 19467.16it/s] 12%|█▏        | 6749/54068 [00:00<00:01, 25769.10it/s] 19%|█▉        | 10156/54068 [00:00<00:01, 29038.09it/s] 26%|██▌       | 13806/54068 [00:00<00:01, 31724.06it/s] 31%|███▏      | 16981/54068 [00:00<00:01, 26143.11it/s] 39%|███▉      | 21337/54068 [00:00<00:01, 31117.22it/s] 47%|████▋     | 25639/54068 [00:00<00:00, 34563.96it/s] 56%|█████▋    | 30494/54068 [00:00<00:00, 38657.46it/s] 65%|██████▌   | 35349/54068 [00:01<00:00, 41572.92it/s] 74%|███████▍  | 39977/54068 [00:01<00:00, 42967.04it/s] 83%|████████▎ | 44812/54068 [00:01<00:00, 44567.13it/s] 91%|█████████ | 49326/54068 [00:01<00:00, 44713.56it/s]100%|██████████| 54068/54068 [00:01<00:00, 36982.00it/s]
  0%|          | 0/7725 [00:00<?, ?it/s] 13%|█▎        | 1008/7725 [00:00<00:00, 10073.33it/s] 26%|██▌       | 2016/7725 [00:00<00:00, 8901.50it/s]  55%|█████▍    | 4236/7725 [00:00<00:00, 14565.15it/s] 96%|█████████▌| 7389/7725 [00:00<00:00, 20878.30it/s]100%|██████████| 7725/7725 [00:00<00:00, 17252.57it/s]
  0%|          | 0/15449 [00:00<?, ?it/s] 28%|██▊       | 4277/15449 [00:00<00:00, 42756.79it/s] 57%|█████▋    | 8748/15449 [00:00<00:00, 43901.92it/s] 85%|████████▌ | 13139/15449 [00:00<00:00, 43423.63it/s]100%|██████████| 15449/15449 [00:00<00:00, 43885.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.70it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 15.65it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.71it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 17.63it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.56it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.10it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.54it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.85it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 18.33it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.26it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 17.97it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.70it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.39it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.91it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.55it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.35it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.85it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.64it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.82it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.72it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.38it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.75it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.64it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.15it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.94it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.78it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.50it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 16.66it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.88it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.18it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.12it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 21.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.67it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.90it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.57it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.97it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.06it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.43it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.59it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.10it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.48it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.85it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.45it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.51it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.44it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.21it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.93it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.73it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.79it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.52it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.25it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.40it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.24it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.20it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 17.87it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.09it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.40it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 26.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 28.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.90it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 16.27it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.15it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.21it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.18it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.62it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.74it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.24it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.81it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.04it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.62it/s]Train:  50%|█████     | 7/14 [00:00<00:01,  6.18it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.42it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.43it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.02it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.28it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.26it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.21it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.32it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.52it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.87it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.06it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.14it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00, 10.64it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.83it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.14it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.03it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.11it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.13it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.21it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.44it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.36it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 12.93it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 14.23it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 16.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.44it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 156 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0   [156, 200]  [4096, 200]   31400      31200
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           51601
Trainable params       51601
Non-trainable params       0
Mult-Adds              51300
=================================================================
n_classes=2
task=regression
model_name=company_fedsim_2022-09-08-21-27-44
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_fedsim_2022-09-08-21-27-44.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f17b187c1c0>, <metric.rmse.RMSE object at 0x7f17b187c220>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=156, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f17b187c130>
Epoch 1: Loss:            : Train 0.2076, Val 0.1796, Test 0.1796
          R2_Score         : Train -53.6474, Val -49.7157, Test -46.5070
          RMSE             : Train 1680409.1844, Val 1557507.8318, Test 1557537.2257
Best:
          R2_Score         : Train -53.6474, Val -49.7157, Test -46.5070
          RMSE             : Train 1680409.1844, Val 1557507.8318, Test 1557537.2257
Epoch 2: Loss:            : Train 0.1563, Val 0.1324, Test 0.1328
          R2_Score         : Train -40.1750, Val -36.3902, Test -34.1264
          RMSE             : Train 1458636.3076, Val 1337328.2668, Test 1339295.4390
Best:
          R2_Score         : Train -40.1750, Val -36.3902, Test -34.1264
          RMSE             : Train 1458636.3076, Val 1337328.2668, Test 1339295.4390
Epoch 3: Loss:            : Train 0.1121, Val 0.0915, Test 0.0920
          R2_Score         : Train -28.5884, Val -24.8305, Test -23.3365
          RMSE             : Train 1236492.0560, Val 1111540.0575, Test 1114778.3819
Best:
          R2_Score         : Train -28.5884, Val -24.8305, Test -23.3365
          RMSE             : Train 1236492.0560, Val 1111540.0575, Test 1114778.3819
Epoch 4: Loss:            : Train 0.0747, Val 0.0580, Test 0.0585
          R2_Score         : Train -18.7599, Val -15.3823, Test -14.4836
          RMSE             : Train 1010468.8681, Val 885210.6526, Test 889191.7339
Best:
          R2_Score         : Train -18.7599, Val -15.3823, Test -14.4836
          RMSE             : Train 1010468.8681, Val 885210.6526, Test 889191.7339
Epoch 5: Loss:            : Train 0.0456, Val 0.0334, Test 0.0339
          R2_Score         : Train -11.0612, Val -8.4312, Test -7.9617
          RMSE             : Train 789452.2836, Val 671650.2147, Test 676480.6101
Best:
          R2_Score         : Train -11.0612, Val -8.4312, Test -7.9617
          RMSE             : Train 789452.2836, Val 671650.2147, Test 676480.6101
Epoch 6: Loss:            : Train 0.0253, Val 0.0176, Test 0.0180
          R2_Score         : Train -5.7208, Val -3.9674, Test -3.7633
          RMSE             : Train 589304.5910, Val 487440.7001, Test 493186.5683
Best:
          R2_Score         : Train -5.7208, Val -3.9674, Test -3.7633
          RMSE             : Train 589304.5910, Val 487440.7001, Test 493186.5683
Epoch 7: Loss:            : Train 0.0132, Val 0.0090, Test 0.0093
          R2_Score         : Train -2.5001, Val -1.5213, Test -1.4507
          RMSE             : Train 425277.6532, Val 347270.7730, Test 353753.7779
Best:
          R2_Score         : Train -2.5001, Val -1.5213, Test -1.4507
          RMSE             : Train 425277.6532, Val 347270.7730, Test 353753.7779
Epoch 8: Loss:            : Train 0.0071, Val 0.0052, Test 0.0054
          R2_Score         : Train -0.8706, Val -0.4564, Test -0.4368
          RMSE             : Train 310896.0838, Val 263933.6547, Test 270863.7371
Best:
          R2_Score         : Train -0.8706, Val -0.4564, Test -0.4368
          RMSE             : Train 310896.0838, Val 263933.6547, Test 270863.7371
Epoch 9: Loss:            : Train 0.0048, Val 0.0042, Test 0.0044
          R2_Score         : Train -0.2638, Val -0.1752, Test -0.1673
          RMSE             : Train 255550.6678, Val 237086.9524, Test 244146.1030
Best:
          R2_Score         : Train -0.2638, Val -0.1752, Test -0.1673
          RMSE             : Train 255550.6678, Val 237086.9524, Test 244146.1030
Epoch 10: Loss:            : Train 0.0044, Val 0.0042, Test 0.0044
          R2_Score         : Train -0.1684, Val -0.1738, Test -0.1648
          RMSE             : Train 245708.0436, Val 236946.2503, Test 243885.4973
Best:
          R2_Score         : Train -0.1684, Val -0.1738, Test -0.1648
          RMSE             : Train 245708.0436, Val 236946.2503, Test 243885.4973
Epoch 11: Loss:            : Train 0.0042, Val 0.0039, Test 0.0041
          R2_Score         : Train -0.1318, Val -0.0898, Test -0.0721
          RMSE             : Train 241833.9511, Val 228311.3300, Test 233975.9925
Best:
          R2_Score         : Train -0.1318, Val -0.0898, Test -0.0721
          RMSE             : Train 241833.9511, Val 228311.3300, Test 233975.9925
Epoch 12: Loss:            : Train 0.0040, Val 0.0038, Test 0.0040
          R2_Score         : Train -0.0508, Val -0.0700, Test -0.0458
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.63it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.66it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.88it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  8.86it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.93it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.56it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.33it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.70it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.15it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.00it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.17it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.61it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.76it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.29it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.07it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.33it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.74it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.64it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.28it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.38it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.77it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.25it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.85it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.18it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.71it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.83it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.61it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.88it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 13.93it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.92it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.85it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.20it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.28it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.08it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  8.98it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.07it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.21it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.54it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.96it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.73it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.81it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.25it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.83it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.41it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.16it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.74it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.17it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.06it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.15it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.61it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.07it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.93it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.43it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.98it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 28.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 30.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.06it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.58it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.42it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.03it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.99it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.19it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.15it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.97it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.47it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.60it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.22it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.78it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.48it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.38it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.18it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.92it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.54it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.44it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.30it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.34it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 18.10it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.65it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.31it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.13it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.03it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.27it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.43it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 19.98it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.82it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 13.30it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.21it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.48it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.32it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.68it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.76it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.30it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.35it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.11it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.82it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.99it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.20it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.36it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 33.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 33.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.43it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 15.96it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.72it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.83it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.10it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 12.18it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 14.00it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 17.15it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.69it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.09it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 17.00it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 12.07it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.07it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.63it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.45it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 19.32it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.67it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.53it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.00it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.45it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.44it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.93it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.97it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.47it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.42it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.90it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.39it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.45it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.48it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.01it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.71it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.27it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00, 10.82it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.28it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.13it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.39it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.16it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.93it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.07it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.09it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.39it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.03it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.03it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.32it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.95it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.83it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.66it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.02it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.21it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.71it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.26it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.48it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.98it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.71it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.26it/s]Train:  14%|█▍        | 2/14 [00:01<00:07,  1.59it/s]Train:  21%|██▏       | 3/14 [00:01<00:04,  2.27it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.97it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.72it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.17it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  5.42it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  6.07it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  7.75it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  8.15it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.47it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.25it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 27.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.82it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.02it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.80it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.14it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.08it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.08it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.16it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.63it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.54it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.58it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 37.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 15.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.15it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.18it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.11it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.30it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.53it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.48it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.98it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 16.01it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.45it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.28it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.35it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.57it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.94it/s]
          RMSE             : Train 233017.3854, Val 226233.1445, Test 231096.7911
Best:
          R2_Score         : Train -0.0508, Val -0.0700, Test -0.0458
          RMSE             : Train 233017.3854, Val 226233.1445, Test 231096.7911
Epoch 13: Loss:            : Train 0.0039, Val 0.0037, Test 0.0039
          R2_Score         : Train -0.0254, Val -0.0347, Test -0.0148
          RMSE             : Train 230188.5420, Val 222462.0173, Test 227645.6943
Best:
          R2_Score         : Train -0.0254, Val -0.0347, Test -0.0148
          RMSE             : Train 230188.5420, Val 222462.0173, Test 227645.6943
Epoch 14: Loss:            : Train 0.0039, Val 0.0037, Test 0.0038
          R2_Score         : Train -0.0080, Val -0.0277, Test -0.0063
          RMSE             : Train 228220.9552, Val 221717.4554, Test 226683.8187
Best:
          R2_Score         : Train -0.0080, Val -0.0277, Test -0.0063
          RMSE             : Train 228220.9552, Val 221717.4554, Test 226683.8187
Epoch 15: Loss:            : Train 0.0039, Val 0.0036, Test 0.0038
          R2_Score         : Train -0.0020, Val -0.0207, Test -0.0030
          RMSE             : Train 227544.0901, Val 220960.3834, Test 226309.3906
Best:
          R2_Score         : Train -0.0020, Val -0.0207, Test -0.0030
          RMSE             : Train 227544.0901, Val 220960.3834, Test 226309.3906
Epoch 16: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0010, Val -0.0224, Test -0.0015
          RMSE             : Train 227199.1234, Val 221141.9068, Test 226149.1202
Best:
          R2_Score         : Train -0.0020, Val -0.0207, Test -0.0030
          RMSE             : Train 227544.0901, Val 220960.3834, Test 226309.3906
Epoch 17: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0044, Val -0.0137, Test 0.0035
          RMSE             : Train 226818.4448, Val 220196.9418, Test 225581.8252
Best:
          R2_Score         : Train 0.0044, Val -0.0137, Test 0.0035
          RMSE             : Train 226818.4448, Val 220196.9418, Test 225581.8252
Epoch 18: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0058, Val -0.0102, Test 0.0044
          RMSE             : Train 226651.1868, Val 219821.6439, Test 225479.0808
Best:
          R2_Score         : Train 0.0058, Val -0.0102, Test 0.0044
          RMSE             : Train 226651.1868, Val 219821.6439, Test 225479.0808
Epoch 19: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0082, Val -0.0093, Test 0.0035
          RMSE             : Train 226376.7073, Val 219722.9494, Test 225580.3059
Best:
          R2_Score         : Train 0.0082, Val -0.0093, Test 0.0035
          RMSE             : Train 226376.7073, Val 219722.9494, Test 225580.3059
Epoch 20: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0091, Val -0.0092, Test 0.0062
          RMSE             : Train 226277.9733, Val 219707.1814, Test 225272.5443
Best:
          R2_Score         : Train 0.0091, Val -0.0092, Test 0.0062
          RMSE             : Train 226277.9733, Val 219707.1814, Test 225272.5443
Epoch 21: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0091, Val -0.0076, Test 0.0048
          RMSE             : Train 226276.8319, Val 219532.8877, Test 225429.4781
Best:
          R2_Score         : Train 0.0091, Val -0.0076, Test 0.0048
          RMSE             : Train 226276.8319, Val 219532.8877, Test 225429.4781
Epoch 22: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0103, Val -0.0058, Test 0.0078
          RMSE             : Train 226146.2879, Val 219336.5445, Test 225091.3763
Best:
          R2_Score         : Train 0.0103, Val -0.0058, Test 0.0078
          RMSE             : Train 226146.2879, Val 219336.5445, Test 225091.3763
Epoch 23: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0115, Val -0.0038, Test 0.0071
          RMSE             : Train 226003.6784, Val 219122.5255, Test 225176.2584
Best:
          R2_Score         : Train 0.0115, Val -0.0038, Test 0.0071
          RMSE             : Train 226003.6784, Val 219122.5255, Test 225176.2584
Epoch 24: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0111, Val -0.0070, Test 0.0075
          RMSE             : Train 226046.3440, Val 219467.6509, Test 225130.2737
Best:
          R2_Score         : Train 0.0115, Val -0.0038, Test 0.0071
          RMSE             : Train 226003.6784, Val 219122.5255, Test 225176.2584
Epoch 25: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0110, Val -0.0056, Test 0.0074
          RMSE             : Train 226066.8310, Val 219314.1306, Test 225139.7990
Best:
          R2_Score         : Train 0.0115, Val -0.0038, Test 0.0071
          RMSE             : Train 226003.6784, Val 219122.5255, Test 225176.2584
Epoch 26: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0121, Val -0.0082, Test 0.0046
          RMSE             : Train 225933.2280, Val 219603.8475, Test 225453.2257
Best:
          R2_Score         : Train 0.0115, Val -0.0038, Test 0.0071
          RMSE             : Train 226003.6784, Val 219122.5255, Test 225176.2584
Epoch 27: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0134, Val -0.0047, Test 0.0084
          RMSE             : Train 225787.7161, Val 219215.2138, Test 225024.2965
Best:
          R2_Score         : Train 0.0115, Val -0.0038, Test 0.0071
          RMSE             : Train 226003.6784, Val 219122.5255, Test 225176.2584
Epoch 28: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0132, Val -0.0038, Test 0.0074
          RMSE             : Train 225813.4189, Val 219118.4191, Test 225141.8758
Best:
          R2_Score         : Train 0.0132, Val -0.0038, Test 0.0074
          RMSE             : Train 225813.4189, Val 219118.4191, Test 225141.8758
Epoch 29: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0130, Val -0.0053, Test 0.0081
          RMSE             : Train 225830.1581, Val 219284.6325, Test 225058.1896
Best:
          R2_Score         : Train 0.0132, Val -0.0038, Test 0.0074
          RMSE             : Train 225813.4189, Val 219118.4191, Test 225141.8758
Epoch 30: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0137, Val -0.0028, Test 0.0081
          RMSE             : Train 225748.2362, Val 219013.2328, Test 225062.0050
Best:
          R2_Score         : Train 0.0137, Val -0.0028, Test 0.0081
          RMSE             : Train 225748.2362, Val 219013.2328, Test 225062.0050
Epoch 31: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0139, Val -0.0042, Test 0.0079
          RMSE             : Train 225734.5562, Val 219168.6908, Test 225078.6990
Best:
          R2_Score         : Train 0.0137, Val -0.0028, Test 0.0081
          RMSE             : Train 225748.2362, Val 219013.2328, Test 225062.0050
Epoch 32: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0145, Val -0.0071, Test 0.0048
          RMSE             : Train 225656.4970, Val 219477.8159, Test 225433.4452
Best:
          R2_Score         : Train 0.0137, Val -0.0028, Test 0.0081
          RMSE             : Train 225748.2362, Val 219013.2328, Test 225062.0050
Epoch 33: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0144, Val -0.0031, Test 0.0069
          RMSE             : Train 225674.0368, Val 219043.6079, Test 225193.9818
Best:
          R2_Score         : Train 0.0137, Val -0.0028, Test 0.0081
          RMSE             : Train 225748.2362, Val 219013.2328, Test 225062.0050
Epoch 34: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0140, Val -0.0068, Test 0.0081
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.76it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.99it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.85it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.60it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.75it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 11.57it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 14.29it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.65it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.98it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.84it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.72it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.36it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.60it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.45it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.57it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.20it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.13it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.60it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.32it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 11.64it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.30it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.21it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.51it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.93it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.57it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.62it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.81it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.97it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.27it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.97it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.49it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.43it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 20.60it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.94it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.80it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00,  8.96it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.20it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.07it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.82it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.40it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.64it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.95it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.88it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.29it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.47it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.06it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.11it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.50it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.97it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.37it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.77it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.11it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.89it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.82it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 15.00it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.04it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.04it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.68it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.69it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.42it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.40it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.95it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.59it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.04it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.59it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.71it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.76it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.56it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.74it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.32it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.39it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.14it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.94it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.90it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.08it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.44it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.70it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.47it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.82it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.52it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.28it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.40it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.96it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.91it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.15it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.42it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.72it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.13it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.85it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.42it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.97it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.25it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.26it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  4.43it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  5.64it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.61it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.57it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.09it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.21it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.29it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.63it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.59it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.12it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.64it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.56it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.01it/s]Train:  14%|█▍        | 2/14 [00:01<00:06,  1.83it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.69it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.71it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.21it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.83it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.79it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.57it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.67it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.40it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.01it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.37it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.04it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.08it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.10it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.47it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 34.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.46it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.09it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.39it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.14it/s]Train:  50%|█████     | 7/14 [00:00<00:01,  6.53it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.63it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.91it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.40it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.71it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.81it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.39it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.25it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.25it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.12it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.95it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.84it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.63it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.87it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.22it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.93it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.82it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.45it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.15it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.41it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.74it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.00it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.66it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.85it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.27it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 23.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.57it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.83it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.70it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.42it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.43it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.01it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.52it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.36it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.65it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 20.92it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 18.36it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.25it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.11it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.11it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.47it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.70it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.00it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.72it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.94it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.79it/s]
          RMSE             : Train 225722.9470, Val 219451.0743, Test 225051.8164
Best:
          R2_Score         : Train 0.0137, Val -0.0028, Test 0.0081
          RMSE             : Train 225748.2362, Val 219013.2328, Test 225062.0050
Epoch 35: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 36: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0150, Val -0.0031, Test 0.0088
          RMSE             : Train 225607.0110, Val 219049.0920, Test 224980.6844
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 37: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0150, Val -0.0033, Test 0.0080
          RMSE             : Train 225609.0520, Val 219061.3053, Test 225064.5547
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 38: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0147, Val -0.0048, Test 0.0057
          RMSE             : Train 225634.2105, Val 219226.8478, Test 225332.1997
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 39: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0146, Val -0.0067, Test 0.0063
          RMSE             : Train 225653.1391, Val 219435.1254, Test 225261.9894
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 40: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0139, Val -0.0033, Test 0.0084
          RMSE             : Train 225734.8832, Val 219068.4456, Test 225019.7293
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 41: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0146, Val -0.0027, Test 0.0098
          RMSE             : Train 225653.1967, Val 218995.1859, Test 224866.5305
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 42: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0157, Val -0.0032, Test 0.0067
          RMSE             : Train 225519.7700, Val 219054.5650, Test 225213.1346
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 43: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0149, Val -0.0030, Test 0.0089
          RMSE             : Train 225611.5563, Val 219035.1390, Test 224963.5807
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 44: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0151, Val -0.0042, Test 0.0079
          RMSE             : Train 225593.5630, Val 219169.1406, Test 225083.8898
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 45: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0150, Val -0.0030, Test 0.0060
          RMSE             : Train 225605.4706, Val 219035.0947, Test 225297.2162
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 46: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0158, Val -0.0064, Test 0.0059
          RMSE             : Train 225518.4973, Val 219404.7793, Test 225304.1480
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 47: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0155, Val -0.0041, Test 0.0086
          RMSE             : Train 225550.2495, Val 219154.9337, Test 225002.7837
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 48: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0163, Val -0.0034, Test 0.0070
          RMSE             : Train 225454.4381, Val 219078.2861, Test 225180.9960
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 49: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0157, Val -0.0087, Test 0.0044
          RMSE             : Train 225530.0364, Val 219657.2453, Test 225475.2145
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 50: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0157, Val -0.0053, Test 0.0074
          RMSE             : Train 225519.3501, Val 219279.7387, Test 225131.4957
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 51: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0158, Val -0.0030, Test 0.0074
          RMSE             : Train 225509.9716, Val 219027.7572, Test 225136.2876
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 52: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0160, Val -0.0071, Test 0.0058
          RMSE             : Train 225488.7937, Val 219481.4420, Test 225323.5401
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 53: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0146, Val -0.0068, Test 0.0069
          RMSE             : Train 225648.8281, Val 219447.8778, Test 225191.2205
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 54: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0160, Val -0.0030, Test 0.0068
          RMSE             : Train 225493.0818, Val 219030.2327, Test 225207.0157
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 55: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0076, Test 0.0058
          RMSE             : Train 225427.3011, Val 219532.8528, Test 225314.1898
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 56: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0162, Val -0.0030, Test 0.0091
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.68it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.51it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.21it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.21it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.79it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.81it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.64it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 39.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 15.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.90it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.97it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.40it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.94it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.92it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.94it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.51it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.32it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.45it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.55it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.61it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.11it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.88it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.87it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.64it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.50it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 15.63it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.19it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  7.08it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.83it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.70it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.88it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.85it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 18.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.39it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.35it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.76it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.64it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.38it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.26it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.77it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.80it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.55it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.74it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.78it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.39it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.94it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 17.82it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.45it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.18it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.71it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 25.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 24.70it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.56it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.25it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.07it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.33it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.64it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.71it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.01it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.18it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.25it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.88it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.88it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.36it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.02it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.37it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.17it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.72it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.47it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.43it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.37it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 11.92it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.79it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.14it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.27it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.75it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.08it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.89it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.19it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.39it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 14.85it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.67it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.80it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 33.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 33.35it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.38it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.76it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.82it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.88it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.77it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.68it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.48it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.58it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 19.24it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.97it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.12it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 11.59it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.32it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.24it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.36it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.65it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.35it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.72it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.20it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.72it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.12it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 19.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.73it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.85it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.83it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.19it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.97it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.55it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.63it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 16.66it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.49it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 18.56it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.25it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.25it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.11it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.92it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 19.46it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.22it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.66it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.47it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 26.71it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.58it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 18.30it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.31it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.04it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.27it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.08it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.48it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.80it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.11it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.87it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.04it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.95it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.40it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.07it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.07it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.95it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.64it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.49it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.76it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.72it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.43it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 15.48it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.85it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.87it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.01it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.39it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.81it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 17.48it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.95it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.85it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.58it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.64it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.26it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.70it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.36it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.44it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.48it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.10it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.73it/s]
          RMSE             : Train 225472.1545, Val 219029.1154, Test 224941.2379
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 57: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0053, Test 0.0077
          RMSE             : Train 225336.5111, Val 219283.8370, Test 225108.2131
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 58: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0091, Test 0.0040
          RMSE             : Train 225440.4202, Val 219692.6261, Test 225522.4030
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 59: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0159, Val -0.0034, Test 0.0085
          RMSE             : Train 225503.0594, Val 219073.0696, Test 225016.4013
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 60: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0062, Test 0.0068
          RMSE             : Train 225367.9948, Val 219379.9500, Test 225204.5236
Best:
          R2_Score         : Train 0.0144, Val -0.0021, Test 0.0089
          RMSE             : Train 225676.7052, Val 218939.4891, Test 224971.4977
Epoch 61: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 62: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0158, Val -0.0064, Test 0.0068
          RMSE             : Train 225511.9062, Val 219404.9808, Test 225202.5647
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 63: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0044, Test 0.0085
          RMSE             : Train 225388.9400, Val 219186.5119, Test 225013.0127
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 64: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0092, Test 0.0038
          RMSE             : Train 225393.2977, Val 219710.1183, Test 225541.6670
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 65: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0172, Val -0.0043, Test 0.0077
          RMSE             : Train 225357.1711, Val 219174.0864, Test 225100.4179
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 66: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0054, Test 0.0035
          RMSE             : Train 225403.7739, Val 219295.8264, Test 225574.7788
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 67: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0163, Val -0.0042, Test 0.0079
          RMSE             : Train 225455.6450, Val 219167.2714, Test 225085.0401
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 68: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0162, Val -0.0037, Test 0.0083
          RMSE             : Train 225468.9309, Val 219103.9026, Test 225038.6474
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 69: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0037, Test 0.0082
          RMSE             : Train 225405.1465, Val 219104.4585, Test 225043.9474
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 70: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0052, Test 0.0084
          RMSE             : Train 225408.4206, Val 219270.8977, Test 225024.4434
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 71: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0048, Test 0.0070
          RMSE             : Train 225439.6091, Val 219228.9802, Test 225177.5189
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 72: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0043, Test 0.0070
          RMSE             : Train 225306.2598, Val 219169.9598, Test 225182.8197
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 73: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0172, Val -0.0045, Test 0.0067
          RMSE             : Train 225353.7028, Val 219199.9343, Test 225212.2928
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 74: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0030, Test 0.0084
          RMSE             : Train 225421.5748, Val 219029.0680, Test 225018.6515
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 75: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0034, Test 0.0068
          RMSE             : Train 225383.4306, Val 219077.2786, Test 225204.6282
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 76: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0161, Val -0.0094, Test 0.0050
          RMSE             : Train 225474.7827, Val 219730.1201, Test 225413.6900
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 77: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0040, Test 0.0077
          RMSE             : Train 225315.5622, Val 219139.0035, Test 225101.0473
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 78: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0066, Test 0.0060
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.59it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.46it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.40it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.50it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.96it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.88it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.67it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.24it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.10it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.89it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.04it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.18it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.17it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.97it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.32it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.82it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 17.81it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.05it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 19.24it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.71it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.73it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.68it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.51it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.68it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.44it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.39it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.85it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.97it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.18it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.49it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.78it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.31it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.02it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.39it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.03it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.38it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.20it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.56it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.68it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.12it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.76it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.22it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.91it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.37it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.47it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.72it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.26it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.89it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.91it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.56it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 19.59it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.18it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.16it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.92it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.66it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.96it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.80it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.93it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.28it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.07it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.33it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.01it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.92it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.45it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.42it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.84it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 19.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.18it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.85it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.91it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.66it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 18.03it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.59it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.14it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.94it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.03it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 22.40it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.85it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 20.89it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 17.82it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.59it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.77it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.18it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.33it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.01it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 15.84it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.37it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.67it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.92it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.12it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 10.55it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.19it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 19.36it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.07it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.07it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.64it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.83it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.35it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 34.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 34.81it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.51it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.37it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.88it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 19.77it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.25it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 15.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.12it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 18.93it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.39it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 19.80it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.53it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.86it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 35.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.71it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.22it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.26it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.05it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.36it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 15.90it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.04it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.89it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.25it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 30.82it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.88it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.03it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.47it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  8.44it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.21it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.04it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.67it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 26.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 27.88it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.81it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.34it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 21.30it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.74it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 19.39it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.84it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.94it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 20.08it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 17.32it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 17.28it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.74it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.16it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.41it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 34.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.96it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.90it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.53it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.91it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.37it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.56it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.86it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 21.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.15it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.63it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 16.73it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.13it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.08it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.63it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.17it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.21it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.33it/s]
          RMSE             : Train 225286.5184, Val 219430.4170, Test 225298.5548
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 79: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0067, Test 0.0080
          RMSE             : Train 225309.1966, Val 219438.0042, Test 225069.1678
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 80: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0049, Test 0.0044
          RMSE             : Train 225295.7475, Val 219245.0177, Test 225471.8240
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 81: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0034, Test 0.0071
          RMSE             : Train 225380.4373, Val 219071.3500, Test 225168.2453
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 82: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0054, Test 0.0082
          RMSE             : Train 225359.1670, Val 219290.6013, Test 225046.9174
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 83: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0069, Test 0.0056
          RMSE             : Train 225295.6158, Val 219459.9893, Test 225336.2427
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 84: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0163, Val -0.0031, Test 0.0062
          RMSE             : Train 225458.3800, Val 219049.0187, Test 225277.6397
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 85: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0060, Test 0.0066
          RMSE             : Train 225341.5610, Val 219364.9150, Test 225230.5698
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 86: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0035, Test 0.0078
          RMSE             : Train 225381.5793, Val 219086.8493, Test 225089.0077
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 87: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0039, Test 0.0064
          RMSE             : Train 225384.9701, Val 219129.2877, Test 225245.7735
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 88: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0060, Test 0.0063
          RMSE             : Train 225290.5829, Val 219361.8743, Test 225266.4458
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 89: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0054, Test 0.0069
          RMSE             : Train 225367.3726, Val 219299.5067, Test 225192.8353
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 90: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0041, Test 0.0047
          RMSE             : Train 225311.4648, Val 219148.4216, Test 225439.0479
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 91: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0046, Test 0.0055
          RMSE             : Train 225411.6186, Val 219204.6328, Test 225354.3725
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 92: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0181, Val -0.0101, Test 0.0036
          RMSE             : Train 225243.9747, Val 219804.0123, Test 225567.3514
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 93: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0050, Test 0.0046
          RMSE             : Train 225285.4911, Val 219253.4805, Test 225449.8857
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 94: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0030, Test 0.0069
          RMSE             : Train 225280.4752, Val 219037.9380, Test 225194.8137
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 95: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0043, Test 0.0077
          RMSE             : Train 225279.8328, Val 219174.4344, Test 225100.3611
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 96: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0045, Test 0.0052
          RMSE             : Train 225237.4373, Val 219192.0256, Test 225386.9266
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 97: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0053, Test 0.0066
          RMSE             : Train 225314.5724, Val 219284.4636, Test 225223.2908
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 98: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0184, Val -0.0023, Test 0.0082
          RMSE             : Train 225214.4364, Val 218955.0001, Test 225043.8790
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 99: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0080, Test 0.0056
          RMSE             : Train 225317.2813, Val 219574.3957, Test 225335.5952
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
Epoch 100: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0152, Val -0.0095, Test 0.0001

          RMSE             : Train 225586.5943, Val 219743.1089, Test 225963.8669
Best:
          R2_Score         : Train 0.0168, Val -0.0019, Test 0.0078
          RMSE             : Train 225404.2406, Val 218908.9569, Test 225093.2717
