  0%|          | 0/54068 [00:00<?, ?it/s]  2%|▏         | 1110/54068 [00:00<00:04, 11090.10it/s]  4%|▍         | 2220/54068 [00:00<00:05, 9453.39it/s]   7%|▋         | 3524/54068 [00:00<00:04, 10948.39it/s]  9%|▉         | 4833/54068 [00:00<00:04, 11745.64it/s] 11%|█▏        | 6128/54068 [00:00<00:03, 12162.03it/s] 14%|█▍        | 7444/54068 [00:00<00:03, 12492.55it/s] 17%|█▋        | 8954/54068 [00:00<00:03, 13329.22it/s] 19%|█▉        | 10295/54068 [00:00<00:03, 12162.47it/s] 21%|██▏       | 11535/54068 [00:01<00:03, 10898.98it/s] 24%|██▎       | 12838/54068 [00:01<00:03, 11472.62it/s] 26%|██▋       | 14277/54068 [00:01<00:03, 12282.84it/s] 29%|██▊       | 15536/54068 [00:01<00:03, 12340.91it/s] 31%|███▏      | 16971/54068 [00:01<00:02, 12918.04it/s] 34%|███▍      | 18281/54068 [00:01<00:02, 12769.09it/s] 37%|███▋      | 19910/54068 [00:01<00:02, 13791.94it/s] 41%|████      | 21932/54068 [00:01<00:02, 15678.70it/s] 43%|████▎     | 23514/54068 [00:01<00:02, 15004.89it/s] 46%|████▋     | 25030/54068 [00:01<00:02, 13101.84it/s] 49%|████▉     | 26391/54068 [00:02<00:02, 11367.45it/s] 51%|█████     | 27595/54068 [00:02<00:02, 10492.55it/s] 53%|█████▎    | 28874/54068 [00:02<00:02, 11044.82it/s] 56%|█████▌    | 30028/54068 [00:02<00:02, 10915.59it/s] 58%|█████▊    | 31319/54068 [00:02<00:01, 11438.77it/s] 60%|██████    | 32654/54068 [00:02<00:01, 11959.72it/s] 63%|██████▎   | 34231/54068 [00:02<00:01, 13029.13it/s] 66%|██████▌   | 35624/54068 [00:02<00:01, 13285.50it/s] 69%|██████▉   | 37211/54068 [00:02<00:01, 14035.23it/s] 72%|███████▏  | 38758/54068 [00:03<00:01, 14454.57it/s] 74%|███████▍  | 40216/54068 [00:03<00:00, 13957.59it/s] 77%|███████▋  | 41624/54068 [00:03<00:00, 13243.38it/s] 79%|███████▉  | 42963/54068 [00:03<00:00, 12602.96it/s] 82%|████████▏ | 44237/54068 [00:03<00:00, 12295.15it/s] 84%|████████▍ | 45558/54068 [00:03<00:00, 12546.46it/s] 87%|████████▋ | 46821/54068 [00:04<00:01, 6438.16it/s]  88%|████████▊ | 47792/54068 [00:04<00:01, 5907.63it/s] 90%|████████▉ | 48612/54068 [00:04<00:00, 5812.27it/s] 92%|█████████▏| 49583/54068 [00:04<00:00, 6530.81it/s] 93%|█████████▎| 50552/54068 [00:04<00:00, 7187.76it/s] 95%|█████████▌| 51466/54068 [00:04<00:00, 7632.10it/s] 97%|█████████▋| 52340/54068 [00:04<00:00, 7479.90it/s] 98%|█████████▊| 53235/54068 [00:04<00:00, 7845.95it/s]100%|██████████| 54068/54068 [00:05<00:00, 10435.55it/s]
  0%|          | 0/7725 [00:00<?, ?it/s] 33%|███▎      | 2567/7725 [00:00<00:00, 25659.38it/s] 66%|██████▋   | 5133/7725 [00:00<00:00, 24871.67it/s]100%|██████████| 7725/7725 [00:00<00:00, 26117.60it/s]
  0%|          | 0/15449 [00:00<?, ?it/s] 11%|█         | 1641/15449 [00:00<00:00, 15847.93it/s] 22%|██▏       | 3345/15449 [00:00<00:00, 16533.97it/s] 32%|███▏      | 5000/15449 [00:00<00:00, 16439.79it/s] 43%|████▎     | 6645/15449 [00:00<00:00, 10433.31it/s] 53%|█████▎    | 8147/15449 [00:00<00:00, 11632.64it/s] 66%|██████▌   | 10196/15449 [00:00<00:00, 14043.50it/s] 84%|████████▍ | 13048/15449 [00:00<00:00, 18095.72it/s]100%|██████████| 15449/15449 [00:00<00:00, 16558.01it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.68it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.47it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.75it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.21it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  7.06it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.66it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.16it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.61it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.40it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.45it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.46it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.18it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.17it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.85it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.47it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.01it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.77it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.68it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.96it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.13it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.28it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.03it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.07it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.72it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.85it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.63it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.60it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.58it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.33it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.86it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.34it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.06it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.24it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.78it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.67it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.36it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.44it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.57it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.92it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.76it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.99it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Calculating noise scale
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
Preparing time (sec): 26
Loading data
Prepare for training
Start training
================================================================================
                                    Kernel Shape Output Shape  Params  \
Layer                                                                   
0_local_models.0.fc_layers.Linear_0    [90, 200]  [4096, 200]   18200   
1_local_models.0.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
2_local_models.1.fc_layers.Linear_0   [156, 200]  [4096, 200]   31400   
3_local_models.1.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
4_agg_model.fc_layers.Linear_0        [200, 400]  [4096, 400]   80400   
5_agg_model.fc_layers.Linear_1          [400, 1]    [4096, 1]     401   

                                     Mult-Adds  
Layer                                           
0_local_models.0.fc_layers.Linear_0      18000  
1_local_models.0.fc_layers.Linear_1      20000  
2_local_models.1.fc_layers.Linear_0      31200  
3_local_models.1.fc_layers.Linear_1      20000  
4_agg_model.fc_layers.Linear_0           80000  
5_agg_model.fc_layers.Linear_1             400  
--------------------------------------------------------------------------------
                      Totals
Total params          170601
Trainable params      170601
Non-trainable params       0
Mult-Adds             169600
================================================================================
n_classes=2
task=regression
model_name=company_top1sim_2022-08-10-19-24-34
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:7
test_batch_size=4096
train_batch_size=4096
learning_rate=0.001
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_top1sim_2022-08-10-19-24-34.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['rmse', 'r2_score', 'mae']
metrics_f=[<metric.rmse.RMSE object at 0x7fdadba8bdf0>, <metric.r2_score.R2Score object at 0x7fdadba8b250>, <metric.mae.MAE object at 0x7fdadba8bac0>]
hidden_sizes=[200, 100]
model=SplitNN(
  (agg_model): MLP(
    (fc_layers): ModuleList(
      (0): Linear(in_features=200, out_features=400, bias=True)
      (1): Linear(in_features=400, out_features=1, bias=True)
    )
  )
  (local_models): ModuleList(
    (0): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=90, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
    (1): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=156, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fdadba8ba30>
dataset_type=real
drop_key=True
num_common_features=1
tree_radius=0.01
tree_leaf_size=1000
knn_k=50
grid_min=-10.0
grid_max=10.0
grid_width=1.5
sim_scaler=StandardScaler()
filter_top_k=None
link_n_jobs=1
psig_p=4
sim_leak_p=1.0
link_threshold_t=0.1
link_epsilon=0.1
n_hash_lsh=50
edit_distance_threshold=10
n_hash_func=50
collision_rate=0.01
qgram_q=4
link_delta=0.01
feature_wise_sim=False
blocking_method=knn_str
center_threshold=0.5
n_clusters=100
local_hidden_sizes=[[200], [200]]
cut_dims=[100, 100]
agg_hidden_sizes=[400]
scale_analysis=None
data1_shape=(77225, 91)
data2_shape=(220583, 157)
Epoch 1: Loss:            : Train 0.0000, Val 0.1711, Test 0.1709
          RMSE             : Train 1583892.2026, Val 1520022.6544, Test 1519075.5341
          R2_Score         : Train -47.5501, Val -47.3039, Test -44.1897
          MAE              : Train 1566822.9515, Val 1501995.6095, Test 1501284.1184
Best:
          RMSE             : Train 1583892.2026, Val 1520022.6544, Test 1519075.5341
          R2_Score         : Train -47.5501, Val -47.3039, Test -44.1897
          MAE              : Train 1566822.9515, Val 1501995.6095, Test 1501284.1184
Epoch 2: Loss:            : Train 0.0000, Val 0.1433, Test 0.1432
          RMSE             : Train 1460291.5961, Val 1391178.9455, Test 1390828.7766
          R2_Score         : Train -40.2685, Val -39.4621, Test -36.8816
          MAE              : Train 1439828.5779, Val 1368706.9208, Test 1368978.6844
Best:
          RMSE             : Train 1460291.5961, Val 1391178.9455, Test 1390828.7766
          R2_Score         : Train -40.2685, Val -39.4621, Test -36.8816
          MAE              : Train 1439828.5779, Val 1368706.9208, Test 1368978.6844
Epoch 3: Loss:            : Train 0.0000, Val 0.1153, Test 0.1153
          RMSE             : Train 1325611.7898, Val 1247991.3400, Test 1247973.8228
          R2_Score         : Train -33.0073, Val -31.5616, Test -29.4994
          MAE              : Train 1299904.3623, Val 1219106.8327, Test 1219949.3677
Best:
          RMSE             : Train 1325611.7898, Val 1247991.3400, Test 1247973.8228
          R2_Score         : Train -33.0073, Val -31.5616, Test -29.4994
          MAE              : Train 1299904.3623, Val 1219106.8327, Test 1219949.3677
Epoch 4: Loss:            : Train 0.0000, Val 0.0880, Test 0.0880
          RMSE             : Train 1175989.0640, Val 1090382.8270, Test 1090570.2403
          R2_Score         : Train -25.7637, Val -23.8565, Test -22.2910
          MAE              : Train 1142793.4935, Val 1053615.9425, Test 1053982.9899
Best:
          RMSE             : Train 1175989.0640, Val 1090382.8270, Test 1090570.2403
          R2_Score         : Train -25.7637, Val -23.8565, Test -22.2910
          MAE              : Train 1142793.4935, Val 1053615.9425, Test 1053982.9899
Epoch 5: Loss:            : Train 0.0000, Val 0.0631, Test 0.0631

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.37it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.39it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.56it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.36it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.13it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.63it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.59it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.74it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.74it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.04it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.50it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.27it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.10it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.55it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.96it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.15it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.51it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.93it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.64it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.13it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.20it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.78it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.83it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.00it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.00it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.95it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.24it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.22it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.77it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.25it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.58it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.56it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.98it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.90it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.26it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.48it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.20it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.57it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.04it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.45it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.23it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.20it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.91it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.38it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.20it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.28it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.28it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.06it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.88it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.53it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.76it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.91it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.36it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.86it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.76it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.96it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.70it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.22it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.67it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.05it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.78it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.18it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.07it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.67it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.54it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.81it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.45it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.29it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.45it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.47it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.93it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.20it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.63it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.60it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.01it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.62it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.92it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.11it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.04it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.95it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.60it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.46it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.76it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.53it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.19it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.70it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.11it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.87it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.02it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.90it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.47it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.03it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.97it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.97it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.26it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.31it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.91it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.50it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.49it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.92it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.43it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.49it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.23it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.44it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.38it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.86it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.36it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.70it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  4.85it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.23it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.60it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.39it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.84it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.65it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.88it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.17it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.81it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.98it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.89it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.46it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.65it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.23it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.15it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.82it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.12it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.50it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.41it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.90it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.69it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.66it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.34it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.85it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.92it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.59it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.44it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.36it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.27it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.95it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.11it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.96it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.20it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.98it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.03it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.35it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.58it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.54it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.01it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.24it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.88it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.25it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.82it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.63it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.11it/s]          RMSE             : Train 1013797.4339, Val 922905.3907, Test 923190.5435
          R2_Score         : Train -18.8903, Val -16.8072, Test -15.6903
          MAE              : Train 971026.6003, Val 877111.2484, Test 876812.1846
Best:
          RMSE             : Train 1013797.4339, Val 922905.3907, Test 923190.5435
          R2_Score         : Train -18.8903, Val -16.8072, Test -15.6903
          MAE              : Train 971026.6003, Val 877111.2484, Test 876812.1846
Epoch 6: Loss:            : Train 0.0000, Val 0.0421, Test 0.0421
          RMSE             : Train 845112.7478, Val 753561.8837, Test 753981.8265
          R2_Score         : Train -12.8219, Val -10.8719, Test -10.1328
          MAE              : Train 792716.5906, Val 699316.9784, Test 699059.2050
Best:
          RMSE             : Train 845112.7478, Val 753561.8837, Test 753981.8265
          R2_Score         : Train -12.8219, Val -10.8719, Test -10.1328
          MAE              : Train 792716.5906, Val 699316.9784, Test 699059.2050
Epoch 7: Loss:            : Train 0.0000, Val 0.0260, Test 0.0261
          RMSE             : Train 679508.6850, Val 592742.3281, Test 593569.8983
          R2_Score         : Train -7.9357, Val -6.3454, Test -5.8996
          MAE              : Train 619590.6117, Val 532952.1926, Test 533088.7132
Best:
          RMSE             : Train 679508.6850, Val 592742.3281, Test 593569.8983
          R2_Score         : Train -7.9357, Val -6.3454, Test -5.8996
          MAE              : Train 619590.6117, Val 532952.1926, Test 533088.7132
Epoch 8: Loss:            : Train 0.0000, Val 0.0151, Test 0.0152
          RMSE             : Train 527785.2189, Val 451308.3881, Test 453076.4709
          R2_Score         : Train -4.3908, Val -3.2582, Test -3.0200
          MAE              : Train 464420.9252, Val 390117.9908, Test 390432.8746
Best:
          RMSE             : Train 527785.2189, Val 451308.3881, Test 453076.4709
          R2_Score         : Train -4.3908, Val -3.2582, Test -3.0200
          MAE              : Train 464420.9252, Val 390117.9908, Test 390432.8746
Epoch 9: Loss:            : Train 0.0000, Val 0.0086, Test 0.0087
          RMSE             : Train 400732.7168, Val 339867.4558, Test 343357.3846
          R2_Score         : Train -2.1078, Val -1.4149, Test -1.3087
          MAE              : Train 336381.4722, Val 278497.3956, Test 278768.3065
Best:
          RMSE             : Train 400732.7168, Val 339867.4558, Test 343357.3846
          R2_Score         : Train -2.1078, Val -1.4149, Test -1.3087
          MAE              : Train 336381.4722, Val 278497.3956, Test 278768.3065
Epoch 10: Loss:            : Train 0.0000, Val 0.0053, Test 0.0055
          RMSE             : Train 308787.8341, Val 266353.3356, Test 272103.0513
          R2_Score         : Train -0.8453, Val -0.4832, Test -0.4499
          MAE              : Train 241352.3533, Val 200602.8097, Test 200977.2508
Best:
          RMSE             : Train 308787.8341, Val 266353.3356, Test 272103.0513
          R2_Score         : Train -0.8453, Val -0.4832, Test -0.4499
          MAE              : Train 241352.3533, Val 200602.8097, Test 200977.2508
Epoch 11: Loss:            : Train 0.0000, Val 0.0039, Test 0.0042
          RMSE             : Train 255542.5767, Val 230201.6858, Test 237867.3623
          R2_Score         : Train -0.2638, Val -0.1079, Test -0.1080
          MAE              : Train 178683.0806, Val 152940.8357, Test 153507.4365
Best:
          RMSE             : Train 255542.5767, Val 230201.6858, Test 237867.3623
          R2_Score         : Train -0.2638, Val -0.1079, Test -0.1080
          MAE              : Train 178683.0806, Val 152940.8357, Test 153507.4365
Epoch 12: Loss:            : Train 0.0000, Val 0.0035, Test 0.0038
          RMSE             : Train 233587.3861, Val 218223.4278, Test 226758.0816
          R2_Score         : Train -0.0559, Val 0.0044, Test -0.0069
          MAE              : Train 142641.4639, Val 128132.2468, Test 129357.2532
Best:
          RMSE             : Train 233587.3861, Val 218223.4278, Test 226758.0816
          R2_Score         : Train -0.0559, Val 0.0044, Test -0.0069
          MAE              : Train 142641.4639, Val 128132.2468, Test 129357.2532
Epoch 13: Loss:            : Train 0.0000, Val 0.0031, Test 0.0034
          RMSE             : Train 223967.1163, Val 204331.6389, Test 212625.1335
          R2_Score         : Train 0.0292, Val 0.1271, Test 0.1147
          MAE              : Train 126451.8347, Val 119980.8664, Test 121008.2533
Best:
          RMSE             : Train 223967.1163, Val 204331.6389, Test 212625.1335
          R2_Score         : Train 0.0292, Val 0.1271, Test 0.1147
          MAE              : Train 126451.8347, Val 119980.8664, Test 121008.2533
Epoch 14: Loss:            : Train 0.0000, Val 0.0025, Test 0.0027
          RMSE             : Train 205907.5642, Val 184887.4631, Test 191663.9052
          R2_Score         : Train 0.1795, Val 0.2853, Test 0.2806
          MAE              : Train 121193.2286, Val 117968.4226, Test 118593.8272
Best:
          RMSE             : Train 205907.5642, Val 184887.4631, Test 191663.9052
          R2_Score         : Train 0.1795, Val 0.2853, Test 0.2806
          MAE              : Train 121193.2286, Val 117968.4226, Test 118593.8272
Epoch 15: Loss:            : Train 0.0000, Val 0.0020, Test 0.0021
          RMSE             : Train 184310.4728, Val 164373.6694, Test 168722.8646
          R2_Score         : Train 0.3426, Val 0.4351, Test 0.4425
          MAE              : Train 118248.6338, Val 113001.9941, Test 113124.0713
Best:
          RMSE             : Train 184310.4728, Val 164373.6694, Test 168722.8646
          R2_Score         : Train 0.3426, Val 0.4351, Test 0.4425
          MAE              : Train 118248.6338, Val 113001.9941, Test 113124.0713
Epoch 16: Loss:            : Train 0.0000, Val 0.0015, Test 0.0015
          RMSE             : Train 160659.0035, Val 141609.8437, Test 143586.4681
          R2_Score         : Train 0.5005, Val 0.5808, Test 0.5963
          MAE              : Train 108742.6076, Val 99002.9014, Test 99034.3759
Best:
          RMSE             : Train 160659.0035, Val 141609.8437, Test 143586.4681
          R2_Score         : Train 0.5005, Val 0.5808, Test 0.5963
          MAE              : Train 108742.6076, Val 99002.9014, Test 99034.3759
Epoch 17: Loss:            : Train 0.0000, Val 0.0011, Test 0.0011
          RMSE             : Train 136115.6781, Val 120944.0579, Test 120732.1763
          R2_Score         : Train 0.6414, Val 0.6942, Test 0.7146
          MAE              : Train 93066.8562, Val 82825.8021, Test 82436.7594
Best:
          RMSE             : Train 136115.6781, Val 120944.0579, Test 120732.1763
          R2_Score         : Train 0.6414, Val 0.6942, Test 0.7146
          MAE              : Train 93066.8562, Val 82825.8021, Test 82436.7594
Epoch 18: Loss:            : Train 0.0000, Val 0.0008, Test 0.0008
          RMSE             : Train 115932.1155, Val 106081.1769, Test 104415.5630
          R2_Score         : Train 0.7399, Val 0.7647, Test 0.7865
          MAE              : Train 76748.0193, Val 67918.2638, Test 67144.5993
Best:
          RMSE             : Train 115932.1155, Val 106081.1769, Test 104415.5630
          R2_Score         : Train 0.7399, Val 0.7647, Test 0.7865
          MAE              : Train 76748.0193, Val 67918.2638, Test 67144.5993
Epoch 19: Loss:            : Train 0.0000, Val 0.0007, Test 0.0006
          RMSE             : Train 101599.9273, Val 94325.6123, Test 93059.4784
          R2_Score         : Train 0.8002, Val 0.8140, Test 0.8304
          MAE              : Train 63266.8309, Val 58196.7715, Test 57386.5203
Best:
          RMSE             : Train 101599.9273, Val 94325.6123, Test 93059.4784
          R2_Score         : Train 0.8002, Val 0.8140, Test 0.8304
          MAE              : Train 63266.8309, Val 58196.7715, Test 57386.5203
Epoch 20: Loss:            : Train 0.0000, Val 0.0005, Test 0.0005
          RMSE             : Train 90072.9115, Val 84392.5037, Test 84361.6346

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.29it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.22it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.78it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.05it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  5.74it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.59it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.69it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.23it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.33it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.34it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.58it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.11it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.44it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.49it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.74it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.48it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.83it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.95it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.69it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.63it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.85it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.95it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.98it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.50it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.82it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.39it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.84it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.02it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.63it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.75it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.30it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.29it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.91it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.78it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.04it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.82it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.11it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.16it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.31it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.35it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.26it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.00it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.10it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.25it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.17it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.40it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.02it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.32it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.86it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.66it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.43it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.76it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.03it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.37it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.37it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.42it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.87it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.36it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.22it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.83it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.02it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.43it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.96it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  9.08it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 19.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.27it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.93it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.77it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.63it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.90it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.96it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.86it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.42it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.21it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.73it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.10it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.30it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.99it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.34it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.54it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.24it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.31it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.10it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.34it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.50it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.08it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.91it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.33it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.12it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.83it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.65it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.06it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.86it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.75it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.50it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.21it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.53it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.89it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.42it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.98it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:08,  1.46it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.50it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.82it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.43it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.87it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.63it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.28it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.05it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.31it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.40it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.92it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.02it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.26it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.86it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.64it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.16it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.83it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.55it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  7.05it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  9.09it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.42it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.95it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.88it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.71it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.59it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.46it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.82it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.59it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.86it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.58it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.46it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.80it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.48it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.58it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.04it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.05it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.22it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.83it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.61it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.26it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  2.79it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.42it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.23it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.55it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.46it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.82it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.25it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.11it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.90it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.41it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.29it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.88it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.33it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.11it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.90it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.89it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.70it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.69it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  3.61it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.94it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.73it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.62it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.79it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.39it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.85it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.50it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.90it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.78it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.49it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.06it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.93it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.68it/s]          R2_Score         : Train 0.8430, Val 0.8511, Test 0.8606
          MAE              : Train 55986.8846, Val 53976.9490, Test 53335.5614
Best:
          RMSE             : Train 90072.9115, Val 84392.5037, Test 84361.6346
          R2_Score         : Train 0.8430, Val 0.8511, Test 0.8606
          MAE              : Train 55986.8846, Val 53976.9490, Test 53335.5614
Epoch 21: Loss:            : Train 0.0000, Val 0.0004, Test 0.0004
          RMSE             : Train 81618.0389, Val 76502.3437, Test 77559.6678
          R2_Score         : Train 0.8711, Val 0.8776, Test 0.8822
          MAE              : Train 52055.6002, Val 48707.6125, Test 48454.8039
Best:
          RMSE             : Train 81618.0389, Val 76502.3437, Test 77559.6678
          R2_Score         : Train 0.8711, Val 0.8776, Test 0.8822
          MAE              : Train 52055.6002, Val 48707.6125, Test 48454.8039
Epoch 22: Loss:            : Train 0.0000, Val 0.0004, Test 0.0004
          RMSE             : Train 74676.4152, Val 70103.5490, Test 71541.9321
          R2_Score         : Train 0.8921, Val 0.8973, Test 0.8998
          MAE              : Train 46157.9506, Val 43187.2659, Test 43092.2743
Best:
          RMSE             : Train 74676.4152, Val 70103.5490, Test 71541.9321
          R2_Score         : Train 0.8921, Val 0.8973, Test 0.8998
          MAE              : Train 46157.9506, Val 43187.2659, Test 43092.2743
Epoch 23: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 69341.8383, Val 65195.8867, Test 67230.5549
          R2_Score         : Train 0.9069, Val 0.9111, Test 0.9115
          MAE              : Train 42020.8875, Val 40265.1919, Test 40155.5084
Best:
          RMSE             : Train 69341.8383, Val 65195.8867, Test 67230.5549
          R2_Score         : Train 0.9069, Val 0.9111, Test 0.9115
          MAE              : Train 42020.8875, Val 40265.1919, Test 40155.5084
Epoch 24: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 65331.4239, Val 61920.3587, Test 63684.2827
          R2_Score         : Train 0.9174, Val 0.9198, Test 0.9206
          MAE              : Train 38673.1250, Val 36489.0983, Test 36409.3782
Best:
          RMSE             : Train 65331.4239, Val 61920.3587, Test 63684.2827
          R2_Score         : Train 0.9174, Val 0.9198, Test 0.9206
          MAE              : Train 38673.1250, Val 36489.0983, Test 36409.3782
Epoch 25: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 61833.1984, Val 59023.5353, Test 61071.2792
          R2_Score         : Train 0.9260, Val 0.9272, Test 0.9270
          MAE              : Train 35796.0062, Val 34168.7987, Test 34205.4555
Best:
          RMSE             : Train 61833.1984, Val 59023.5353, Test 61071.2792
          R2_Score         : Train 0.9260, Val 0.9272, Test 0.9270
          MAE              : Train 35796.0062, Val 34168.7987, Test 34205.4555
Epoch 26: Loss:            : Train 0.0000, Val 0.0002, Test 0.0003
          RMSE             : Train 59391.2761, Val 57400.4468, Test 59085.3226
          R2_Score         : Train 0.9317, Val 0.9311, Test 0.9316
          MAE              : Train 33928.5996, Val 32790.5750, Test 32724.1218
Best:
          RMSE             : Train 59391.2761, Val 57400.4468, Test 59085.3226
          R2_Score         : Train 0.9317, Val 0.9311, Test 0.9316
          MAE              : Train 33928.5996, Val 32790.5750, Test 32724.1218
Epoch 27: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 57678.5281, Val 56307.7912, Test 57522.5317
          R2_Score         : Train 0.9356, Val 0.9337, Test 0.9352
          MAE              : Train 32683.9050, Val 31904.6325, Test 31714.0855
Best:
          RMSE             : Train 57678.5281, Val 56307.7912, Test 57522.5317
          R2_Score         : Train 0.9356, Val 0.9337, Test 0.9352
          MAE              : Train 32683.9050, Val 31904.6325, Test 31714.0855
Epoch 28: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 55704.8466, Val 54553.5433, Test 55844.3346
          R2_Score         : Train 0.9399, Val 0.9378, Test 0.9389
          MAE              : Train 31469.5680, Val 30538.8978, Test 30407.0386
Best:
          RMSE             : Train 55704.8466, Val 54553.5433, Test 55844.3346
          R2_Score         : Train 0.9399, Val 0.9378, Test 0.9389
          MAE              : Train 31469.5680, Val 30538.8978, Test 30407.0386
Epoch 29: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 54138.3971, Val 53641.2066, Test 54312.5706
          R2_Score         : Train 0.9433, Val 0.9398, Test 0.9422
          MAE              : Train 30362.5217, Val 29640.3722, Test 29423.6314
Best:
          RMSE             : Train 54138.3971, Val 53641.2066, Test 54312.5706
          R2_Score         : Train 0.9433, Val 0.9398, Test 0.9422
          MAE              : Train 30362.5217, Val 29640.3722, Test 29423.6314
Epoch 30: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 52660.9964, Val 52668.3929, Test 53177.7733
          R2_Score         : Train 0.9463, Val 0.9420, Test 0.9446
          MAE              : Train 29383.2059, Val 29030.9082, Test 28817.9347
Best:
          RMSE             : Train 52660.9964, Val 52668.3929, Test 53177.7733
          R2_Score         : Train 0.9463, Val 0.9420, Test 0.9446
          MAE              : Train 29383.2059, Val 29030.9082, Test 28817.9347
Epoch 31: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 51656.1577, Val 52227.8501, Test 52544.2360
          R2_Score         : Train 0.9484, Val 0.9430, Test 0.9459
          MAE              : Train 28770.7275, Val 28246.6242, Test 28073.7099
Best:
          RMSE             : Train 51656.1577, Val 52227.8501, Test 52544.2360
          R2_Score         : Train 0.9484, Val 0.9430, Test 0.9459
          MAE              : Train 28770.7275, Val 28246.6242, Test 28073.7099
Epoch 32: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 50541.1601, Val 51633.3562, Test 51952.3520
          R2_Score         : Train 0.9506, Val 0.9443, Test 0.9471
          MAE              : Train 28156.4187, Val 28118.0692, Test 27884.4028
Best:
          RMSE             : Train 50541.1601, Val 51633.3562, Test 51952.3520
          R2_Score         : Train 0.9506, Val 0.9443, Test 0.9471
          MAE              : Train 28156.4187, Val 28118.0692, Test 27884.4028
Epoch 33: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 49563.4534, Val 50583.7968, Test 50807.2980
          R2_Score         : Train 0.9525, Val 0.9465, Test 0.9494
          MAE              : Train 27661.0461, Val 27348.2538, Test 27156.5059
Best:
          RMSE             : Train 49563.4534, Val 50583.7968, Test 50807.2980
          R2_Score         : Train 0.9525, Val 0.9465, Test 0.9494
          MAE              : Train 27661.0461, Val 27348.2538, Test 27156.5059
Epoch 34: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 48607.4493, Val 50890.0758, Test 50323.2185
          R2_Score         : Train 0.9543, Val 0.9459, Test 0.9504
          MAE              : Train 27149.1408, Val 27602.2535, Test 27159.0002
Best:
          RMSE             : Train 49563.4534, Val 50583.7968, Test 50807.2980
          R2_Score         : Train 0.9525, Val 0.9465, Test 0.9494
          MAE              : Train 27661.0461, Val 27348.2538, Test 27156.5059
Epoch 35: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 47719.1862, Val 49739.3037, Test 49296.1283
          R2_Score         : Train 0.9559, Val 0.9483, Test 0.9524
          MAE              : Train 26572.7649, Val 26661.5229, Test 26437.7859
Best:
          RMSE             : Train 47719.1862, Val 49739.3037, Test 49296.1283
          R2_Score         : Train 0.9559, Val 0.9483, Test 0.9524

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.88it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.67it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.49it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.65it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.80it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.86it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.33it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.10it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.13it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.65it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.17it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.84it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.69it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.40it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.36it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.51it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.45it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.09it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.45it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.97it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.95it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.41it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.33it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.55it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.34it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.46it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.52it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.04it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.85it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.86it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.24it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.34it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.64it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.84it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.36it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.98it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.17it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.93it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.63it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.88it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.12it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.62it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.15it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.64it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.52it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.88it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.12it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.39it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.44it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.15it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.15it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.44it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.21it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.69it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.24it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.24it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.01it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.74it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.66it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.21it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.22it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.17it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.08it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.82it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.88it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.69it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.23it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.65it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.22it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.22it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.44it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.75it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.43it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.98it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.96it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  4.52it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.53it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.85it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.11it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.89it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.62it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.54it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.00it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.03it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.35it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.86it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.13it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.73it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.10it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.96it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.49it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.41it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.58it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.99it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.71it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.05it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.45it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.24it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.85it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.06it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.29it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.19it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.80it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.05it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.15it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.25it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.43it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.56it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.37it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.81it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.60it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.16it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.67it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.95it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.54it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.73it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.92it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.59it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.40it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.02it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.29it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.73it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.23it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.15it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.23it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.17it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.42it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.56it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.95it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.73it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.71it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.24it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.63it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.22it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.76it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.94it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.42it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.47it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.95it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.15it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.39it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.32it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.44it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.97it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.35it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.57it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.17it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.12it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.83it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.08it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.72it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.14it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.79it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.10it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.10it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.90it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.23it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.74it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.13it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.11it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.42it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.92it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.72it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.37it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.78it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.88it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.88it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.11it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.34it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.27it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.28it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.30it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.11it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.39it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.69it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.04it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.98it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.85it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.62it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.85it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.62it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.46it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.88it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.15it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.42it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.53it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.30it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.97it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.72it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.62it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.37it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.00it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.92it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.23it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.38it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.83it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.88it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.14it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.11it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.92it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.99it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.37it/s]          MAE              : Train 26572.7649, Val 26661.5229, Test 26437.7859
Epoch 36: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 46947.1172, Val 49618.3765, Test 49322.6496
          R2_Score         : Train 0.9573, Val 0.9485, Test 0.9524
          MAE              : Train 26104.6646, Val 26460.8629, Test 26172.7264
Best:
          RMSE             : Train 46947.1172, Val 49618.3765, Test 49322.6496
          R2_Score         : Train 0.9573, Val 0.9485, Test 0.9524
          MAE              : Train 26104.6646, Val 26460.8629, Test 26172.7264
Epoch 37: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 46205.5386, Val 49972.5991, Test 48142.9109
          R2_Score         : Train 0.9587, Val 0.9478, Test 0.9546
          MAE              : Train 25756.1204, Val 25992.5976, Test 25611.8096
Best:
          RMSE             : Train 46947.1172, Val 49618.3765, Test 49322.6496
          R2_Score         : Train 0.9573, Val 0.9485, Test 0.9524
          MAE              : Train 26104.6646, Val 26460.8629, Test 26172.7264
Epoch 38: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 45864.6800, Val 50070.3153, Test 48567.0473
          R2_Score         : Train 0.9593, Val 0.9476, Test 0.9538
          MAE              : Train 25697.8336, Val 26254.3805, Test 25892.7731
Best:
          RMSE             : Train 46947.1172, Val 49618.3765, Test 49322.6496
          R2_Score         : Train 0.9573, Val 0.9485, Test 0.9524
          MAE              : Train 26104.6646, Val 26460.8629, Test 26172.7264
Epoch 39: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 45191.4083, Val 48979.4180, Test 47940.4013
          R2_Score         : Train 0.9605, Val 0.9498, Test 0.9550
          MAE              : Train 25215.9077, Val 25554.3232, Test 25435.3484
Best:
          RMSE             : Train 45191.4083, Val 48979.4180, Test 47940.4013
          R2_Score         : Train 0.9605, Val 0.9498, Test 0.9550
          MAE              : Train 25215.9077, Val 25554.3232, Test 25435.3484
Epoch 40: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 44596.5214, Val 50031.4154, Test 48356.9745
          R2_Score         : Train 0.9615, Val 0.9477, Test 0.9542
          MAE              : Train 24894.9388, Val 25419.7963, Test 25034.4596
Best:
          RMSE             : Train 45191.4083, Val 48979.4180, Test 47940.4013
          R2_Score         : Train 0.9605, Val 0.9498, Test 0.9550
          MAE              : Train 25215.9077, Val 25554.3232, Test 25435.3484
Epoch 41: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 44186.1700, Val 47637.4423, Test 46637.1481
          R2_Score         : Train 0.9622, Val 0.9526, Test 0.9574
          MAE              : Train 24501.0664, Val 24932.0881, Test 24507.1818
Best:
          RMSE             : Train 44186.1700, Val 47637.4423, Test 46637.1481
          R2_Score         : Train 0.9622, Val 0.9526, Test 0.9574
          MAE              : Train 24501.0664, Val 24932.0881, Test 24507.1818
Epoch 42: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43185.4795, Val 47135.1330, Test 46999.0910
          R2_Score         : Train 0.9639, Val 0.9536, Test 0.9567
          MAE              : Train 23981.0653, Val 24938.7836, Test 24613.6017
Best:
          RMSE             : Train 43185.4795, Val 47135.1330, Test 46999.0910
          R2_Score         : Train 0.9639, Val 0.9536, Test 0.9567
          MAE              : Train 23981.0653, Val 24938.7836, Test 24613.6017
Epoch 43: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43073.0127, Val 49254.2908, Test 47320.2089
          R2_Score         : Train 0.9641, Val 0.9493, Test 0.9561
          MAE              : Train 24108.0878, Val 24875.4922, Test 24467.6155
Best:
          RMSE             : Train 43185.4795, Val 47135.1330, Test 46999.0910
          R2_Score         : Train 0.9639, Val 0.9536, Test 0.9567
          MAE              : Train 23981.0653, Val 24938.7836, Test 24613.6017
Epoch 44: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 42586.0290, Val 48245.4622, Test 46570.3720
          R2_Score         : Train 0.9649, Val 0.9513, Test 0.9575
          MAE              : Train 23803.9960, Val 24268.0728, Test 23981.3524
Best:
          RMSE             : Train 43185.4795, Val 47135.1330, Test 46999.0910
          R2_Score         : Train 0.9639, Val 0.9536, Test 0.9567
          MAE              : Train 23981.0653, Val 24938.7836, Test 24613.6017
Epoch 45: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 41829.9150, Val 47833.5018, Test 46069.0907
          R2_Score         : Train 0.9661, Val 0.9522, Test 0.9584
          MAE              : Train 23147.0439, Val 24028.1568, Test 23602.5770
Best:
          RMSE             : Train 43185.4795, Val 47135.1330, Test 46999.0910
          R2_Score         : Train 0.9639, Val 0.9536, Test 0.9567
          MAE              : Train 23981.0653, Val 24938.7836, Test 24613.6017
Epoch 46: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 41636.1890, Val 48121.8016, Test 46082.3605
          R2_Score         : Train 0.9665, Val 0.9516, Test 0.9584
          MAE              : Train 23029.3521, Val 23827.9106, Test 23508.7976
Best:
          RMSE             : Train 43185.4795, Val 47135.1330, Test 46999.0910
          R2_Score         : Train 0.9639, Val 0.9536, Test 0.9567
          MAE              : Train 23981.0653, Val 24938.7836, Test 24613.6017
Epoch 47: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 41397.4252, Val 48464.8799, Test 45923.1160
          R2_Score         : Train 0.9668, Val 0.9509, Test 0.9587
          MAE              : Train 22980.9746, Val 23886.8164, Test 23378.5756
Best:
          RMSE             : Train 43185.4795, Val 47135.1330, Test 46999.0910
          R2_Score         : Train 0.9639, Val 0.9536, Test 0.9567
          MAE              : Train 23981.0653, Val 24938.7836, Test 24613.6017
Epoch 48: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 40661.7093, Val 46957.3278, Test 45273.6551
          R2_Score         : Train 0.9680, Val 0.9539, Test 0.9599
          MAE              : Train 22525.6110, Val 23394.4116, Test 23006.2401
Best:
          RMSE             : Train 40661.7093, Val 46957.3278, Test 45273.6551
          R2_Score         : Train 0.9680, Val 0.9539, Test 0.9599
          MAE              : Train 22525.6110, Val 23394.4116, Test 23006.2401
Epoch 49: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 40288.9155, Val 46956.9635, Test 44994.8298
          R2_Score         : Train 0.9686, Val 0.9539, Test 0.9604
          MAE              : Train 22322.5475, Val 23382.0218, Test 22914.2081
Best:
          RMSE             : Train 40288.9155, Val 46956.9635, Test 44994.8298
          R2_Score         : Train 0.9686, Val 0.9539, Test 0.9604
          MAE              : Train 22322.5475, Val 23382.0218, Test 22914.2081
Epoch 50: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 40043.2929, Val 47877.7408, Test 46187.1423
          R2_Score         : Train 0.9690, Val 0.9521, Test 0.9582
          MAE              : Train 22200.4749, Val 23942.6841, Test 23507.5421
Best:
          RMSE             : Train 40288.9155, Val 46956.9635, Test 44994.8298
          R2_Score         : Train 0.9686, Val 0.9539, Test 0.9604
          MAE              : Train 22322.5475, Val 23382.0218, Test 22914.2081
Epoch 51: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 40377.2643, Val 48872.2021, Test 46882.2823
          R2_Score         : Train 0.9684, Val 0.9501, Test 0.9570

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.62it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.62it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.99it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.83it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.71it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.28it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.57it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.45it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.17it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.97it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.55it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.76it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.27it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.69it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.22it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.73it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.67it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.01it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.97it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.34it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.55it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  9.54it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  1.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.48it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.25it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.99it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.94it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.30it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.59it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.17it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.06it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.56it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.65it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.40it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.14it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.43it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.18it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.47it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.77it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.47it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.39it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.27it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.49it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.70it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.94it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.61it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.90it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  7.00it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.42it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.11it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.74it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.46it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.61it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.49it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.77it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.64it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.58it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.57it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.86it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.06it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.02it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.57it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.80it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.40it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.26it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.59it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.64it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.01it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.77it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.02it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.38it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.05it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.87it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.10it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.23it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.59it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.00it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.27it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.35it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.04it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.02it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.04it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.34it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.35it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.79it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.65it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.42it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.39it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.95it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.35it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.19it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.05it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.59it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.18it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.94it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.47it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.75it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.70it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.99it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.42it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.63it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.19it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.31it/s]Train:  14%|█▍        | 2/14 [00:00<00:06,  1.95it/s]Train:  21%|██▏       | 3/14 [00:01<00:04,  2.75it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.63it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.68it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.53it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.09it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.49it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.92it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.08it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.48it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  3.37it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.27it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.65it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.31it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.21it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.64it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.85it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.54it/s]Train:  57%|█████▋    | 8/14 [00:01<00:02,  2.90it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.24it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.93it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.54it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.12it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.91it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.30it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.60it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.44it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.07it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.22it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.59it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.81it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.65it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.07it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.30it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.38it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.69it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.57it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  3.66it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.76it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.54it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.27it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.85it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.78it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.23it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.26it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.69it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.87it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.05it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.28it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.51it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.85it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.31it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.47it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.39it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.82it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.76it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.70it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.56it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.29it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.48it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.54it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.98it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.62it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.91it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.70it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.36it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.78it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.74it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.76it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.23it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.82it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.29it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.08it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.31it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.35it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.83it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.97it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.19it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.13it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.56it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.01it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.48it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.61it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.30it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.67it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.32it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.99it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.16it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.53it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.34it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.27it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.28it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.90it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.62it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.71it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.25it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.85it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.60it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.07it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  5.00it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.30it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.69it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.42it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.04it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.71it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.28it/s]          MAE              : Train 22262.5256, Val 24239.6031, Test 23834.9633
Best:
          RMSE             : Train 40288.9155, Val 46956.9635, Test 44994.8298
          R2_Score         : Train 0.9686, Val 0.9539, Test 0.9604
          MAE              : Train 22322.5475, Val 23382.0218, Test 22914.2081
Epoch 52: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 40058.7203, Val 46430.6411, Test 44786.7059
          R2_Score         : Train 0.9689, Val 0.9549, Test 0.9607
          MAE              : Train 22028.6387, Val 22921.7334, Test 22486.3744
Best:
          RMSE             : Train 40058.7203, Val 46430.6411, Test 44786.7059
          R2_Score         : Train 0.9689, Val 0.9549, Test 0.9607
          MAE              : Train 22028.6387, Val 22921.7334, Test 22486.3744
Epoch 53: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 39241.5955, Val 47035.1551, Test 45288.2013
          R2_Score         : Train 0.9702, Val 0.9537, Test 0.9598
          MAE              : Train 21574.1728, Val 22744.5410, Test 22427.2532
Best:
          RMSE             : Train 40058.7203, Val 46430.6411, Test 44786.7059
          R2_Score         : Train 0.9689, Val 0.9549, Test 0.9607
          MAE              : Train 22028.6387, Val 22921.7334, Test 22486.3744
Epoch 54: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 38840.6863, Val 47196.0005, Test 44872.0450
          R2_Score         : Train 0.9708, Val 0.9534, Test 0.9606
          MAE              : Train 21360.8518, Val 22604.3926, Test 22120.8705
Best:
          RMSE             : Train 40058.7203, Val 46430.6411, Test 44786.7059
          R2_Score         : Train 0.9689, Val 0.9549, Test 0.9607
          MAE              : Train 22028.6387, Val 22921.7334, Test 22486.3744
Epoch 55: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 38545.0849, Val 46734.4982, Test 44486.4167
          R2_Score         : Train 0.9712, Val 0.9543, Test 0.9612
          MAE              : Train 21099.4552, Val 22425.3044, Test 22084.7329
Best:
          RMSE             : Train 40058.7203, Val 46430.6411, Test 44786.7059
          R2_Score         : Train 0.9689, Val 0.9549, Test 0.9607
          MAE              : Train 22028.6387, Val 22921.7334, Test 22486.3744
Epoch 56: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 38406.4251, Val 48170.8221, Test 45480.8834
          R2_Score         : Train 0.9715, Val 0.9515, Test 0.9595
          MAE              : Train 21110.2300, Val 22454.7933, Test 22038.6599
Best:
          RMSE             : Train 40058.7203, Val 46430.6411, Test 44786.7059
          R2_Score         : Train 0.9689, Val 0.9549, Test 0.9607
          MAE              : Train 22028.6387, Val 22921.7334, Test 22486.3744
Epoch 57: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 38368.8394, Val 46402.1072, Test 44530.9207
          R2_Score         : Train 0.9715, Val 0.9550, Test 0.9612
          MAE              : Train 20948.3598, Val 22069.0612, Test 21764.2691
Best:
          RMSE             : Train 38368.8394, Val 46402.1072, Test 44530.9207
          R2_Score         : Train 0.9715, Val 0.9550, Test 0.9612
          MAE              : Train 20948.3598, Val 22069.0612, Test 21764.2691
Epoch 58: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 37864.9318, Val 46348.4385, Test 43979.9322
          R2_Score         : Train 0.9723, Val 0.9551, Test 0.9621
          MAE              : Train 20821.9927, Val 22033.4012, Test 21582.4287
Best:
          RMSE             : Train 37864.9318, Val 46348.4385, Test 43979.9322
          R2_Score         : Train 0.9723, Val 0.9551, Test 0.9621
          MAE              : Train 20821.9927, Val 22033.4012, Test 21582.4287
Epoch 59: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 37618.9975, Val 46958.8443, Test 44326.6359
          R2_Score         : Train 0.9726, Val 0.9539, Test 0.9615
          MAE              : Train 20486.1206, Val 22197.6059, Test 21648.3608
Best:
          RMSE             : Train 37864.9318, Val 46348.4385, Test 43979.9322
          R2_Score         : Train 0.9723, Val 0.9551, Test 0.9621
          MAE              : Train 20821.9927, Val 22033.4012, Test 21582.4287
Epoch 60: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 37536.7860, Val 46298.4695, Test 43533.6199
          R2_Score         : Train 0.9727, Val 0.9552, Test 0.9629
          MAE              : Train 20392.0315, Val 21717.5098, Test 21349.1753
Best:
          RMSE             : Train 37536.7860, Val 46298.4695, Test 43533.6199
          R2_Score         : Train 0.9727, Val 0.9552, Test 0.9629
          MAE              : Train 20392.0315, Val 21717.5098, Test 21349.1753
Epoch 61: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 37130.8113, Val 46333.9414, Test 43955.8818
          R2_Score         : Train 0.9733, Val 0.9551, Test 0.9622
          MAE              : Train 20153.0132, Val 21951.2907, Test 21503.8991
Best:
          RMSE             : Train 37536.7860, Val 46298.4695, Test 43533.6199
          R2_Score         : Train 0.9727, Val 0.9552, Test 0.9629
          MAE              : Train 20392.0315, Val 21717.5098, Test 21349.1753
Epoch 62: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 36969.9810, Val 45821.2561, Test 43882.6146
          R2_Score         : Train 0.9735, Val 0.9561, Test 0.9623
          MAE              : Train 20172.6058, Val 21591.4135, Test 21155.3219
Best:
          RMSE             : Train 36969.9810, Val 45821.2561, Test 43882.6146
          R2_Score         : Train 0.9735, Val 0.9561, Test 0.9623
          MAE              : Train 20172.6058, Val 21591.4135, Test 21155.3219
Epoch 63: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 36576.6606, Val 46187.6643, Test 44524.0051
          R2_Score         : Train 0.9741, Val 0.9554, Test 0.9612
          MAE              : Train 19849.1146, Val 21644.5393, Test 21268.9506
Best:
          RMSE             : Train 36969.9810, Val 45821.2561, Test 43882.6146
          R2_Score         : Train 0.9735, Val 0.9561, Test 0.9623
          MAE              : Train 20172.6058, Val 21591.4135, Test 21155.3219
Epoch 64: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 36717.1842, Val 46703.8821, Test 44903.2930
          R2_Score         : Train 0.9739, Val 0.9544, Test 0.9605
          MAE              : Train 19783.4821, Val 21392.4827, Test 21093.9538
Best:
          RMSE             : Train 36969.9810, Val 45821.2561, Test 43882.6146
          R2_Score         : Train 0.9735, Val 0.9561, Test 0.9623
          MAE              : Train 20172.6058, Val 21591.4135, Test 21155.3219
Epoch 65: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 36493.0503, Val 46458.9914, Test 44129.7118
          R2_Score         : Train 0.9742, Val 0.9549, Test 0.9619
          MAE              : Train 19734.9168, Val 21346.1814, Test 20967.3722
Best:
          RMSE             : Train 36969.9810, Val 45821.2561, Test 43882.6146
          R2_Score         : Train 0.9735, Val 0.9561, Test 0.9623
          MAE              : Train 20172.6058, Val 21591.4135, Test 21155.3219
Epoch 66: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35953.6990, Val 45424.7783, Test 43790.2424
          R2_Score         : Train 0.9750, Val 0.9569, Test 0.9624
          MAE              : Train 19378.9260, Val 21142.4541, Test 20776.4810
Best:
          RMSE             : Train 35953.6990, Val 45424.7783, Test 43790.2424
          R2_Score         : Train 0.9750, Val 0.9569, Test 0.9624
          MAE              : Train 19378.9260, Val 21142.4541, Test 20776.4810

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.55it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.64it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.50it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.44it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.86it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.65it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.16it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.85it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.29it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.59it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.84it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.36it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.71it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.50it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.76it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.35it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.20it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.84it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.03it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.85it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.42it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.04it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.03it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.21it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.94it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.93it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.81it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.99it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.24it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.80it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.06it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.38it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.89it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.73it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.13it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.58it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.16it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.47it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.64it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.58it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.56it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.39it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.98it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.38it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.90it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.15it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.90it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.46it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.85it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.87it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.33it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.24it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.93it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.47it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.87it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.24it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.37it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.12it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.61it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.25it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.31it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.85it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  3.19it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.20it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.05it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.58it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.51it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.11it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.70it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.43it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.04it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.48it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.53it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.42it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.10it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.96it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.88it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.50it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.68it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.31it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.32it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.14it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.07it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.75it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.22it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.43it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.82it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.40it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.42it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.96it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.62it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.23it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.08it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.33it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.31it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.70it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.89it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.08it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.20it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.47it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.80it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.56it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.86it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.90it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.35it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.55it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.26it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.10it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.92it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.86it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.67it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.64it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.39it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.54it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.19it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.36it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.71it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.60it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.00it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.06it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.44it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.44it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.83it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.47it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.47it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.32it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.45it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.30it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.03it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.97it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.81it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.60it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  3.57it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.51it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.91it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.60it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:08,  1.52it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.66it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  2.84it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.73it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.53it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.11it/s]Train:  50%|█████     | 7/14 [00:02<00:01,  3.86it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  4.70it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.41it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.81it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.35it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  4.55it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  6.74it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.80it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.87it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.23it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.03it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.25it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.34it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.87it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.26it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.64it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.33it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.05it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.47it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.27it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.90it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.14it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.22it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.05it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.88it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.61it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.86it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.33it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.26it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.94it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.57it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.37it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.66it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  9.16it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.46it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.16it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.27it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.90it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.86it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.27it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.36it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.23it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.72it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.88it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.17it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.88it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.28it/s]Epoch 67: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35820.9965, Val 45839.6415, Test 43440.6131
          R2_Score         : Train 0.9752, Val 0.9561, Test 0.9630
          MAE              : Train 19338.1795, Val 21018.0199, Test 20704.4744
Best:
          RMSE             : Train 35953.6990, Val 45424.7783, Test 43790.2424
          R2_Score         : Train 0.9750, Val 0.9569, Test 0.9624
          MAE              : Train 19378.9260, Val 21142.4541, Test 20776.4810
Epoch 68: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35761.8320, Val 47156.1513, Test 43979.1906
          R2_Score         : Train 0.9752, Val 0.9535, Test 0.9621
          MAE              : Train 19356.9697, Val 20935.3197, Test 20503.8313
Best:
          RMSE             : Train 35953.6990, Val 45424.7783, Test 43790.2424
          R2_Score         : Train 0.9750, Val 0.9569, Test 0.9624
          MAE              : Train 19378.9260, Val 21142.4541, Test 20776.4810
Epoch 69: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35953.3283, Val 46762.0109, Test 43882.9466
          R2_Score         : Train 0.9750, Val 0.9543, Test 0.9623
          MAE              : Train 19271.9157, Val 20861.7295, Test 20458.5402
Best:
          RMSE             : Train 35953.6990, Val 45424.7783, Test 43790.2424
          R2_Score         : Train 0.9750, Val 0.9569, Test 0.9624
          MAE              : Train 19378.9260, Val 21142.4541, Test 20776.4810
Epoch 70: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35713.6400, Val 45822.6837, Test 43364.2170
          R2_Score         : Train 0.9753, Val 0.9561, Test 0.9632
          MAE              : Train 19173.6045, Val 20727.8949, Test 20300.6254
Best:
          RMSE             : Train 35953.6990, Val 45424.7783, Test 43790.2424
          R2_Score         : Train 0.9750, Val 0.9569, Test 0.9624
          MAE              : Train 19378.9260, Val 21142.4541, Test 20776.4810
Epoch 71: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35563.9306, Val 45377.3308, Test 43269.1343
          R2_Score         : Train 0.9755, Val 0.9570, Test 0.9633
          MAE              : Train 19016.8547, Val 20680.2308, Test 20232.6015
Best:
          RMSE             : Train 35563.9306, Val 45377.3308, Test 43269.1343
          R2_Score         : Train 0.9755, Val 0.9570, Test 0.9633
          MAE              : Train 19016.8547, Val 20680.2308, Test 20232.6015
Epoch 72: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35568.0938, Val 46509.4622, Test 43374.7085
          R2_Score         : Train 0.9755, Val 0.9548, Test 0.9632
          MAE              : Train 19044.1928, Val 20915.7848, Test 20406.1060
Best:
          RMSE             : Train 35563.9306, Val 45377.3308, Test 43269.1343
          R2_Score         : Train 0.9755, Val 0.9570, Test 0.9633
          MAE              : Train 19016.8547, Val 20680.2308, Test 20232.6015
Epoch 73: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 74: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 34936.7632, Val 46377.6213, Test 43434.9601
          R2_Score         : Train 0.9764, Val 0.9550, Test 0.9631
          MAE              : Train 18718.6926, Val 20607.2107, Test 20070.3761
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 75: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 34730.1273, Val 45803.0345, Test 43407.1698
          R2_Score         : Train 0.9767, Val 0.9561, Test 0.9631
          MAE              : Train 18438.2390, Val 20505.1140, Test 20084.8402
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 76: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 34410.4412, Val 46608.2936, Test 44450.3842
          R2_Score         : Train 0.9771, Val 0.9546, Test 0.9613
          MAE              : Train 18402.1566, Val 20423.3413, Test 20077.5537
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 77: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 34217.5643, Val 46898.9416, Test 43793.4310
          R2_Score         : Train 0.9773, Val 0.9540, Test 0.9624
          MAE              : Train 18256.8967, Val 20472.5701, Test 19977.6881
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 78: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 34271.4095, Val 45800.9630, Test 42747.3928
          R2_Score         : Train 0.9773, Val 0.9561, Test 0.9642
          MAE              : Train 18215.7646, Val 20187.1271, Test 19618.7163
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 79: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 34067.8543, Val 46802.1267, Test 43668.6906
          R2_Score         : Train 0.9775, Val 0.9542, Test 0.9627
          MAE              : Train 18094.3120, Val 20461.2700, Test 20089.9976
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 80: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 33901.2218, Val 46472.7792, Test 43280.9166
          R2_Score         : Train 0.9778, Val 0.9548, Test 0.9633
          MAE              : Train 18024.2624, Val 20211.1087, Test 19646.4004
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 81: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 33784.8295, Val 45480.2261, Test 42710.7019
          R2_Score         : Train 0.9779, Val 0.9568, Test 0.9643
          MAE              : Train 17890.6446, Val 19936.8049, Test 19480.0856
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 82: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 33508.0412, Val 46173.3134, Test 43581.5568
          R2_Score         : Train 0.9783, Val 0.9554, Test 0.9628
          MAE              : Train 17821.6487, Val 19888.7104, Test 19544.4067
Best:

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.50it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.50it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.67it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.97it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.97it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.64it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.18it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.75it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.92it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.15it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.07it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.25it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.41it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.49it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.07it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.91it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.67it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.57it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.85it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.41it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.19it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.76it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.26it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.15it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.87it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.99it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.75it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.68it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.59it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  6.35it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.66it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.62it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.21it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.06it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.19it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.88it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.62it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.84it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.51it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.75it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.46it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.76it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.36it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.63it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.40it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.28it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.25it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.01it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.00it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.73it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.80it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.33it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.56it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.36it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.82it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.32it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.80it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.63it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.84it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.85it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.87it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.85it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.46it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.19it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.99it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.87it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.29it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.32it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.43it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.24it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.99it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.41it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.21it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  5.00it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.82it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.42it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.05it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.30it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.76it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.41it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.28it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.05it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.75it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.79it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.15it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.88it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.66it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.63it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.54it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.51it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.77it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.01it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.00it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.64it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.50it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.88it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.69it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.92it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.47it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.68it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.47it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.91it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.39it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.43it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.77it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 10.85it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.46it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.56it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.11it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.43it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.48it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.90it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.13it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.46it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.90it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.87it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.69it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.05it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.19it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.04it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.58it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.04it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.74it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.48it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.08it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.18it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.91it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.07it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.37it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.63it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.50it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.40it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.93it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.64it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.73it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.28it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.68it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.74it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.05it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.91it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.72it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.00it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.75it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.08it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.20it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.71it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.19it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.78it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.90it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.68it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.41it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.16it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.77it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.13it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.46it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.41it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.16it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.04it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.64it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.96it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.21it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.86it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.82it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.40it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.33it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.14it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.09it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.74it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.64it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.06it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.18it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.40it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.95it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.72it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.34it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.93it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.19it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.61it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.87it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.92it/s]          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 83: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 33169.9776, Val 45295.9513, Test 43456.8489
          R2_Score         : Train 0.9787, Val 0.9571, Test 0.9630
          MAE              : Train 17559.8372, Val 20002.1060, Test 19413.3906
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 84: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 33279.0225, Val 45409.4874, Test 43341.1428
          R2_Score         : Train 0.9786, Val 0.9569, Test 0.9632
          MAE              : Train 17630.1405, Val 20134.6018, Test 19767.5584
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 85: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 32949.8179, Val 46372.9459, Test 43150.2656
          R2_Score         : Train 0.9790, Val 0.9550, Test 0.9635
          MAE              : Train 17489.2891, Val 19816.8564, Test 19246.8539
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 86: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 32762.7738, Val 46106.7413, Test 43583.7874
          R2_Score         : Train 0.9792, Val 0.9556, Test 0.9628
          MAE              : Train 17389.9455, Val 20075.1115, Test 19587.6286
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 87: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 32789.9985, Val 45928.0480, Test 43248.5188
          R2_Score         : Train 0.9792, Val 0.9559, Test 0.9634
          MAE              : Train 17273.0600, Val 19730.9566, Test 19322.2192
Best:
          RMSE             : Train 35126.4737, Val 45222.0696, Test 42717.9854
          R2_Score         : Train 0.9761, Val 0.9572, Test 0.9643
          MAE              : Train 18710.2450, Val 20483.2502, Test 20071.9666
Epoch 88: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32457.0002, Val 44453.3990, Test 43009.0409
          R2_Score         : Train 0.9796, Val 0.9587, Test 0.9638
          MAE              : Train 17131.1163, Val 19575.4993, Test 19050.7575
Best:
          RMSE             : Train 32457.0002, Val 44453.3990, Test 43009.0409
          R2_Score         : Train 0.9796, Val 0.9587, Test 0.9638
          MAE              : Train 17131.1163, Val 19575.4993, Test 19050.7575
Epoch 89: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 32809.8555, Val 46220.3338, Test 43836.8324
          R2_Score         : Train 0.9792, Val 0.9553, Test 0.9624
          MAE              : Train 17310.9790, Val 19556.7642, Test 19137.4495
Best:
          RMSE             : Train 32457.0002, Val 44453.3990, Test 43009.0409
          R2_Score         : Train 0.9796, Val 0.9587, Test 0.9638
          MAE              : Train 17131.1163, Val 19575.4993, Test 19050.7575
Epoch 90: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 32151.6362, Val 47024.0861, Test 44749.3167
          R2_Score         : Train 0.9800, Val 0.9538, Test 0.9608
          MAE              : Train 16987.7321, Val 19773.1088, Test 19485.6414
Best:
          RMSE             : Train 32457.0002, Val 44453.3990, Test 43009.0409
          R2_Score         : Train 0.9796, Val 0.9587, Test 0.9638
          MAE              : Train 17131.1163, Val 19575.4993, Test 19050.7575
Epoch 91: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 32494.4562, Val 46624.5219, Test 44651.8230
          R2_Score         : Train 0.9796, Val 0.9546, Test 0.9610
          MAE              : Train 17049.5186, Val 19445.1135, Test 19101.3117
Best:
          RMSE             : Train 32457.0002, Val 44453.3990, Test 43009.0409
          R2_Score         : Train 0.9796, Val 0.9587, Test 0.9638
          MAE              : Train 17131.1163, Val 19575.4993, Test 19050.7575
Epoch 92: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 32282.7105, Val 45489.4065, Test 43594.5159
          R2_Score         : Train 0.9798, Val 0.9567, Test 0.9628
          MAE              : Train 17066.2139, Val 19200.2886, Test 18802.0884
Best:
          RMSE             : Train 32457.0002, Val 44453.3990, Test 43009.0409
          R2_Score         : Train 0.9796, Val 0.9587, Test 0.9638
          MAE              : Train 17131.1163, Val 19575.4993, Test 19050.7575
Epoch 93: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 31870.2796, Val 46332.8558, Test 43963.1105
          R2_Score         : Train 0.9803, Val 0.9551, Test 0.9622
          MAE              : Train 16766.4377, Val 19519.0416, Test 19067.2388
Best:
          RMSE             : Train 32457.0002, Val 44453.3990, Test 43009.0409
          R2_Score         : Train 0.9796, Val 0.9587, Test 0.9638
          MAE              : Train 17131.1163, Val 19575.4993, Test 19050.7575
Epoch 94: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 31605.7350, Val 46417.7174, Test 44107.8699
          R2_Score         : Train 0.9807, Val 0.9550, Test 0.9619
          MAE              : Train 16716.4144, Val 19122.8856, Test 18719.2951
Best:
          RMSE             : Train 32457.0002, Val 44453.3990, Test 43009.0409
          R2_Score         : Train 0.9796, Val 0.9587, Test 0.9638
          MAE              : Train 17131.1163, Val 19575.4993, Test 19050.7575
Epoch 95: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31509.0052, Val 44286.5251, Test 43639.1881
          R2_Score         : Train 0.9808, Val 0.9590, Test 0.9627
          MAE              : Train 16543.3327, Val 19105.9259, Test 18751.4961
Best:
          RMSE             : Train 31509.0052, Val 44286.5251, Test 43639.1881
          R2_Score         : Train 0.9808, Val 0.9590, Test 0.9627
          MAE              : Train 16543.3327, Val 19105.9259, Test 18751.4961
Epoch 96: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 31500.9913, Val 47032.0277, Test 44061.1426
          R2_Score         : Train 0.9808, Val 0.9538, Test 0.9620
          MAE              : Train 16500.0883, Val 19319.1492, Test 18837.9983
Best:
          RMSE             : Train 31509.0052, Val 44286.5251, Test 43639.1881
          R2_Score         : Train 0.9808, Val 0.9590, Test 0.9627
          MAE              : Train 16543.3327, Val 19105.9259, Test 18751.4961
Epoch 97: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 31346.4717, Val 45863.9691, Test 44514.0571
          R2_Score         : Train 0.9810, Val 0.9560, Test 0.9612
          MAE              : Train 16460.2051, Val 19417.8130, Test 19227.4002
Best:
          RMSE             : Train 31509.0052, Val 44286.5251, Test 43639.1881
          R2_Score         : Train 0.9808, Val 0.9590, Test 0.9627
          MAE              : Train 16543.3327, Val 19105.9259, Test 18751.4961
Epoch 98: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.76it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.90it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.33it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.38it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.18it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.94it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.90it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.44it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.31it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.54it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.72it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.28it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.27it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.56it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.37it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.42it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.85it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.00it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.43it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.48it/s]
          RMSE             : Train 31665.7724, Val 47874.8366, Test 46314.7346
          R2_Score         : Train 0.9806, Val 0.9521, Test 0.9580
          MAE              : Train 16579.1621, Val 20187.6621, Test 19910.9661
Best:
          RMSE             : Train 31509.0052, Val 44286.5251, Test 43639.1881
          R2_Score         : Train 0.9808, Val 0.9590, Test 0.9627
          MAE              : Train 16543.3327, Val 19105.9259, Test 18751.4961
Epoch 99: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 31505.0242, Val 45902.2638, Test 43973.5794
          R2_Score         : Train 0.9808, Val 0.9559, Test 0.9621
          MAE              : Train 16612.5264, Val 19140.0553, Test 18598.0422
Best:
          RMSE             : Train 31509.0052, Val 44286.5251, Test 43639.1881
          R2_Score         : Train 0.9808, Val 0.9590, Test 0.9627
          MAE              : Train 16543.3327, Val 19105.9259, Test 18751.4961
Epoch 100: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 31033.1777, Val 45972.5208, Test 43639.9819
          R2_Score         : Train 0.9814, Val 0.9558, Test 0.9627
          MAE              : Train 16303.6802, Val 19074.8126, Test 18567.7677
Best:
          RMSE             : Train 31509.0052, Val 44286.5251, Test 43639.1881
          R2_Score         : Train 0.9808, Val 0.9590, Test 0.9627
          MAE              : Train 16543.3327, Val 19105.9259, Test 18751.4961
Training time (sec): 312
