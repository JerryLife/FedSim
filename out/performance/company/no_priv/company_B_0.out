  0%|          | 0/54068 [00:00<?, ?it/s]  5%|▌         | 2835/54068 [00:00<00:01, 28343.40it/s] 14%|█▎        | 7363/54068 [00:00<00:01, 38302.22it/s] 21%|██        | 11194/54068 [00:00<00:01, 37461.61it/s] 30%|██▉       | 15988/54068 [00:00<00:00, 41537.43it/s] 37%|███▋      | 20247/54068 [00:00<00:00, 41910.19it/s] 47%|████▋     | 25215/54068 [00:00<00:00, 44534.80it/s] 55%|█████▍    | 29674/54068 [00:00<00:00, 43443.26it/s] 63%|██████▎   | 34027/54068 [00:00<00:00, 42001.78it/s] 71%|███████   | 38240/54068 [00:00<00:00, 41714.00it/s] 78%|███████▊  | 42420/54068 [00:01<00:00, 39829.20it/s] 86%|████████▌ | 46422/54068 [00:01<00:00, 39714.72it/s] 93%|█████████▎| 50406/54068 [00:01<00:00, 38245.49it/s]100%|██████████| 54068/54068 [00:01<00:00, 40322.92it/s]
  0%|          | 0/7725 [00:00<?, ?it/s] 52%|█████▏    | 4032/7725 [00:00<00:00, 40315.23it/s]100%|██████████| 7725/7725 [00:00<00:00, 42367.26it/s]
  0%|          | 0/15449 [00:00<?, ?it/s] 16%|█▌        | 2455/15449 [00:00<00:00, 23733.50it/s] 38%|███▊      | 5917/15449 [00:00<00:00, 30043.11it/s] 58%|█████▊    | 8931/15449 [00:00<00:00, 21727.19it/s] 76%|███████▌  | 11736/15449 [00:00<00:00, 23739.52it/s] 92%|█████████▏| 14285/15449 [00:00<00:00, 22676.03it/s]100%|██████████| 15449/15449 [00:00<00:00, 23991.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.58it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 21.55it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.73it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 19.28it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.90it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 31.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.08it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 25.11it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.83it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 17.21it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.61it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 39.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 23.84it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 17.13it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 20.70it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.07it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.55it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.52it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.95it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 16.74it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.51it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 19.22it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 19.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.63it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.04it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.62it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.09it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.81it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 23.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 23.35it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 17.47it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 24.11it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 18.53it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 20.63it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 30.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 21.91it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 16.47it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.68it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.42it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.41it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.51it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.55it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.67it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.39it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.85it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.79it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.89it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.51it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.65it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.57it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 28.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 29.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.58it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.23it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.09it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.41it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.02it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.43it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.76it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.62it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.14it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 18.41it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.76it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 31.75it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.83it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.07it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.89it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.97it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.67it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 14.15it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.56it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.13it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 30.80it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.60it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.06it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.48it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.96it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.06it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.36it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.47it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.52it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 156 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0   [156, 200]  [4096, 200]   31400      31200
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           51601
Trainable params       51601
Non-trainable params       0
Mult-Adds              51300
=================================================================
n_classes=2
task=regression
model_name=company_fedsim_2022-09-08-21-27-41
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:0
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_fedsim_2022-09-08-21-27-41.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f9dd0798c70>, <metric.rmse.RMSE object at 0x7f9dd0798cd0>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=156, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f9dd0798be0>
Epoch 1: Loss:            : Train 0.2005, Val 0.1739, Test 0.1735
          R2_Score         : Train -51.8148, Val -48.1102, Test -44.8865
          RMSE             : Train 1651992.8948, Val 1532657.0641, Test 1530742.2065
Best:
          R2_Score         : Train -51.8148, Val -48.1102, Test -44.8865
          RMSE             : Train 1651992.8948, Val 1532657.0641, Test 1530742.2065
Epoch 2: Loss:            : Train 0.1519, Val 0.1300, Test 0.1298
          R2_Score         : Train -39.0036, Val -35.7004, Test -33.3407
          RMSE             : Train 1437739.5182, Val 1324933.8037, Test 1324231.4588
Best:
          R2_Score         : Train -39.0036, Val -35.7004, Test -33.3407
          RMSE             : Train 1437739.5182, Val 1324933.8037, Test 1324231.4588
Epoch 3: Loss:            : Train 0.1103, Val 0.0908, Test 0.0908
          R2_Score         : Train -28.1333, Val -24.6269, Test -23.0192
          RMSE             : Train 1226946.4052, Val 1107151.0442, Test 1107487.8144
Best:
          R2_Score         : Train -28.1333, Val -24.6269, Test -23.0192
          RMSE             : Train 1226946.4052, Val 1107151.0442, Test 1107487.8144
Epoch 4: Loss:            : Train 0.0739, Val 0.0576, Test 0.0577
          R2_Score         : Train -18.5576, Val -15.2648, Test -14.2718
          RMSE             : Train 1005282.1612, Val 882030.7236, Test 883088.6983
Best:
          R2_Score         : Train -18.5576, Val -15.2648, Test -14.2718
          RMSE             : Train 1005282.1612, Val 882030.7236, Test 883088.6983
Epoch 5: Loss:            : Train 0.0448, Val 0.0328, Test 0.0330
          R2_Score         : Train -10.8813, Val -8.2613, Test -7.7264
          RMSE             : Train 783543.8196, Val 665571.4229, Test 667540.2957
Best:
          R2_Score         : Train -10.8813, Val -8.2613, Test -7.7264
          RMSE             : Train 783543.8196, Val 665571.4229, Test 667540.2957
Epoch 6: Loss:            : Train 0.0245, Val 0.0169, Test 0.0171
          R2_Score         : Train -5.5018, Val -3.7518, Test -3.5115
          RMSE             : Train 579623.0994, Val 476745.1586, Test 479978.7889
Best:
          R2_Score         : Train -5.5018, Val -3.7518, Test -3.5115
          RMSE             : Train 579623.0994, Val 476745.1586, Test 479978.7889
Epoch 7: Loss:            : Train 0.0124, Val 0.0083, Test 0.0085
          R2_Score         : Train -2.2894, Val -1.3375, Test -1.2536
          RMSE             : Train 412276.0534, Val 334378.6730, Test 339232.3651
Best:
          R2_Score         : Train -2.2894, Val -1.3375, Test -1.2536
          RMSE             : Train 412276.0534, Val 334378.6730, Test 339232.3651
Epoch 8: Loss:            : Train 0.0066, Val 0.0048, Test 0.0051
          R2_Score         : Train -0.7328, Val -0.3638, Test -0.3427
          RMSE             : Train 299229.1585, Val 255412.1178, Test 261849.4369
Best:
          R2_Score         : Train -0.7328, Val -0.3638, Test -0.3427
          RMSE             : Train 299229.1585, Val 255412.1178, Test 261849.4369
Epoch 9: Loss:            : Train 0.0046, Val 0.0041, Test 0.0044
          R2_Score         : Train -0.2140, Val -0.1540, Test -0.1485
          RMSE             : Train 250457.3977, Val 234938.9143, Test 242176.2429
Best:
          R2_Score         : Train -0.2140, Val -0.1540, Test -0.1485
          RMSE             : Train 250457.3977, Val 234938.9143, Test 242176.2429
Epoch 10: Loss:            : Train 0.0045, Val 0.0042, Test 0.0044
          R2_Score         : Train -0.1669, Val -0.1679, Test -0.1620
          RMSE             : Train 245557.2908, Val 236349.1933, Test 243592.5504
Best:
          R2_Score         : Train -0.2140, Val -0.1540, Test -0.1485
          RMSE             : Train 250457.3977, Val 234938.9143, Test 242176.2429
Epoch 11: Loss:            : Train 0.0043, Val 0.0038, Test 0.0040
          R2_Score         : Train -0.1218, Val -0.0805, Test -0.0652
          RMSE             : Train 240760.8653, Val 227342.7423, Test 233225.9953
Best:
          R2_Score         : Train -0.1218, Val -0.0805, Test -0.0652
          RMSE             : Train 240760.8653, Val 227342.7423, Test 233225.9953
Epoch 12: Loss:            : Train 0.0040, Val 0.0038, Test 0.0040
          R2_Score         : Train -0.0507, Val -0.0658, Test -0.0425
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.57it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.50it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.58it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.94it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.15it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.52it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.80it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.87it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 15.37it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.01it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.69it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.45it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 28.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.59it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.81it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.50it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.04it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.51it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.36it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 14.34it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.23it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.18it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.90it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.19it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.51it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.43it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 13.56it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.68it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.41it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.08it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.02it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.21it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.69it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.92it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.14it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.58it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.69it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 16.71it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.85it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.26it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.39it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.51it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.37it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.97it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.31it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.64it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.72it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.12it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.27it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.82it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.79it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.17it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.26it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.29it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.63it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.72it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.34it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.03it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.15it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.77it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.66it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.61it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.21it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.89it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.71it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.52it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.54it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.57it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 12.80it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 31.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 21.55it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.60it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 18.28it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.43it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.18it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.70it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.46it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.79it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.98it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 14.97it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.40it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.39it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.57it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.28it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.56it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.98it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.61it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.56it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 13.11it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.42it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.72it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.89it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  8.68it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.49it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.00it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 28.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.10it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.81it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.72it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.11it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 12.07it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 25.97it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.05it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.89it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.29it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.35it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.27it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.25it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.65it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.03it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.01it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.98it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.71it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.50it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.59it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.99it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.75it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.01it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.33it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.27it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.56it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 30.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.96it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 25.73it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.28it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 20.73it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.96it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.44it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 14.01it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 17.31it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.36it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.59it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.86it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.14it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.79it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.77it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.63it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.40it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.16it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.94it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 11.97it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 13.44it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 21.76it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.26it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 18.72it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.25it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.29it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 22.58it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.64it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.40it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.12it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.58it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.35it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.32it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.57it/s]
          RMSE             : Train 233010.9120, Val 225782.1573, Test 230730.5554
Best:
          R2_Score         : Train -0.0507, Val -0.0658, Test -0.0425
          RMSE             : Train 233010.9120, Val 225782.1573, Test 230730.5554
Epoch 13: Loss:            : Train 0.0039, Val 0.0037, Test 0.0039
          R2_Score         : Train -0.0249, Val -0.0293, Test -0.0152
          RMSE             : Train 230124.2903, Val 221887.6861, Test 227684.6901
Best:
          R2_Score         : Train -0.0249, Val -0.0293, Test -0.0152
          RMSE             : Train 230124.2903, Val 221887.6861, Test 227684.6901
Epoch 14: Loss:            : Train 0.0039, Val 0.0037, Test 0.0038
          R2_Score         : Train -0.0097, Val -0.0276, Test -0.0065
          RMSE             : Train 228412.2684, Val 221706.6220, Test 226705.0407
Best:
          R2_Score         : Train -0.0097, Val -0.0276, Test -0.0065
          RMSE             : Train 228412.2684, Val 221706.6220, Test 226705.0407
Epoch 15: Loss:            : Train 0.0039, Val 0.0036, Test 0.0038
          R2_Score         : Train -0.0012, Val -0.0141, Test 0.0002
          RMSE             : Train 227447.4728, Val 220237.4702, Test 225951.0812
Best:
          R2_Score         : Train -0.0012, Val -0.0141, Test 0.0002
          RMSE             : Train 227447.4728, Val 220237.4702, Test 225951.0812
Epoch 16: Loss:            : Train 0.0039, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0020, Val -0.0102, Test 0.0023
          RMSE             : Train 227088.2419, Val 219817.0440, Test 225717.2600
Best:
          R2_Score         : Train 0.0020, Val -0.0102, Test 0.0023
          RMSE             : Train 227088.2419, Val 219817.0440, Test 225717.2600
Epoch 17: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0027, Val -0.0102, Test 0.0032
          RMSE             : Train 227006.0274, Val 219816.1430, Test 225614.6772
Best:
          R2_Score         : Train 0.0027, Val -0.0102, Test 0.0032
          RMSE             : Train 227006.0274, Val 219816.1430, Test 225614.6772
Epoch 18: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0061, Val -0.0138, Test 0.0008
          RMSE             : Train 226619.3251, Val 220205.1121, Test 225879.6367
Best:
          R2_Score         : Train 0.0027, Val -0.0102, Test 0.0032
          RMSE             : Train 227006.0274, Val 219816.1430, Test 225614.6772
Epoch 19: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0065, Val -0.0057, Test 0.0053
          RMSE             : Train 226571.2541, Val 219326.0253, Test 225370.9129
Best:
          R2_Score         : Train 0.0065, Val -0.0057, Test 0.0053
          RMSE             : Train 226571.2541, Val 219326.0253, Test 225370.9129
Epoch 20: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0083, Val -0.0076, Test 0.0045
          RMSE             : Train 226373.8559, Val 219530.8840, Test 225464.4094
Best:
          R2_Score         : Train 0.0065, Val -0.0057, Test 0.0053
          RMSE             : Train 226571.2541, Val 219326.0253, Test 225370.9129
Epoch 21: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0087, Val -0.0070, Test 0.0062
          RMSE             : Train 226329.9073, Val 219468.0824, Test 225275.4797
Best:
          R2_Score         : Train 0.0065, Val -0.0057, Test 0.0053
          RMSE             : Train 226571.2541, Val 219326.0253, Test 225370.9129
Epoch 22: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0098, Val -0.0056, Test 0.0065
          RMSE             : Train 226204.0205, Val 219314.9993, Test 225235.4723
Best:
          R2_Score         : Train 0.0098, Val -0.0056, Test 0.0065
          RMSE             : Train 226204.0205, Val 219314.9993, Test 225235.4723
Epoch 23: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0116, Val -0.0039, Test 0.0055
          RMSE             : Train 225989.7525, Val 219130.9489, Test 225352.5631
Best:
          R2_Score         : Train 0.0116, Val -0.0039, Test 0.0055
          RMSE             : Train 225989.7525, Val 219130.9489, Test 225352.5631
Epoch 24: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0114, Val -0.0040, Test 0.0079
          RMSE             : Train 226011.6285, Val 219139.4004, Test 225083.1738
Best:
          R2_Score         : Train 0.0116, Val -0.0039, Test 0.0055
          RMSE             : Train 225989.7525, Val 219130.9489, Test 225352.5631
Epoch 25: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 26: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0122, Val -0.0059, Test 0.0054
          RMSE             : Train 225923.1069, Val 219344.0921, Test 225360.5817
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 27: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0132, Val -0.0032, Test 0.0065
          RMSE             : Train 225815.0651, Val 219051.0745, Test 225238.1544
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 28: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0116, Val -0.0031, Test 0.0064
          RMSE             : Train 225993.6033, Val 219044.4313, Test 225255.4243
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 29: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0129, Val -0.0060, Test 0.0052
          RMSE             : Train 225849.3497, Val 219361.9918, Test 225382.6547
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 30: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0127, Val -0.0039, Test 0.0072
          RMSE             : Train 225868.5205, Val 219128.6476, Test 225164.6694
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 31: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0136, Val -0.0056, Test 0.0070
          RMSE             : Train 225760.0941, Val 219318.9756, Test 225185.6294
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 32: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0132, Val -0.0027, Test 0.0082
          RMSE             : Train 225816.5777, Val 218999.2793, Test 225044.2480
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 33: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0133, Val -0.0032, Test 0.0080
          RMSE             : Train 225799.3074, Val 219050.1303, Test 225072.6849
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 34: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0144, Val -0.0048, Test 0.0065
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.63it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.80it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.83it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.90it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.14it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.83it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.15it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.73it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.38it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.56it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.13it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.26it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.88it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00, 10.57it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 14.00it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.60it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.94it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.08it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.39it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 12.01it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.04it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 29.71it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.01it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.14it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.63it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.78it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.67it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.17it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 18.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.74it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.96it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.89it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.79it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.71it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.44it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.21it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.13it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.56it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.32it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.63it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.59it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.00it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.29it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.40it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.10it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.80it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.87it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.83it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.99it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.16it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.69it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.16it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.56it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.67it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.12it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.73it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.63it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.63it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.10it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.11it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 12.00it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.70it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.55it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.79it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.47it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.87it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.05it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.24it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.25it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.74it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.12it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.88it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.25it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.88it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.86it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.26it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.75it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  9.00it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 11.21it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.54it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.84it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 30.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.03it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.61it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.77it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.42it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.98it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 12.46it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.99it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.14it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.64it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.34it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.08it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.30it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.53it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.49it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.66it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.86it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.81it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.77it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  8.68it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.23it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.16it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.83it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.46it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.96it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.78it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.20it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.11it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.68it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.10it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.62it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.44it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.16it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.28it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.84it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.16it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.72it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.54it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.08it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.27it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.73it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.70it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.44it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.10it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 14.87it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.15it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.70it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.89it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.46it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.78it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.14it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.34it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.95it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.47it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.36it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.98it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.58it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.91it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.19it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.10it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.75it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.32it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.00it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 28.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 30.46it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.07it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 18.32it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.23it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.99it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.69it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.56it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.87it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.03it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.09it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.70it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.47it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.80it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.90it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.16it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.73it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.43it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.56it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.26it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.09it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 14.88it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.47it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.28it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.43it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.56it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.28it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.74it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.79it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 14.51it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.77it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.65it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.81it/s]
          RMSE             : Train 225670.4485, Val 219231.7949, Test 225241.5398
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 35: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0143, Val -0.0021, Test 0.0082
          RMSE             : Train 225684.2248, Val 218937.7343, Test 225047.4915
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 36: Loss:            : Train 0.0039, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0145, Val -0.0036, Test 0.0074
          RMSE             : Train 225659.8546, Val 219095.2418, Test 225142.2481
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 37: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0145, Val -0.0029, Test 0.0072
          RMSE             : Train 225667.3336, Val 219017.8987, Test 225158.8926
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 38: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0142, Val -0.0046, Test 0.0083
          RMSE             : Train 225691.2361, Val 219206.7127, Test 225030.0970
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 39: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0148, Val -0.0036, Test 0.0072
          RMSE             : Train 225627.9125, Val 219100.0740, Test 225156.8100
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 40: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0147, Val -0.0057, Test 0.0079
          RMSE             : Train 225642.3454, Val 219324.5082, Test 225074.5567
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 41: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0148, Val -0.0052, Test 0.0069
          RMSE             : Train 225630.9389, Val 219276.3279, Test 225195.7399
Best:
          R2_Score         : Train 0.0119, Val -0.0015, Test 0.0068
          RMSE             : Train 225955.1324, Val 218869.3112, Test 225204.9177
Epoch 42: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0153, Val -0.0014, Test 0.0080
          RMSE             : Train 225575.6796, Val 218859.7057, Test 225071.5538
Best:
          R2_Score         : Train 0.0153, Val -0.0014, Test 0.0080
          RMSE             : Train 225575.6796, Val 218859.7057, Test 225071.5538
Epoch 43: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0147, Val -0.0057, Test 0.0058
          RMSE             : Train 225635.1309, Val 219324.4343, Test 225320.2358
Best:
          R2_Score         : Train 0.0153, Val -0.0014, Test 0.0080
          RMSE             : Train 225575.6796, Val 218859.7057, Test 225071.5538
Epoch 44: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0149, Val -0.0022, Test 0.0083
          RMSE             : Train 225616.1846, Val 218943.8433, Test 225038.3062
Best:
          R2_Score         : Train 0.0153, Val -0.0014, Test 0.0080
          RMSE             : Train 225575.6796, Val 218859.7057, Test 225071.5538
Epoch 45: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0151, Val -0.0015, Test 0.0077
          RMSE             : Train 225591.5052, Val 218871.4550, Test 225100.9798
Best:
          R2_Score         : Train 0.0153, Val -0.0014, Test 0.0080
          RMSE             : Train 225575.6796, Val 218859.7057, Test 225071.5538
Epoch 46: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0150, Val -0.0055, Test 0.0069
          RMSE             : Train 225601.2192, Val 219306.9314, Test 225193.8171
Best:
          R2_Score         : Train 0.0153, Val -0.0014, Test 0.0080
          RMSE             : Train 225575.6796, Val 218859.7057, Test 225071.5538
Epoch 47: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0162, Val -0.0076, Test 0.0044
          RMSE             : Train 225464.5968, Val 219534.9187, Test 225481.3498
Best:
          R2_Score         : Train 0.0153, Val -0.0014, Test 0.0080
          RMSE             : Train 225575.6796, Val 218859.7057, Test 225071.5538
Epoch 48: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0155, Val -0.0046, Test 0.0073
          RMSE             : Train 225548.1468, Val 219204.9002, Test 225144.8915
Best:
          R2_Score         : Train 0.0153, Val -0.0014, Test 0.0080
          RMSE             : Train 225575.6796, Val 218859.7057, Test 225071.5538
Epoch 49: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0157, Val -0.0080, Test 0.0058
          RMSE             : Train 225528.9538, Val 219578.7906, Test 225318.4427
Best:
          R2_Score         : Train 0.0153, Val -0.0014, Test 0.0080
          RMSE             : Train 225575.6796, Val 218859.7057, Test 225071.5538
Epoch 50: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 51: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0152, Val -0.0058, Test 0.0053
          RMSE             : Train 225582.1961, Val 219341.3738, Test 225378.4367
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 52: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0041, Test 0.0063
          RMSE             : Train 225402.3183, Val 219153.2288, Test 225263.8572
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 53: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0161, Val -0.0033, Test 0.0075
          RMSE             : Train 225483.9617, Val 219060.4875, Test 225124.4417
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 54: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0037, Test 0.0058
          RMSE             : Train 225411.4009, Val 219109.8762, Test 225319.9617
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 55: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0044, Test 0.0083
          RMSE             : Train 225442.8894, Val 219182.4699, Test 225033.7048
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 56: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0043, Test 0.0057
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.50it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.35it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.21it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.35it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.79it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.88it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.16it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.38it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.77it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.32it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.38it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.94it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.89it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.11it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.50it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.85it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.19it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.77it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.15it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.76it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.75it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.82it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.21it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.45it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.91it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.80it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.57it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.50it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.03it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.43it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.49it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.26it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.07it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.85it/s]Train:  50%|█████     | 7/14 [00:00<00:01,  6.67it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.27it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.26it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.31it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.24it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.51it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.21it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.57it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.35it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.03it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  9.40it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.34it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.57it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.09it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.39it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.86it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.91it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.75it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.77it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.85it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.74it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.94it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.04it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.98it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.29it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.61it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.79it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.18it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.06it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.67it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 21.15it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.91it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 18.68it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 13.69it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.35it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.87it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.71it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 19.00it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.41it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 19.80it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.32it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.69it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.72it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.94it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.38it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 20.84it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 17.20it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.21it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.96it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.31it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.43it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.03it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.95it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.76it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 22.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 24.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.80it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.11it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 16.01it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.28it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.84it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.14it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.74it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.77it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.52it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.95it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 20.37it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.04it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.56it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.97it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.66it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.25it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.43it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.87it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.19it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.21it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.07it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.24it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.92it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.03it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.50it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.37it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.36it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.54it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 26.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.09it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.57it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.04it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.73it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.04it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.04it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.13it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.71it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.56it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.45it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.37it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.54it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 17.11it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.87it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.16it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.84it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.58it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.37it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.76it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.39it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.25it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 24.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 26.27it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.54it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.59it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 18.08it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.04it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.38it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.54it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.56it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.54it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.55it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.77it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.21it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 15.52it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.43it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.03it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.20it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.06it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.37it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 29.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.31it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.40it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.71it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.95it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.23it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 29.97it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.06it/s]
          RMSE             : Train 225390.3370, Val 219171.6448, Test 225333.7302
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 57: Loss:            : Train 0.0039, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0165, Val -0.0096, Test 0.0036
          RMSE             : Train 225431.4765, Val 219750.9455, Test 225568.2968
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 58: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0085, Test 0.0042
          RMSE             : Train 225448.3403, Val 219637.8930, Test 225500.3191
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 59: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0158, Val -0.0037, Test 0.0064
          RMSE             : Train 225514.7535, Val 219106.9915, Test 225247.5141
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 60: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0161, Val -0.0032, Test 0.0056
          RMSE             : Train 225476.8790, Val 219058.3774, Test 225339.3582
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 61: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0064, Test 0.0069
          RMSE             : Train 225403.6331, Val 219406.5479, Test 225193.4607
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 62: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0021, Test 0.0068
          RMSE             : Train 225401.7183, Val 218929.5011, Test 225199.6971
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 63: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0104, Test 0.0036
          RMSE             : Train 225345.6218, Val 219841.6285, Test 225569.0155
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 64: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0023, Test 0.0070
          RMSE             : Train 225381.1854, Val 218958.5646, Test 225185.6280
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 65: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0162, Val -0.0040, Test 0.0063
          RMSE             : Train 225471.4122, Val 219137.5599, Test 225258.2908
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 66: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0159, Val -0.0077, Test 0.0042
          RMSE             : Train 225505.8289, Val 219548.6222, Test 225501.5095
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 67: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0174, Val -0.0084, Test 0.0040
          RMSE             : Train 225327.3680, Val 219622.9571, Test 225519.2944
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 68: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0049, Test 0.0055
          RMSE             : Train 225397.9106, Val 219239.8273, Test 225352.5600
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 69: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0029, Test 0.0064
          RMSE             : Train 225347.0944, Val 219026.8543, Test 225246.1286
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 70: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0074, Test 0.0059
          RMSE             : Train 225321.6657, Val 219517.8812, Test 225311.1164
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 71: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0048, Test 0.0067
          RMSE             : Train 225382.8986, Val 219227.7125, Test 225216.3284
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 72: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0077, Test 0.0052
          RMSE             : Train 225382.7844, Val 219545.9335, Test 225385.6519
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 73: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0044, Test 0.0067
          RMSE             : Train 225449.2129, Val 219183.3257, Test 225213.8524
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 74: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0029, Test 0.0068
          RMSE             : Train 225295.7280, Val 219025.9779, Test 225207.4000
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 75: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0043, Test 0.0073
          RMSE             : Train 225343.7707, Val 219169.5249, Test 225149.5729
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 76: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0184, Val -0.0073, Test 0.0037
          RMSE             : Train 225218.1658, Val 219497.5490, Test 225555.6883
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 77: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0035, Test 0.0061
          RMSE             : Train 225305.7647, Val 219091.3341, Test 225289.3211
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 78: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0035, Test 0.0062
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.75it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.72it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.95it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.82it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.43it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.02it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.19it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.48it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.46it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.48it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.19it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.51it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 29.55it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 24.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.24it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.47it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 20.51it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.85it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 18.32it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.71it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.51it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.69it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 15.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.90it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.01it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.52it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.30it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 11.78it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.37it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.79it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.71it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.35it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.79it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.77it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.34it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.56it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.45it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.51it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.93it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.67it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.71it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.86it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.06it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.63it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.02it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.25it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.67it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.66it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.24it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 17.20it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 23.65it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 20.81it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.23it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 22.11it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.96it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 19.09it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.98it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.63it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.01it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 17.21it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.14it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.44it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.88it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.84it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.41it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.76it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.27it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.06it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.50it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.99it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.47it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00, 10.16it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 15.69it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.74it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.49it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.07it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.14it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.58it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.30it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.04it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.53it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.45it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.99it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.96it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.88it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.37it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.81it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.31it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.20it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.39it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.42it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.19it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.08it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.75it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.10it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.34it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.53it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.77it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.92it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.68it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.94it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.19it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.08it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.57it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.28it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.46it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 23.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.50it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.59it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.90it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.59it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.73it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.87it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.78it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.75it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.08it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.14it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.14it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.82it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.45it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.72it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 36.02it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.35it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.48it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.73it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.93it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.86it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.25it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.40it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.45it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.44it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.60it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.26it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.44it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.78it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.38it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.34it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.61it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 35.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.83it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.81it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.63it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.81it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.55it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.21it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.43it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.47it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.37it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.69it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.11it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.06it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.46it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.76it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.11it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.02it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.99it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.90it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.76it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.30it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.41it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.96it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.82it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.73it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.96it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 33.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 33.29it/s]
          RMSE             : Train 225319.8747, Val 219083.9411, Test 225276.5666
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 79: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0075, Test 0.0042
          RMSE             : Train 225337.8244, Val 219526.2683, Test 225494.5601
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 80: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0051, Test 0.0048
          RMSE             : Train 225391.4691, Val 219260.2340, Test 225434.4986
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 81: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0031, Test 0.0068
          RMSE             : Train 225303.6155, Val 219044.7415, Test 225205.9314
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 82: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0086, Test 0.0040
          RMSE             : Train 225380.6903, Val 219641.2079, Test 225517.3057
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 83: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0058, Test 0.0064
          RMSE             : Train 225361.8547, Val 219334.0831, Test 225245.2656
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 84: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0053, Test 0.0039
          RMSE             : Train 225236.9477, Val 219285.3601, Test 225536.3273
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 85: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0102, Test 0.0045
          RMSE             : Train 225278.5418, Val 219815.1332, Test 225464.1443
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 86: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0049, Test 0.0053
          RMSE             : Train 225311.4152, Val 219236.7625, Test 225372.1619
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 87: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0057, Test 0.0056
          RMSE             : Train 225264.4975, Val 219324.5438, Test 225337.8514
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 88: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0051, Test 0.0067
          RMSE             : Train 225376.5659, Val 219266.5221, Test 225211.5710
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 89: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0046, Test 0.0077
          RMSE             : Train 225262.2628, Val 219203.6720, Test 225102.8722
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 90: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0049, Test 0.0065
          RMSE             : Train 225240.7369, Val 219235.3837, Test 225238.9098
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 91: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0041, Test 0.0060
          RMSE             : Train 225279.9921, Val 219150.3589, Test 225299.2937
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 92: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0095, Test 0.0043
          RMSE             : Train 225308.0530, Val 219744.6273, Test 225491.2379
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 93: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0072, Test 0.0041
          RMSE             : Train 225280.0302, Val 219492.8364, Test 225511.9988
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 94: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0186, Val -0.0034, Test 0.0051
          RMSE             : Train 225191.2293, Val 219072.0644, Test 225399.3584
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 95: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0063, Test 0.0052
          RMSE             : Train 225260.0780, Val 219397.0078, Test 225381.2182
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 96: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0187, Val -0.0060, Test 0.0065
          RMSE             : Train 225176.7742, Val 219355.9949, Test 225244.5209
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 97: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0097, Test 0.0028
          RMSE             : Train 225239.8823, Val 219767.2887, Test 225662.3494
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 98: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0056, Test 0.0045
          RMSE             : Train 225292.7266, Val 219317.1111, Test 225461.6817
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 99: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0181, Val -0.0055, Test 0.0058
          RMSE             : Train 225253.3104, Val 219310.8011, Test 225321.5870
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
Epoch 100: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0064, Test 0.0043

          RMSE             : Train 225258.7960, Val 219403.8875, Test 225492.5515
Best:
          R2_Score         : Train 0.0165, Val -0.0007, Test 0.0083
          RMSE             : Train 225437.8103, Val 218780.1682, Test 225035.2897
