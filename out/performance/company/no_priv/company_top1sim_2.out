  0%|          | 0/54068 [00:00<?, ?it/s]  1%|          | 651/54068 [00:00<00:08, 6503.00it/s]  3%|▎         | 1415/54068 [00:00<00:07, 7032.84it/s]  5%|▍         | 2479/54068 [00:00<00:05, 8659.63it/s]  7%|▋         | 3980/54068 [00:00<00:04, 11148.58it/s] 10%|▉         | 5238/54068 [00:00<00:04, 11660.26it/s] 12%|█▏        | 6653/54068 [00:00<00:03, 12501.01it/s] 15%|█▌        | 8188/54068 [00:00<00:03, 13427.13it/s] 18%|█▊        | 9595/54068 [00:00<00:03, 13627.95it/s] 20%|██        | 10959/54068 [00:00<00:03, 11945.40it/s] 23%|██▎       | 12483/54068 [00:01<00:03, 12870.78it/s] 27%|██▋       | 14337/54068 [00:01<00:02, 14493.33it/s] 29%|██▉       | 15822/54068 [00:01<00:02, 14326.67it/s] 32%|███▏      | 17460/54068 [00:01<00:02, 14919.10it/s] 35%|███▌      | 19088/54068 [00:01<00:02, 15313.45it/s] 38%|███▊      | 20635/54068 [00:01<00:02, 15345.32it/s] 41%|████      | 22221/54068 [00:01<00:02, 15496.59it/s] 44%|████▍     | 23779/54068 [00:01<00:02, 14355.78it/s] 47%|████▋     | 25603/54068 [00:01<00:01, 15448.94it/s] 50%|█████     | 27171/54068 [00:01<00:01, 15224.95it/s] 53%|█████▎    | 28746/54068 [00:02<00:01, 15374.42it/s] 56%|█████▌    | 30295/54068 [00:02<00:01, 14941.88it/s] 59%|█████▉    | 31799/54068 [00:02<00:01, 14051.09it/s] 61%|██████▏   | 33220/54068 [00:02<00:01, 13641.00it/s] 64%|██████▍   | 34609/54068 [00:02<00:01, 13707.55it/s] 67%|██████▋   | 35988/54068 [00:02<00:01, 13548.27it/s] 69%|██████▉   | 37558/54068 [00:02<00:01, 14162.17it/s] 72%|███████▏  | 39069/54068 [00:02<00:01, 14434.34it/s] 75%|███████▍  | 40519/54068 [00:02<00:00, 14312.76it/s] 78%|███████▊  | 41955/54068 [00:03<00:00, 13760.89it/s] 80%|████████  | 43338/54068 [00:03<00:00, 13763.10it/s] 83%|████████▎ | 44749/54068 [00:03<00:00, 13863.45it/s] 85%|████████▌ | 46139/54068 [00:03<00:00, 13643.32it/s] 88%|████████▊ | 47508/54068 [00:03<00:00, 13656.34it/s] 91%|█████████ | 49023/54068 [00:03<00:00, 14093.52it/s] 93%|█████████▎| 50522/54068 [00:03<00:00, 14358.39it/s] 96%|█████████▌| 51988/54068 [00:03<00:00, 14445.91it/s]100%|█████████▉| 53808/54068 [00:03<00:00, 15563.89it/s]100%|██████████| 54068/54068 [00:03<00:00, 13932.69it/s]
  0%|          | 0/7725 [00:00<?, ?it/s] 30%|██▉       | 2302/7725 [00:00<00:00, 23017.00it/s] 60%|█████▉    | 4604/7725 [00:00<00:00, 21860.18it/s] 88%|████████▊ | 6794/7725 [00:00<00:00, 18432.71it/s]100%|██████████| 7725/7725 [00:00<00:00, 19863.16it/s]
  0%|          | 0/15449 [00:00<?, ?it/s] 14%|█▍        | 2200/15449 [00:00<00:00, 21995.56it/s] 28%|██▊       | 4400/15449 [00:00<00:00, 21640.09it/s] 42%|████▏     | 6565/15449 [00:00<00:00, 19805.58it/s] 57%|█████▋    | 8768/15449 [00:00<00:00, 20630.81it/s] 72%|███████▏  | 11076/15449 [00:00<00:00, 21476.76it/s] 86%|████████▌ | 13237/15449 [00:00<00:00, 11364.96it/s] 96%|█████████▌| 14862/15449 [00:00<00:00, 12238.04it/s]100%|██████████| 15449/15449 [00:01<00:00, 15140.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.32it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.86it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.13it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.68it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.63it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.29it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.10it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  7.07it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.90it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.94it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.90it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.83it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.85it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.88it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.66it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.86it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.31it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.25it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.75it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.52it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.02it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.61it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.17it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.21it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.73it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.94it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.70it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.21it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.96it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.67it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.22it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.21it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.92it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.10it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.62it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.76it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.26it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.76it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.09it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.80it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.29it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.58it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.69it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.75it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.68it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.69it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.16it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.56it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.77it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.95it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.39it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.39it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.37it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.58it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.78it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Calculating noise scale
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
Preparing time (sec): 37
Loading data
Prepare for training
Start training
================================================================================
                                    Kernel Shape Output Shape  Params  \
Layer                                                                   
0_local_models.0.fc_layers.Linear_0    [90, 200]  [4096, 200]   18200   
1_local_models.0.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
2_local_models.1.fc_layers.Linear_0   [156, 200]  [4096, 200]   31400   
3_local_models.1.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
4_agg_model.fc_layers.Linear_0        [200, 400]  [4096, 400]   80400   
5_agg_model.fc_layers.Linear_1          [400, 1]    [4096, 1]     401   

                                     Mult-Adds  
Layer                                           
0_local_models.0.fc_layers.Linear_0      18000  
1_local_models.0.fc_layers.Linear_1      20000  
2_local_models.1.fc_layers.Linear_0      31200  
3_local_models.1.fc_layers.Linear_1      20000  
4_agg_model.fc_layers.Linear_0           80000  
5_agg_model.fc_layers.Linear_1             400  
--------------------------------------------------------------------------------
                      Totals
Total params          170601
Trainable params      170601
Non-trainable params       0
Mult-Adds             169600
================================================================================
n_classes=2
task=regression
model_name=company_top1sim_2022-08-10-19-24-53
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:7
test_batch_size=4096
train_batch_size=4096
learning_rate=0.001
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_top1sim_2022-08-10-19-24-53.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['rmse', 'r2_score', 'mae']
metrics_f=[<metric.rmse.RMSE object at 0x7fd7d00ecdf0>, <metric.r2_score.R2Score object at 0x7fd7d00ec250>, <metric.mae.MAE object at 0x7fd7d00ecac0>]
hidden_sizes=[200, 100]
model=SplitNN(
  (agg_model): MLP(
    (fc_layers): ModuleList(
      (0): Linear(in_features=200, out_features=400, bias=True)
      (1): Linear(in_features=400, out_features=1, bias=True)
    )
  )
  (local_models): ModuleList(
    (0): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=90, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
    (1): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=156, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fd7d00eca30>
dataset_type=real
drop_key=True
num_common_features=1
tree_radius=0.01
tree_leaf_size=1000
knn_k=50
grid_min=-10.0
grid_max=10.0
grid_width=1.5
sim_scaler=StandardScaler()
filter_top_k=None
link_n_jobs=1
psig_p=4
sim_leak_p=1.0
link_threshold_t=0.1
link_epsilon=0.1
n_hash_lsh=50
edit_distance_threshold=10
n_hash_func=50
collision_rate=0.01
qgram_q=4
link_delta=0.01
feature_wise_sim=False
blocking_method=knn_str
center_threshold=0.5
n_clusters=100
local_hidden_sizes=[[200], [200]]
cut_dims=[100, 100]
agg_hidden_sizes=[400]
scale_analysis=None
data1_shape=(77225, 91)
data2_shape=(220583, 157)
Epoch 1: Loss:            : Train 0.0000, Val 0.1955, Test 0.1949
          RMSE             : Train 1684315.7895, Val 1624788.2966, Test 1622396.5443
          R2_Score         : Train -53.9017, Val -54.1919, Test -50.5460
          MAE              : Train 1669836.2692, Val 1610468.3120, Test 1607871.8348
Best:
          RMSE             : Train 1684315.7895, Val 1624788.2966, Test 1622396.5443
          R2_Score         : Train -53.9017, Val -54.1919, Test -50.5460
          MAE              : Train 1669836.2692, Val 1610468.3120, Test 1607871.8348
Epoch 2: Loss:            : Train 0.0000, Val 0.1675, Test 0.1672
          RMSE             : Train 1568691.3023, Val 1504221.6079, Test 1502676.7293
          R2_Score         : Train -46.6227, Val -46.3049, Test -43.2193
          MAE              : Train 1552292.0229, Val 1487159.8230, Test 1485425.8020
Best:
          RMSE             : Train 1568691.3023, Val 1504221.6079, Test 1502676.7293
          R2_Score         : Train -46.6227, Val -46.3049, Test -43.2193
          MAE              : Train 1552292.0229, Val 1487159.8230, Test 1485425.8020
Epoch 3: Loss:            : Train 0.0000, Val 0.1388, Test 0.1386
          RMSE             : Train 1442491.0932, Val 1368912.8542, Test 1368120.6334
          R2_Score         : Train -39.2685, Val -38.1772, Test -35.6547
          MAE              : Train 1422278.5260, Val 1346895.6232, Test 1346011.9855
Best:
          RMSE             : Train 1442491.0932, Val 1368912.8542, Test 1368120.6334
          R2_Score         : Train -39.2685, Val -38.1772, Test -35.6547
          MAE              : Train 1422278.5260, Val 1346895.6232, Test 1346011.9855
Epoch 4: Loss:            : Train 0.0000, Val 0.1096, Test 0.1096
          RMSE             : Train 1300206.1967, Val 1216757.9584, Test 1216567.6604
          R2_Score         : Train -31.7163, Val -29.9521, Test -27.9837
          MAE              : Train 1273819.7441, Val 1187279.4847, Test 1187212.1969
Best:
          RMSE             : Train 1300206.1967, Val 1216757.9584, Test 1216567.6604
          R2_Score         : Train -31.7163, Val -29.9521, Test -27.9837
          MAE              : Train 1273819.7441, Val 1187279.4847, Test 1187212.1969
Epoch 5: Loss:            : Train 0.0000, Val 0.0816, Test 0.0816

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.59it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.93it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.46it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.15it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.52it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.84it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.25it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.05it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.79it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.68it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.40it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.57it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.08it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.49it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.70it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.19it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.57it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.28it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.03it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.29it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.97it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.68it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.57it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.45it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.50it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.90it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.02it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.88it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.31it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.55it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.01it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.31it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.87it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.64it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.56it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.31it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.50it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.83it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.20it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.55it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.38it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.94it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.92it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.53it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.67it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.16it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.40it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.81it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.69it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.54it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.56it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.81it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.53it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.15it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.22it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.36it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.78it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.28it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.78it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.95it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.80it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.69it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.28it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.15it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.32it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.34it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.63it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.22it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.46it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.33it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.42it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.19it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.78it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.34it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.77it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.39it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.87it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.64it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.09it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.42it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.01it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.65it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.94it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.97it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.89it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.60it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.84it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.09it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  8.14it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.40it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.79it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.91it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.72it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.56it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.63it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.16it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.27it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.47it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.09it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.25it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.14it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.28it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.80it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.45it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.25it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  6.00it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.05it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.66it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.43it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.25it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.55it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.52it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.25it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.38it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.92it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.96it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.82it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.13it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.67it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.72it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.94it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.93it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.03it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.06it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.93it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.32it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.70it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.34it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.97it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.60it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.05it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.67it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.20it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.64it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.77it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.32it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.90it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.61it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.14it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.42it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.06it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.06it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.13it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.67it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.47it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.03it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.56it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.46it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.84it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.05it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.59it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.36it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.76it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.70it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.86it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.31it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.46it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.69it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.23it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.42it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.22it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.95it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.18it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.38it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.45it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.39it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.81it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.92it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.14it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.63it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.53it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.26it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.75it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.71it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.45it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.40it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.83it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.68it/s]          RMSE             : Train 1141741.1272, Val 1049919.5564, Test 1050255.7479
          R2_Score         : Train -24.2275, Val -22.0459, Test -20.6009
          MAE              : Train 1106636.6630, Val 1011165.4652, Test 1011081.6116
Best:
          RMSE             : Train 1141741.1272, Val 1049919.5564, Test 1050255.7479
          R2_Score         : Train -24.2275, Val -22.0459, Test -20.6009
          MAE              : Train 1106636.6630, Val 1011165.4652, Test 1011081.6116
Epoch 6: Loss:            : Train 0.0000, Val 0.0566, Test 0.0567
          RMSE             : Train 970983.5393, Val 874494.2923, Test 875336.8088
          R2_Score         : Train -17.2458, Val -14.9881, Test -14.0048
          MAE              : Train 925355.2096, Val 825993.6396, Test 825715.8972
Best:
          RMSE             : Train 970983.5393, Val 874494.2923, Test 875336.8088
          R2_Score         : Train -17.2458, Val -14.9881, Test -14.0048
          MAE              : Train 925355.2096, Val 825993.6396, Test 825715.8972
Epoch 7: Loss:            : Train 0.0000, Val 0.0363, Test 0.0365
          RMSE             : Train 796144.9851, Val 700350.4440, Test 701769.1336
          R2_Score         : Train -11.2666, Val -9.2545, Test -8.6443
          MAE              : Train 740601.2085, Val 643711.7547, Test 644180.0255
Best:
          RMSE             : Train 796144.9851, Val 700350.4440, Test 701769.1336
          R2_Score         : Train -11.2666, Val -9.2545, Test -8.6443
          MAE              : Train 740601.2085, Val 643711.7547, Test 644180.0255
Epoch 8: Loss:            : Train 0.0000, Val 0.0216, Test 0.0217
          RMSE             : Train 627868.5468, Val 539746.4135, Test 541957.8872
          R2_Score         : Train -6.6292, Val -5.0906, Test -4.7519
          MAE              : Train 566344.8997, Val 479226.2968, Test 480429.8785
Best:
          RMSE             : Train 627868.5468, Val 539746.4135, Test 541957.8872
          R2_Score         : Train -6.6292, Val -5.0906, Test -4.7519
          MAE              : Train 566344.8997, Val 479226.2968, Test 480429.8785
Epoch 9: Loss:            : Train 0.0000, Val 0.0121, Test 0.0123
          RMSE             : Train 479429.1732, Val 404660.3163, Test 408182.4025
          R2_Score         : Train -3.4482, Val -2.4234, Test -2.2628
          MAE              : Train 415622.8607, Val 344357.2642, Test 345665.5448
Best:
          RMSE             : Train 479429.1732, Val 404660.3163, Test 408182.4025
          R2_Score         : Train -3.4482, Val -2.4234, Test -2.2628
          MAE              : Train 415622.8607, Val 344357.2642, Test 345665.5448
Epoch 10: Loss:            : Train 0.0000, Val 0.0069, Test 0.0071
          RMSE             : Train 361388.0724, Val 304825.9891, Test 310217.1137
          R2_Score         : Train -1.5275, Val -0.9426, Test -0.8846
          MAE              : Train 297235.4675, Val 244113.1194, Test 245419.4795
Best:
          RMSE             : Train 361388.0724, Val 304825.9891, Test 310217.1137
          R2_Score         : Train -1.5275, Val -0.9426, Test -0.8846
          MAE              : Train 297235.4675, Val 244113.1194, Test 245419.4795
Epoch 11: Loss:            : Train 0.0000, Val 0.0045, Test 0.0047
          RMSE             : Train 282256.4129, Val 245140.2205, Test 252497.8609
          R2_Score         : Train -0.5418, Val -0.2564, Test -0.2485
          MAE              : Train 213573.5747, Val 178129.5882, Test 179398.4484
Best:
          RMSE             : Train 282256.4129, Val 245140.2205, Test 252497.8609
          R2_Score         : Train -0.5418, Val -0.2564, Test -0.2485
          MAE              : Train 213573.5747, Val 178129.5882, Test 179398.4484
Epoch 12: Loss:            : Train 0.0000, Val 0.0036, Test 0.0039
          RMSE             : Train 241307.6010, Val 220293.9772, Test 228932.7777
          R2_Score         : Train -0.1269, Val -0.0146, Test -0.0264
          MAE              : Train 161389.4162, Val 140035.9544, Test 141447.6853
Best:
          RMSE             : Train 241307.6010, Val 220293.9772, Test 228932.7777
          R2_Score         : Train -0.1269, Val -0.0146, Test -0.0264
          MAE              : Train 161389.4162, Val 140035.9544, Test 141447.6853
Epoch 13: Loss:            : Train 0.0000, Val 0.0033, Test 0.0036
          RMSE             : Train 227237.9891, Val 211328.1728, Test 220327.4291
          R2_Score         : Train 0.0007, Val 0.0663, Test 0.0494
          MAE              : Train 133714.2256, Val 122154.1598, Test 123876.5673
Best:
          RMSE             : Train 227237.9891, Val 211328.1728, Test 220327.4291
          R2_Score         : Train 0.0007, Val 0.0663, Test 0.0494
          MAE              : Train 133714.2256, Val 122154.1598, Test 123876.5673
Epoch 14: Loss:            : Train 0.0000, Val 0.0028, Test 0.0031
          RMSE             : Train 215594.9684, Val 194838.6861, Test 203340.2441
          R2_Score         : Train 0.1005, Val 0.2063, Test 0.1903
          MAE              : Train 122787.6012, Val 118265.0489, Test 119641.1498
Best:
          RMSE             : Train 215594.9684, Val 194838.6861, Test 203340.2441
          R2_Score         : Train 0.1005, Val 0.2063, Test 0.1903
          MAE              : Train 122787.6012, Val 118265.0489, Test 119641.1498
Epoch 15: Loss:            : Train 0.0000, Val 0.0023, Test 0.0025
          RMSE             : Train 197578.8535, Val 177368.2347, Test 184248.5557
          R2_Score         : Train 0.2445, Val 0.3423, Test 0.3352
          MAE              : Train 120357.5411, Val 116832.2945, Test 118194.8100
Best:
          RMSE             : Train 197578.8535, Val 177368.2347, Test 184248.5557
          R2_Score         : Train 0.2445, Val 0.3423, Test 0.3352
          MAE              : Train 120357.5411, Val 116832.2945, Test 118194.8100
Epoch 16: Loss:            : Train 0.0000, Val 0.0019, Test 0.0020
          RMSE             : Train 178145.3148, Val 158322.1660, Test 163051.7462
          R2_Score         : Train 0.3858, Val 0.4760, Test 0.4794
          MAE              : Train 115634.0838, Val 107892.4865, Test 109021.5209
Best:
          RMSE             : Train 178145.3148, Val 158322.1660, Test 163051.7462
          R2_Score         : Train 0.3858, Val 0.4760, Test 0.4794
          MAE              : Train 115634.0838, Val 107892.4865, Test 109021.5209
Epoch 17: Loss:            : Train 0.0000, Val 0.0014, Test 0.0015
          RMSE             : Train 156180.3709, Val 137681.2388, Test 140134.3485
          R2_Score         : Train 0.5279, Val 0.6037, Test 0.6154
          MAE              : Train 104247.7111, Val 94950.3061, Test 95764.9571
Best:
          RMSE             : Train 156180.3709, Val 137681.2388, Test 140134.3485
          R2_Score         : Train 0.5279, Val 0.6037, Test 0.6154
          MAE              : Train 104247.7111, Val 94950.3061, Test 95764.9571
Epoch 18: Loss:            : Train 0.0000, Val 0.0011, Test 0.0011
          RMSE             : Train 134159.7417, Val 118911.1425, Test 119596.6133
          R2_Score         : Train 0.6517, Val 0.7044, Test 0.7199
          MAE              : Train 90647.2532, Val 81056.5412, Test 81511.8865
Best:
          RMSE             : Train 134159.7417, Val 118911.1425, Test 119596.6133
          R2_Score         : Train 0.6517, Val 0.7044, Test 0.7199
          MAE              : Train 90647.2532, Val 81056.5412, Test 81511.8865
Epoch 19: Loss:            : Train 0.0000, Val 0.0008, Test 0.0008
          RMSE             : Train 115650.1977, Val 104790.7685, Test 104717.3781
          R2_Score         : Train 0.7412, Val 0.7704, Test 0.7853
          MAE              : Train 75851.8307, Val 66595.3657, Test 66759.5974
Best:
          RMSE             : Train 115650.1977, Val 104790.7685, Test 104717.3781
          R2_Score         : Train 0.7412, Val 0.7704, Test 0.7853
          MAE              : Train 75851.8307, Val 66595.3657, Test 66759.5974
Epoch 20: Loss:            : Train 0.0000, Val 0.0007, Test 0.0007
          RMSE             : Train 102670.9295, Val 94862.1742, Test 94402.7997

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.97it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.37it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.08it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.05it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.11it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.33it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.18it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.36it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.49it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.99it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.18it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.90it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.68it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.73it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.96it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.41it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.09it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.96it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.79it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.31it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.11it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.92it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.88it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.29it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.38it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.63it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.78it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.26it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.19it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.67it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.33it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.31it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.04it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.06it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.57it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.40it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.91it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.91it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.91it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  5.80it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.89it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.03it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.98it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.20it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.99it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.12it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.50it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.73it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.77it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.51it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.51it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.95it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.93it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.56it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.97it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.72it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.18it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.45it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.84it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.30it/s]Test:  75%|███████▌  | 3/4 [00:01<00:00,  2.67it/s]Test: 100%|██████████| 4/4 [00:01<00:00,  3.69it/s]Test: 100%|██████████| 4/4 [00:01<00:00,  3.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.20it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.86it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.64it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.60it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.18it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.24it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.84it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.74it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.71it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.13it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  1.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.22it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.16it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.87it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.31it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.17it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.09it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.62it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.20it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.33it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.24it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.27it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.04it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  2.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.15it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.52it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.19it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.95it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.70it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.06it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.21it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.84it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.25it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.33it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.62it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.76it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.23it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.92it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.16it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.62it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.24it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.41it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.10it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.50it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.66it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.90it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.35it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.36it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.72it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.13it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.48it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.82it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.71it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.50it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.25it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.01it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.68it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.26it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.69it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  2.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.35it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.90it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.44it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.38it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.84it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.64it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.13it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.87it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.01it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.75it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.45it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.26it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.38it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.66it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.01it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.71it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.89it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.63it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.21it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.49it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.74it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.07it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.42it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.42it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.40it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.41it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.53it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.07it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.57it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.30it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.42it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.48it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.16it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.87it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.76it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.46it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.42it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.87it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.42it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.76it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.34it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.40it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.92it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.01it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.97it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.81it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.43it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.69it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.25it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.84it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.35it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.73it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.80it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.55it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.90it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.15it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.92it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.58it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.79it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.53it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.83it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.88it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.66it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.91it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.51it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.19it/s]          R2_Score         : Train 0.7960, Val 0.8119, Test 0.8255
          MAE              : Train 62742.0734, Val 57018.1476, Test 56858.1890
Best:
          RMSE             : Train 102670.9295, Val 94862.1742, Test 94402.7997
          R2_Score         : Train 0.7960, Val 0.8119, Test 0.8255
          MAE              : Train 62742.0734, Val 57018.1476, Test 56858.1890
Epoch 21: Loss:            : Train 0.0000, Val 0.0005, Test 0.0005
          RMSE             : Train 92149.4012, Val 85418.8598, Test 85346.5789
          R2_Score         : Train 0.8357, Val 0.8475, Test 0.8574
          MAE              : Train 55002.6404, Val 52569.1728, Test 52240.5236
Best:
          RMSE             : Train 92149.4012, Val 85418.8598, Test 85346.5789
          R2_Score         : Train 0.8357, Val 0.8475, Test 0.8574
          MAE              : Train 55002.6404, Val 52569.1728, Test 52240.5236
Epoch 22: Loss:            : Train 0.0000, Val 0.0004, Test 0.0005
          RMSE             : Train 83642.0167, Val 77620.7101, Test 78771.3266
          R2_Score         : Train 0.8646, Val 0.8740, Test 0.8785
          MAE              : Train 51098.5688, Val 49088.7954, Test 48845.1905
Best:
          RMSE             : Train 83642.0167, Val 77620.7101, Test 78771.3266
          R2_Score         : Train 0.8646, Val 0.8740, Test 0.8785
          MAE              : Train 51098.5688, Val 49088.7954, Test 48845.1905
Epoch 23: Loss:            : Train 0.0000, Val 0.0004, Test 0.0004
          RMSE             : Train 76827.5478, Val 71535.7055, Test 73227.0904
          R2_Score         : Train 0.8858, Val 0.8930, Test 0.8950
          MAE              : Train 46822.6481, Val 43959.7363, Test 43793.1862
Best:
          RMSE             : Train 76827.5478, Val 71535.7055, Test 73227.0904
          R2_Score         : Train 0.8858, Val 0.8930, Test 0.8950
          MAE              : Train 46822.6481, Val 43959.7363, Test 43793.1862
Epoch 24: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 71079.1649, Val 66433.0433, Test 68635.7332
          R2_Score         : Train 0.9022, Val 0.9077, Test 0.9077
          MAE              : Train 42621.9834, Val 40693.7327, Test 40530.7368
Best:
          RMSE             : Train 71079.1649, Val 66433.0433, Test 68635.7332
          R2_Score         : Train 0.9022, Val 0.9077, Test 0.9077
          MAE              : Train 42621.9834, Val 40693.7327, Test 40530.7368
Epoch 25: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 66803.2320, Val 62825.8595, Test 65330.1337
          R2_Score         : Train 0.9136, Val 0.9175, Test 0.9164
          MAE              : Train 39442.3959, Val 37592.4731, Test 37559.8902
Best:
          RMSE             : Train 66803.2320, Val 62825.8595, Test 65330.1337
          R2_Score         : Train 0.9136, Val 0.9175, Test 0.9164
          MAE              : Train 39442.3959, Val 37592.4731, Test 37559.8902
Epoch 26: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 63348.7190, Val 60166.2990, Test 62789.2343
          R2_Score         : Train 0.9223, Val 0.9243, Test 0.9228
          MAE              : Train 36863.8581, Val 35785.6353, Test 35816.9843
Best:
          RMSE             : Train 63348.7190, Val 60166.2990, Test 62789.2343
          R2_Score         : Train 0.9223, Val 0.9243, Test 0.9228
          MAE              : Train 36863.8581, Val 35785.6353, Test 35816.9843
Epoch 27: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 60776.1352, Val 57960.1276, Test 60233.7572
          R2_Score         : Train 0.9285, Val 0.9298, Test 0.9290
          MAE              : Train 34972.4079, Val 33445.1725, Test 33553.3204
Best:
          RMSE             : Train 60776.1352, Val 57960.1276, Test 60233.7572
          R2_Score         : Train 0.9285, Val 0.9298, Test 0.9290
          MAE              : Train 34972.4079, Val 33445.1725, Test 33553.3204
Epoch 28: Loss:            : Train 0.0000, Val 0.0002, Test 0.0003
          RMSE             : Train 58429.7319, Val 55844.8206, Test 58263.8808
          R2_Score         : Train 0.9339, Val 0.9348, Test 0.9335
          MAE              : Train 33202.3184, Val 32479.0236, Test 32499.8532
Best:
          RMSE             : Train 58429.7319, Val 55844.8206, Test 58263.8808
          R2_Score         : Train 0.9339, Val 0.9348, Test 0.9335
          MAE              : Train 33202.3184, Val 32479.0236, Test 32499.8532
Epoch 29: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 56443.3770, Val 54860.0927, Test 57097.3499
          R2_Score         : Train 0.9383, Val 0.9371, Test 0.9362
          MAE              : Train 32049.3912, Val 31415.8083, Test 31435.5618
Best:
          RMSE             : Train 56443.3770, Val 54860.0927, Test 57097.3499
          R2_Score         : Train 0.9383, Val 0.9371, Test 0.9362
          MAE              : Train 32049.3912, Val 31415.8083, Test 31435.5618
Epoch 30: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 55161.6632, Val 53288.0557, Test 55348.7386
          R2_Score         : Train 0.9411, Val 0.9406, Test 0.9400
          MAE              : Train 31065.1277, Val 30244.8803, Test 30174.4109
Best:
          RMSE             : Train 55161.6632, Val 53288.0557, Test 55348.7386
          R2_Score         : Train 0.9411, Val 0.9406, Test 0.9400
          MAE              : Train 31065.1277, Val 30244.8803, Test 30174.4109
Epoch 31: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 53354.4951, Val 51910.8799, Test 53824.8282
          R2_Score         : Train 0.9449, Val 0.9437, Test 0.9433
          MAE              : Train 29820.4915, Val 29408.3072, Test 29320.1431
Best:
          RMSE             : Train 53354.4951, Val 51910.8799, Test 53824.8282
          R2_Score         : Train 0.9449, Val 0.9437, Test 0.9433
          MAE              : Train 29820.4915, Val 29408.3072, Test 29320.1431
Epoch 32: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 52042.7530, Val 50964.4764, Test 52902.2375
          R2_Score         : Train 0.9476, Val 0.9457, Test 0.9452
          MAE              : Train 29045.7575, Val 28345.7344, Test 28383.2916
Best:
          RMSE             : Train 52042.7530, Val 50964.4764, Test 52902.2375
          R2_Score         : Train 0.9476, Val 0.9457, Test 0.9452
          MAE              : Train 29045.7575, Val 28345.7344, Test 28383.2916
Epoch 33: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 50746.8613, Val 50275.4212, Test 52007.0335
          R2_Score         : Train 0.9502, Val 0.9472, Test 0.9470
          MAE              : Train 28224.8985, Val 27792.6627, Test 27824.5488
Best:
          RMSE             : Train 50746.8613, Val 50275.4212, Test 52007.0335
          R2_Score         : Train 0.9502, Val 0.9472, Test 0.9470
          MAE              : Train 28224.8985, Val 27792.6627, Test 27824.5488
Epoch 34: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 49873.4970, Val 49168.1098, Test 50773.7575
          R2_Score         : Train 0.9519, Val 0.9495, Test 0.9495
          MAE              : Train 27657.3301, Val 27481.9058, Test 27235.9620
Best:
          RMSE             : Train 49873.4970, Val 49168.1098, Test 50773.7575
          R2_Score         : Train 0.9519, Val 0.9495, Test 0.9495
          MAE              : Train 27657.3301, Val 27481.9058, Test 27235.9620
Epoch 35: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 48961.8587, Val 48396.4618, Test 49998.6688
          R2_Score         : Train 0.9536, Val 0.9510, Test 0.9510
          MAE              : Train 26990.6048, Val 26473.0431, Test 26484.8629
Best:
          RMSE             : Train 48961.8587, Val 48396.4618, Test 49998.6688
          R2_Score         : Train 0.9536, Val 0.9510, Test 0.9510

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.36it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.09it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.85it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.71it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.66it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.45it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.64it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.17it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.48it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.21it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.74it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.88it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.45it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.70it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.03it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.04it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.08it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.66it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.21it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.58it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.36it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.53it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  1.68it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.50it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.89it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.53it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.02it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.86it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.36it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.83it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.69it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.58it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.41it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.45it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.73it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.88it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.22it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.53it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.67it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.70it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.42it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.31it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.93it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.57it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.38it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.96it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.86it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.64it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.28it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.58it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.06it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.63it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.12it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.56it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.45it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.27it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.27it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.18it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.16it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  3.83it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.27it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00, 10.00it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.63it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.73it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.51it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.35it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.60it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.68it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.52it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.80it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.07it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.29it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.12it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  3.81it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.35it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.75it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.56it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.59it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.35it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.33it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.25it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.40it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.17it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.12it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.64it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.63it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.00it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.88it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.54it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.89it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.63it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.96it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.95it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  6.21it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.13it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.26it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.99it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.35it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.65it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.50it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.68it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.73it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  2.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.32it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.87it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.39it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.18it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.33it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.32it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.34it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.30it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.23it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.92it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.54it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.38it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  3.70it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.74it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.52it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.88it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.06it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.22it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.87it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.41it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.36it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.28it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.53it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.42it/s]Train:  79%|███████▊  | 11/14 [00:03<00:00,  3.57it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.74it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.43it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  3.82it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  3.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.46it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.54it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.40it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.82it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.83it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.58it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.34it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.03it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.88it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.56it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.69it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.39it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.37it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.35it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.21it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.94it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.18it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.51it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.11it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.60it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.33it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.12it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.91it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.44it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.30it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.81it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.95it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.70it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.12it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.41it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.91it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.05it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.15it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.29it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.16it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.78it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.37it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.77it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.07it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.71it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.32it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.48it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.06it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.93it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.80it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.78it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.51it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.71it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.41it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.57it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.35it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.01it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.88it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.15it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.96it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.58it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.05it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.18it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.66it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.67it/s]Train:  21%|██▏       | 3/14 [00:00<00:04,  2.71it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.93it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.53it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.27it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.30it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.10it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.70it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.83it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  2.78it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  3.10it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.55it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.52it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.78it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.45it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.60it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.15it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.48it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.57it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.19it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.22it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.43it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.11it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.63it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.47it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.04it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.04it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.55it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.25it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.78it/s]          MAE              : Train 26990.6048, Val 26473.0431, Test 26484.8629
Epoch 36: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 47997.3157, Val 48118.4257, Test 49098.5145
          R2_Score         : Train 0.9554, Val 0.9516, Test 0.9528
          MAE              : Train 26588.4334, Val 26237.2014, Test 26131.7740
Best:
          RMSE             : Train 47997.3157, Val 48118.4257, Test 49098.5145
          R2_Score         : Train 0.9554, Val 0.9516, Test 0.9528
          MAE              : Train 26588.4334, Val 26237.2014, Test 26131.7740
Epoch 37: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 47152.2974, Val 47738.0206, Test 48405.3223
          R2_Score         : Train 0.9570, Val 0.9524, Test 0.9541
          MAE              : Train 25942.7545, Val 25754.3250, Test 25576.2746
Best:
          RMSE             : Train 47152.2974, Val 47738.0206, Test 48405.3223
          R2_Score         : Train 0.9570, Val 0.9524, Test 0.9541
          MAE              : Train 25942.7545, Val 25754.3250, Test 25576.2746
Epoch 38: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 46265.7694, Val 47458.0440, Test 47742.2276
          R2_Score         : Train 0.9586, Val 0.9529, Test 0.9554
          MAE              : Train 25397.3102, Val 25170.1413, Test 25080.0171
Best:
          RMSE             : Train 46265.7694, Val 47458.0440, Test 47742.2276
          R2_Score         : Train 0.9586, Val 0.9529, Test 0.9554
          MAE              : Train 25397.3102, Val 25170.1413, Test 25080.0171
Epoch 39: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 45718.9522, Val 46718.3809, Test 46998.9094
          R2_Score         : Train 0.9595, Val 0.9544, Test 0.9567
          MAE              : Train 25115.7807, Val 24961.5660, Test 24656.8460
Best:
          RMSE             : Train 45718.9522, Val 46718.3809, Test 46998.9094
          R2_Score         : Train 0.9595, Val 0.9544, Test 0.9567
          MAE              : Train 25115.7807, Val 24961.5660, Test 24656.8460
Epoch 40: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 45031.0036, Val 46600.2040, Test 46496.6478
          R2_Score         : Train 0.9608, Val 0.9546, Test 0.9577
          MAE              : Train 24486.8219, Val 24743.3449, Test 24364.2948
Best:
          RMSE             : Train 45031.0036, Val 46600.2040, Test 46496.6478
          R2_Score         : Train 0.9608, Val 0.9546, Test 0.9577
          MAE              : Train 24486.8219, Val 24743.3449, Test 24364.2948
Epoch 41: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 44410.2525, Val 46061.7644, Test 46106.1375
          R2_Score         : Train 0.9618, Val 0.9556, Test 0.9584
          MAE              : Train 24252.7336, Val 24414.1891, Test 24180.4643
Best:
          RMSE             : Train 44410.2525, Val 46061.7644, Test 46106.1375
          R2_Score         : Train 0.9618, Val 0.9556, Test 0.9584
          MAE              : Train 24252.7336, Val 24414.1891, Test 24180.4643
Epoch 42: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43630.3349, Val 46714.2368, Test 45773.6908
          R2_Score         : Train 0.9632, Val 0.9544, Test 0.9590
          MAE              : Train 23842.2388, Val 24212.2216, Test 23959.4113
Best:
          RMSE             : Train 44410.2525, Val 46061.7644, Test 46106.1375
          R2_Score         : Train 0.9618, Val 0.9556, Test 0.9584
          MAE              : Train 24252.7336, Val 24414.1891, Test 24180.4643
Epoch 43: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43328.9180, Val 46465.2873, Test 46002.3928
          R2_Score         : Train 0.9637, Val 0.9549, Test 0.9586
          MAE              : Train 23623.6421, Val 24273.3779, Test 23973.9908
Best:
          RMSE             : Train 44410.2525, Val 46061.7644, Test 46106.1375
          R2_Score         : Train 0.9618, Val 0.9556, Test 0.9584
          MAE              : Train 24252.7336, Val 24414.1891, Test 24180.4643
Epoch 44: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 42831.2866, Val 46027.8932, Test 45270.8845
          R2_Score         : Train 0.9645, Val 0.9557, Test 0.9599
          MAE              : Train 23308.4221, Val 23500.5102, Test 23288.3186
Best:
          RMSE             : Train 42831.2866, Val 46027.8932, Test 45270.8845
          R2_Score         : Train 0.9645, Val 0.9557, Test 0.9599
          MAE              : Train 23308.4221, Val 23500.5102, Test 23288.3186
Epoch 45: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 42239.6148, Val 45196.4201, Test 44751.0156
          R2_Score         : Train 0.9655, Val 0.9573, Test 0.9608
          MAE              : Train 22956.6285, Val 23364.2625, Test 23009.1857
Best:
          RMSE             : Train 42239.6148, Val 45196.4201, Test 44751.0156
          R2_Score         : Train 0.9655, Val 0.9573, Test 0.9608
          MAE              : Train 22956.6285, Val 23364.2625, Test 23009.1857
Epoch 46: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 41706.0777, Val 45251.8471, Test 44593.7033
          R2_Score         : Train 0.9663, Val 0.9572, Test 0.9611
          MAE              : Train 22595.2423, Val 23331.5473, Test 23002.4115
Best:
          RMSE             : Train 42239.6148, Val 45196.4201, Test 44751.0156
          R2_Score         : Train 0.9655, Val 0.9573, Test 0.9608
          MAE              : Train 22956.6285, Val 23364.2625, Test 23009.1857
Epoch 47: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 41406.7513, Val 45396.1357, Test 44358.4453
          R2_Score         : Train 0.9668, Val 0.9569, Test 0.9615
          MAE              : Train 22425.5888, Val 23164.6313, Test 22816.1797
Best:
          RMSE             : Train 42239.6148, Val 45196.4201, Test 44751.0156
          R2_Score         : Train 0.9655, Val 0.9573, Test 0.9608
          MAE              : Train 22956.6285, Val 23364.2625, Test 23009.1857
Epoch 48: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 40668.0783, Val 45172.4739, Test 44208.5163
          R2_Score         : Train 0.9680, Val 0.9573, Test 0.9617
          MAE              : Train 22078.6559, Val 22726.6208, Test 22511.2602
Best:
          RMSE             : Train 40668.0783, Val 45172.4739, Test 44208.5163
          R2_Score         : Train 0.9680, Val 0.9573, Test 0.9617
          MAE              : Train 22078.6559, Val 22726.6208, Test 22511.2602
Epoch 49: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 40485.9847, Val 45395.4995, Test 43883.5316
          R2_Score         : Train 0.9683, Val 0.9569, Test 0.9623
          MAE              : Train 21935.4698, Val 22689.3089, Test 22362.3741
Best:
          RMSE             : Train 40668.0783, Val 45172.4739, Test 44208.5163
          R2_Score         : Train 0.9680, Val 0.9573, Test 0.9617
          MAE              : Train 22078.6559, Val 22726.6208, Test 22511.2602
Epoch 50: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 40025.1483, Val 44943.9531, Test 43745.8276
          R2_Score         : Train 0.9690, Val 0.9578, Test 0.9625
          MAE              : Train 21700.5375, Val 22631.2645, Test 22262.3721
Best:
          RMSE             : Train 40025.1483, Val 44943.9531, Test 43745.8276
          R2_Score         : Train 0.9690, Val 0.9578, Test 0.9625
          MAE              : Train 21700.5375, Val 22631.2645, Test 22262.3721
Epoch 51: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 39654.8593, Val 45420.4051, Test 43679.9682
          R2_Score         : Train 0.9696, Val 0.9569, Test 0.9626

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.88it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.48it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.12it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.08it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.29it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.32it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.56it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.05it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.21it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.07it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.81it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.55it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.91it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.75it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.61it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.42it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.16it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.05it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.36it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.92it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.44it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.53it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.15it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.76it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.79it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.79it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.29it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.42it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.25it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.65it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.92it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.19it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.53it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.17it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.74it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.01it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.99it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.57it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.44it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.97it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.79it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.36it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.83it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.44it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.03it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.98it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.96it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.63it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.32it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.90it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.01it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.01it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.31it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.23it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.26it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.48it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.19it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.89it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.72it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.55it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.30it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.53it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.98it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.79it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.64it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.40it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.50it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.24it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.67it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.93it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.26it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.63it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.54it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.36it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.12it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.95it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.39it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.42it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.32it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.68it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.29it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.32it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.28it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.99it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.49it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.37it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.87it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.74it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.28it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.91it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.23it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.27it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.13it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.17it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.52it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.72it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.92it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.85it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.80it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.67it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.97it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.49it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.87it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.64it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.48it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.86it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.85it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.51it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.97it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.51it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.97it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.68it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.48it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.26it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.99it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.74it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.25it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.26it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.82it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.33it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.14it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.80it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.76it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.20it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.72it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.53it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.34it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.00it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.89it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.61it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.60it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.63it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.77it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.86it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.44it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.20it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.82it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.95it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.47it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.20it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.91it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.61it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.87it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.44it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  2.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.12it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.23it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.20it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.69it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.98it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.86it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.08it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.95it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.55it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.38it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.99it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.65it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.23it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.15it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.91it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.56it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.49it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.01it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.68it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  4.68it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.40it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.48it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.49it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.69it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.76it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.44it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.08it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  3.31it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.93it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.68it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.26it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.51it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.78it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.47it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.05it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.53it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.91it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.55it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.45it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  3.09it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.32it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.93it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.52it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.02it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.63it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.83it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.77it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.24it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.56it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.09it/s]          MAE              : Train 21408.9875, Val 22269.8502, Test 21823.6884
Best:
          RMSE             : Train 40025.1483, Val 44943.9531, Test 43745.8276
          R2_Score         : Train 0.9690, Val 0.9578, Test 0.9625
          MAE              : Train 21700.5375, Val 22631.2645, Test 22262.3721
Epoch 52: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 39263.4804, Val 45042.0823, Test 43854.2671
          R2_Score         : Train 0.9702, Val 0.9576, Test 0.9623
          MAE              : Train 21213.0024, Val 22163.9109, Test 21812.3288
Best:
          RMSE             : Train 40025.1483, Val 44943.9531, Test 43745.8276
          R2_Score         : Train 0.9690, Val 0.9578, Test 0.9625
          MAE              : Train 21700.5375, Val 22631.2645, Test 22262.3721
Epoch 53: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38882.2184, Val 44695.0333, Test 43523.4299
          R2_Score         : Train 0.9707, Val 0.9582, Test 0.9629
          MAE              : Train 21008.9844, Val 21914.4114, Test 21607.1701
Best:
          RMSE             : Train 38882.2184, Val 44695.0333, Test 43523.4299
          R2_Score         : Train 0.9707, Val 0.9582, Test 0.9629
          MAE              : Train 21008.9844, Val 21914.4114, Test 21607.1701
Epoch 54: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 38559.7675, Val 44938.5344, Test 43310.0760
          R2_Score         : Train 0.9712, Val 0.9578, Test 0.9633
          MAE              : Train 20841.6769, Val 21916.1583, Test 21396.6013
Best:
          RMSE             : Train 38882.2184, Val 44695.0333, Test 43523.4299
          R2_Score         : Train 0.9707, Val 0.9582, Test 0.9629
          MAE              : Train 21008.9844, Val 21914.4114, Test 21607.1701
Epoch 55: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38429.6702, Val 44377.4844, Test 43061.1280
          R2_Score         : Train 0.9714, Val 0.9588, Test 0.9637
          MAE              : Train 20574.8170, Val 21704.1108, Test 21376.7427
Best:
          RMSE             : Train 38429.6702, Val 44377.4844, Test 43061.1280
          R2_Score         : Train 0.9714, Val 0.9588, Test 0.9637
          MAE              : Train 20574.8170, Val 21704.1108, Test 21376.7427
Epoch 56: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38071.2331, Val 44600.5477, Test 43100.0160
          R2_Score         : Train 0.9719, Val 0.9584, Test 0.9636
          MAE              : Train 20526.6777, Val 21716.6059, Test 21202.3560
Best:
          RMSE             : Train 38429.6702, Val 44377.4844, Test 43061.1280
          R2_Score         : Train 0.9714, Val 0.9588, Test 0.9637
          MAE              : Train 20574.8170, Val 21704.1108, Test 21376.7427
Epoch 57: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 37645.9587, Val 44337.4366, Test 43037.7018
          R2_Score         : Train 0.9726, Val 0.9589, Test 0.9637
          MAE              : Train 20326.3212, Val 21578.5220, Test 21073.0314
Best:
          RMSE             : Train 37645.9587, Val 44337.4366, Test 43037.7018
          R2_Score         : Train 0.9726, Val 0.9589, Test 0.9637
          MAE              : Train 20326.3212, Val 21578.5220, Test 21073.0314
Epoch 58: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 37358.0875, Val 44404.6320, Test 42888.3055
          R2_Score         : Train 0.9730, Val 0.9588, Test 0.9640
          MAE              : Train 20038.2014, Val 21365.7627, Test 20878.0006
Best:
          RMSE             : Train 37645.9587, Val 44337.4366, Test 43037.7018
          R2_Score         : Train 0.9726, Val 0.9589, Test 0.9637
          MAE              : Train 20326.3212, Val 21578.5220, Test 21073.0314
Epoch 59: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633
Best:
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633
Epoch 60: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36827.4074, Val 44472.2121, Test 42781.5337
          R2_Score         : Train 0.9738, Val 0.9587, Test 0.9642
          MAE              : Train 19800.6284, Val 21025.4513, Test 20546.0633
Best:
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633
Epoch 61: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 36533.6993, Val 45149.9321, Test 43451.8936
          R2_Score         : Train 0.9742, Val 0.9574, Test 0.9630
          MAE              : Train 19496.1503, Val 20957.7094, Test 20695.5026
Best:
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633
Epoch 62: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 36683.8240, Val 44899.0290, Test 43131.4152
          R2_Score         : Train 0.9740, Val 0.9579, Test 0.9636
          MAE              : Train 19758.6630, Val 20860.0405, Test 20452.4777
Best:
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633
Epoch 63: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36179.8074, Val 44067.8399, Test 42746.3271
          R2_Score         : Train 0.9747, Val 0.9594, Test 0.9642
          MAE              : Train 19301.6414, Val 20767.5497, Test 20424.8744
Best:
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633
Epoch 64: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35738.2164, Val 44565.5370, Test 42744.6266
          R2_Score         : Train 0.9753, Val 0.9585, Test 0.9642
          MAE              : Train 19124.6611, Val 20676.5773, Test 20214.9006
Best:
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633
Epoch 65: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35673.1464, Val 44907.7812, Test 43042.1466
          R2_Score         : Train 0.9754, Val 0.9578, Test 0.9637
          MAE              : Train 19027.3698, Val 20567.3911, Test 20217.0639
Best:
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633
Epoch 66: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35601.3925, Val 44772.5193, Test 42791.6244
          R2_Score         : Train 0.9755, Val 0.9581, Test 0.9641
          MAE              : Train 19037.5132, Val 20593.6135, Test 20139.9391
Best:
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.46it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.13it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.15it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.77it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.50it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.27it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.79it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.40it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.64it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.99it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.59it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.73it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.77it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.05it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.25it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.79it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.23it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.71it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.69it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.46it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.87it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  2.93it/s]Test: 100%|██████████| 4/4 [00:01<00:00,  3.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.85it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.94it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.14it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.62it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.40it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.08it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.49it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.67it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.20it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.22it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  1.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.34it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.08it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.79it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.23it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.60it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.61it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.48it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.70it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.43it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.98it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.87it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.90it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.58it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.94it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.43it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.92it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.82it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.16it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.33it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.30it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.98it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.04it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.14it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.60it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.72it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.00it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.81it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.83it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.96it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.47it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.01it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.10it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.81it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.64it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.10it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.20it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.15it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.58it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.09it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.02it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.83it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.47it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.07it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.52it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.79it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.67it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.46it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.81it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.59it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.11it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.02it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.21it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.41it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.14it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.65it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.96it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.72it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.24it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.19it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.25it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.60it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.90it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.80it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.76it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.46it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.76it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.63it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.49it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.09it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.42it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.53it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.59it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  4.96it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.20it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.20it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.63it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.16it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.91it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.12it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.30it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.87it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.89it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.31it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.48it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.28it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.65it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.96it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.92it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.92it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.42it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.10it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.56it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.03it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.50it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.85it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.44it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.38it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.63it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.83it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.40it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.09it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.42it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.66it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.72it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.67it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.84it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.50it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  4.94it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.86it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.27it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.86it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.53it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.71it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.84it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.98it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.48it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.27it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.15it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.48it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.43it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  3.90it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.40it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.10it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.75it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.49it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.43it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.40it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.47it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.56it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.62it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.88it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.48it/s]Train:  14%|█▍        | 2/14 [00:00<00:05,  2.30it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.45it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.56it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.36it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.73it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.13it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.96it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.54it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.71it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.16it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.58it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.91it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.78it/s]Epoch 67: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35383.1800, Val 44133.2526, Test 42062.1814
          R2_Score         : Train 0.9758, Val 0.9593, Test 0.9654
          MAE              : Train 18835.3145, Val 20405.8159, Test 19935.1771
Best:
          RMSE             : Train 37269.9282, Val 43977.4069, Test 42697.3261
          R2_Score         : Train 0.9731, Val 0.9596, Test 0.9643
          MAE              : Train 19965.1803, Val 21396.1013, Test 21023.2633
Epoch 68: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 69: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35581.4221, Val 44184.7534, Test 42601.6668
          R2_Score         : Train 0.9755, Val 0.9592, Test 0.9645
          MAE              : Train 18841.0809, Val 20777.9298, Test 20291.6757
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 70: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 34926.4675, Val 45868.5143, Test 43552.6321
          R2_Score         : Train 0.9764, Val 0.9560, Test 0.9629
          MAE              : Train 18595.5071, Val 20633.9545, Test 20110.7694
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 71: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34640.7320, Val 44322.2204, Test 42536.5357
          R2_Score         : Train 0.9768, Val 0.9589, Test 0.9646
          MAE              : Train 18374.2770, Val 20229.7211, Test 19846.2164
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 72: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34138.7200, Val 44431.4629, Test 42248.5911
          R2_Score         : Train 0.9774, Val 0.9587, Test 0.9650
          MAE              : Train 18184.1383, Val 20210.8315, Test 19666.6219
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 73: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34097.5951, Val 44186.5178, Test 42520.8134
          R2_Score         : Train 0.9775, Val 0.9592, Test 0.9646
          MAE              : Train 18124.7063, Val 20271.8174, Test 19702.8126
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 74: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34412.1670, Val 43929.5390, Test 42615.9184
          R2_Score         : Train 0.9771, Val 0.9597, Test 0.9644
          MAE              : Train 18214.7733, Val 20283.4967, Test 19835.0536
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 75: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34120.3965, Val 43911.2816, Test 42460.0280
          R2_Score         : Train 0.9775, Val 0.9597, Test 0.9647
          MAE              : Train 18079.6363, Val 20097.8967, Test 19753.7350
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 76: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33722.9082, Val 43753.3098, Test 42169.3047
          R2_Score         : Train 0.9780, Val 0.9600, Test 0.9652
          MAE              : Train 17948.7957, Val 20021.3521, Test 19535.6122
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 77: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33491.7369, Val 43877.3666, Test 42129.3336
          R2_Score         : Train 0.9783, Val 0.9598, Test 0.9652
          MAE              : Train 17822.3126, Val 19950.5184, Test 19486.7431
Best:
          RMSE             : Train 35099.9376, Val 43706.7049, Test 42275.8444
          R2_Score         : Train 0.9762, Val 0.9601, Test 0.9650
          MAE              : Train 18739.9311, Val 20458.2813, Test 20049.9004
Epoch 78: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33287.6441, Val 43612.7548, Test 41892.4004
          R2_Score         : Train 0.9786, Val 0.9602, Test 0.9656
          MAE              : Train 17684.9552, Val 19611.9221, Test 19203.1800
Best:
          RMSE             : Train 33287.6441, Val 43612.7548, Test 41892.4004
          R2_Score         : Train 0.9786, Val 0.9602, Test 0.9656
          MAE              : Train 17684.9552, Val 19611.9221, Test 19203.1800
Epoch 79: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33170.8515, Val 43771.1549, Test 42235.2947
          R2_Score         : Train 0.9787, Val 0.9599, Test 0.9651
          MAE              : Train 17626.7379, Val 19851.4579, Test 19246.3781
Best:
          RMSE             : Train 33287.6441, Val 43612.7548, Test 41892.4004
          R2_Score         : Train 0.9786, Val 0.9602, Test 0.9656
          MAE              : Train 17684.9552, Val 19611.9221, Test 19203.1800
Epoch 80: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33208.3281, Val 43373.6775, Test 41924.0289
          R2_Score         : Train 0.9787, Val 0.9607, Test 0.9656
          MAE              : Train 17586.5127, Val 19498.0779, Test 19116.5158
Best:
          RMSE             : Train 33208.3281, Val 43373.6775, Test 41924.0289
          R2_Score         : Train 0.9787, Val 0.9607, Test 0.9656
          MAE              : Train 17586.5127, Val 19498.0779, Test 19116.5158
Epoch 81: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32746.4203, Val 44233.4009, Test 42900.6369
          R2_Score         : Train 0.9792, Val 0.9591, Test 0.9640
          MAE              : Train 17365.8002, Val 19727.9502, Test 19201.4409
Best:
          RMSE             : Train 33208.3281, Val 43373.6775, Test 41924.0289
          R2_Score         : Train 0.9787, Val 0.9607, Test 0.9656
          MAE              : Train 17586.5127, Val 19498.0779, Test 19116.5158
Epoch 82: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32599.4647, Val 43964.6878, Test 42450.6546
          R2_Score         : Train 0.9794, Val 0.9596, Test 0.9647
          MAE              : Train 17252.5673, Val 19342.9598, Test 18963.9749
Best:

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.18it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.97it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.34it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.19it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.28it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.87it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.46it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.37it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.45it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.54it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.27it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.92it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.69it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.09it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.01it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.52it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.94it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.47it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.76it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.66it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.80it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.21it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.67it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.15it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.04it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.62it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.24it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.66it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.01it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.63it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.69it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.85it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.97it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.08it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.10it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.49it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.28it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.14it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.94it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.36it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.10it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.74it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.27it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.53it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.84it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.41it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.23it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.53it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.69it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.41it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.12it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.61it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.72it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.62it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.49it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.40it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.76it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.55it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.35it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.91it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.73it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.86it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.31it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.23it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.53it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.64it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.02it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.46it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.42it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.82it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  9.42it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.10it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.57it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.99it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.88it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.03it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.02it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.42it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.09it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  9.02it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.63it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.86it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.87it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.97it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.64it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  2.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.04it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.26it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.37it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.77it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.71it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.25it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.86it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.04it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.54it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.02it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  7.68it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.57it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.42it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.94it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.81it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.79it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.66it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.95it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.32it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.22it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.46it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.21it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.41it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.44it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.07it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.40it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.32it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.17it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.69it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.49it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.57it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.21it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.04it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.98it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.84it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.97it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.00it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.69it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.52it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.09it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.81it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.39it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.09it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.66it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.67it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.21it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  9.98it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.75it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.48it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.88it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.42it/s]          RMSE             : Train 33208.3281, Val 43373.6775, Test 41924.0289
          R2_Score         : Train 0.9787, Val 0.9607, Test 0.9656
          MAE              : Train 17586.5127, Val 19498.0779, Test 19116.5158
Epoch 83: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32469.4394, Val 44215.5538, Test 42940.9928
          R2_Score         : Train 0.9796, Val 0.9591, Test 0.9639
          MAE              : Train 17162.0224, Val 19491.2171, Test 19190.8592
Best:
          RMSE             : Train 33208.3281, Val 43373.6775, Test 41924.0289
          R2_Score         : Train 0.9787, Val 0.9607, Test 0.9656
          MAE              : Train 17586.5127, Val 19498.0779, Test 19116.5158
Epoch 84: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32375.3096, Val 43743.3282, Test 41931.5834
          R2_Score         : Train 0.9797, Val 0.9600, Test 0.9656
          MAE              : Train 17103.3752, Val 19391.2753, Test 18952.0967
Best:
          RMSE             : Train 33208.3281, Val 43373.6775, Test 41924.0289
          R2_Score         : Train 0.9787, Val 0.9607, Test 0.9656
          MAE              : Train 17586.5127, Val 19498.0779, Test 19116.5158
Epoch 85: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32326.4575, Val 44258.4343, Test 42149.5146
          R2_Score         : Train 0.9798, Val 0.9590, Test 0.9652
          MAE              : Train 17066.8403, Val 19482.2322, Test 19031.6118
Best:
          RMSE             : Train 33208.3281, Val 43373.6775, Test 41924.0289
          R2_Score         : Train 0.9787, Val 0.9607, Test 0.9656
          MAE              : Train 17586.5127, Val 19498.0779, Test 19116.5158
Epoch 86: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 87: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32075.6741, Val 44311.6371, Test 42593.9467
          R2_Score         : Train 0.9801, Val 0.9589, Test 0.9645
          MAE              : Train 16957.4085, Val 19333.6639, Test 18876.8447
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 88: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31906.4332, Val 43689.9607, Test 42224.0936
          R2_Score         : Train 0.9803, Val 0.9601, Test 0.9651
          MAE              : Train 16850.9207, Val 18938.8874, Test 18659.8977
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 89: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31875.3463, Val 44384.0215, Test 42912.3405
          R2_Score         : Train 0.9803, Val 0.9588, Test 0.9639
          MAE              : Train 16732.9383, Val 19238.9430, Test 18684.9455
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 90: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31698.0252, Val 44836.6903, Test 42698.3525
          R2_Score         : Train 0.9806, Val 0.9580, Test 0.9643
          MAE              : Train 16714.1237, Val 19241.7500, Test 18683.6730
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 91: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31507.0931, Val 43815.6660, Test 42040.3818
          R2_Score         : Train 0.9808, Val 0.9599, Test 0.9654
          MAE              : Train 16558.5768, Val 18926.6447, Test 18517.6798
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 92: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 31304.1781, Val 45141.1178, Test 43597.1135
          R2_Score         : Train 0.9810, Val 0.9574, Test 0.9628
          MAE              : Train 16582.3755, Val 18968.4991, Test 18714.5546
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 93: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31444.7123, Val 44565.2301, Test 42668.9116
          R2_Score         : Train 0.9809, Val 0.9585, Test 0.9643
          MAE              : Train 16502.4813, Val 19061.5234, Test 18650.1903
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 94: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31011.4881, Val 44259.2830, Test 42987.1484
          R2_Score         : Train 0.9814, Val 0.9590, Test 0.9638
          MAE              : Train 16398.2332, Val 18895.8607, Test 18579.3526
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 95: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31009.0472, Val 43662.3294, Test 42627.8985
          R2_Score         : Train 0.9814, Val 0.9601, Test 0.9644
          MAE              : Train 16292.3861, Val 18643.2024, Test 18217.7211
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 96: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 30917.6541, Val 43387.2182, Test 42518.8733
          R2_Score         : Train 0.9815, Val 0.9606, Test 0.9646
          MAE              : Train 16258.4503, Val 18645.0523, Test 18354.1026
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 97: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 30743.8621, Val 44130.4795, Test 42750.5124
          R2_Score         : Train 0.9817, Val 0.9593, Test 0.9642
          MAE              : Train 16113.9906, Val 18881.5258, Test 18538.7151
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 98: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.65it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.67it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.09it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.66it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.16it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.47it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.32it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.77it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.70it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.26it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.76it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.86it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.11it/s]
          RMSE             : Train 30749.4663, Val 44260.6883, Test 42544.3040
          R2_Score         : Train 0.9817, Val 0.9590, Test 0.9646
          MAE              : Train 16171.4396, Val 18842.3937, Test 18271.6487
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 99: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 30988.0264, Val 43675.5108, Test 42750.5323
          R2_Score         : Train 0.9814, Val 0.9601, Test 0.9642
          MAE              : Train 16203.2520, Val 19044.4692, Test 18758.6038
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Epoch 100: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 30971.0871, Val 44660.2348, Test 43842.5167
          R2_Score         : Train 0.9814, Val 0.9583, Test 0.9624
          MAE              : Train 16152.3865, Val 18660.0499, Test 18432.3281
Best:
          RMSE             : Train 32043.0315, Val 43137.2204, Test 42052.7759
          R2_Score         : Train 0.9801, Val 0.9611, Test 0.9654
          MAE              : Train 16927.8742, Val 19271.1995, Test 18856.8657
Training time (sec): 324
