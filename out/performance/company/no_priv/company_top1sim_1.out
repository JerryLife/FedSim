  0%|          | 0/54068 [00:00<?, ?it/s]  2%|▏         | 1182/54068 [00:00<00:04, 11809.51it/s]  4%|▍         | 2400/54068 [00:00<00:04, 12025.42it/s]  9%|▉         | 4901/54068 [00:00<00:02, 17949.69it/s] 13%|█▎        | 7020/54068 [00:00<00:02, 19224.60it/s] 17%|█▋        | 9242/54068 [00:00<00:02, 20302.90it/s] 22%|██▏       | 11784/54068 [00:00<00:01, 22038.89it/s] 26%|██▌       | 14056/54068 [00:00<00:01, 22260.88it/s] 30%|███       | 16283/54068 [00:00<00:01, 22237.53it/s] 34%|███▍      | 18507/54068 [00:00<00:01, 22139.18it/s] 38%|███▊      | 20722/54068 [00:01<00:01, 19136.47it/s] 42%|████▏     | 22706/54068 [00:01<00:01, 17418.55it/s] 45%|████▌     | 24551/54068 [00:01<00:01, 17687.62it/s] 49%|████▉     | 26516/54068 [00:01<00:01, 18219.29it/s] 54%|█████▎    | 28952/54068 [00:01<00:01, 19934.80it/s] 58%|█████▊    | 31185/54068 [00:01<00:01, 20616.28it/s] 62%|██████▏   | 33281/54068 [00:01<00:01, 18119.21it/s] 65%|██████▌   | 35168/54068 [00:01<00:01, 16262.62it/s] 69%|██████▉   | 37465/54068 [00:01<00:00, 17951.82it/s] 74%|███████▎  | 39742/54068 [00:02<00:00, 19224.98it/s] 77%|███████▋  | 41883/54068 [00:02<00:00, 19821.71it/s] 81%|████████  | 43926/54068 [00:02<00:00, 18994.55it/s] 85%|████████▍ | 45872/54068 [00:02<00:00, 17556.99it/s] 88%|████████▊ | 47730/54068 [00:02<00:00, 17826.41it/s] 92%|█████████▏| 49871/54068 [00:02<00:00, 18811.78it/s] 96%|█████████▌| 51977/54068 [00:02<00:00, 19444.18it/s]100%|█████████▉| 53950/54068 [00:02<00:00, 18787.30it/s]100%|██████████| 54068/54068 [00:02<00:00, 18890.30it/s]
  0%|          | 0/7725 [00:00<?, ?it/s] 26%|██▌       | 2011/7725 [00:00<00:00, 20108.20it/s] 52%|█████▏    | 4022/7725 [00:00<00:00, 19839.25it/s] 78%|███████▊  | 6029/7725 [00:00<00:00, 19939.75it/s]100%|██████████| 7725/7725 [00:00<00:00, 20501.46it/s]
  0%|          | 0/15449 [00:00<?, ?it/s] 18%|█▊        | 2705/15449 [00:00<00:00, 27039.00it/s] 35%|███▌      | 5409/15449 [00:00<00:00, 25342.01it/s] 51%|█████▏    | 7951/15449 [00:00<00:00, 25053.40it/s] 68%|██████▊   | 10460/15449 [00:00<00:00, 24770.25it/s] 87%|████████▋ | 13370/15449 [00:00<00:00, 26289.20it/s]100%|██████████| 15449/15449 [00:00<00:00, 26185.18it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.79it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.25it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.39it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.60it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.42it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.06it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.88it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.04it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.86it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  9.04it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.47it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.27it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.56it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.64it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.63it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.53it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.02it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.86it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.16it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.39it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.25it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.50it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.78it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.40it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.30it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.03it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.24it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.31it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.62it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.61it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.17it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.31it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.49it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.87it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.75it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.10it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.11it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.27it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.56it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.16it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.91it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.10it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.35it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.68it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.60it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.61it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.88it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.30it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.66it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.46it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.76it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.91it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.45it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Calculating noise scale
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
Preparing time (sec): 27
Loading data
Prepare for training
Start training
================================================================================
                                    Kernel Shape Output Shape  Params  \
Layer                                                                   
0_local_models.0.fc_layers.Linear_0    [90, 200]  [4096, 200]   18200   
1_local_models.0.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
2_local_models.1.fc_layers.Linear_0   [156, 200]  [4096, 200]   31400   
3_local_models.1.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
4_agg_model.fc_layers.Linear_0        [200, 400]  [4096, 400]   80400   
5_agg_model.fc_layers.Linear_1          [400, 1]    [4096, 1]     401   

                                     Mult-Adds  
Layer                                           
0_local_models.0.fc_layers.Linear_0      18000  
1_local_models.0.fc_layers.Linear_1      20000  
2_local_models.1.fc_layers.Linear_0      31200  
3_local_models.1.fc_layers.Linear_1      20000  
4_agg_model.fc_layers.Linear_0           80000  
5_agg_model.fc_layers.Linear_1             400  
--------------------------------------------------------------------------------
                      Totals
Total params          170601
Trainable params      170601
Non-trainable params       0
Mult-Adds             169600
================================================================================
n_classes=2
task=regression
model_name=company_top1sim_2022-08-10-19-24-49
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:7
test_batch_size=4096
train_batch_size=4096
learning_rate=0.001
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_top1sim_2022-08-10-19-24-49.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['rmse', 'r2_score', 'mae']
metrics_f=[<metric.rmse.RMSE object at 0x7fe7fe828ee0>, <metric.r2_score.R2Score object at 0x7fe7fe828fa0>, <metric.mae.MAE object at 0x7fe7fe828e20>]
hidden_sizes=[200, 100]
model=SplitNN(
  (agg_model): MLP(
    (fc_layers): ModuleList(
      (0): Linear(in_features=200, out_features=400, bias=True)
      (1): Linear(in_features=400, out_features=1, bias=True)
    )
  )
  (local_models): ModuleList(
    (0): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=90, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
    (1): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=156, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fe7fe828c40>
dataset_type=real
drop_key=True
num_common_features=1
tree_radius=0.01
tree_leaf_size=1000
knn_k=50
grid_min=-10.0
grid_max=10.0
grid_width=1.5
sim_scaler=StandardScaler()
filter_top_k=None
link_n_jobs=1
psig_p=4
sim_leak_p=1.0
link_threshold_t=0.1
link_epsilon=0.1
n_hash_lsh=50
edit_distance_threshold=10
n_hash_func=50
collision_rate=0.01
qgram_q=4
link_delta=0.01
feature_wise_sim=False
blocking_method=knn_str
center_threshold=0.5
n_clusters=100
local_hidden_sizes=[[200], [200]]
cut_dims=[100, 100]
agg_hidden_sizes=[400]
scale_analysis=None
data1_shape=(77225, 91)
data2_shape=(220583, 157)
Epoch 1: Loss:            : Train 0.0000, Val 0.1775, Test 0.1771
          RMSE             : Train 1608573.4111, Val 1548313.6523, Test 1546646.6904
          R2_Score         : Train -49.0750, Val -49.1187, Test -45.8450
          MAE              : Train 1592334.9204, Val 1531552.3848, Test 1529993.0413
Best:
          RMSE             : Train 1608573.4111, Val 1548313.6523, Test 1546646.6904
          R2_Score         : Train -49.0750, Val -49.1187, Test -45.8450
          MAE              : Train 1592334.9204, Val 1531552.3848, Test 1529993.0413
Epoch 2: Loss:            : Train 0.0000, Val 0.1509, Test 0.1507
          RMSE             : Train 1492622.9841, Val 1427754.6760, Test 1426534.0340
          R2_Score         : Train -42.1161, Val -41.6176, Test -38.8516
          MAE              : Train 1473686.0143, Val 1407429.8225, Test 1406580.9983
Best:
          RMSE             : Train 1492622.9841, Val 1427754.6760, Test 1426534.0340
          R2_Score         : Train -42.1161, Val -41.6176, Test -38.8516
          MAE              : Train 1473686.0143, Val 1407429.8225, Test 1406580.9983
Epoch 3: Loss:            : Train 0.0000, Val 0.1238, Test 0.1236
          RMSE             : Train 1366184.4605, Val 1292897.7616, Test 1291848.0211
          R2_Score         : Train -35.1208, Val -33.9470, Test -31.6816
          MAE              : Train 1342998.4573, Val 1267226.5631, Test 1266955.1383
Best:
          RMSE             : Train 1366184.4605, Val 1292897.7616, Test 1291848.0211
          R2_Score         : Train -35.1208, Val -33.9470, Test -31.6816
          MAE              : Train 1342998.4573, Val 1267226.5631, Test 1266955.1383
Epoch 4: Loss:            : Train 0.0000, Val 0.0965, Test 0.0963
          RMSE             : Train 1224101.6389, Val 1141668.3210, Test 1140611.7540
          R2_Score         : Train -27.9984, Val -26.2497, Test -24.4775
          MAE              : Train 1194612.4467, Val 1109089.1320, Test 1108530.4674
Best:
          RMSE             : Train 1224101.6389, Val 1141668.3210, Test 1140611.7540
          R2_Score         : Train -27.9984, Val -26.2497, Test -24.4775
          MAE              : Train 1194612.4467, Val 1109089.1320, Test 1108530.4674
Epoch 5: Loss:            : Train 0.0000, Val 0.0707, Test 0.0706

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.67it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.68it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.29it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.56it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.27it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.39it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.12it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.26it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.61it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  9.37it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.91it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.57it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.21it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.72it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.29it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.73it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.95it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.58it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.37it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.67it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.84it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.45it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.09it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.77it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.09it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.02it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.78it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.54it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.83it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.94it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.69it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.75it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.32it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.25it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.16it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.26it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.43it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.02it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.77it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.10it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.55it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.86it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.16it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.64it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.04it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.40it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.69it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.54it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.53it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.31it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.06it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.05it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.88it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.34it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.97it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.44it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.11it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.83it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.11it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.19it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.32it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.23it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.14it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.86it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.58it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.06it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.07it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.52it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.62it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.84it/s]Train:  50%|█████     | 7/14 [00:00<00:01,  6.77it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.94it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.14it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.55it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.08it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.93it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 15.25it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.26it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.49it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.41it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.30it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.67it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.88it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.24it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.74it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.21it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.50it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.46it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.66it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.88it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.42it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.60it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.99it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.02it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.90it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.66it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.62it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.26it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.83it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.96it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.57it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.89it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.35it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.47it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.56it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.23it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.83it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.40it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.82it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.80it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.10it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.89it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.20it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.24it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.39it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.36it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.97it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.77it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.12it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.18it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.76it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.56it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.00it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.74it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.39it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.08it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.66it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.61it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.64it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.41it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.92it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.10it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.13it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.22it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.65it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.84it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.96it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.49it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.68it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.86it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.45it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.66it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.25it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.76it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.49it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.18it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.91it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.04it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.35it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.27it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.21it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.33it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.11it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.30it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.58it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.02it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.15it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.11it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.82it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.74it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.20it/s]          RMSE             : Train 1066827.6600, Val 977348.3094, Test 976235.4172
          R2_Score         : Train -21.0256, Val -18.9701, Test -17.6634
          MAE              : Train 1028961.8519, Val 936337.5804, Test 935211.2362
Best:
          RMSE             : Train 1066827.6600, Val 977348.3094, Test 976235.4172
          R2_Score         : Train -21.0256, Val -18.9701, Test -17.6634
          MAE              : Train 1028961.8519, Val 936337.5804, Test 935211.2362
Epoch 6: Loss:            : Train 0.0000, Val 0.0483, Test 0.0482
          RMSE             : Train 899536.9409, Val 807565.9825, Test 806426.9099
          R2_Score         : Train -14.6595, Val -12.6345, Test -11.7354
          MAE              : Train 852489.4610, Val 758249.2711, Test 756642.1452
Best:
          RMSE             : Train 899536.9409, Val 807565.9825, Test 806426.9099
          R2_Score         : Train -14.6595, Val -12.6345, Test -11.7354
          MAE              : Train 852489.4610, Val 758249.2711, Test 756642.1452
Epoch 7: Loss:            : Train 0.0000, Val 0.0306, Test 0.0305
          RMSE             : Train 731912.2565, Val 642931.3483, Test 641971.3270
          R2_Score         : Train -9.3671, Val -7.6419, Test -7.0707
          MAE              : Train 676650.6721, Val 587381.6333, Test 585797.9898
Best:
          RMSE             : Train 731912.2565, Val 642931.3483, Test 641971.3270
          R2_Score         : Train -9.3671, Val -7.6419, Test -7.0707
          MAE              : Train 676650.6721, Val 587381.6333, Test 585797.9898
Epoch 8: Loss:            : Train 0.0000, Val 0.0181, Test 0.0181
          RMSE             : Train 574641.1163, Val 494762.0875, Test 494544.9440
          R2_Score         : Train -5.3905, Val -4.1177, Test -3.7895
          MAE              : Train 514695.0767, Val 436395.9524, Test 435151.1330
Best:
          RMSE             : Train 574641.1163, Val 494762.0875, Test 494544.9440
          R2_Score         : Train -5.3905, Val -4.1177, Test -3.7895
          MAE              : Train 514695.0767, Val 436395.9524, Test 435151.1330
Epoch 9: Loss:            : Train 0.0000, Val 0.0103, Test 0.0104
          RMSE             : Train 438976.3871, Val 373403.7848, Test 374795.3594
          R2_Score         : Train -2.7292, Val -1.9150, Test -1.7509
          MAE              : Train 377315.9720, Val 314486.6899, Test 313466.2421
Best:
          RMSE             : Train 438976.3871, Val 373403.7848, Test 374795.3594
          R2_Score         : Train -2.7292, Val -1.9150, Test -1.7509
          MAE              : Train 377315.9720, Val 314486.6899, Test 313466.2421
Epoch 10: Loss:            : Train 0.0000, Val 0.0061, Test 0.0063
          RMSE             : Train 335362.4482, Val 287177.8368, Test 290994.1969
          R2_Score         : Train -1.1765, Val -0.7242, Test -0.6582
          MAE              : Train 271731.6112, Val 225472.1853, Test 225065.0975
Best:
          RMSE             : Train 335362.4482, Val 287177.8368, Test 290994.1969
          R2_Score         : Train -1.1765, Val -0.7242, Test -0.6582
          MAE              : Train 271731.6112, Val 225472.1853, Test 225065.0975
Epoch 11: Loss:            : Train 0.0000, Val 0.0042, Test 0.0045
          RMSE             : Train 268827.5790, Val 238798.5873, Test 245165.3207
          R2_Score         : Train -0.3986, Val -0.1922, Test -0.1771
          MAE              : Train 198305.6740, Val 168026.4924, Test 168131.6104
Best:
          RMSE             : Train 268827.5790, Val 238798.5873, Test 245165.3207
          R2_Score         : Train -0.3986, Val -0.1922, Test -0.1771
          MAE              : Train 198305.6740, Val 168026.4924, Test 168131.6104
Epoch 12: Loss:            : Train 0.0000, Val 0.0036, Test 0.0039
          RMSE             : Train 237686.2689, Val 220503.9516, Test 228529.7372
          R2_Score         : Train -0.0933, Val -0.0165, Test -0.0227
          MAE              : Train 153849.7454, Val 135868.9280, Test 136441.0893
Best:
          RMSE             : Train 237686.2689, Val 220503.9516, Test 228529.7372
          R2_Score         : Train -0.0933, Val -0.0165, Test -0.0227
          MAE              : Train 153849.7454, Val 135868.9280, Test 136441.0893
Epoch 13: Loss:            : Train 0.0000, Val 0.0034, Test 0.0036
          RMSE             : Train 227990.6196, Val 212659.1617, Test 221114.7610
          R2_Score         : Train -0.0059, Val 0.0545, Test 0.0425
          MAE              : Train 130904.9420, Val 122204.1654, Test 123191.3082
Best:
          RMSE             : Train 227990.6196, Val 212659.1617, Test 221114.7610
          R2_Score         : Train -0.0059, Val 0.0545, Test 0.0425
          MAE              : Train 130904.9420, Val 122204.1654, Test 123191.3082
Epoch 14: Loss:            : Train 0.0000, Val 0.0029, Test 0.0032
          RMSE             : Train 216866.1184, Val 197882.6444, Test 205827.8935
          R2_Score         : Train 0.0898, Val 0.1814, Test 0.1704
          MAE              : Train 123484.0977, Val 120753.0914, Test 121271.4441
Best:
          RMSE             : Train 216866.1184, Val 197882.6444, Test 205827.8935
          R2_Score         : Train 0.0898, Val 0.1814, Test 0.1704
          MAE              : Train 123484.0977, Val 120753.0914, Test 121271.4441
Epoch 15: Loss:            : Train 0.0000, Val 0.0025, Test 0.0027
          RMSE             : Train 201237.7101, Val 183249.3254, Test 190042.5118
          R2_Score         : Train 0.2163, Val 0.2980, Test 0.2927
          MAE              : Train 123012.4265, Val 120795.8201, Test 120927.2622
Best:
          RMSE             : Train 201237.7101, Val 183249.3254, Test 190042.5118
          R2_Score         : Train 0.2163, Val 0.2980, Test 0.2927
          MAE              : Train 123012.4265, Val 120795.8201, Test 120927.2622
Epoch 16: Loss:            : Train 0.0000, Val 0.0020, Test 0.0022
          RMSE             : Train 184840.7121, Val 165835.8044, Test 171537.3752
          R2_Score         : Train 0.3388, Val 0.4250, Test 0.4238
          MAE              : Train 118973.1828, Val 111059.6429, Test 111021.2553
Best:
          RMSE             : Train 184840.7121, Val 165835.8044, Test 171537.3752
          R2_Score         : Train 0.3388, Val 0.4250, Test 0.4238
          MAE              : Train 118973.1828, Val 111059.6429, Test 111021.2553
Epoch 17: Loss:            : Train 0.0000, Val 0.0016, Test 0.0017
          RMSE             : Train 165667.4572, Val 146250.9259, Test 150570.0560
          R2_Score         : Train 0.4689, Val 0.5528, Test 0.5560
          MAE              : Train 106893.3281, Val 98011.3448, Test 97847.4132
Best:
          RMSE             : Train 165667.4572, Val 146250.9259, Test 150570.0560
          R2_Score         : Train 0.4689, Val 0.5528, Test 0.5560
          MAE              : Train 106893.3281, Val 98011.3448, Test 97847.4132
Epoch 18: Loss:            : Train 0.0000, Val 0.0012, Test 0.0012
          RMSE             : Train 144898.3829, Val 126586.3836, Test 129336.3630
          R2_Score         : Train 0.5937, Val 0.6650, Test 0.6724
          MAE              : Train 94574.0703, Val 86095.6059, Test 85634.7045
Best:
          RMSE             : Train 144898.3829, Val 126586.3836, Test 129336.3630
          R2_Score         : Train 0.5937, Val 0.6650, Test 0.6724
          MAE              : Train 94574.0703, Val 86095.6059, Test 85634.7045
Epoch 19: Loss:            : Train 0.0000, Val 0.0009, Test 0.0009
          RMSE             : Train 124165.9029, Val 109559.5769, Test 111566.8063
          R2_Score         : Train 0.7016, Val 0.7491, Test 0.7562
          MAE              : Train 81391.4848, Val 72480.4266, Test 72230.5376
Best:
          RMSE             : Train 124165.9029, Val 109559.5769, Test 111566.8063
          R2_Score         : Train 0.7016, Val 0.7491, Test 0.7562
          MAE              : Train 81391.4848, Val 72480.4266, Test 72230.5376
Epoch 20: Loss:            : Train 0.0000, Val 0.0007, Test 0.0007
          RMSE             : Train 108247.1469, Val 97407.0928, Test 99516.2888

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.93it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.65it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.67it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.57it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.89it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.64it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.62it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.48it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.94it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.04it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.97it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.53it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.59it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.09it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.59it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.31it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.64it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.48it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.03it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.30it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.74it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.67it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.99it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.29it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.46it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.60it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.63it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.08it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.92it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.22it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.01it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.27it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.39it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.45it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.84it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.79it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.23it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.74it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.02it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.26it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.28it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.87it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.61it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.31it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.50it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.61it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.20it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.47it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.12it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.42it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.48it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.76it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.07it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.94it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.83it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.34it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.72it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.72it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.74it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.41it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.43it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.10it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.70it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.79it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.92it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.61it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.83it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.68it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.11it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.47it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.48it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.78it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.68it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.40it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.15it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.20it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.07it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.87it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.60it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.99it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.24it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.67it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.96it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.27it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.64it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.77it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.56it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.39it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.54it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.98it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.41it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.48it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.11it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.79it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.04it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.30it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.06it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.17it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.05it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.48it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.55it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.01it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.20it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.00it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.19it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.13it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.61it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.69it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.21it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.76it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.31it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.65it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.38it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.85it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.42it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.45it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.97it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.51it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.53it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  2.35it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.15it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.60it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.72it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.68it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.43it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.97it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.01it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.08it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.50it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.84it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.90it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.37it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.88it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.39it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.92it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.49it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.23it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.99it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.30it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.72it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.79it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.61it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.72it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.93it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.77it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.21it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.44it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.54it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.47it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.17it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.37it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.73it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.17it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.17it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.55it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.77it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.15it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.79it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.79it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  9.13it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.37it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.68it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.02it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.47it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.51it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.54it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.37it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.17it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.58it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.19it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.80it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.78it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.58it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.26it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.42it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.40it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.44it/s]          R2_Score         : Train 0.7732, Val 0.8016, Test 0.8061
          MAE              : Train 67719.3671, Val 60001.2882, Test 59828.6992
Best:
          RMSE             : Train 108247.1469, Val 97407.0928, Test 99516.2888
          R2_Score         : Train 0.7732, Val 0.8016, Test 0.8061
          MAE              : Train 67719.3671, Val 60001.2882, Test 59828.6992
Epoch 21: Loss:            : Train 0.0000, Val 0.0006, Test 0.0006
          RMSE             : Train 96863.0819, Val 88077.6139, Test 90344.7713
          R2_Score         : Train 0.8184, Val 0.8378, Test 0.8402
          MAE              : Train 57351.6917, Val 53631.4153, Test 53492.6635
Best:
          RMSE             : Train 96863.0819, Val 88077.6139, Test 90344.7713
          R2_Score         : Train 0.8184, Val 0.8378, Test 0.8402
          MAE              : Train 57351.6917, Val 53631.4153, Test 53492.6635
Epoch 22: Loss:            : Train 0.0000, Val 0.0005, Test 0.0005
          RMSE             : Train 87304.3720, Val 80019.8357, Test 82758.2733
          R2_Score         : Train 0.8525, Val 0.8661, Test 0.8659
          MAE              : Train 52468.3341, Val 50207.9314, Test 50199.0055
Best:
          RMSE             : Train 87304.3720, Val 80019.8357, Test 82758.2733
          R2_Score         : Train 0.8525, Val 0.8661, Test 0.8659
          MAE              : Train 52468.3341, Val 50207.9314, Test 50199.0055
Epoch 23: Loss:            : Train 0.0000, Val 0.0004, Test 0.0004
          RMSE             : Train 80122.1977, Val 74524.3055, Test 77235.2099
          R2_Score         : Train 0.8758, Val 0.8839, Test 0.8832
          MAE              : Train 48996.7120, Val 46469.3813, Test 46546.3866
Best:
          RMSE             : Train 80122.1977, Val 74524.3055, Test 77235.2099
          R2_Score         : Train 0.8758, Val 0.8839, Test 0.8832
          MAE              : Train 48996.7120, Val 46469.3813, Test 46546.3866
Epoch 24: Loss:            : Train 0.0000, Val 0.0004, Test 0.0004
          RMSE             : Train 74601.5063, Val 69783.3094, Test 72560.0297
          R2_Score         : Train 0.8923, Val 0.8982, Test 0.8969
          MAE              : Train 45485.2973, Val 43263.9102, Test 43352.1420
Best:
          RMSE             : Train 74601.5063, Val 69783.3094, Test 72560.0297
          R2_Score         : Train 0.8923, Val 0.8982, Test 0.8969
          MAE              : Train 45485.2973, Val 43263.9102, Test 43352.1420
Epoch 25: Loss:            : Train 0.0000, Val 0.0003, Test 0.0004
          RMSE             : Train 69871.7424, Val 65891.6306, Test 68838.0759
          R2_Score         : Train 0.9055, Val 0.9092, Test 0.9072
          MAE              : Train 41678.5204, Val 40042.3798, Test 40075.0974
Best:
          RMSE             : Train 69871.7424, Val 65891.6306, Test 68838.0759
          R2_Score         : Train 0.9055, Val 0.9092, Test 0.9072
          MAE              : Train 41678.5204, Val 40042.3798, Test 40075.0974
Epoch 26: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 66184.9917, Val 62941.0958, Test 65878.2781
          R2_Score         : Train 0.9152, Val 0.9172, Test 0.9150
          MAE              : Train 39338.2511, Val 37612.1185, Test 37637.5724
Best:
          RMSE             : Train 66184.9917, Val 62941.0958, Test 65878.2781
          R2_Score         : Train 0.9152, Val 0.9172, Test 0.9150
          MAE              : Train 39338.2511, Val 37612.1185, Test 37637.5724
Epoch 27: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 63136.0636, Val 60203.8214, Test 63300.5427
          R2_Score         : Train 0.9229, Val 0.9242, Test 0.9215
          MAE              : Train 36695.5976, Val 35563.8977, Test 35739.2509
Best:
          RMSE             : Train 63136.0636, Val 60203.8214, Test 63300.5427
          R2_Score         : Train 0.9229, Val 0.9242, Test 0.9215
          MAE              : Train 36695.5976, Val 35563.8977, Test 35739.2509
Epoch 28: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 60396.8483, Val 57974.6521, Test 61206.5821
          R2_Score         : Train 0.9294, Val 0.9297, Test 0.9266
          MAE              : Train 34933.8862, Val 33612.1098, Test 33830.3379
Best:
          RMSE             : Train 60396.8483, Val 57974.6521, Test 61206.5821
          R2_Score         : Train 0.9294, Val 0.9297, Test 0.9266
          MAE              : Train 34933.8862, Val 33612.1098, Test 33830.3379
Epoch 29: Loss:            : Train 0.0000, Val 0.0002, Test 0.0003
          RMSE             : Train 58248.0235, Val 55833.0259, Test 59337.2219
          R2_Score         : Train 0.9343, Val 0.9348, Test 0.9310
          MAE              : Train 33330.3709, Val 32091.4207, Test 32363.9962
Best:
          RMSE             : Train 58248.0235, Val 55833.0259, Test 59337.2219
          R2_Score         : Train 0.9343, Val 0.9348, Test 0.9310
          MAE              : Train 33330.3709, Val 32091.4207, Test 32363.9962
Epoch 30: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 56393.3435, Val 54130.8287, Test 57713.4897
          R2_Score         : Train 0.9385, Val 0.9387, Test 0.9348
          MAE              : Train 31944.1375, Val 31366.7042, Test 31539.7665
Best:
          RMSE             : Train 56393.3435, Val 54130.8287, Test 57713.4897
          R2_Score         : Train 0.9385, Val 0.9387, Test 0.9348
          MAE              : Train 31944.1375, Val 31366.7042, Test 31539.7665
Epoch 31: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 54894.7851, Val 53143.2401, Test 56377.5980
          R2_Score         : Train 0.9417, Val 0.9410, Test 0.9378
          MAE              : Train 30998.9154, Val 30097.9449, Test 30293.1612
Best:
          RMSE             : Train 54894.7851, Val 53143.2401, Test 56377.5980
          R2_Score         : Train 0.9417, Val 0.9410, Test 0.9378
          MAE              : Train 30998.9154, Val 30097.9449, Test 30293.1612
Epoch 32: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 53427.9786, Val 51927.7943, Test 54918.0317
          R2_Score         : Train 0.9448, Val 0.9436, Test 0.9409
          MAE              : Train 30034.1369, Val 29202.4318, Test 29393.0000
Best:
          RMSE             : Train 53427.9786, Val 51927.7943, Test 54918.0317
          R2_Score         : Train 0.9448, Val 0.9436, Test 0.9409
          MAE              : Train 30034.1369, Val 29202.4318, Test 29393.0000
Epoch 33: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 52029.5474, Val 50982.4777, Test 53918.7773
          R2_Score         : Train 0.9476, Val 0.9457, Test 0.9431
          MAE              : Train 29063.4282, Val 28904.5085, Test 28846.7969
Best:
          RMSE             : Train 52029.5474, Val 50982.4777, Test 53918.7773
          R2_Score         : Train 0.9476, Val 0.9457, Test 0.9431
          MAE              : Train 29063.4282, Val 28904.5085, Test 28846.7969
Epoch 34: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 50783.3298, Val 50230.6848, Test 52360.8670
          R2_Score         : Train 0.9501, Val 0.9473, Test 0.9463
          MAE              : Train 28305.2005, Val 27842.4129, Test 27806.6025
Best:
          RMSE             : Train 50783.3298, Val 50230.6848, Test 52360.8670
          R2_Score         : Train 0.9501, Val 0.9473, Test 0.9463
          MAE              : Train 28305.2005, Val 27842.4129, Test 27806.6025
Epoch 35: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 49718.5391, Val 49207.0224, Test 51735.6535
          R2_Score         : Train 0.9522, Val 0.9494, Test 0.9476
          MAE              : Train 27638.0686, Val 27233.3493, Test 27236.1610
Best:
          RMSE             : Train 49718.5391, Val 49207.0224, Test 51735.6535
          R2_Score         : Train 0.9522, Val 0.9494, Test 0.9476

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.85it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.10it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.62it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.52it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.05it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.24it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.86it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.05it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.57it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.28it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.36it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.90it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.16it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.20it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.38it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.80it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.05it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.01it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.05it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.28it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.61it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.22it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.87it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.33it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.66it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.69it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.13it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.52it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.14it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.85it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.55it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.33it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.59it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.22it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.55it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.28it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.60it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.43it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.55it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.55it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  7.00it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.53it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.53it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.37it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.88it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.63it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.51it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.57it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.26it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.38it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.56it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.61it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.77it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.76it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.13it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.03it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.47it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.84it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.31it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.21it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.76it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.94it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.64it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.40it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.91it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.18it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.83it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.83it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.79it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.22it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.49it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.14it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.92it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.35it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.15it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.48it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.21it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  2.25it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.34it/s]Test: 100%|██████████| 4/4 [00:01<00:00,  4.43it/s]Test: 100%|██████████| 4/4 [00:01<00:00,  3.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.18it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.76it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.48it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.19it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.27it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.42it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.53it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.38it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.80it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.88it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.68it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.60it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.66it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.83it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.22it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.73it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.27it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.80it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.36it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.43it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.23it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.80it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.58it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.85it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.17it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.09it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.92it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.20it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.17it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.40it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.22it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.69it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.84it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.27it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.09it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.55it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.39it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.08it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.73it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.27it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.16it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.55it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.92it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.70it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.32it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.84it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.68it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.36it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.54it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.53it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  3.99it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  3.70it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.61it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.82it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.09it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.85it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.68it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.60it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.73it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.69it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.69it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.69it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.42it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.69it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.63it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.34it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.07it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.35it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.62it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.67it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.39it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.53it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.20it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.90it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.88it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.67it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.35it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.15it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.45it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.50it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.97it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.29it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.29it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.48it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.95it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.91it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.79it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.77it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.32it/s]Train:  14%|█▍        | 2/14 [00:01<00:06,  1.79it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  3.18it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.79it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.67it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.46it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.26it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  7.21it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.28it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.83it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.23it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.50it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.16it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.76it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.48it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.04it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.20it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.53it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.41it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.97it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.64it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.01it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.55it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.79it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.56it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.74it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.09it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.80it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.88it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.64it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.09it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.62it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.20it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.75it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.17it/s]          MAE              : Train 27638.0686, Val 27233.3493, Test 27236.1610
Epoch 36: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 48671.0208, Val 48794.5874, Test 50718.8381
          R2_Score         : Train 0.9542, Val 0.9502, Test 0.9496
          MAE              : Train 26884.1841, Val 27050.0254, Test 26824.3552
Best:
          RMSE             : Train 48671.0208, Val 48794.5874, Test 50718.8381
          R2_Score         : Train 0.9542, Val 0.9502, Test 0.9496
          MAE              : Train 26884.1841, Val 27050.0254, Test 26824.3552
Epoch 37: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 47836.5135, Val 47948.1893, Test 49763.5440
          R2_Score         : Train 0.9557, Val 0.9519, Test 0.9515
          MAE              : Train 26452.5346, Val 26417.6348, Test 26174.5337
Best:
          RMSE             : Train 47836.5135, Val 47948.1893, Test 49763.5440
          R2_Score         : Train 0.9557, Val 0.9519, Test 0.9515
          MAE              : Train 26452.5346, Val 26417.6348, Test 26174.5337
Epoch 38: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 46790.4386, Val 47792.5479, Test 49177.0863
          R2_Score         : Train 0.9576, Val 0.9522, Test 0.9526
          MAE              : Train 25811.6439, Val 26286.1224, Test 25899.6758
Best:
          RMSE             : Train 46790.4386, Val 47792.5479, Test 49177.0863
          R2_Score         : Train 0.9576, Val 0.9522, Test 0.9526
          MAE              : Train 25811.6439, Val 26286.1224, Test 25899.6758
Epoch 39: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 46047.4796, Val 47156.4453, Test 48344.4274
          R2_Score         : Train 0.9590, Val 0.9535, Test 0.9542
          MAE              : Train 25355.6116, Val 25454.9688, Test 25148.7087
Best:
          RMSE             : Train 46047.4796, Val 47156.4453, Test 48344.4274
          R2_Score         : Train 0.9590, Val 0.9535, Test 0.9542
          MAE              : Train 25355.6116, Val 25454.9688, Test 25148.7087
Epoch 40: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 45482.6081, Val 47494.3325, Test 47928.8762
          R2_Score         : Train 0.9600, Val 0.9528, Test 0.9550
          MAE              : Train 25001.6167, Val 25360.3765, Test 25000.2897
Best:
          RMSE             : Train 46047.4796, Val 47156.4453, Test 48344.4274
          R2_Score         : Train 0.9590, Val 0.9535, Test 0.9542
          MAE              : Train 25355.6116, Val 25454.9688, Test 25148.7087
Epoch 41: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 44914.1011, Val 46692.4186, Test 47327.2979
          R2_Score         : Train 0.9610, Val 0.9544, Test 0.9561
          MAE              : Train 24715.5728, Val 25001.9030, Test 24639.9903
Best:
          RMSE             : Train 44914.1011, Val 46692.4186, Test 47327.2979
          R2_Score         : Train 0.9610, Val 0.9544, Test 0.9561
          MAE              : Train 24715.5728, Val 25001.9030, Test 24639.9903
Epoch 42: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 44260.6365, Val 46041.5861, Test 47004.2438
          R2_Score         : Train 0.9621, Val 0.9557, Test 0.9567
          MAE              : Train 24205.3569, Val 24618.3401, Test 24364.9870
Best:
          RMSE             : Train 44260.6365, Val 46041.5861, Test 47004.2438
          R2_Score         : Train 0.9621, Val 0.9557, Test 0.9567
          MAE              : Train 24205.3569, Val 24618.3401, Test 24364.9870
Epoch 43: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43529.6354, Val 46283.3254, Test 46607.9378
          R2_Score         : Train 0.9633, Val 0.9552, Test 0.9575
          MAE              : Train 23821.5537, Val 24407.2791, Test 24118.6084
Best:
          RMSE             : Train 44260.6365, Val 46041.5861, Test 47004.2438
          R2_Score         : Train 0.9621, Val 0.9557, Test 0.9567
          MAE              : Train 24205.3569, Val 24618.3401, Test 24364.9870
Epoch 44: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 42946.3305, Val 45869.9609, Test 45926.3238
          R2_Score         : Train 0.9643, Val 0.9560, Test 0.9587
          MAE              : Train 23491.8539, Val 23999.0912, Test 23609.1213
Best:
          RMSE             : Train 42946.3305, Val 45869.9609, Test 45926.3238
          R2_Score         : Train 0.9643, Val 0.9560, Test 0.9587
          MAE              : Train 23491.8539, Val 23999.0912, Test 23609.1213
Epoch 45: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 42399.3178, Val 46133.5735, Test 45813.3825
          R2_Score         : Train 0.9652, Val 0.9555, Test 0.9589
          MAE              : Train 23193.3630, Val 23983.0667, Test 23482.6357
Best:
          RMSE             : Train 42946.3305, Val 45869.9609, Test 45926.3238
          R2_Score         : Train 0.9643, Val 0.9560, Test 0.9587
          MAE              : Train 23491.8539, Val 23999.0912, Test 23609.1213
Epoch 46: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 42156.1585, Val 46535.7340, Test 45537.5880
          R2_Score         : Train 0.9656, Val 0.9547, Test 0.9594
          MAE              : Train 23011.7475, Val 23527.4139, Test 23044.5487
Best:
          RMSE             : Train 42946.3305, Val 45869.9609, Test 45926.3238
          R2_Score         : Train 0.9643, Val 0.9560, Test 0.9587
          MAE              : Train 23491.8539, Val 23999.0912, Test 23609.1213
Epoch 47: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 41416.9729, Val 46288.1812, Test 45081.2705
          R2_Score         : Train 0.9668, Val 0.9552, Test 0.9602
          MAE              : Train 22531.4473, Val 23574.4454, Test 22992.4458
Best:
          RMSE             : Train 42946.3305, Val 45869.9609, Test 45926.3238
          R2_Score         : Train 0.9643, Val 0.9560, Test 0.9587
          MAE              : Train 23491.8539, Val 23999.0912, Test 23609.1213
Epoch 48: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 41116.8184, Val 45908.4660, Test 45089.3182
          R2_Score         : Train 0.9673, Val 0.9559, Test 0.9602
          MAE              : Train 22408.0536, Val 23094.9846, Test 22600.2924
Best:
          RMSE             : Train 42946.3305, Val 45869.9609, Test 45926.3238
          R2_Score         : Train 0.9643, Val 0.9560, Test 0.9587
          MAE              : Train 23491.8539, Val 23999.0912, Test 23609.1213
Epoch 49: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 41080.9764, Val 45701.2748, Test 45109.0613
          R2_Score         : Train 0.9673, Val 0.9563, Test 0.9602
          MAE              : Train 22360.8272, Val 23312.8581, Test 22832.4429
Best:
          RMSE             : Train 41080.9764, Val 45701.2748, Test 45109.0613
          R2_Score         : Train 0.9673, Val 0.9563, Test 0.9602
          MAE              : Train 22360.8272, Val 23312.8581, Test 22832.4429
Epoch 50: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 40471.5608, Val 45531.3733, Test 44561.2944
          R2_Score         : Train 0.9683, Val 0.9567, Test 0.9611
          MAE              : Train 21840.8736, Val 22991.0715, Test 22488.3369
Best:
          RMSE             : Train 40471.5608, Val 45531.3733, Test 44561.2944
          R2_Score         : Train 0.9683, Val 0.9567, Test 0.9611
          MAE              : Train 21840.8736, Val 22991.0715, Test 22488.3369
Epoch 51: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 39880.8976, Val 46583.1260, Test 44859.2364
          R2_Score         : Train 0.9692, Val 0.9546, Test 0.9606

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.16it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.19it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.42it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.45it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.63it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.19it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.35it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.36it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.73it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.98it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.71it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.00it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.74it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.36it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.05it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.75it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.31it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.92it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.13it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.10it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.31it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.44it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.21it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.69it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.70it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.93it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.59it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.44it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.81it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.76it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.34it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.99it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.01it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.91it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.88it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.97it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.71it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.35it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.78it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.97it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.17it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.98it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.06it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.55it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.60it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.12it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.95it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.79it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.56it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.08it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.86it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.18it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.77it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.36it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.89it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.10it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.80it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.73it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:08,  1.58it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.96it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.01it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  6.28it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.86it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.45it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.08it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.08it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.69it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.18it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.66it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.77it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.17it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.49it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.77it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.19it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.74it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.06it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.28it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.54it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.10it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.91it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.41it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.87it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.17it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.10it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.15it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.69it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.46it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.69it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.15it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.15it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.46it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  4.94it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.32it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.41it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.72it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.64it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.38it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.99it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.31it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.69it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.26it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.65it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.94it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.27it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.39it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.95it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.04it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.19it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.01it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.93it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.16it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.68it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.30it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.47it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.13it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.01it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.57it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.79it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.42it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.03it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.41it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.91it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.98it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.42it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.41it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.21it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.91it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.46it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.16it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.45it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.86it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 21.25it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.52it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.81it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.88it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.09it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.46it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.53it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.43it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.96it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.35it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.60it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.10it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.29it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.35it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.84it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.06it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.37it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.47it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.17it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.33it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.40it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.82it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.48it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.96it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.16it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.52it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.87it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.65it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.87it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.35it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.79it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.92it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.30it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.93it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.04it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.35it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.80it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.40it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.80it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.05it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.67it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.08it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.24it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.60it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.26it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.47it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.65it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.23it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.67it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.36it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.56it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.79it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.37it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.86it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.41it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.45it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.73it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.31it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.84it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.63it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.41it/s]          MAE              : Train 21577.6456, Val 22604.2183, Test 21971.1104
Best:
          RMSE             : Train 40471.5608, Val 45531.3733, Test 44561.2944
          R2_Score         : Train 0.9683, Val 0.9567, Test 0.9611
          MAE              : Train 21840.8736, Val 22991.0715, Test 22488.3369
Epoch 52: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 39334.3179, Val 44769.9948, Test 44116.0808
          R2_Score         : Train 0.9701, Val 0.9581, Test 0.9619
          MAE              : Train 21267.1757, Val 22330.4558, Test 21820.5737
Best:
          RMSE             : Train 39334.3179, Val 44769.9948, Test 44116.0808
          R2_Score         : Train 0.9701, Val 0.9581, Test 0.9619
          MAE              : Train 21267.1757, Val 22330.4558, Test 21820.5737
Epoch 53: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 39071.9297, Val 44553.0145, Test 43484.6427
          R2_Score         : Train 0.9705, Val 0.9585, Test 0.9630
          MAE              : Train 21061.3397, Val 22367.8428, Test 21751.4231
Best:
          RMSE             : Train 39071.9297, Val 44553.0145, Test 43484.6427
          R2_Score         : Train 0.9705, Val 0.9585, Test 0.9630
          MAE              : Train 21061.3397, Val 22367.8428, Test 21751.4231
Epoch 54: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38742.4400, Val 43977.8288, Test 43323.1402
          R2_Score         : Train 0.9710, Val 0.9596, Test 0.9632
          MAE              : Train 20892.9821, Val 21838.0488, Test 21400.3948
Best:
          RMSE             : Train 38742.4400, Val 43977.8288, Test 43323.1402
          R2_Score         : Train 0.9710, Val 0.9596, Test 0.9632
          MAE              : Train 20892.9821, Val 21838.0488, Test 21400.3948
Epoch 55: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38256.5722, Val 44176.3694, Test 43452.9849
          R2_Score         : Train 0.9717, Val 0.9592, Test 0.9630
          MAE              : Train 20519.3178, Val 21866.4980, Test 21287.3195
Best:
          RMSE             : Train 38742.4400, Val 43977.8288, Test 43323.1402
          R2_Score         : Train 0.9710, Val 0.9596, Test 0.9632
          MAE              : Train 20892.9821, Val 21838.0488, Test 21400.3948
Epoch 56: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 38185.0610, Val 45768.9942, Test 43915.4356
          R2_Score         : Train 0.9718, Val 0.9562, Test 0.9622
          MAE              : Train 20543.4646, Val 21829.7353, Test 21247.5516
Best:
          RMSE             : Train 38742.4400, Val 43977.8288, Test 43323.1402
          R2_Score         : Train 0.9710, Val 0.9596, Test 0.9632
          MAE              : Train 20892.9821, Val 21838.0488, Test 21400.3948
Epoch 57: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38116.9069, Val 44201.0422, Test 43190.2633
          R2_Score         : Train 0.9719, Val 0.9592, Test 0.9635
          MAE              : Train 20337.8208, Val 21383.1845, Test 21010.5842
Best:
          RMSE             : Train 38742.4400, Val 43977.8288, Test 43323.1402
          R2_Score         : Train 0.9710, Val 0.9596, Test 0.9632
          MAE              : Train 20892.9821, Val 21838.0488, Test 21400.3948
Epoch 58: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 38288.8416, Val 45642.1602, Test 44344.0729
          R2_Score         : Train 0.9716, Val 0.9564, Test 0.9615
          MAE              : Train 20512.4910, Val 21601.2097, Test 21131.7614
Best:
          RMSE             : Train 38742.4400, Val 43977.8288, Test 43323.1402
          R2_Score         : Train 0.9710, Val 0.9596, Test 0.9632
          MAE              : Train 20892.9821, Val 21838.0488, Test 21400.3948
Epoch 59: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 37850.4002, Val 45266.3283, Test 43867.2992
          R2_Score         : Train 0.9723, Val 0.9572, Test 0.9623
          MAE              : Train 20133.3991, Val 21587.0454, Test 21106.6915
Best:
          RMSE             : Train 38742.4400, Val 43977.8288, Test 43323.1402
          R2_Score         : Train 0.9710, Val 0.9596, Test 0.9632
          MAE              : Train 20892.9821, Val 21838.0488, Test 21400.3948
Epoch 60: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 37430.1779, Val 44578.9003, Test 43433.1355
          R2_Score         : Train 0.9729, Val 0.9585, Test 0.9631
          MAE              : Train 19927.3033, Val 21200.6188, Test 20657.7980
Best:
          RMSE             : Train 38742.4400, Val 43977.8288, Test 43323.1402
          R2_Score         : Train 0.9710, Val 0.9596, Test 0.9632
          MAE              : Train 20892.9821, Val 21838.0488, Test 21400.3948
Epoch 61: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 37026.3423, Val 43760.7404, Test 42940.5115
          R2_Score         : Train 0.9735, Val 0.9600, Test 0.9639
          MAE              : Train 19689.4174, Val 21029.2128, Test 20505.9785
Best:
          RMSE             : Train 37026.3423, Val 43760.7404, Test 42940.5115
          R2_Score         : Train 0.9735, Val 0.9600, Test 0.9639
          MAE              : Train 19689.4174, Val 21029.2128, Test 20505.9785
Epoch 62: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36958.1597, Val 43701.8319, Test 43184.7396
          R2_Score         : Train 0.9736, Val 0.9601, Test 0.9635
          MAE              : Train 19612.6905, Val 20925.0517, Test 20422.7190
Best:
          RMSE             : Train 36958.1597, Val 43701.8319, Test 43184.7396
          R2_Score         : Train 0.9736, Val 0.9601, Test 0.9635
          MAE              : Train 19612.6905, Val 20925.0517, Test 20422.7190
Epoch 63: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36588.5586, Val 43193.9913, Test 42706.1924
          R2_Score         : Train 0.9741, Val 0.9610, Test 0.9643
          MAE              : Train 19333.5662, Val 21138.6496, Test 20586.9519
Best:
          RMSE             : Train 36588.5586, Val 43193.9913, Test 42706.1924
          R2_Score         : Train 0.9741, Val 0.9610, Test 0.9643
          MAE              : Train 19333.5662, Val 21138.6496, Test 20586.9519
Epoch 64: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36344.4360, Val 43289.9567, Test 42654.8487
          R2_Score         : Train 0.9744, Val 0.9608, Test 0.9644
          MAE              : Train 19295.1543, Val 20665.2196, Test 20169.4335
Best:
          RMSE             : Train 36588.5586, Val 43193.9913, Test 42706.1924
          R2_Score         : Train 0.9741, Val 0.9610, Test 0.9643
          MAE              : Train 19333.5662, Val 21138.6496, Test 20586.9519
Epoch 65: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36235.3531, Val 43100.5368, Test 42705.9465
          R2_Score         : Train 0.9746, Val 0.9612, Test 0.9643
          MAE              : Train 19173.2050, Val 20640.3578, Test 20122.1316
Best:
          RMSE             : Train 36235.3531, Val 43100.5368, Test 42705.9465
          R2_Score         : Train 0.9746, Val 0.9612, Test 0.9643
          MAE              : Train 19173.2050, Val 20640.3578, Test 20122.1316
Epoch 66: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35976.8593, Val 44938.6283, Test 43537.7009
          R2_Score         : Train 0.9750, Val 0.9578, Test 0.9629
          MAE              : Train 19019.2371, Val 20782.8067, Test 20321.2883
Best:
          RMSE             : Train 36235.3531, Val 43100.5368, Test 42705.9465
          R2_Score         : Train 0.9746, Val 0.9612, Test 0.9643
          MAE              : Train 19173.2050, Val 20640.3578, Test 20122.1316

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.99it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.14it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.24it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.34it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.51it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.88it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.35it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.49it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.56it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.08it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.65it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.05it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.27it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.65it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.59it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.34it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.02it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  3.56it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.12it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.05it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.68it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.94it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.09it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.90it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.81it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.06it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.55it/s]Train:  36%|███▌      | 5/14 [00:01<00:03,  2.75it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.54it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.04it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.41it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.01it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.69it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.87it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.29it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.02it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.46it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.23it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.49it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.49it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.01it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.96it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.17it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.13it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.36it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.50it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.89it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.62it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.57it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.63it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.23it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.07it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.75it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.07it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.33it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  3.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.26it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.53it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.45it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.69it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.08it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.70it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.25it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.62it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.22it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.31it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.13it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.66it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.56it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.78it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.69it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.54it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.67it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.78it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.12it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.84it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.23it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.32it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.00it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.35it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.31it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.37it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  2.94it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.87it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.79it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.52it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.33it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.80it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.81it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.71it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.18it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.10it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.58it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.27it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.62it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.99it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.15it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.97it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.32it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.44it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.64it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.89it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.51it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.00it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.93it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.02it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.94it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.67it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.93it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.49it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.23it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.64it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.63it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.21it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.82it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.91it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.32it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.86it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.15it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.24it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.15it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.59it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.84it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.77it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.68it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.71it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.69it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.60it/s]Train:  29%|██▊       | 4/14 [00:01<00:01,  5.09it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.86it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.80it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.28it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.43it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.11it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.42it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.50it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.77it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.67it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.62it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.36it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.31it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.18it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.84it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.12it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.93it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.64it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.70it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.92it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.24it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.06it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.43it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.88it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.19it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.47it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.71it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.00it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.47it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.09it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.99it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.70it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.76it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.44it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.71it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.21it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.05it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.97it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.25it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.83it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.48it/s]Epoch 67: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 35826.8655, Val 45549.2522, Test 44241.0915
          R2_Score         : Train 0.9752, Val 0.9566, Test 0.9617
          MAE              : Train 18958.4848, Val 20581.2039, Test 20212.6546
Best:
          RMSE             : Train 36235.3531, Val 43100.5368, Test 42705.9465
          R2_Score         : Train 0.9746, Val 0.9612, Test 0.9643
          MAE              : Train 19173.2050, Val 20640.3578, Test 20122.1316
Epoch 68: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35564.2562, Val 43555.6863, Test 42757.7192
          R2_Score         : Train 0.9755, Val 0.9603, Test 0.9642
          MAE              : Train 18752.5204, Val 20429.2233, Test 19800.1076
Best:
          RMSE             : Train 36235.3531, Val 43100.5368, Test 42705.9465
          R2_Score         : Train 0.9746, Val 0.9612, Test 0.9643
          MAE              : Train 19173.2050, Val 20640.3578, Test 20122.1316
Epoch 69: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35285.4289, Val 43241.6856, Test 42699.3613
          R2_Score         : Train 0.9759, Val 0.9609, Test 0.9643
          MAE              : Train 18599.1127, Val 20178.6234, Test 19709.1147
Best:
          RMSE             : Train 36235.3531, Val 43100.5368, Test 42705.9465
          R2_Score         : Train 0.9746, Val 0.9612, Test 0.9643
          MAE              : Train 19173.2050, Val 20640.3578, Test 20122.1316
Epoch 70: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34971.1257, Val 43631.4260, Test 42898.2143
          R2_Score         : Train 0.9763, Val 0.9602, Test 0.9640
          MAE              : Train 18292.6232, Val 20207.0601, Test 19672.1881
Best:
          RMSE             : Train 36235.3531, Val 43100.5368, Test 42705.9465
          R2_Score         : Train 0.9746, Val 0.9612, Test 0.9643
          MAE              : Train 19173.2050, Val 20640.3578, Test 20122.1316
Epoch 71: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34782.4764, Val 43125.8753, Test 42693.8891
          R2_Score         : Train 0.9766, Val 0.9611, Test 0.9643
          MAE              : Train 18319.2963, Val 20128.9216, Test 19564.8005
Best:
          RMSE             : Train 36235.3531, Val 43100.5368, Test 42705.9465
          R2_Score         : Train 0.9746, Val 0.9612, Test 0.9643
          MAE              : Train 19173.2050, Val 20640.3578, Test 20122.1316
Epoch 72: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34711.7324, Val 43507.6087, Test 42862.7968
          R2_Score         : Train 0.9767, Val 0.9604, Test 0.9640
          MAE              : Train 18158.0452, Val 20045.2565, Test 19521.8024
Best:
          RMSE             : Train 36235.3531, Val 43100.5368, Test 42705.9465
          R2_Score         : Train 0.9746, Val 0.9612, Test 0.9643
          MAE              : Train 19173.2050, Val 20640.3578, Test 20122.1316
Epoch 73: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34395.6198, Val 42656.0721, Test 42391.8002
          R2_Score         : Train 0.9771, Val 0.9620, Test 0.9648
          MAE              : Train 17993.1114, Val 19864.4929, Test 19325.2072
Best:
          RMSE             : Train 34395.6198, Val 42656.0721, Test 42391.8002
          R2_Score         : Train 0.9771, Val 0.9620, Test 0.9648
          MAE              : Train 17993.1114, Val 19864.4929, Test 19325.2072
Epoch 74: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34274.1603, Val 44310.5473, Test 42892.0173
          R2_Score         : Train 0.9773, Val 0.9590, Test 0.9640
          MAE              : Train 17974.8181, Val 20262.2974, Test 19629.7609
Best:
          RMSE             : Train 34395.6198, Val 42656.0721, Test 42391.8002
          R2_Score         : Train 0.9771, Val 0.9620, Test 0.9648
          MAE              : Train 17993.1114, Val 19864.4929, Test 19325.2072
Epoch 75: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34381.6998, Val 43520.1239, Test 42571.7416
          R2_Score         : Train 0.9771, Val 0.9604, Test 0.9645
          MAE              : Train 17936.2475, Val 19841.8498, Test 19238.3824
Best:
          RMSE             : Train 34395.6198, Val 42656.0721, Test 42391.8002
          R2_Score         : Train 0.9771, Val 0.9620, Test 0.9648
          MAE              : Train 17993.1114, Val 19864.4929, Test 19325.2072
Epoch 76: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33929.3095, Val 43283.5866, Test 42323.1215
          R2_Score         : Train 0.9777, Val 0.9608, Test 0.9649
          MAE              : Train 17680.7272, Val 19578.0206, Test 19062.2411
Best:
          RMSE             : Train 34395.6198, Val 42656.0721, Test 42391.8002
          R2_Score         : Train 0.9771, Val 0.9620, Test 0.9648
          MAE              : Train 17993.1114, Val 19864.4929, Test 19325.2072
Epoch 77: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34017.1968, Val 43596.0173, Test 42777.2749
          R2_Score         : Train 0.9776, Val 0.9603, Test 0.9642
          MAE              : Train 17658.7392, Val 19841.9687, Test 19226.8761
Best:
          RMSE             : Train 34395.6198, Val 42656.0721, Test 42391.8002
          R2_Score         : Train 0.9771, Val 0.9620, Test 0.9648
          MAE              : Train 17993.1114, Val 19864.4929, Test 19325.2072
Epoch 78: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33739.3540, Val 43897.8523, Test 43231.3425
          R2_Score         : Train 0.9780, Val 0.9597, Test 0.9634
          MAE              : Train 17533.7831, Val 19810.6700, Test 19199.2642
Best:
          RMSE             : Train 34395.6198, Val 42656.0721, Test 42391.8002
          R2_Score         : Train 0.9771, Val 0.9620, Test 0.9648
          MAE              : Train 17993.1114, Val 19864.4929, Test 19325.2072
Epoch 79: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33442.9170, Val 43136.7786, Test 43051.7553
          R2_Score         : Train 0.9784, Val 0.9611, Test 0.9637
          MAE              : Train 17415.5764, Val 19943.5300, Test 19371.9034
Best:
          RMSE             : Train 34395.6198, Val 42656.0721, Test 42391.8002
          R2_Score         : Train 0.9771, Val 0.9620, Test 0.9648
          MAE              : Train 17993.1114, Val 19864.4929, Test 19325.2072
Epoch 80: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33674.8383, Val 42578.3675, Test 42515.6355
          R2_Score         : Train 0.9781, Val 0.9621, Test 0.9646
          MAE              : Train 17458.7160, Val 19618.5154, Test 19084.0031
Best:
          RMSE             : Train 33674.8383, Val 42578.3675, Test 42515.6355
          R2_Score         : Train 0.9781, Val 0.9621, Test 0.9646
          MAE              : Train 17458.7160, Val 19618.5154, Test 19084.0031
Epoch 81: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33537.8880, Val 42760.7313, Test 43141.3733
          R2_Score         : Train 0.9782, Val 0.9618, Test 0.9636
          MAE              : Train 17404.3862, Val 19841.2996, Test 19325.1526
Best:
          RMSE             : Train 33674.8383, Val 42578.3675, Test 42515.6355
          R2_Score         : Train 0.9781, Val 0.9621, Test 0.9646
          MAE              : Train 17458.7160, Val 19618.5154, Test 19084.0031
Epoch 82: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33302.5029, Val 43256.6062, Test 43052.6807
          R2_Score         : Train 0.9785, Val 0.9609, Test 0.9637
          MAE              : Train 17305.2810, Val 19193.4290, Test 18766.9505
Best:

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.48it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.66it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.76it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.21it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.41it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.38it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.92it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.18it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.14it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.85it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.58it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.62it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.93it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.24it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.70it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.61it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.10it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.58it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.44it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.30it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.22it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.30it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.88it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.49it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.94it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.91it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.97it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.73it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.76it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.20it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.80it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.85it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.89it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.07it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.61it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.02it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.91it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.48it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.13it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.45it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.70it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.49it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.51it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.00it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.29it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.80it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.42it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.38it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.87it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.39it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.62it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.62it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.80it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.85it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.80it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.92it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.87it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.25it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.76it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.77it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.29it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.12it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.43it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.68it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.85it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.91it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.11it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.77it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.71it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.90it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.63it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.98it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.46it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.28it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.09it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.13it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.45it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.94it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.01it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.72it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.96it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.71it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.08it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.42it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.89it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.64it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.73it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.57it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.94it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.65it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.47it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.03it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.85it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.74it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.30it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.16it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.22it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.09it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.74it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.12it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.57it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.15it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.77it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.47it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.35it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.15it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.43it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.84it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.45it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.35it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.66it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.42it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.67it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.94it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.72it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.00it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.43it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.79it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.86it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.27it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.34it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.91it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.81it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.95it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.48it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.95it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.18it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.80it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.35it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.70it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.01it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.99it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.31it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.35it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.53it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.97it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.51it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.04it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.16it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.15it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.29it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  9.45it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.69it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.80it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.97it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.49it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.39it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.65it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.26it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.48it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.45it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.88it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.90it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.18it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.57it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.97it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.02it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.80it/s]          RMSE             : Train 33674.8383, Val 42578.3675, Test 42515.6355
          R2_Score         : Train 0.9781, Val 0.9621, Test 0.9646
          MAE              : Train 17458.7160, Val 19618.5154, Test 19084.0031
Epoch 83: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33176.8458, Val 42989.8870, Test 42643.6528
          R2_Score         : Train 0.9787, Val 0.9614, Test 0.9644
          MAE              : Train 17135.2901, Val 19233.3592, Test 18744.7670
Best:
          RMSE             : Train 33674.8383, Val 42578.3675, Test 42515.6355
          R2_Score         : Train 0.9781, Val 0.9621, Test 0.9646
          MAE              : Train 17458.7160, Val 19618.5154, Test 19084.0031
Epoch 84: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32806.5710, Val 44672.3389, Test 43469.7234
          R2_Score         : Train 0.9792, Val 0.9583, Test 0.9630
          MAE              : Train 16986.2593, Val 19269.0527, Test 18816.4388
Best:
          RMSE             : Train 33674.8383, Val 42578.3675, Test 42515.6355
          R2_Score         : Train 0.9781, Val 0.9621, Test 0.9646
          MAE              : Train 17458.7160, Val 19618.5154, Test 19084.0031
Epoch 85: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32721.1516, Val 43311.9049, Test 43017.7447
          R2_Score         : Train 0.9793, Val 0.9608, Test 0.9638
          MAE              : Train 16873.6956, Val 19376.5529, Test 18848.9767
Best:
          RMSE             : Train 33674.8383, Val 42578.3675, Test 42515.6355
          R2_Score         : Train 0.9781, Val 0.9621, Test 0.9646
          MAE              : Train 17458.7160, Val 19618.5154, Test 19084.0031
Epoch 86: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32573.6653, Val 43464.8191, Test 43823.1380
          R2_Score         : Train 0.9795, Val 0.9605, Test 0.9624
          MAE              : Train 16907.7280, Val 19257.2603, Test 18844.1000
Best:
          RMSE             : Train 33674.8383, Val 42578.3675, Test 42515.6355
          R2_Score         : Train 0.9781, Val 0.9621, Test 0.9646
          MAE              : Train 17458.7160, Val 19618.5154, Test 19084.0031
Epoch 87: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32269.3677, Val 41709.4397, Test 42902.1888
          R2_Score         : Train 0.9798, Val 0.9636, Test 0.9640
          MAE              : Train 16649.1498, Val 18821.5908, Test 18321.2420
Best:
          RMSE             : Train 32269.3677, Val 41709.4397, Test 42902.1888
          R2_Score         : Train 0.9798, Val 0.9636, Test 0.9640
          MAE              : Train 16649.1498, Val 18821.5908, Test 18321.2420
Epoch 88: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32160.0442, Val 42805.2405, Test 43128.6577
          R2_Score         : Train 0.9800, Val 0.9617, Test 0.9636
          MAE              : Train 16610.7889, Val 19102.8629, Test 18599.5391
Best:
          RMSE             : Train 32269.3677, Val 41709.4397, Test 42902.1888
          R2_Score         : Train 0.9798, Val 0.9636, Test 0.9640
          MAE              : Train 16649.1498, Val 18821.5908, Test 18321.2420
Epoch 89: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32021.8693, Val 41986.0988, Test 43062.4070
          R2_Score         : Train 0.9802, Val 0.9631, Test 0.9637
          MAE              : Train 16563.5618, Val 18792.9376, Test 18368.2412
Best:
          RMSE             : Train 32269.3677, Val 41709.4397, Test 42902.1888
          R2_Score         : Train 0.9798, Val 0.9636, Test 0.9640
          MAE              : Train 16649.1498, Val 18821.5908, Test 18321.2420
Epoch 90: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32050.7669, Val 42701.8750, Test 42934.1852
          R2_Score         : Train 0.9801, Val 0.9619, Test 0.9639
          MAE              : Train 16538.2925, Val 18785.7973, Test 18344.5258
Best:
          RMSE             : Train 32269.3677, Val 41709.4397, Test 42902.1888
          R2_Score         : Train 0.9798, Val 0.9636, Test 0.9640
          MAE              : Train 16649.1498, Val 18821.5908, Test 18321.2420
Epoch 91: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31754.2216, Val 41509.4369, Test 42389.5636
          R2_Score         : Train 0.9805, Val 0.9640, Test 0.9648
          MAE              : Train 16386.2963, Val 18559.8117, Test 18188.4604
Best:
          RMSE             : Train 31754.2216, Val 41509.4369, Test 42389.5636
          R2_Score         : Train 0.9805, Val 0.9640, Test 0.9648
          MAE              : Train 16386.2963, Val 18559.8117, Test 18188.4604
Epoch 92: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31655.0314, Val 42860.6693, Test 43273.1490
          R2_Score         : Train 0.9806, Val 0.9616, Test 0.9633
          MAE              : Train 16363.5350, Val 18648.9993, Test 18186.1895
Best:
          RMSE             : Train 31754.2216, Val 41509.4369, Test 42389.5636
          R2_Score         : Train 0.9805, Val 0.9640, Test 0.9648
          MAE              : Train 16386.2963, Val 18559.8117, Test 18188.4604
Epoch 93: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31399.7467, Val 43532.3487, Test 43888.0218
          R2_Score         : Train 0.9809, Val 0.9604, Test 0.9623
          MAE              : Train 16149.3164, Val 18769.0339, Test 18422.8097
Best:
          RMSE             : Train 31754.2216, Val 41509.4369, Test 42389.5636
          R2_Score         : Train 0.9805, Val 0.9640, Test 0.9648
          MAE              : Train 16386.2963, Val 18559.8117, Test 18188.4604
Epoch 94: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31336.9033, Val 41950.3177, Test 43589.8598
          R2_Score         : Train 0.9810, Val 0.9632, Test 0.9628
          MAE              : Train 16092.1825, Val 18661.8527, Test 18357.5342
Best:
          RMSE             : Train 31754.2216, Val 41509.4369, Test 42389.5636
          R2_Score         : Train 0.9805, Val 0.9640, Test 0.9648
          MAE              : Train 16386.2963, Val 18559.8117, Test 18188.4604
Epoch 95: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31136.8757, Val 43713.3112, Test 45060.2252
          R2_Score         : Train 0.9812, Val 0.9601, Test 0.9602
          MAE              : Train 15994.7213, Val 18698.5223, Test 18527.1821
Best:
          RMSE             : Train 31754.2216, Val 41509.4369, Test 42389.5636
          R2_Score         : Train 0.9805, Val 0.9640, Test 0.9648
          MAE              : Train 16386.2963, Val 18559.8117, Test 18188.4604
Epoch 96: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31346.5227, Val 41462.2208, Test 43880.6281
          R2_Score         : Train 0.9810, Val 0.9641, Test 0.9623
          MAE              : Train 16075.5696, Val 18242.2599, Test 18163.9402
Best:
          RMSE             : Train 31346.5227, Val 41462.2208, Test 43880.6281
          R2_Score         : Train 0.9810, Val 0.9641, Test 0.9623
          MAE              : Train 16075.5696, Val 18242.2599, Test 18163.9402
Epoch 97: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31181.2124, Val 41716.2341, Test 44027.0749
          R2_Score         : Train 0.9812, Val 0.9636, Test 0.9620
          MAE              : Train 15900.0020, Val 18741.4106, Test 18477.3296
Best:
          RMSE             : Train 31346.5227, Val 41462.2208, Test 43880.6281
          R2_Score         : Train 0.9810, Val 0.9641, Test 0.9623
          MAE              : Train 16075.5696, Val 18242.2599, Test 18163.9402
Epoch 98: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.24it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.90it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.31it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.67it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.34it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.14it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.93it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.38it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.58it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.02it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.53it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.78it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.65it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.32it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.92it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.00it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.25it/s]
          RMSE             : Train 31080.1046, Val 41577.6499, Test 43703.8281
          R2_Score         : Train 0.9813, Val 0.9639, Test 0.9626
          MAE              : Train 15979.1566, Val 18226.8574, Test 18061.7951
Best:
          RMSE             : Train 31346.5227, Val 41462.2208, Test 43880.6281
          R2_Score         : Train 0.9810, Val 0.9641, Test 0.9623
          MAE              : Train 16075.5696, Val 18242.2599, Test 18163.9402
Epoch 99: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 30950.2459, Val 41852.7251, Test 43729.6756
          R2_Score         : Train 0.9815, Val 0.9634, Test 0.9626
          MAE              : Train 15920.9667, Val 18531.2987, Test 18182.9047
Best:
          RMSE             : Train 31346.5227, Val 41462.2208, Test 43880.6281
          R2_Score         : Train 0.9810, Val 0.9641, Test 0.9623
          MAE              : Train 16075.5696, Val 18242.2599, Test 18163.9402
Epoch 100: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 30849.6883, Val 41964.7656, Test 43532.4317
          R2_Score         : Train 0.9816, Val 0.9632, Test 0.9629
          MAE              : Train 15869.5024, Val 18321.0206, Test 17920.7052
Best:
          RMSE             : Train 31346.5227, Val 41462.2208, Test 43880.6281
          R2_Score         : Train 0.9810, Val 0.9641, Test 0.9623
          MAE              : Train 16075.5696, Val 18242.2599, Test 18163.9402
Training time (sec): 314
