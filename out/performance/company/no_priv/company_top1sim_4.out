  0%|          | 0/54068 [00:00<?, ?it/s]  1%|▏         | 762/54068 [00:00<00:07, 7343.33it/s]  3%|▎         | 1817/54068 [00:00<00:05, 9199.13it/s]  6%|▌         | 3114/54068 [00:00<00:04, 10901.97it/s]  8%|▊         | 4520/54068 [00:00<00:04, 12140.27it/s] 11%|█         | 5911/54068 [00:00<00:03, 12774.29it/s] 13%|█▎        | 7191/54068 [00:00<00:03, 12419.87it/s] 16%|█▌        | 8681/54068 [00:00<00:03, 13212.53it/s] 19%|█▉        | 10261/54068 [00:00<00:03, 14021.12it/s] 22%|██▏       | 11889/54068 [00:00<00:02, 14719.63it/s] 25%|██▍       | 13365/54068 [00:01<00:03, 11877.79it/s] 27%|██▋       | 14641/54068 [00:01<00:03, 11655.90it/s] 30%|██▉       | 16202/54068 [00:01<00:02, 12699.32it/s] 33%|███▎      | 17753/54068 [00:01<00:02, 13467.86it/s] 36%|███▌      | 19259/54068 [00:01<00:02, 13912.85it/s] 38%|███▊      | 20688/54068 [00:01<00:02, 12991.22it/s] 41%|████      | 22063/54068 [00:01<00:02, 13197.79it/s] 43%|████▎     | 23410/54068 [00:01<00:03, 9391.54it/s]  45%|████▌     | 24517/54068 [00:02<00:03, 7803.25it/s] 47%|████▋     | 25447/54068 [00:02<00:04, 6767.63it/s] 49%|████▊     | 26239/54068 [00:02<00:05, 4855.69it/s] 50%|████▉     | 26866/54068 [00:02<00:05, 4988.70it/s] 51%|█████     | 27473/54068 [00:02<00:05, 5089.81it/s] 52%|█████▏    | 28063/54068 [00:03<00:05, 4809.19it/s] 53%|█████▎    | 28767/54068 [00:03<00:04, 5254.51it/s] 55%|█████▍    | 29685/54068 [00:03<00:03, 6162.42it/s] 57%|█████▋    | 31080/54068 [00:03<00:02, 8095.83it/s] 59%|█████▉    | 31976/54068 [00:03<00:02, 8022.46it/s] 61%|██████    | 32873/54068 [00:03<00:02, 8273.10it/s] 65%|██████▍   | 34910/54068 [00:03<00:01, 11594.21it/s] 67%|██████▋   | 36369/54068 [00:03<00:01, 12436.07it/s] 70%|██████▉   | 37771/54068 [00:03<00:01, 12889.64it/s] 72%|███████▏  | 39097/54068 [00:04<00:01, 11945.60it/s] 75%|███████▍  | 40532/54068 [00:04<00:01, 12607.33it/s] 77%|███████▋  | 41841/54068 [00:04<00:00, 12742.95it/s] 80%|████████  | 43397/54068 [00:04<00:00, 13552.10it/s] 83%|████████▎ | 44900/54068 [00:04<00:00, 13980.10it/s] 86%|████████▌ | 46314/54068 [00:04<00:00, 12800.30it/s] 88%|████████▊ | 47624/54068 [00:04<00:00, 12680.12it/s] 90%|█████████ | 48912/54068 [00:04<00:00, 11667.34it/s] 93%|█████████▎| 50105/54068 [00:04<00:00, 10501.81it/s] 95%|█████████▍| 51189/54068 [00:05<00:00, 10204.15it/s] 98%|█████████▊| 52724/54068 [00:05<00:00, 11542.33it/s]100%|██████████| 54068/54068 [00:05<00:00, 10294.31it/s]
  0%|          | 0/7725 [00:00<?, ?it/s] 22%|██▏       | 1677/7725 [00:00<00:00, 16165.49it/s] 45%|████▍     | 3461/7725 [00:00<00:00, 17133.30it/s] 67%|██████▋   | 5176/7725 [00:00<00:00, 17053.79it/s] 89%|████████▉ | 6883/7725 [00:00<00:00, 14569.48it/s]100%|██████████| 7725/7725 [00:00<00:00, 14849.00it/s]
  0%|          | 0/15449 [00:00<?, ?it/s] 14%|█▍        | 2150/15449 [00:00<00:00, 21493.87it/s] 28%|██▊       | 4300/15449 [00:00<00:00, 18566.89it/s] 40%|████      | 6183/15449 [00:00<00:00, 14946.83it/s] 53%|█████▎    | 8212/15449 [00:00<00:00, 16636.84it/s] 75%|███████▍  | 11524/15449 [00:00<00:00, 21847.20it/s] 90%|████████▉ | 13831/15449 [00:00<00:00, 22133.67it/s]100%|██████████| 15449/15449 [00:00<00:00, 19400.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.44it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.24it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.46it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.75it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.71it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.35it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.41it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.67it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.34it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.54it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.27it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.05it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.01it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.38it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.37it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.72it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.53it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.88it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.89it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.77it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.97it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.30it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.73it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.33it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.55it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.81it/s]Train:  36%|███▌      | 5/14 [00:00<00:02,  4.37it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.02it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.50it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.02it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.67it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.18it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.60it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.06it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.69it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.69it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.72it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.21it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.82it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.34it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.17it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.23it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.35it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.69it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.58it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.87it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.97it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.97it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.70it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.76it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.08it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.22it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.97it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.20it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  4.92it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.66it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.69it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.40it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.14it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Calculating noise scale
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Adding noise of scale 0.0 to sim_scores
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
Preparing time (sec): 35
Loading data
Prepare for training
Start training
================================================================================
                                    Kernel Shape Output Shape  Params  \
Layer                                                                   
0_local_models.0.fc_layers.Linear_0    [90, 200]  [4096, 200]   18200   
1_local_models.0.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
2_local_models.1.fc_layers.Linear_0   [156, 200]  [4096, 200]   31400   
3_local_models.1.fc_layers.Linear_1   [200, 100]  [4096, 100]   20100   
4_agg_model.fc_layers.Linear_0        [200, 400]  [4096, 400]   80400   
5_agg_model.fc_layers.Linear_1          [400, 1]    [4096, 1]     401   

                                     Mult-Adds  
Layer                                           
0_local_models.0.fc_layers.Linear_0      18000  
1_local_models.0.fc_layers.Linear_1      20000  
2_local_models.1.fc_layers.Linear_0      31200  
3_local_models.1.fc_layers.Linear_1      20000  
4_agg_model.fc_layers.Linear_0           80000  
5_agg_model.fc_layers.Linear_1             400  
--------------------------------------------------------------------------------
                      Totals
Total params          170601
Trainable params      170601
Non-trainable params       0
Mult-Adds             169600
================================================================================
n_classes=2
task=regression
model_name=company_top1sim_2022-08-10-19-25-01
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:7
test_batch_size=4096
train_batch_size=4096
learning_rate=0.001
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_top1sim_2022-08-10-19-25-01.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['rmse', 'r2_score', 'mae']
metrics_f=[<metric.rmse.RMSE object at 0x7f6202ac6ee0>, <metric.r2_score.R2Score object at 0x7f6202ac6fa0>, <metric.mae.MAE object at 0x7f6202ac6e20>]
hidden_sizes=[200, 100]
model=SplitNN(
  (agg_model): MLP(
    (fc_layers): ModuleList(
      (0): Linear(in_features=200, out_features=400, bias=True)
      (1): Linear(in_features=400, out_features=1, bias=True)
    )
  )
  (local_models): ModuleList(
    (0): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=90, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
    (1): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=156, out_features=200, bias=True)
        (1): Linear(in_features=200, out_features=100, bias=True)
      )
    )
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f6202ac6c40>
dataset_type=real
drop_key=True
num_common_features=1
tree_radius=0.01
tree_leaf_size=1000
knn_k=50
grid_min=-10.0
grid_max=10.0
grid_width=1.5
sim_scaler=StandardScaler()
filter_top_k=None
link_n_jobs=1
psig_p=4
sim_leak_p=1.0
link_threshold_t=0.1
link_epsilon=0.1
n_hash_lsh=50
edit_distance_threshold=10
n_hash_func=50
collision_rate=0.01
qgram_q=4
link_delta=0.01
feature_wise_sim=False
blocking_method=knn_str
center_threshold=0.5
n_clusters=100
local_hidden_sizes=[[200], [200]]
cut_dims=[100, 100]
agg_hidden_sizes=[400]
scale_analysis=None
data1_shape=(77225, 91)
data2_shape=(220583, 157)
Epoch 1: Loss:            : Train 0.0000, Val 0.1865, Test 0.1863
          RMSE             : Train 1648756.5930, Val 1587210.0300, Test 1586091.3264
          R2_Score         : Train -51.6080, Val -51.6685, Test -48.2649
          MAE              : Train 1633567.4715, Val 1571715.8186, Test 1570529.1510
Best:
          RMSE             : Train 1648756.5930, Val 1587210.0300, Test 1586091.3264
          R2_Score         : Train -51.6080, Val -51.6685, Test -48.2649
          MAE              : Train 1633567.4715, Val 1571715.8186, Test 1570529.1510
Epoch 2: Loss:            : Train 0.0000, Val 0.1588, Test 0.1587
          RMSE             : Train 1530563.8703, Val 1464605.3044, Test 1463907.3097
          R2_Score         : Train -44.3359, Val -43.8460, Test -40.9670
          MAE              : Train 1512747.9386, Val 1445697.2220, Test 1445088.5043
Best:
          RMSE             : Train 1530563.8703, Val 1464605.3044, Test 1463907.3097
          R2_Score         : Train -44.3359, Val -43.8460, Test -40.9670
          MAE              : Train 1512747.9386, Val 1445697.2220, Test 1445088.5043
Epoch 3: Loss:            : Train 0.0000, Val 0.1305, Test 0.1304
          RMSE             : Train 1401971.8557, Val 1327329.4373, Test 1327057.8021
          R2_Score         : Train -37.0380, Val -35.8332, Test -33.4874
          MAE              : Train 1379800.3452, Val 1302847.0748, Test 1302961.1444
Best:
          RMSE             : Train 1401971.8557, Val 1327329.4373, Test 1327057.8021
          R2_Score         : Train -37.0380, Val -35.8332, Test -33.4874
          MAE              : Train 1379800.3452, Val 1302847.0748, Test 1302961.1444
Epoch 4: Loss:            : Train 0.0000, Val 0.1020, Test 0.1020
          RMSE             : Train 1257468.1059, Val 1173642.9517, Test 1173804.4149
          R2_Score         : Train -29.6008, Val -27.7975, Test -25.9819
          MAE              : Train 1228692.4644, Val 1141706.4253, Test 1141937.8961
Best:
          RMSE             : Train 1257468.1059, Val 1173642.9517, Test 1173804.4149
          R2_Score         : Train -29.6008, Val -27.7975, Test -25.9819
          MAE              : Train 1228692.4644, Val 1141706.4253, Test 1141937.8961
Epoch 5: Loss:            : Train 0.0000, Val 0.0751, Test 0.0752

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.67it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.20it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.46it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.27it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.29it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.81it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.90it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.67it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.29it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.87it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.41it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.32it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.15it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.22it/s]Train:  14%|█▍        | 2/14 [00:00<00:05,  2.13it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  2.88it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.62it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.88it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.58it/s]Train:  50%|█████     | 7/14 [00:02<00:01,  3.80it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.47it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  6.03it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.12it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.84it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.79it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.39it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  2.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.82it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.88it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.72it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.12it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.69it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.93it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.33it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.16it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.62it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.98it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.65it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.61it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.87it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.87it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.01it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.70it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.87it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.88it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.31it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.15it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.37it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.46it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.74it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.10it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.20it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.08it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.29it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.84it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.51it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.33it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.72it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.51it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.55it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.36it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.80it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.07it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.56it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.93it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.73it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.83it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.97it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.81it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.91it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.01it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.20it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.69it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.38it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.78it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.88it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.97it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.67it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.07it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.32it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.14it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.10it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.97it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.06it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.82it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.74it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.71it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.09it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.86it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.85it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.11it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.26it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.09it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.89it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.44it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.73it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.92it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.40it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.58it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.57it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.86it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.65it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.44it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.03it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.74it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.13it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.53it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.13it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.66it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.79it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.58it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.98it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.70it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.87it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.30it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.09it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.74it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.80it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.53it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.02it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.21it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.42it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.37it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.61it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.88it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.21it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.25it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.57it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.45it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.38it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.29it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.01it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.19it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.84it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.35it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.36it/s]Train:  21%|██▏       | 3/14 [00:01<00:05,  2.09it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.51it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.39it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.26it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  4.99it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.49it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.88it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.48it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.08it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.75it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.85it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.58it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.26it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.54it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.12it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.74it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.62it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.12it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.03it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.64it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.01it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.74it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.02it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.25it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.44it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.80it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.40it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.10it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.18it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.70it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.56it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.29it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  6.03it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.95it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.17it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.75it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.11it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.22it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.57it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.11it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.76it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.50it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.17it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.42it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.20it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.89it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.17it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.44it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.59it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.88it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.28it/s]          RMSE             : Train 1097881.0851, Val 1006897.2311, Test 1007505.2325
          R2_Score         : Train -22.3265, Val -20.1959, Test -18.8781
          MAE              : Train 1060273.1626, Val 965948.5605, Test 965694.1205
Best:
          RMSE             : Train 1097881.0851, Val 1006897.2311, Test 1007505.2325
          R2_Score         : Train -22.3265, Val -20.1959, Test -18.8781
          MAE              : Train 1060273.1626, Val 965948.5605, Test 965694.1205
Epoch 6: Loss:            : Train 0.0000, Val 0.0515, Test 0.0517
          RMSE             : Train 928248.4921, Val 834387.0239, Test 835393.2647
          R2_Score         : Train -15.6751, Val -13.5552, Test -12.6667
          MAE              : Train 880597.7084, Val 784204.8603, Test 784116.9357
Best:
          RMSE             : Train 928248.4921, Val 834387.0239, Test 835393.2647
          R2_Score         : Train -15.6751, Val -13.5552, Test -12.6667
          MAE              : Train 880597.7084, Val 784204.8603, Test 784116.9357
Epoch 7: Loss:            : Train 0.0000, Val 0.0328, Test 0.0330
          RMSE             : Train 757221.0466, Val 665832.3974, Test 667298.6645
          R2_Score         : Train -10.0965, Val -8.2686, Test -7.7201
          MAE              : Train 700798.1343, Val 608902.3137, Test 608824.4671
Best:
          RMSE             : Train 757221.0466, Val 665832.3974, Test 667298.6645
          R2_Score         : Train -10.0965, Val -8.2686, Test -7.7201
          MAE              : Train 700798.1343, Val 608902.3137, Test 608824.4671
Epoch 8: Loss:            : Train 0.0000, Val 0.0194, Test 0.0196
          RMSE             : Train 595329.7716, Val 512334.8622, Test 514522.3912
          R2_Score         : Train -5.8589, Val -4.4877, Test -4.1843
          MAE              : Train 533973.4194, Val 452575.4794, Test 453404.0394
Best:
          RMSE             : Train 595329.7716, Val 512334.8622, Test 514522.3912
          R2_Score         : Train -5.8589, Val -4.4877, Test -4.1843
          MAE              : Train 533973.4194, Val 452575.4794, Test 453404.0394
Epoch 9: Loss:            : Train 0.0000, Val 0.0110, Test 0.0112
          RMSE             : Train 454277.2856, Val 385111.4388, Test 388520.6276
          R2_Score         : Train -2.9938, Val -2.1007, Test -1.9560
          MAE              : Train 391791.6998, Val 325685.9820, Test 327166.5301
Best:
          RMSE             : Train 454277.2856, Val 385111.4388, Test 388520.6276
          R2_Score         : Train -2.9938, Val -2.1007, Test -1.9560
          MAE              : Train 391791.6998, Val 325685.9820, Test 327166.5301
Epoch 10: Loss:            : Train 0.0000, Val 0.0064, Test 0.0066
          RMSE             : Train 344469.2237, Val 293509.2701, Test 298677.6064
          R2_Score         : Train -1.2964, Val -0.8010, Test -0.7470
          MAE              : Train 281477.0078, Val 232892.0267, Test 234561.5619
Best:
          RMSE             : Train 344469.2237, Val 293509.2701, Test 298677.6064
          R2_Score         : Train -1.2964, Val -0.8010, Test -0.7470
          MAE              : Train 281477.0078, Val 232892.0267, Test 234561.5619
Epoch 11: Loss:            : Train 0.0000, Val 0.0043, Test 0.0046
          RMSE             : Train 273269.2183, Val 240996.2997, Test 248008.9634
          R2_Score         : Train -0.4452, Val -0.2142, Test -0.2045
          MAE              : Train 204725.5953, Val 172432.6692, Test 174092.8772
Best:
          RMSE             : Train 273269.2183, Val 240996.2997, Test 248008.9634
          R2_Score         : Train -0.4452, Val -0.2142, Test -0.2045
          MAE              : Train 204725.5953, Val 172432.6692, Test 174092.8772
Epoch 12: Loss:            : Train 0.0000, Val 0.0036, Test 0.0039
          RMSE             : Train 238435.9731, Val 219958.8259, Test 228119.3895
          R2_Score         : Train -0.1002, Val -0.0115, Test -0.0191
          MAE              : Train 157460.4614, Val 138099.7672, Test 139651.1691
Best:
          RMSE             : Train 238435.9731, Val 219958.8259, Test 228119.3895
          R2_Score         : Train -0.1002, Val -0.0115, Test -0.0191
          MAE              : Train 157460.4614, Val 138099.7672, Test 139651.1691
Epoch 13: Loss:            : Train 0.0000, Val 0.0033, Test 0.0035
          RMSE             : Train 226147.0480, Val 209415.9697, Test 217766.8308
          R2_Score         : Train 0.0103, Val 0.0831, Test 0.0713
          MAE              : Train 132656.1516, Val 122845.5365, Test 124621.3565
Best:
          RMSE             : Train 226147.0480, Val 209415.9697, Test 217766.8308
          R2_Score         : Train 0.0103, Val 0.0831, Test 0.0713
          MAE              : Train 132656.1516, Val 122845.5365, Test 124621.3565
Epoch 14: Loss:            : Train 0.0000, Val 0.0027, Test 0.0029
          RMSE             : Train 211657.0451, Val 190469.8070, Test 197905.3179
          R2_Score         : Train 0.1330, Val 0.2415, Test 0.2330
          MAE              : Train 123505.4738, Val 119403.4731, Test 120946.2041
Best:
          RMSE             : Train 211657.0451, Val 190469.8070, Test 197905.3179
          R2_Score         : Train 0.1330, Val 0.2415, Test 0.2330
          MAE              : Train 123505.4738, Val 119403.4731, Test 120946.2041
Epoch 15: Loss:            : Train 0.0000, Val 0.0022, Test 0.0023
          RMSE             : Train 190771.5439, Val 170330.9547, Test 175719.3854
          R2_Score         : Train 0.2957, Val 0.3934, Test 0.3953
          MAE              : Train 120974.0791, Val 116560.5438, Test 118224.9811
Best:
          RMSE             : Train 190771.5439, Val 170330.9547, Test 175719.3854
          R2_Score         : Train 0.2957, Val 0.3934, Test 0.3953
          MAE              : Train 120974.0791, Val 116560.5438, Test 118224.9811
Epoch 16: Loss:            : Train 0.0000, Val 0.0016, Test 0.0017
          RMSE             : Train 168111.8171, Val 148315.0456, Test 151279.4823
          R2_Score         : Train 0.4531, Val 0.5401, Test 0.5518
          MAE              : Train 114290.2887, Val 104932.2182, Test 105938.8323
Best:
          RMSE             : Train 168111.8171, Val 148315.0456, Test 151279.4823
          R2_Score         : Train 0.4531, Val 0.5401, Test 0.5518
          MAE              : Train 114290.2887, Val 104932.2182, Test 105938.8323
Epoch 17: Loss:            : Train 0.0000, Val 0.0012, Test 0.0012
          RMSE             : Train 143613.5611, Val 127580.3725, Test 128278.1701
          R2_Score         : Train 0.6009, Val 0.6597, Test 0.6778
          MAE              : Train 99010.5243, Val 87939.5441, Test 88413.8830
Best:
          RMSE             : Train 143613.5611, Val 127580.3725, Test 128278.1701
          R2_Score         : Train 0.6009, Val 0.6597, Test 0.6778
          MAE              : Train 99010.5243, Val 87939.5441, Test 88413.8830
Epoch 18: Loss:            : Train 0.0000, Val 0.0010, Test 0.0009
          RMSE             : Train 123547.9249, Val 113413.4219, Test 112291.5952
          R2_Score         : Train 0.7046, Val 0.7311, Test 0.7531
          MAE              : Train 82228.6019, Val 72810.4207, Test 72885.1386
Best:
          RMSE             : Train 123547.9249, Val 113413.4219, Test 112291.5952
          R2_Score         : Train 0.7046, Val 0.7311, Test 0.7531
          MAE              : Train 82228.6019, Val 72810.4207, Test 72885.1386
Epoch 19: Loss:            : Train 0.0000, Val 0.0008, Test 0.0008
          RMSE             : Train 109637.9954, Val 102962.2128, Test 101206.3879
          R2_Score         : Train 0.7674, Val 0.7784, Test 0.7994
          MAE              : Train 67992.7494, Val 62064.0415, Test 61884.6641
Best:
          RMSE             : Train 109637.9954, Val 102962.2128, Test 101206.3879
          R2_Score         : Train 0.7674, Val 0.7784, Test 0.7994
          MAE              : Train 67992.7494, Val 62064.0415, Test 61884.6641
Epoch 20: Loss:            : Train 0.0000, Val 0.0006, Test 0.0006
          RMSE             : Train 98415.1197, Val 92121.6986, Test 90916.2470

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.09it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.21it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.30it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.07it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.25it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.92it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.15it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.41it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.76it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.92it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.18it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.85it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.80it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.52it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.36it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.53it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.06it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.69it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.88it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.77it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.43it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.98it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.74it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.52it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.16it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.42it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.53it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.57it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.81it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.87it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.43it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.77it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.43it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.12it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.81it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 20.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.93it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.83it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.53it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.93it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.29it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.04it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.43it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.95it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.36it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.88it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.53it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.74it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.91it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.96it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.40it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.12it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.33it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.18it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.74it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.54it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.79it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.26it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.67it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.85it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.62it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.15it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.74it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.34it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.36it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.44it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.57it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.47it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.11it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.71it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.58it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.93it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.15it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.25it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.44it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.44it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.11it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.06it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.38it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.48it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.89it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.38it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.14it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  8.40it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.70it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.90it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.66it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.10it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.05it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.48it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.61it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.98it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.56it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.25it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.81it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.89it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.70it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.43it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.93it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.67it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.73it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.76it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.98it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.10it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.48it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.83it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.95it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.83it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.95it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.58it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  2.04it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.82it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.97it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.15it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.66it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.78it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.92it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.63it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.56it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.96it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.70it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.06it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.01it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.16it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.83it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.54it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.87it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.46it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.16it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.82it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.53it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.87it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.62it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.71it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.68it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.58it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.52it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.59it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.39it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.71it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.76it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.40it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.27it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.98it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.68it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.82it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.43it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.02it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.52it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.39it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.18it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.76it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.37it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  2.92it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.95it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.59it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.57it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.60it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.61it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.52it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.97it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.95it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.61it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.36it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.08it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.72it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.30it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.47it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.51it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.67it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.23it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.45it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.73it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.47it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.69it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.45it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.94it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.79it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.81it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.80it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.03it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.65it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.30it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.51it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.12it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.40it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.84it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.06it/s]          R2_Score         : Train 0.8126, Val 0.8226, Test 0.8381
          MAE              : Train 59849.3714, Val 56847.5405, Test 56604.7455
Best:
          RMSE             : Train 98415.1197, Val 92121.6986, Test 90916.2470
          R2_Score         : Train 0.8126, Val 0.8226, Test 0.8381
          MAE              : Train 59849.3714, Val 56847.5405, Test 56604.7455
Epoch 21: Loss:            : Train 0.0000, Val 0.0005, Test 0.0005
          RMSE             : Train 88431.2037, Val 82949.8435, Test 82602.7109
          R2_Score         : Train 0.8487, Val 0.8561, Test 0.8664
          MAE              : Train 55149.4029, Val 52387.2378, Test 52231.7860
Best:
          RMSE             : Train 88431.2037, Val 82949.8435, Test 82602.7109
          R2_Score         : Train 0.8487, Val 0.8561, Test 0.8664
          MAE              : Train 55149.4029, Val 52387.2378, Test 52231.7860
Epoch 22: Loss:            : Train 0.0000, Val 0.0004, Test 0.0004
          RMSE             : Train 80173.7223, Val 75994.7151, Test 75978.3446
          R2_Score         : Train 0.8756, Val 0.8793, Test 0.8870
          MAE              : Train 50127.6482, Val 46912.5068, Test 46697.6003
Best:
          RMSE             : Train 80173.7223, Val 75994.7151, Test 75978.3446
          R2_Score         : Train 0.8756, Val 0.8793, Test 0.8870
          MAE              : Train 50127.6482, Val 46912.5068, Test 46697.6003
Epoch 23: Loss:            : Train 0.0000, Val 0.0004, Test 0.0004
          RMSE             : Train 73757.4160, Val 70153.9108, Test 70658.2681
          R2_Score         : Train 0.8947, Val 0.8971, Test 0.9022
          MAE              : Train 45592.1700, Val 43156.3938, Test 43089.9624
Best:
          RMSE             : Train 73757.4160, Val 70153.9108, Test 70658.2681
          R2_Score         : Train 0.8947, Val 0.8971, Test 0.9022
          MAE              : Train 45592.1700, Val 43156.3938, Test 43089.9624
Epoch 24: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 69037.1213, Val 65700.4378, Test 66735.3653
          R2_Score         : Train 0.9078, Val 0.9098, Test 0.9128
          MAE              : Train 41579.6451, Val 39163.5245, Test 39192.6536
Best:
          RMSE             : Train 69037.1213, Val 65700.4378, Test 66735.3653
          R2_Score         : Train 0.9078, Val 0.9098, Test 0.9128
          MAE              : Train 41579.6451, Val 39163.5245, Test 39192.6536
Epoch 25: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 65358.2298, Val 61728.3731, Test 63719.2522
          R2_Score         : Train 0.9173, Val 0.9203, Test 0.9205
          MAE              : Train 38612.9224, Val 36197.0756, Test 36524.0134
Best:
          RMSE             : Train 65358.2298, Val 61728.3731, Test 63719.2522
          R2_Score         : Train 0.9173, Val 0.9203, Test 0.9205
          MAE              : Train 38612.9224, Val 36197.0756, Test 36524.0134
Epoch 26: Loss:            : Train 0.0000, Val 0.0003, Test 0.0003
          RMSE             : Train 62442.6946, Val 59031.2097, Test 61198.5074
          R2_Score         : Train 0.9245, Val 0.9271, Test 0.9267
          MAE              : Train 35948.5777, Val 33840.5136, Test 34309.7056
Best:
          RMSE             : Train 62442.6946, Val 59031.2097, Test 61198.5074
          R2_Score         : Train 0.9245, Val 0.9271, Test 0.9267
          MAE              : Train 35948.5777, Val 33840.5136, Test 34309.7056
Epoch 27: Loss:            : Train 0.0000, Val 0.0002, Test 0.0003
          RMSE             : Train 60300.6977, Val 56734.1174, Test 59365.3331
          R2_Score         : Train 0.9296, Val 0.9327, Test 0.9310
          MAE              : Train 34301.7946, Val 32464.4670, Test 32959.3941
Best:
          RMSE             : Train 60300.6977, Val 56734.1174, Test 59365.3331
          R2_Score         : Train 0.9296, Val 0.9327, Test 0.9310
          MAE              : Train 34301.7946, Val 32464.4670, Test 32959.3941
Epoch 28: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 58340.3483, Val 55532.6121, Test 57922.4592
          R2_Score         : Train 0.9341, Val 0.9355, Test 0.9343
          MAE              : Train 32790.4960, Val 31452.2061, Test 31991.2356
Best:
          RMSE             : Train 58340.3483, Val 55532.6121, Test 57922.4592
          R2_Score         : Train 0.9341, Val 0.9355, Test 0.9343
          MAE              : Train 32790.4960, Val 31452.2061, Test 31991.2356
Epoch 29: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 56361.2568, Val 53896.8280, Test 56342.4664
          R2_Score         : Train 0.9385, Val 0.9393, Test 0.9378
          MAE              : Train 31638.7325, Val 30218.0436, Test 30802.3597
Best:
          RMSE             : Train 56361.2568, Val 53896.8280, Test 56342.4664
          R2_Score         : Train 0.9385, Val 0.9393, Test 0.9378
          MAE              : Train 31638.7325, Val 30218.0436, Test 30802.3597
Epoch 30: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 54818.2037, Val 53108.0310, Test 54568.4973
          R2_Score         : Train 0.9418, Val 0.9410, Test 0.9417
          MAE              : Train 30546.2079, Val 29429.5735, Test 29735.3773
Best:
          RMSE             : Train 54818.2037, Val 53108.0310, Test 54568.4973
          R2_Score         : Train 0.9418, Val 0.9410, Test 0.9417
          MAE              : Train 30546.2079, Val 29429.5735, Test 29735.3773
Epoch 31: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 53421.6854, Val 52428.9770, Test 53558.7073
          R2_Score         : Train 0.9448, Val 0.9425, Test 0.9438
          MAE              : Train 29551.0086, Val 28696.2879, Test 28911.7330
Best:
          RMSE             : Train 53421.6854, Val 52428.9770, Test 53558.7073
          R2_Score         : Train 0.9448, Val 0.9425, Test 0.9438
          MAE              : Train 29551.0086, Val 28696.2879, Test 28911.7330
Epoch 32: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 52280.3437, Val 51509.9958, Test 52466.0280
          R2_Score         : Train 0.9471, Val 0.9445, Test 0.9461
          MAE              : Train 28848.9112, Val 27901.7588, Test 28147.5751
Best:
          RMSE             : Train 52280.3437, Val 51509.9958, Test 52466.0280
          R2_Score         : Train 0.9471, Val 0.9445, Test 0.9461
          MAE              : Train 28848.9112, Val 27901.7588, Test 28147.5751
Epoch 33: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 50966.4054, Val 50317.7810, Test 51547.7728
          R2_Score         : Train 0.9497, Val 0.9471, Test 0.9480
          MAE              : Train 28070.9163, Val 27779.0042, Test 27836.6801
Best:
          RMSE             : Train 50966.4054, Val 50317.7810, Test 51547.7728
          R2_Score         : Train 0.9497, Val 0.9471, Test 0.9480
          MAE              : Train 28070.9163, Val 27779.0042, Test 27836.6801
Epoch 34: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 49864.0834, Val 50398.4870, Test 50598.4052
          R2_Score         : Train 0.9519, Val 0.9469, Test 0.9499
          MAE              : Train 27439.6824, Val 27039.4012, Test 27161.3678
Best:
          RMSE             : Train 50966.4054, Val 50317.7810, Test 51547.7728
          R2_Score         : Train 0.9497, Val 0.9471, Test 0.9480
          MAE              : Train 28070.9163, Val 27779.0042, Test 27836.6801
Epoch 35: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 49040.6922, Val 49364.4183, Test 49528.9485
          R2_Score         : Train 0.9535, Val 0.9491, Test 0.9520
          MAE              : Train 27008.1666, Val 26735.1797, Test 26662.5881
Best:
          RMSE             : Train 49040.6922, Val 49364.4183, Test 49528.9485
          R2_Score         : Train 0.9535, Val 0.9491, Test 0.9520

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.08it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.16it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.72it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.33it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.62it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.19it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.31it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.49it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.67it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.58it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.18it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.01it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.72it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.43it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.79it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.62it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.51it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.59it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.30it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.56it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.21it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.51it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.77it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.25it/s]Train:  14%|█▍        | 2/14 [00:01<00:06,  1.86it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.83it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.32it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.00it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.06it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.13it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.05it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.11it/s]Train:  86%|████████▌ | 12/14 [00:03<00:00,  3.70it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.32it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.60it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.94it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.41it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.02it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.41it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.76it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.29it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.75it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.19it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.91it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.60it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.14it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.30it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.44it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.30it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.03it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.99it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.57it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.16it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.55it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.28it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.69it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.41it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.48it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.92it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.87it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.75it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.89it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.95it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.85it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.12it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.41it/s]Train:  57%|█████▋    | 8/14 [00:02<00:01,  4.02it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.26it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.14it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.48it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.16it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.94it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.38it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.17it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.47it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.52it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.47it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.47it/s]Train:  29%|██▊       | 4/14 [00:01<00:03,  2.87it/s]Train:  36%|███▌      | 5/14 [00:01<00:03,  2.94it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.83it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.47it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.15it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.67it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.24it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.26it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.81it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  1.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.56it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.96it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.72it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.12it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.53it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.58it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.95it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.38it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.29it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.89it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.06it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.38it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.35it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.51it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.50it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.64it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.72it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.50it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.80it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.65it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.81it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.97it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.20it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.85it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.19it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.92it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.24it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.46it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.23it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.03it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.47it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.26it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.17it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.99it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.53it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.73it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.51it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.02it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.84it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.93it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.67it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.38it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.30it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.92it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.08it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.98it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  3.98it/s]Train:  71%|███████▏  | 10/14 [00:02<00:01,  3.67it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.18it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.29it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.24it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.97it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.75it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.51it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.76it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.79it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.56it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.57it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.32it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.87it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.90it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.71it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.57it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.25it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.47it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.04it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.47it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.37it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.80it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.30it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.37it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.78it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.31it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.04it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.29it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.79it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.65it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.40it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.86it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.88it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.48it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.79it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.58it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.34it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.54it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.14it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  3.70it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.84it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.17it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.90it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  4.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.25it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.81it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.81it/s]Train:  21%|██▏       | 3/14 [00:01<00:04,  2.57it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  3.58it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.52it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.29it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.43it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  6.09it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.37it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.83it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.52it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.65it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.88it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.86it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.92it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.81it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.15it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.72it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.03it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.11it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.62it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.00it/s]          MAE              : Train 27008.1666, Val 26735.1797, Test 26662.5881
Epoch 36: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 48183.7080, Val 48701.9090, Test 48778.8254
          R2_Score         : Train 0.9551, Val 0.9504, Test 0.9534
          MAE              : Train 26477.4798, Val 26089.3170, Test 26073.5404
Best:
          RMSE             : Train 48183.7080, Val 48701.9090, Test 48778.8254
          R2_Score         : Train 0.9551, Val 0.9504, Test 0.9534
          MAE              : Train 26477.4798, Val 26089.3170, Test 26073.5404
Epoch 37: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 47327.1823, Val 48334.4532, Test 48494.8075
          R2_Score         : Train 0.9567, Val 0.9512, Test 0.9539
          MAE              : Train 25947.1357, Val 25614.5967, Test 25730.6040
Best:
          RMSE             : Train 47327.1823, Val 48334.4532, Test 48494.8075
          R2_Score         : Train 0.9567, Val 0.9512, Test 0.9539
          MAE              : Train 25947.1357, Val 25614.5967, Test 25730.6040
Epoch 38: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 46623.4734, Val 47629.6147, Test 47638.0748
          R2_Score         : Train 0.9579, Val 0.9526, Test 0.9556
          MAE              : Train 25527.1923, Val 25283.2754, Test 25248.1793
Best:
          RMSE             : Train 46623.4734, Val 47629.6147, Test 47638.0748
          R2_Score         : Train 0.9579, Val 0.9526, Test 0.9556
          MAE              : Train 25527.1923, Val 25283.2754, Test 25248.1793
Epoch 39: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 45773.2756, Val 48584.5533, Test 47709.2066
          R2_Score         : Train 0.9595, Val 0.9507, Test 0.9554
          MAE              : Train 25001.2844, Val 25336.9527, Test 25102.7114
Best:
          RMSE             : Train 46623.4734, Val 47629.6147, Test 47638.0748
          R2_Score         : Train 0.9579, Val 0.9526, Test 0.9556
          MAE              : Train 25527.1923, Val 25283.2754, Test 25248.1793
Epoch 40: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 45149.0833, Val 47490.5169, Test 46484.4167
          R2_Score         : Train 0.9606, Val 0.9528, Test 0.9577
          MAE              : Train 24634.8842, Val 24557.5586, Test 24383.9835
Best:
          RMSE             : Train 45149.0833, Val 47490.5169, Test 46484.4167
          R2_Score         : Train 0.9606, Val 0.9528, Test 0.9577
          MAE              : Train 24634.8842, Val 24557.5586, Test 24383.9835
Epoch 41: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 44314.8350, Val 46498.6545, Test 46583.7153
          R2_Score         : Train 0.9620, Val 0.9548, Test 0.9575
          MAE              : Train 24123.4501, Val 24194.5361, Test 24194.0885
Best:
          RMSE             : Train 44314.8350, Val 46498.6545, Test 46583.7153
          R2_Score         : Train 0.9620, Val 0.9548, Test 0.9575
          MAE              : Train 24123.4501, Val 24194.5361, Test 24194.0885
Epoch 42: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43788.0036, Val 46575.8415, Test 45908.7486
          R2_Score         : Train 0.9629, Val 0.9546, Test 0.9587
          MAE              : Train 23713.4462, Val 23919.1619, Test 23786.9060
Best:
          RMSE             : Train 44314.8350, Val 46498.6545, Test 46583.7153
          R2_Score         : Train 0.9620, Val 0.9548, Test 0.9575
          MAE              : Train 24123.4501, Val 24194.5361, Test 24194.0885
Epoch 43: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43410.9446, Val 46229.5414, Test 46075.3014
          R2_Score         : Train 0.9635, Val 0.9553, Test 0.9584
          MAE              : Train 23487.7363, Val 23785.6106, Test 23650.0873
Best:
          RMSE             : Train 43410.9446, Val 46229.5414, Test 46075.3014
          R2_Score         : Train 0.9635, Val 0.9553, Test 0.9584
          MAE              : Train 23487.7363, Val 23785.6106, Test 23650.0873
Epoch 44: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 43540.8670, Val 47612.4681, Test 46330.2771
          R2_Score         : Train 0.9633, Val 0.9526, Test 0.9580
          MAE              : Train 23677.5292, Val 23652.5367, Test 23570.0782
Best:
          RMSE             : Train 43410.9446, Val 46229.5414, Test 46075.3014
          R2_Score         : Train 0.9635, Val 0.9553, Test 0.9584
          MAE              : Train 23487.7363, Val 23785.6106, Test 23650.0873
Epoch 45: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 42715.1801, Val 46030.6997, Test 45013.1212
          R2_Score         : Train 0.9647, Val 0.9557, Test 0.9603
          MAE              : Train 23087.7986, Val 23191.0240, Test 22995.1365
Best:
          RMSE             : Train 42715.1801, Val 46030.6997, Test 45013.1212
          R2_Score         : Train 0.9647, Val 0.9557, Test 0.9603
          MAE              : Train 23087.7986, Val 23191.0240, Test 22995.1365
Epoch 46: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 41873.1030, Val 46222.6246, Test 44705.4126
          R2_Score         : Train 0.9661, Val 0.9553, Test 0.9609
          MAE              : Train 22518.3093, Val 23038.8814, Test 22776.0872
Best:
          RMSE             : Train 42715.1801, Val 46030.6997, Test 45013.1212
          R2_Score         : Train 0.9647, Val 0.9557, Test 0.9603
          MAE              : Train 23087.7986, Val 23191.0240, Test 22995.1365
Epoch 47: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 41381.7192, Val 45166.1533, Test 44746.4575
          R2_Score         : Train 0.9669, Val 0.9574, Test 0.9608
          MAE              : Train 22214.0086, Val 22742.4119, Test 22596.5147
Best:
          RMSE             : Train 41381.7192, Val 45166.1533, Test 44746.4575
          R2_Score         : Train 0.9669, Val 0.9574, Test 0.9608
          MAE              : Train 22214.0086, Val 22742.4119, Test 22596.5147
Epoch 48: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 40918.6193, Val 46042.9970, Test 44892.5252
          R2_Score         : Train 0.9676, Val 0.9557, Test 0.9605
          MAE              : Train 22010.6515, Val 22492.4573, Test 22272.9047
Best:
          RMSE             : Train 41381.7192, Val 45166.1533, Test 44746.4575
          R2_Score         : Train 0.9669, Val 0.9574, Test 0.9608
          MAE              : Train 22214.0086, Val 22742.4119, Test 22596.5147
Epoch 49: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 40595.8908, Val 44549.3186, Test 43574.8237
          R2_Score         : Train 0.9681, Val 0.9585, Test 0.9628
          MAE              : Train 21770.1124, Val 22153.4137, Test 21828.1721
Best:
          RMSE             : Train 40595.8908, Val 44549.3186, Test 43574.8237
          R2_Score         : Train 0.9681, Val 0.9585, Test 0.9628
          MAE              : Train 21770.1124, Val 22153.4137, Test 21828.1721
Epoch 50: Loss:            : Train 0.0000, Val 0.0002, Test 0.0002
          RMSE             : Train 40265.5787, Val 47803.7041, Test 46079.8219
          R2_Score         : Train 0.9686, Val 0.9522, Test 0.9584
          MAE              : Train 21401.6700, Val 22819.4851, Test 22568.1687
Best:
          RMSE             : Train 40595.8908, Val 44549.3186, Test 43574.8237
          R2_Score         : Train 0.9681, Val 0.9585, Test 0.9628
          MAE              : Train 21770.1124, Val 22153.4137, Test 21828.1721
Epoch 51: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 39845.9672, Val 44452.7990, Test 43626.6281
          R2_Score         : Train 0.9693, Val 0.9587, Test 0.9627

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:08,  1.56it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  3.75it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.20it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.45it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.55it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.78it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.69it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.49it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.07it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  7.35it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:06,  1.89it/s]Train:  14%|█▍        | 2/14 [00:00<00:04,  2.76it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  3.20it/s]Train:  29%|██▊       | 4/14 [00:01<00:04,  2.43it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  3.33it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.18it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.98it/s]Train:  64%|██████▍   | 9/14 [00:02<00:01,  4.43it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  5.11it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.59it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.77it/s]Train:  93%|█████████▎| 13/14 [00:03<00:00,  4.99it/s]Train: 100%|██████████| 14/14 [00:03<00:00,  4.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.10it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.33it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.07it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.92it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.92it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.79it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  3.34it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.27it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.46it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.65it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.98it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.35it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.93it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  4.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.09it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.43it/s]Train:  21%|██▏       | 3/14 [00:00<00:03,  3.25it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.15it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.29it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.91it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.78it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.76it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  7.09it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.77it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.46it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.39it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.20it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.80it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.84it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.16it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.70it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.15it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.06it/s]Train:  36%|███▌      | 5/14 [00:01<00:02,  4.22it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.23it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.22it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.64it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.01it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.67it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.21it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.13it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.87it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.50it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.74it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.43it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.61it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.17it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.01it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.51it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.03it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.47it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.48it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.44it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.92it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.86it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.76it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.52it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.22it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.24it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.82it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.13it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.78it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.23it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.22it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.44it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.22it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.28it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.81it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.80it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  5.20it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.66it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.14it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 19.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.19it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.56it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.54it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  3.88it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.91it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  3.79it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  4.85it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.44it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.29it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.17it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.55it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.77it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.72it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.18it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.16it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.19it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.87it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.05it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  5.13it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.47it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.27it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.05it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.02it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.68it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.91it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.99it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.20it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.88it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  5.81it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.03it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.67it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.41it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.05it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.80it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.88it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.68it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.30it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.83it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.01it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.03it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  3.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.45it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.63it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.26it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.37it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.02it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.02it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.68it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.84it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.33it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.98it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.81it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.55it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.45it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:07,  1.81it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.79it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.72it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.11it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.69it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.95it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.42it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.63it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.28it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.78it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.28it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.47it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.11it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.60it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.61it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.13it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.84it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.30it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.46it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.14it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.26it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.86it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.40it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.25it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.25it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.22it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.14it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  8.73it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.72it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.33it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.97it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.78it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.07it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.45it/s]          MAE              : Train 21315.1603, Val 21834.5819, Test 21552.5377
Best:
          RMSE             : Train 39845.9672, Val 44452.7990, Test 43626.6281
          R2_Score         : Train 0.9693, Val 0.9587, Test 0.9627
          MAE              : Train 21315.1603, Val 21834.5819, Test 21552.5377
Epoch 52: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 39549.5499, Val 46163.6396, Test 44853.5927
          R2_Score         : Train 0.9697, Val 0.9554, Test 0.9606
          MAE              : Train 20990.2394, Val 22130.2960, Test 21902.4521
Best:
          RMSE             : Train 39845.9672, Val 44452.7990, Test 43626.6281
          R2_Score         : Train 0.9693, Val 0.9587, Test 0.9627
          MAE              : Train 21315.1603, Val 21834.5819, Test 21552.5377
Epoch 53: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 39231.7326, Val 45138.3321, Test 44270.2158
          R2_Score         : Train 0.9702, Val 0.9574, Test 0.9616
          MAE              : Train 20802.9210, Val 21623.2017, Test 21451.8667
Best:
          RMSE             : Train 39845.9672, Val 44452.7990, Test 43626.6281
          R2_Score         : Train 0.9693, Val 0.9587, Test 0.9627
          MAE              : Train 21315.1603, Val 21834.5819, Test 21552.5377
Epoch 54: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38772.1935, Val 44373.3888, Test 43544.7666
          R2_Score         : Train 0.9709, Val 0.9588, Test 0.9629
          MAE              : Train 20482.9025, Val 21379.2094, Test 21105.5016
Best:
          RMSE             : Train 38772.1935, Val 44373.3888, Test 43544.7666
          R2_Score         : Train 0.9709, Val 0.9588, Test 0.9629
          MAE              : Train 20482.9025, Val 21379.2094, Test 21105.5016
Epoch 55: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38387.6521, Val 44613.1982, Test 43062.7339
          R2_Score         : Train 0.9715, Val 0.9584, Test 0.9637
          MAE              : Train 20263.4456, Val 21385.4251, Test 21148.7989
Best:
          RMSE             : Train 38772.1935, Val 44373.3888, Test 43544.7666
          R2_Score         : Train 0.9709, Val 0.9588, Test 0.9629
          MAE              : Train 20482.9025, Val 21379.2094, Test 21105.5016
Epoch 56: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 38036.9309, Val 44661.0549, Test 43211.6058
          R2_Score         : Train 0.9720, Val 0.9583, Test 0.9634
          MAE              : Train 20096.6821, Val 21062.0766, Test 20807.6992
Best:
          RMSE             : Train 38772.1935, Val 44373.3888, Test 43544.7666
          R2_Score         : Train 0.9709, Val 0.9588, Test 0.9629
          MAE              : Train 20482.9025, Val 21379.2094, Test 21105.5016
Epoch 57: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 37995.9552, Val 43501.1792, Test 42709.9291
          R2_Score         : Train 0.9721, Val 0.9604, Test 0.9643
          MAE              : Train 19947.2027, Val 20861.3892, Test 20663.5366
Best:
          RMSE             : Train 37995.9552, Val 43501.1792, Test 42709.9291
          R2_Score         : Train 0.9721, Val 0.9604, Test 0.9643
          MAE              : Train 19947.2027, Val 20861.3892, Test 20663.5366
Epoch 58: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 37607.6077, Val 43722.3579, Test 42820.2665
          R2_Score         : Train 0.9726, Val 0.9600, Test 0.9641
          MAE              : Train 19750.9019, Val 20609.6767, Test 20383.3600
Best:
          RMSE             : Train 37995.9552, Val 43501.1792, Test 42709.9291
          R2_Score         : Train 0.9721, Val 0.9604, Test 0.9643
          MAE              : Train 19947.2027, Val 20861.3892, Test 20663.5366
Epoch 59: Loss:            : Train 0.0000, Val 0.0002, Test 0.0001
          RMSE             : Train 37479.4405, Val 45300.2561, Test 44411.3347
          R2_Score         : Train 0.9728, Val 0.9571, Test 0.9614
          MAE              : Train 19549.6997, Val 20699.9627, Test 20615.5682
Best:
          RMSE             : Train 37995.9552, Val 43501.1792, Test 42709.9291
          R2_Score         : Train 0.9721, Val 0.9604, Test 0.9643
          MAE              : Train 19947.2027, Val 20861.3892, Test 20663.5366
Epoch 60: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 37671.3112, Val 42867.5929, Test 42218.0512
          R2_Score         : Train 0.9725, Val 0.9616, Test 0.9651
          MAE              : Train 19764.4917, Val 20314.4765, Test 20094.9659
Best:
          RMSE             : Train 37671.3112, Val 42867.5929, Test 42218.0512
          R2_Score         : Train 0.9725, Val 0.9616, Test 0.9651
          MAE              : Train 19764.4917, Val 20314.4765, Test 20094.9659
Epoch 61: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36658.6358, Val 43293.3570, Test 42506.5249
          R2_Score         : Train 0.9740, Val 0.9608, Test 0.9646
          MAE              : Train 19034.9515, Val 20223.1938, Test 20018.4505
Best:
          RMSE             : Train 37671.3112, Val 42867.5929, Test 42218.0512
          R2_Score         : Train 0.9725, Val 0.9616, Test 0.9651
          MAE              : Train 19764.4917, Val 20314.4765, Test 20094.9659
Epoch 62: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36504.1732, Val 43592.4390, Test 42317.5616
          R2_Score         : Train 0.9742, Val 0.9603, Test 0.9649
          MAE              : Train 18904.6862, Val 20064.3409, Test 19811.2223
Best:
          RMSE             : Train 37671.3112, Val 42867.5929, Test 42218.0512
          R2_Score         : Train 0.9725, Val 0.9616, Test 0.9651
          MAE              : Train 19764.4917, Val 20314.4765, Test 20094.9659
Epoch 63: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36160.5528, Val 44384.0696, Test 43290.8677
          R2_Score         : Train 0.9747, Val 0.9588, Test 0.9633
          MAE              : Train 18709.3107, Val 21113.5642, Test 20886.8620
Best:
          RMSE             : Train 37671.3112, Val 42867.5929, Test 42218.0512
          R2_Score         : Train 0.9725, Val 0.9616, Test 0.9651
          MAE              : Train 19764.4917, Val 20314.4765, Test 20094.9659
Epoch 64: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36242.4115, Val 42973.8237, Test 42641.5856
          R2_Score         : Train 0.9746, Val 0.9614, Test 0.9644
          MAE              : Train 18917.2080, Val 19978.5175, Test 19755.9632
Best:
          RMSE             : Train 37671.3112, Val 42867.5929, Test 42218.0512
          R2_Score         : Train 0.9725, Val 0.9616, Test 0.9651
          MAE              : Train 19764.4917, Val 20314.4765, Test 20094.9659
Epoch 65: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35929.7372, Val 42628.7400, Test 42017.1799
          R2_Score         : Train 0.9750, Val 0.9620, Test 0.9654
          MAE              : Train 18483.9010, Val 19741.4565, Test 19521.3698
Best:
          RMSE             : Train 35929.7372, Val 42628.7400, Test 42017.1799
          R2_Score         : Train 0.9750, Val 0.9620, Test 0.9654
          MAE              : Train 18483.9010, Val 19741.4565, Test 19521.3698
Epoch 66: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 36110.6187, Val 42584.3018, Test 42696.7735
          R2_Score         : Train 0.9748, Val 0.9621, Test 0.9643
          MAE              : Train 18519.8032, Val 19569.6319, Test 19340.8683
Best:
          RMSE             : Train 36110.6187, Val 42584.3018, Test 42696.7735
          R2_Score         : Train 0.9748, Val 0.9621, Test 0.9643
          MAE              : Train 18519.8032, Val 19569.6319, Test 19340.8683

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.69it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.44it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.26it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  4.67it/s]Train:  43%|████▎     | 6/14 [00:01<00:02,  2.73it/s]Train:  50%|█████     | 7/14 [00:01<00:02,  3.45it/s]Train:  64%|██████▍   | 9/14 [00:02<00:00,  5.24it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  4.66it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  6.01it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.43it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.15it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.97it/s]Train:  14%|█▍        | 2/14 [00:01<00:06,  1.80it/s]Train:  29%|██▊       | 4/14 [00:01<00:02,  4.00it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.62it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.79it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.60it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.36it/s]Train:  71%|███████▏  | 10/14 [00:02<00:00,  6.14it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  6.84it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.10it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.19it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.03it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.17it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.20it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.03it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.76it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.33it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.12it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.06it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.58it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.48it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.96it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.12it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.16it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.19it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.76it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.41it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.81it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.53it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.74it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  5.39it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  3.56it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.29it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  4.94it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.58it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.84it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.13it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.79it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.94it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.01it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  3.19it/s]Train:  64%|██████▍   | 9/14 [00:01<00:01,  3.65it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.14it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.76it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  5.22it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.38it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.90it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.35it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.13it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.37it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.13it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.06it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.99it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.57it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.15it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.83it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.30it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.60it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 20.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.05it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.29it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.77it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.19it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.43it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  5.84it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.56it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.79it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.38it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.58it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  6.84it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.25it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.09it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.28it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.95it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.99it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.05it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.70it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.42it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.83it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.65it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.43it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.54it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.64it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.99it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.89it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.77it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.59it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.99it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  4.30it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.74it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.44it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.27it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  5.69it/s]Train:  93%|█████████▎| 13/14 [00:02<00:00,  7.48it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.06it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.07it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.90it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.45it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.76it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.75it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.18it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.97it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.42it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  4.99it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.49it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.55it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.27it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.33it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.64it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.07it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.09it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.93it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.15it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.93it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.37it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.47it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.57it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.57it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.63it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.97it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.38it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.36it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.34it/s]Train:  50%|█████     | 7/14 [00:01<00:01,  6.01it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.83it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.08it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.44it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.33it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.78it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.63it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.39it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.75it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.19it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.82it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.63it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.99it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.94it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.32it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.90it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.57it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.18it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.06it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.88it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.09it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.33it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.59it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.91it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.61it/s]Epoch 67: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35885.4602, Val 43136.4780, Test 42195.0542
          R2_Score         : Train 0.9751, Val 0.9611, Test 0.9651
          MAE              : Train 18491.9414, Val 19617.0615, Test 19418.5634
Best:
          RMSE             : Train 36110.6187, Val 42584.3018, Test 42696.7735
          R2_Score         : Train 0.9748, Val 0.9621, Test 0.9643
          MAE              : Train 18519.8032, Val 19569.6319, Test 19340.8683
Epoch 68: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35232.7878, Val 43490.4900, Test 42537.6942
          R2_Score         : Train 0.9760, Val 0.9605, Test 0.9646
          MAE              : Train 18090.3272, Val 19471.8439, Test 19306.2171
Best:
          RMSE             : Train 36110.6187, Val 42584.3018, Test 42696.7735
          R2_Score         : Train 0.9748, Val 0.9621, Test 0.9643
          MAE              : Train 18519.8032, Val 19569.6319, Test 19340.8683
Epoch 69: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 35243.8706, Val 42780.3856, Test 42442.6833
          R2_Score         : Train 0.9760, Val 0.9617, Test 0.9647
          MAE              : Train 18033.2225, Val 19414.6921, Test 19199.5948
Best:
          RMSE             : Train 36110.6187, Val 42584.3018, Test 42696.7735
          R2_Score         : Train 0.9748, Val 0.9621, Test 0.9643
          MAE              : Train 18519.8032, Val 19569.6319, Test 19340.8683
Epoch 70: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34914.9678, Val 42971.7186, Test 42217.9106
          R2_Score         : Train 0.9764, Val 0.9614, Test 0.9651
          MAE              : Train 17924.2742, Val 19212.2714, Test 19129.7613
Best:
          RMSE             : Train 36110.6187, Val 42584.3018, Test 42696.7735
          R2_Score         : Train 0.9748, Val 0.9621, Test 0.9643
          MAE              : Train 18519.8032, Val 19569.6319, Test 19340.8683
Epoch 71: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34900.6499, Val 43694.4287, Test 42091.9946
          R2_Score         : Train 0.9764, Val 0.9601, Test 0.9653
          MAE              : Train 17769.1536, Val 19204.9363, Test 18905.4986
Best:
          RMSE             : Train 36110.6187, Val 42584.3018, Test 42696.7735
          R2_Score         : Train 0.9748, Val 0.9621, Test 0.9643
          MAE              : Train 18519.8032, Val 19569.6319, Test 19340.8683
Epoch 72: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34634.5946, Val 43597.9984, Test 42546.7274
          R2_Score         : Train 0.9768, Val 0.9603, Test 0.9646
          MAE              : Train 17520.1104, Val 19363.7117, Test 19056.6765
Best:
          RMSE             : Train 36110.6187, Val 42584.3018, Test 42696.7735
          R2_Score         : Train 0.9748, Val 0.9621, Test 0.9643
          MAE              : Train 18519.8032, Val 19569.6319, Test 19340.8683
Epoch 73: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34396.5351, Val 42437.4627, Test 42045.9980
          R2_Score         : Train 0.9771, Val 0.9623, Test 0.9654
          MAE              : Train 17572.6055, Val 19102.9435, Test 18860.5221
Best:
          RMSE             : Train 34396.5351, Val 42437.4627, Test 42045.9980
          R2_Score         : Train 0.9771, Val 0.9623, Test 0.9654
          MAE              : Train 17572.6055, Val 19102.9435, Test 18860.5221
Epoch 74: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34522.1199, Val 43518.0385, Test 42476.2858
          R2_Score         : Train 0.9769, Val 0.9604, Test 0.9647
          MAE              : Train 17394.7383, Val 19663.3026, Test 19514.2828
Best:
          RMSE             : Train 34396.5351, Val 42437.4627, Test 42045.9980
          R2_Score         : Train 0.9771, Val 0.9623, Test 0.9654
          MAE              : Train 17572.6055, Val 19102.9435, Test 18860.5221
Epoch 75: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34171.4172, Val 42540.1235, Test 42304.2694
          R2_Score         : Train 0.9774, Val 0.9622, Test 0.9650
          MAE              : Train 17337.9632, Val 19031.0450, Test 18729.5341
Best:
          RMSE             : Train 34396.5351, Val 42437.4627, Test 42045.9980
          R2_Score         : Train 0.9771, Val 0.9623, Test 0.9654
          MAE              : Train 17572.6055, Val 19102.9435, Test 18860.5221
Epoch 76: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34176.6355, Val 42200.0025, Test 42424.2030
          R2_Score         : Train 0.9774, Val 0.9628, Test 0.9648
          MAE              : Train 17319.3659, Val 19027.9437, Test 18921.3224
Best:
          RMSE             : Train 34176.6355, Val 42200.0025, Test 42424.2030
          R2_Score         : Train 0.9774, Val 0.9628, Test 0.9648
          MAE              : Train 17319.3659, Val 19027.9437, Test 18921.3224
Epoch 77: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 34023.2895, Val 43325.0532, Test 42447.7215
          R2_Score         : Train 0.9776, Val 0.9608, Test 0.9647
          MAE              : Train 17343.7546, Val 18774.2594, Test 18527.5465
Best:
          RMSE             : Train 34176.6355, Val 42200.0025, Test 42424.2030
          R2_Score         : Train 0.9774, Val 0.9628, Test 0.9648
          MAE              : Train 17319.3659, Val 19027.9437, Test 18921.3224
Epoch 78: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33630.1933, Val 42518.6609, Test 41878.8015
          R2_Score         : Train 0.9781, Val 0.9622, Test 0.9657
          MAE              : Train 16910.1575, Val 18700.3392, Test 18388.0452
Best:
          RMSE             : Train 34176.6355, Val 42200.0025, Test 42424.2030
          R2_Score         : Train 0.9774, Val 0.9628, Test 0.9648
          MAE              : Train 17319.3659, Val 19027.9437, Test 18921.3224
Epoch 79: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33450.1113, Val 43274.7743, Test 42244.8310
          R2_Score         : Train 0.9783, Val 0.9608, Test 0.9651
          MAE              : Train 16802.6220, Val 18639.1286, Test 18423.2373
Best:
          RMSE             : Train 34176.6355, Val 42200.0025, Test 42424.2030
          R2_Score         : Train 0.9774, Val 0.9628, Test 0.9648
          MAE              : Train 17319.3659, Val 19027.9437, Test 18921.3224
Epoch 80: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33289.4206, Val 43947.5535, Test 43053.0207
          R2_Score         : Train 0.9786, Val 0.9596, Test 0.9637
          MAE              : Train 16818.9523, Val 18708.4107, Test 18466.4505
Best:
          RMSE             : Train 34176.6355, Val 42200.0025, Test 42424.2030
          R2_Score         : Train 0.9774, Val 0.9628, Test 0.9648
          MAE              : Train 17319.3659, Val 19027.9437, Test 18921.3224
Epoch 81: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33245.6244, Val 42756.1248, Test 42733.4282
          R2_Score         : Train 0.9786, Val 0.9618, Test 0.9642
          MAE              : Train 16734.1056, Val 18660.6597, Test 18540.6436
Best:
          RMSE             : Train 34176.6355, Val 42200.0025, Test 42424.2030
          R2_Score         : Train 0.9774, Val 0.9628, Test 0.9648
          MAE              : Train 17319.3659, Val 19027.9437, Test 18921.3224
Epoch 82: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33435.4063, Val 43457.8733, Test 42675.1284
          R2_Score         : Train 0.9784, Val 0.9605, Test 0.9643
          MAE              : Train 16757.9677, Val 18613.7157, Test 18387.1263
Best:

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.09it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.78it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.54it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.27it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.84it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.39it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.82it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.37it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.24it/s]Train:  29%|██▊       | 4/14 [00:00<00:02,  4.40it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.57it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.24it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.65it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.71it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.99it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.96it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.18it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.70it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.23it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  6.71it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  9.05it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 11.16it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.64it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.43it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.90it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.95it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.18it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.02it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.66it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.78it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.84it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.57it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.73it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.40it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.70it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  4.87it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.71it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.04it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.10it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.85it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.74it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.85it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.05it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.14it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.25it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.71it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.23it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.71it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.73it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.59it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.44it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.42it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.30it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.34it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.41it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.36it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 21.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.05it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.75it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.67it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.27it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.25it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.13it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  8.23it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.43it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.22it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.82it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.35it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.13it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.28it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.50it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.65it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.96it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.73it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.04it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.83it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.50it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.43it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.73it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.98it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 20.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.34it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.72it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.31it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.22it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.43it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  6.23it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.04it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.60it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.95it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.26it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.61it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.26it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.61it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  5.91it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.81it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.85it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.81it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.39it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.58it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.87it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.13it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.06it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.34it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.48it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.63it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.70it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.78it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.67it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.71it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.48it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.27it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.09it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.43it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.13it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.99it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.61it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.51it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.77it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.04it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.25it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.90it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 15.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.25it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.96it/s]          RMSE             : Train 34176.6355, Val 42200.0025, Test 42424.2030
          R2_Score         : Train 0.9774, Val 0.9628, Test 0.9648
          MAE              : Train 17319.3659, Val 19027.9437, Test 18921.3224
Epoch 83: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 33144.5437, Val 43407.3529, Test 43097.1497
          R2_Score         : Train 0.9787, Val 0.9606, Test 0.9636
          MAE              : Train 16557.4083, Val 18477.4565, Test 18342.1362
Best:
          RMSE             : Train 34176.6355, Val 42200.0025, Test 42424.2030
          R2_Score         : Train 0.9774, Val 0.9628, Test 0.9648
          MAE              : Train 17319.3659, Val 19027.9437, Test 18921.3224
Epoch 84: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32963.8512, Val 41539.1011, Test 41701.7671
          R2_Score         : Train 0.9790, Val 0.9639, Test 0.9659
          MAE              : Train 16518.6801, Val 18230.0898, Test 17973.0765
Best:
          RMSE             : Train 32963.8512, Val 41539.1011, Test 41701.7671
          R2_Score         : Train 0.9790, Val 0.9639, Test 0.9659
          MAE              : Train 16518.6801, Val 18230.0898, Test 17973.0765
Epoch 85: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32877.3785, Val 41281.0199, Test 42204.6594
          R2_Score         : Train 0.9791, Val 0.9644, Test 0.9651
          MAE              : Train 16463.5696, Val 18215.0881, Test 18144.9245
Best:
          RMSE             : Train 32877.3785, Val 41281.0199, Test 42204.6594
          R2_Score         : Train 0.9791, Val 0.9644, Test 0.9651
          MAE              : Train 16463.5696, Val 18215.0881, Test 18144.9245
Epoch 86: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32651.0915, Val 43662.9344, Test 42999.7125
          R2_Score         : Train 0.9794, Val 0.9601, Test 0.9638
          MAE              : Train 16423.0590, Val 18737.4954, Test 18477.0358
Best:
          RMSE             : Train 32877.3785, Val 41281.0199, Test 42204.6594
          R2_Score         : Train 0.9791, Val 0.9644, Test 0.9651
          MAE              : Train 16463.5696, Val 18215.0881, Test 18144.9245
Epoch 87: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32884.5908, Val 42659.3350, Test 42709.7121
          R2_Score         : Train 0.9791, Val 0.9620, Test 0.9643
          MAE              : Train 16486.8750, Val 18425.1861, Test 18227.4683
Best:
          RMSE             : Train 32877.3785, Val 41281.0199, Test 42204.6594
          R2_Score         : Train 0.9791, Val 0.9644, Test 0.9651
          MAE              : Train 16463.5696, Val 18215.0881, Test 18144.9245
Epoch 88: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32803.4363, Val 43274.5495, Test 42755.2775
          R2_Score         : Train 0.9792, Val 0.9608, Test 0.9642
          MAE              : Train 16375.8170, Val 18167.6724, Test 18061.4560
Best:
          RMSE             : Train 32877.3785, Val 41281.0199, Test 42204.6594
          R2_Score         : Train 0.9791, Val 0.9644, Test 0.9651
          MAE              : Train 16463.5696, Val 18215.0881, Test 18144.9245
Epoch 89: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32589.5540, Val 42153.0615, Test 42623.1409
          R2_Score         : Train 0.9794, Val 0.9629, Test 0.9644
          MAE              : Train 16406.5182, Val 18139.5478, Test 17950.2697
Best:
          RMSE             : Train 32877.3785, Val 41281.0199, Test 42204.6594
          R2_Score         : Train 0.9791, Val 0.9644, Test 0.9651
          MAE              : Train 16463.5696, Val 18215.0881, Test 18144.9245
Epoch 90: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 91: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32268.1210, Val 42660.1951, Test 42533.9405
          R2_Score         : Train 0.9798, Val 0.9620, Test 0.9646
          MAE              : Train 16134.3343, Val 18416.7534, Test 18153.9484
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 92: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32040.7863, Val 41569.1338, Test 42481.8316
          R2_Score         : Train 0.9801, Val 0.9639, Test 0.9647
          MAE              : Train 16052.5664, Val 17755.0970, Test 17769.1414
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 93: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 32067.3163, Val 42525.0258, Test 42350.6438
          R2_Score         : Train 0.9801, Val 0.9622, Test 0.9649
          MAE              : Train 16025.7158, Val 18027.7291, Test 17788.3951
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 94: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31731.3197, Val 41352.4728, Test 42113.8090
          R2_Score         : Train 0.9805, Val 0.9642, Test 0.9653
          MAE              : Train 15833.7305, Val 17890.1409, Test 17863.7966
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 95: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31725.5115, Val 41809.1940, Test 42334.6750
          R2_Score         : Train 0.9805, Val 0.9635, Test 0.9649
          MAE              : Train 15794.0373, Val 17843.3223, Test 17723.6634
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 96: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31675.2822, Val 42857.0892, Test 43139.5568
          R2_Score         : Train 0.9806, Val 0.9616, Test 0.9636
          MAE              : Train 15936.9833, Val 17758.6261, Test 17736.3182
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 97: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31327.0807, Val 41251.6834, Test 42039.0641
          R2_Score         : Train 0.9810, Val 0.9644, Test 0.9654
          MAE              : Train 15707.7674, Val 17769.7037, Test 17603.5636
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 98: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001

Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.03it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.73it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.18it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.89it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.12it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 12.64it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.92it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 23.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.67it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.52it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.72it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.49it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.67it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.96it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.27it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.48it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.85it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.31it/s]
          RMSE             : Train 31267.7006, Val 42129.4856, Test 42413.1582
          R2_Score         : Train 0.9811, Val 0.9629, Test 0.9648
          MAE              : Train 15598.6180, Val 17893.4257, Test 17636.7233
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 99: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31196.2830, Val 42402.9434, Test 42465.8817
          R2_Score         : Train 0.9812, Val 0.9624, Test 0.9647
          MAE              : Train 15554.8079, Val 17688.8439, Test 17365.5721
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Epoch 100: Loss:            : Train 0.0000, Val 0.0001, Test 0.0001
          RMSE             : Train 31147.4779, Val 42872.5008, Test 42483.2656
          R2_Score         : Train 0.9812, Val 0.9616, Test 0.9647
          MAE              : Train 15529.9196, Val 17893.1243, Test 17658.4792
Best:
          RMSE             : Train 32337.9779, Val 40852.8364, Test 42144.5853
          R2_Score         : Train 0.9798, Val 0.9651, Test 0.9652
          MAE              : Train 16176.3069, Val 18094.2808, Test 17946.0036
Training time (sec): 308
