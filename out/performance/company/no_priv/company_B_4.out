  0%|          | 0/54068 [00:00<?, ?it/s]  3%|▎         | 1492/54068 [00:00<00:03, 14914.68it/s]  7%|▋         | 3643/54068 [00:00<00:02, 18792.61it/s] 10%|█         | 5593/54068 [00:00<00:02, 19111.39it/s] 19%|█▉        | 10278/54068 [00:00<00:01, 30056.76it/s] 25%|██▍       | 13511/54068 [00:00<00:01, 30874.47it/s] 34%|███▍      | 18591/54068 [00:00<00:00, 37644.81it/s] 41%|████▏     | 22356/54068 [00:00<00:00, 36472.13it/s] 48%|████▊     | 26011/54068 [00:00<00:00, 31513.73it/s] 54%|█████▍    | 29274/54068 [00:01<00:01, 17058.99it/s] 59%|█████▉    | 31765/54068 [00:01<00:01, 14042.96it/s] 62%|██████▏   | 33763/54068 [00:01<00:01, 14526.21it/s] 70%|██████▉   | 37655/54068 [00:01<00:00, 18952.27it/s] 76%|███████▌  | 40968/54068 [00:01<00:00, 21870.18it/s] 82%|████████▏ | 44519/54068 [00:01<00:00, 24969.18it/s] 88%|████████▊ | 47510/54068 [00:02<00:00, 15540.23it/s] 94%|█████████▍| 50869/54068 [00:02<00:00, 18644.94it/s]100%|█████████▉| 53809/54068 [00:02<00:00, 20766.35it/s]100%|██████████| 54068/54068 [00:02<00:00, 21110.31it/s]
  0%|          | 0/7725 [00:00<?, ?it/s]  9%|▉         | 715/7725 [00:00<00:00, 7147.23it/s] 23%|██▎       | 1812/7725 [00:00<00:00, 9394.09it/s] 49%|████▉     | 3773/7725 [00:00<00:00, 14057.24it/s] 73%|███████▎  | 5676/7725 [00:00<00:00, 16018.38it/s]100%|██████████| 7725/7725 [00:00<00:00, 15699.15it/s]
  0%|          | 0/15449 [00:00<?, ?it/s]  5%|▌         | 788/15449 [00:00<00:01, 7877.90it/s] 14%|█▍        | 2224/15449 [00:00<00:01, 11687.85it/s] 22%|██▏       | 3393/15449 [00:00<00:01, 6775.56it/s]  27%|██▋       | 4235/15449 [00:00<00:01, 6620.42it/s] 32%|███▏      | 4998/15449 [00:00<00:01, 6884.67it/s] 37%|███▋      | 5779/15449 [00:00<00:01, 7137.73it/s] 47%|████▋     | 7222/15449 [00:00<00:00, 9138.46it/s] 69%|██████▉   | 10710/15449 [00:00<00:00, 16487.41it/s] 92%|█████████▏| 14141/15449 [00:01<00:00, 21648.91it/s]100%|██████████| 15449/15449 [00:01<00:00, 13658.55it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.86it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 18.36it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.65it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.33it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.91it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 28.94it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.58it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.80it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 17.27it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.88it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.84it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.52it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00,  9.96it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.32it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.66it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.10it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.35it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.01it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.08it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.36it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.52it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 13.26it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.26it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 21.22it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.81it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.47it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.46it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.46it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.39it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.58it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.08it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.52it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 30.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.93it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.28it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 17.19it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.91it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.39it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 30.00it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.84it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.29it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.54it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.94it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.24it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.46it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.80it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.08it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.10it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.81it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.98it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.41it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.58it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.42it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.98it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.82it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.36it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.31it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.39it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.43it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.95it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.01it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.43it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.84it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.64it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.70it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.55it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.54it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 24.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.82it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.06it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 18.28it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.89it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 17.51it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.31it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 12.70it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.40it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.63it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.93it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.13it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.65it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.67it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.49it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.62it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.86it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.72it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.78it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.85it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.98it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.05it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.10it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.49it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.36it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.00it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 156 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0   [156, 200]  [4096, 200]   31400      31200
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           51601
Trainable params       51601
Non-trainable params       0
Mult-Adds              51300
=================================================================
n_classes=2
task=regression
model_name=company_fedsim_2022-09-08-21-27-52
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:3
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_fedsim_2022-09-08-21-27-52.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7fb741a58d60>, <metric.rmse.RMSE object at 0x7fb741a58dc0>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=156, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fb741a58cd0>
Epoch 1: Loss:            : Train 0.1970, Val 0.1715, Test 0.1717
          R2_Score         : Train -50.8553, Val -47.4354, Test -44.4169
          RMSE             : Train 1636917.9660, Val 1522090.8485, Test 1522888.6913
Best:
          R2_Score         : Train -50.8553, Val -47.4354, Test -44.4169
          RMSE             : Train 1636917.9660, Val 1522090.8485, Test 1522888.6913
Epoch 2: Loss:            : Train 0.1498, Val 0.1276, Test 0.1280
          R2_Score         : Train -38.4784, Val -35.0282, Test -32.8732
          RMSE             : Train 1428269.5331, Val 1312744.1060, Test 1315186.3040
Best:
          R2_Score         : Train -38.4784, Val -35.0282, Test -32.8732
          RMSE             : Train 1428269.5331, Val 1312744.1060, Test 1315186.3040
Epoch 3: Loss:            : Train 0.1082, Val 0.0884, Test 0.0889
          R2_Score         : Train -27.5535, Val -23.9619, Test -22.5111
          RMSE             : Train 1214675.5235, Val 1092692.4139, Test 1095711.7270
Best:
          R2_Score         : Train -27.5535, Val -23.9619, Test -22.5111
          RMSE             : Train 1214675.5235, Val 1092692.4139, Test 1095711.7270
Epoch 4: Loss:            : Train 0.0721, Val 0.0560, Test 0.0563
          R2_Score         : Train -18.0591, Val -14.7943, Test -13.9102
          RMSE             : Train 992387.6325, Val 869178.8141, Test 872571.9634
Best:
          R2_Score         : Train -18.0591, Val -14.7943, Test -13.9102
          RMSE             : Train 992387.6325, Val 869178.8141, Test 872571.9634
Epoch 5: Loss:            : Train 0.0438, Val 0.0321, Test 0.0325
          R2_Score         : Train -10.6038, Val -8.0577, Test -7.5886
          RMSE             : Train 774337.7585, Val 658215.3877, Test 662246.6797
Best:
          R2_Score         : Train -10.6038, Val -8.0577, Test -7.5886
          RMSE             : Train 774337.7585, Val 658215.3877, Test 662246.6797
Epoch 6: Loss:            : Train 0.0242, Val 0.0167, Test 0.0171
          R2_Score         : Train -5.4278, Val -3.7201, Test -3.5142
          RMSE             : Train 576316.9640, Val 475156.3516, Test 480117.4357
Best:
          R2_Score         : Train -5.4278, Val -3.7201, Test -3.5142
          RMSE             : Train 576316.9640, Val 475156.3516, Test 480117.4357
Epoch 7: Loss:            : Train 0.0124, Val 0.0084, Test 0.0087
          R2_Score         : Train -2.3144, Val -1.3579, Test -1.2900
          RMSE             : Train 413841.8721, Val 335830.6385, Test 341957.8087
Best:
          R2_Score         : Train -2.3144, Val -1.3579, Test -1.2900
          RMSE             : Train 413841.8721, Val 335830.6385, Test 341957.8087
Epoch 8: Loss:            : Train 0.0067, Val 0.0049, Test 0.0052
          R2_Score         : Train -0.7650, Val -0.3780, Test -0.3646
          RMSE             : Train 301995.6210, Val 256730.5347, Test 263970.0157
Best:
          R2_Score         : Train -0.7650, Val -0.3780, Test -0.3646
          RMSE             : Train 301995.6210, Val 256730.5347, Test 263970.0157
Epoch 9: Loss:            : Train 0.0047, Val 0.0041, Test 0.0044
          R2_Score         : Train -0.2306, Val -0.1597, Test -0.1579
          RMSE             : Train 252167.2191, Val 235522.3093, Test 243160.3210
Best:
          R2_Score         : Train -0.2306, Val -0.1597, Test -0.1579
          RMSE             : Train 252167.2191, Val 235522.3093, Test 243160.3210
Epoch 10: Loss:            : Train 0.0045, Val 0.0042, Test 0.0044
          R2_Score         : Train -0.1725, Val -0.1707, Test -0.1661
          RMSE             : Train 246140.6098, Val 236636.2774, Test 244025.8790
Best:
          R2_Score         : Train -0.2306, Val -0.1597, Test -0.1579
          RMSE             : Train 252167.2191, Val 235522.3093, Test 243160.3210
Epoch 11: Loss:            : Train 0.0043, Val 0.0038, Test 0.0040
          R2_Score         : Train -0.1250, Val -0.0796, Test -0.0654
          RMSE             : Train 241109.3037, Val 227239.2494, Test 233250.2891
Best:
          R2_Score         : Train -0.1250, Val -0.0796, Test -0.0654
          RMSE             : Train 241109.3037, Val 227239.2494, Test 233250.2891
Epoch 12: Loss:            : Train 0.0040, Val 0.0038, Test 0.0040
          R2_Score         : Train -0.0498, Val -0.0609, Test -0.0422
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.36it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.29it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.91it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.56it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.84it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.32it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.67it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.89it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.11it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.98it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.09it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.05it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 12.78it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 28.92it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.24it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.74it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.16it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.17it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.92it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.12it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.63it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.25it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.50it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.55it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.43it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.90it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.56it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.58it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.06it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.67it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.99it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.03it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 27.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.60it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.87it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.54it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 19.05it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 18.40it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 28.29it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.09it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.49it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.36it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.99it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.41it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.20it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.36it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.82it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.70it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.30it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.95it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.90it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.20it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.99it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.77it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.75it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.95it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.26it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.27it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.59it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.97it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 13.87it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.92it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.23it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 27.43it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 29.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.37it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.83it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.12it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 17.29it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.96it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.44it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 28.55it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 25.83it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 16.07it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.39it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 10.76it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.56it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.92it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.10it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.04it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.70it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.46it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 15.27it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.12it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.36it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00,  9.39it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.29it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.89it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.91it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.47it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.04it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.76it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  8.92it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.56it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.83it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.15it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.42it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.95it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.53it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.28it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.61it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.94it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.88it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.07it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.49it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.09it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 12.07it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 14.94it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.58it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.90it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.12it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.20it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.84it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.55it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.90it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  6.39it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.28it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.80it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.80it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.58it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.00it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.43it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.77it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.34it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.20it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.79it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  5.14it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  5.28it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  4.81it/s]Train:  79%|███████▊  | 11/14 [00:02<00:00,  4.72it/s]Train:  86%|████████▌ | 12/14 [00:02<00:00,  4.88it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  6.31it/s]Train: 100%|██████████| 14/14 [00:02<00:00,  5.57it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.95it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.24it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.09it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.07it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.84it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.20it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.57it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.15it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.60it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.02it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.57it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.67it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.72it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.82it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.44it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.01it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.39it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.50it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.49it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.05it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.01it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.94it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.64it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.91it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.77it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.79it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.83it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.07it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.81it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.69it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.30it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.82it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 29.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 16.99it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.07it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 18.53it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 12.96it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.12it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.97it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.24it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.58it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.50it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.25it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.22it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.91it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.57it/s]
          RMSE             : Train 232908.8699, Val 225263.7299, Test 230688.0291
Best:
          R2_Score         : Train -0.0498, Val -0.0609, Test -0.0422
          RMSE             : Train 232908.8699, Val 225263.7299, Test 230688.0291
Epoch 13: Loss:            : Train 0.0040, Val 0.0037, Test 0.0039
          R2_Score         : Train -0.0243, Val -0.0328, Test -0.0170
          RMSE             : Train 230058.6082, Val 222261.7098, Test 227882.3302
Best:
          R2_Score         : Train -0.0243, Val -0.0328, Test -0.0170
          RMSE             : Train 230058.6082, Val 222261.7098, Test 227882.3302
Epoch 14: Loss:            : Train 0.0039, Val 0.0037, Test 0.0038
          R2_Score         : Train -0.0107, Val -0.0292, Test -0.0085
          RMSE             : Train 228523.6344, Val 221875.0341, Test 226938.1274
Best:
          R2_Score         : Train -0.0107, Val -0.0292, Test -0.0085
          RMSE             : Train 228523.6344, Val 221875.0341, Test 226938.1274
Epoch 15: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train -0.0035, Val -0.0218, Test -0.0045
          RMSE             : Train 227716.0333, Val 221074.4412, Test 226485.7000
Best:
          R2_Score         : Train -0.0035, Val -0.0218, Test -0.0045
          RMSE             : Train 227716.0333, Val 221074.4412, Test 226485.7000
Epoch 16: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0009, Val -0.0152, Test 0.0005
          RMSE             : Train 227213.7867, Val 220355.8785, Test 225918.3817
Best:
          R2_Score         : Train 0.0009, Val -0.0152, Test 0.0005
          RMSE             : Train 227213.7867, Val 220355.8785, Test 225918.3817
Epoch 17: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0027, Val -0.0121, Test 0.0019
          RMSE             : Train 227014.3754, Val 220020.8320, Test 225756.9649
Best:
          R2_Score         : Train 0.0027, Val -0.0121, Test 0.0019
          RMSE             : Train 227014.3754, Val 220020.8320, Test 225756.9649
Epoch 18: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0052, Val -0.0168, Test 0.0015
          RMSE             : Train 226719.7150, Val 220534.1458, Test 225804.0886
Best:
          R2_Score         : Train 0.0027, Val -0.0121, Test 0.0019
          RMSE             : Train 227014.3754, Val 220020.8320, Test 225756.9649
Epoch 19: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0062, Val -0.0155, Test 0.0024
          RMSE             : Train 226611.4179, Val 220395.1039, Test 225701.7113
Best:
          R2_Score         : Train 0.0027, Val -0.0121, Test 0.0019
          RMSE             : Train 227014.3754, Val 220020.8320, Test 225756.9649
Epoch 20: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0071, Val -0.0103, Test 0.0045
          RMSE             : Train 226503.5041, Val 219832.4651, Test 225466.7983
Best:
          R2_Score         : Train 0.0071, Val -0.0103, Test 0.0045
          RMSE             : Train 226503.5041, Val 219832.4651, Test 225466.7983
Epoch 21: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0084, Val -0.0094, Test 0.0030
          RMSE             : Train 226354.1379, Val 219728.6133, Test 225635.9431
Best:
          R2_Score         : Train 0.0084, Val -0.0094, Test 0.0030
          RMSE             : Train 226354.1379, Val 219728.6133, Test 225635.9431
Epoch 22: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0090, Val -0.0102, Test 0.0053
          RMSE             : Train 226287.2828, Val 219812.8175, Test 225369.9313
Best:
          R2_Score         : Train 0.0084, Val -0.0094, Test 0.0030
          RMSE             : Train 226354.1379, Val 219728.6133, Test 225635.9431
Epoch 23: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0100, Val -0.0077, Test 0.0051
          RMSE             : Train 226178.8784, Val 219546.0598, Test 225394.5538
Best:
          R2_Score         : Train 0.0100, Val -0.0077, Test 0.0051
          RMSE             : Train 226178.8784, Val 219546.0598, Test 225394.5538
Epoch 24: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0104, Val -0.0068, Test 0.0053
          RMSE             : Train 226127.2844, Val 219446.4970, Test 225376.5016
Best:
          R2_Score         : Train 0.0104, Val -0.0068, Test 0.0053
          RMSE             : Train 226127.2844, Val 219446.4970, Test 225376.5016
Epoch 25: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0119, Val -0.0075, Test 0.0065
          RMSE             : Train 225959.6918, Val 219518.4174, Test 225233.5589
Best:
          R2_Score         : Train 0.0104, Val -0.0068, Test 0.0053
          RMSE             : Train 226127.2844, Val 219446.4970, Test 225376.5016
Epoch 26: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0119, Val -0.0051, Test 0.0075
          RMSE             : Train 225954.9417, Val 219263.9827, Test 225125.8804
Best:
          R2_Score         : Train 0.0119, Val -0.0051, Test 0.0075
          RMSE             : Train 225954.9417, Val 219263.9827, Test 225125.8804
Epoch 27: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0117, Val -0.0062, Test 0.0062
          RMSE             : Train 225976.9401, Val 219380.0907, Test 225274.2350
Best:
          R2_Score         : Train 0.0119, Val -0.0051, Test 0.0075
          RMSE             : Train 225954.9417, Val 219263.9827, Test 225125.8804
Epoch 28: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0131, Val -0.0097, Test 0.0066
          RMSE             : Train 225827.6843, Val 219762.1634, Test 225228.7471
Best:
          R2_Score         : Train 0.0119, Val -0.0051, Test 0.0075
          RMSE             : Train 225954.9417, Val 219263.9827, Test 225125.8804
Epoch 29: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0141, Val -0.0048, Test 0.0080
          RMSE             : Train 225705.9248, Val 219225.1915, Test 225068.3125
Best:
          R2_Score         : Train 0.0141, Val -0.0048, Test 0.0080
          RMSE             : Train 225705.9248, Val 219225.1915, Test 225068.3125
Epoch 30: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0139, Val -0.0086, Test 0.0053
          RMSE             : Train 225728.6795, Val 219648.8270, Test 225377.0523
Best:
          R2_Score         : Train 0.0141, Val -0.0048, Test 0.0080
          RMSE             : Train 225705.9248, Val 219225.1915, Test 225068.3125
Epoch 31: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0134, Val -0.0071, Test 0.0072
          RMSE             : Train 225783.3810, Val 219480.0216, Test 225165.1359
Best:
          R2_Score         : Train 0.0141, Val -0.0048, Test 0.0080
          RMSE             : Train 225705.9248, Val 219225.1915, Test 225068.3125
Epoch 32: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0147, Val -0.0091, Test 0.0036
          RMSE             : Train 225636.3107, Val 219697.9638, Test 225569.4880
Best:
          R2_Score         : Train 0.0141, Val -0.0048, Test 0.0080
          RMSE             : Train 225705.9248, Val 219225.1915, Test 225068.3125
Epoch 33: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0140, Val -0.0065, Test 0.0073
          RMSE             : Train 225714.1780, Val 219413.6689, Test 225148.8390
Best:
          R2_Score         : Train 0.0141, Val -0.0048, Test 0.0080
          RMSE             : Train 225705.9248, Val 219225.1915, Test 225068.3125
Epoch 34: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0149, Val -0.0055, Test 0.0082
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.50it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.25it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.78it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.69it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.25it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.71it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.44it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.38it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.04it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.63it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.76it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.85it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.90it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.99it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.50it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.07it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.33it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.76it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.97it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.52it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.85it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.22it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.71it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.22it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.35it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.77it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.32it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.68it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.79it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.60it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.15it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.90it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.10it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.02it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.63it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.33it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.59it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.23it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.08it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.15it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.15it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 21.89it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.89it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.91it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.55it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.22it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.66it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.68it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.08it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.94it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.95it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.45it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.73it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.38it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.52it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.97it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.87it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.11it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.05it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.18it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  5.78it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.82it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  7.43it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.87it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.66it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.70it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.65it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.99it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.12it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.34it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.38it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.58it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 15.93it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 25.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.62it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.97it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.48it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.57it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 15.79it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.91it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.64it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.46it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.69it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  5.80it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.86it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.81it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.86it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.16it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.72it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.70it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.56it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.29it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.13it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.95it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.44it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.47it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.22it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.46it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.98it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.34it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.78it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.05it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.23it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.27it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.82it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.53it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.78it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.03it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.36it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.53it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.41it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.32it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.31it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  4.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.05it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  2.73it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.04it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.06it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.82it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.64it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.90it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.39it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.19it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.07it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.14it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.11it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.55it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.44it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.80it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.78it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.21it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.35it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.32it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.05it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.86it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.28it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.11it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 26.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 28.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 10.11it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 21.39it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.95it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 19.05it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.36it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.66it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.12it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.80it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.12it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.46it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.46it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 18.07it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.07it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.95it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.16it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.26it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.02it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.13it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.17it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.65it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.24it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.25it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.68it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.78it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.07it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.65it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 17.53it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.78it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.18it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.00it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.34it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.67it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 16.38it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.09it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 19.63it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.00it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 28.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 29.74it/s]
          RMSE             : Train 225618.8402, Val 219308.7086, Test 225051.2104
Best:
          R2_Score         : Train 0.0141, Val -0.0048, Test 0.0080
          RMSE             : Train 225705.9248, Val 219225.1915, Test 225068.3125
Epoch 35: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0147, Val -0.0089, Test 0.0054
          RMSE             : Train 225639.5264, Val 219677.6359, Test 225365.0847
Best:
          R2_Score         : Train 0.0141, Val -0.0048, Test 0.0080
          RMSE             : Train 225705.9248, Val 219225.1915, Test 225068.3125
Epoch 36: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0150, Val -0.0086, Test 0.0069
          RMSE             : Train 225605.4555, Val 219644.7338, Test 225192.9785
Best:
          R2_Score         : Train 0.0141, Val -0.0048, Test 0.0080
          RMSE             : Train 225705.9248, Val 219225.1915, Test 225068.3125
Epoch 37: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0150, Val -0.0030, Test 0.0075
          RMSE             : Train 225610.3906, Val 219034.3884, Test 225121.3255
Best:
          R2_Score         : Train 0.0150, Val -0.0030, Test 0.0075
          RMSE             : Train 225610.3906, Val 219034.3884, Test 225121.3255
Epoch 38: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0154, Val -0.0057, Test 0.0067
          RMSE             : Train 225554.3895, Val 219323.3809, Test 225219.1821
Best:
          R2_Score         : Train 0.0150, Val -0.0030, Test 0.0075
          RMSE             : Train 225610.3906, Val 219034.3884, Test 225121.3255
Epoch 39: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0151, Val -0.0069, Test 0.0089
          RMSE             : Train 225592.3709, Val 219463.7655, Test 224968.0238
Best:
          R2_Score         : Train 0.0150, Val -0.0030, Test 0.0075
          RMSE             : Train 225610.3906, Val 219034.3884, Test 225121.3255
Epoch 40: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 41: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0150, Val -0.0042, Test 0.0069
          RMSE             : Train 225605.2754, Val 219167.7079, Test 225193.3320
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 42: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0152, Val -0.0040, Test 0.0058
          RMSE             : Train 225586.9847, Val 219137.4289, Test 225323.1762
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 43: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0143, Val -0.0052, Test 0.0080
          RMSE             : Train 225687.0290, Val 219276.4148, Test 225072.3165
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 44: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0154, Val -0.0036, Test 0.0082
          RMSE             : Train 225558.9656, Val 219097.2522, Test 225049.4166
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 45: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0142, Val -0.0056, Test 0.0084
          RMSE             : Train 225700.4231, Val 219312.5805, Test 225022.4164
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 46: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0148, Val -0.0077, Test 0.0047
          RMSE             : Train 225630.2701, Val 219546.8873, Test 225440.7364
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 47: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0160, Val -0.0074, Test 0.0068
          RMSE             : Train 225489.8377, Val 219517.5108, Test 225199.9449
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 48: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0152, Val -0.0042, Test 0.0072
          RMSE             : Train 225582.1324, Val 219169.0474, Test 225160.1735
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 49: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0153, Val -0.0037, Test 0.0056
          RMSE             : Train 225575.9982, Val 219113.8853, Test 225339.2026
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 50: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0153, Val -0.0065, Test 0.0075
          RMSE             : Train 225573.2086, Val 219410.1599, Test 225123.5057
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 51: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0161, Val -0.0073, Test 0.0049
          RMSE             : Train 225478.3451, Val 219505.9757, Test 225425.7800
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 52: Loss:            : Train 0.0039, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0152, Val -0.0038, Test 0.0068
          RMSE             : Train 225583.5921, Val 219122.9895, Test 225202.9177
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 53: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0063, Test 0.0071
          RMSE             : Train 225444.5483, Val 219393.3229, Test 225167.7938
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 54: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0155, Val -0.0059, Test 0.0060
          RMSE             : Train 225551.1715, Val 219348.8227, Test 225299.6311
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 55: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0051, Test 0.0069
          RMSE             : Train 225379.6436, Val 219266.4810, Test 225199.0937
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 56: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0041, Test 0.0078
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.54it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.84it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.82it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.65it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.91it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.53it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.48it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.33it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.63it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.24it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.83it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.74it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.13it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.58it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.07it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.49it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.67it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.04it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.29it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.95it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.08it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.98it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.85it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.66it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.14it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.24it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.81it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.15it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.71it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.04it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.20it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.17it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.19it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 31.07it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.41it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.19it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.93it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.52it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.31it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 13.60it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.57it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.86it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.14it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.00it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 19.05it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.36it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.31it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.10it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.59it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.57it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 24.84it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.10it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.19it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.77it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.67it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.84it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.82it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 24.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.80it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.95it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.62it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.48it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.70it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.59it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.38it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.39it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.06it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.91it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 15.08it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.90it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.96it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00,  8.26it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.26it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.33it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 17.28it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.56it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.35it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.76it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.04it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.41it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.25it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.16it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.16it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 16.32it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.46it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.93it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.48it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.86it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.27it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.70it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.44it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.92it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.69it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.38it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.86it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.76it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.14it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.84it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.58it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.04it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.12it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.28it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.75it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 13.98it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.35it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.65it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.54it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.50it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.80it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.64it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.03it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.98it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.99it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.20it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.56it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.05it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.89it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 13.89it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.43it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.13it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.93it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.53it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.24it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.03it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.89it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.77it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.42it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 25.82it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.90it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.83it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.38it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 17.36it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.82it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.93it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.15it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.30it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.44it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.33it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.62it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.24it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.49it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.53it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.49it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  2.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.76it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.97it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.60it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.83it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.97it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.83it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.12it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.13it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.73it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.74it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.91it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.33it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.06it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.66it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.35it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.06it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.21it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 14.21it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.24it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 17.09it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.72it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.05it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.41it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.44it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.53it/s]
          RMSE             : Train 225449.2808, Val 219152.1075, Test 225094.4188
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 57: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0065, Test 0.0058
          RMSE             : Train 225446.8516, Val 219413.2187, Test 225323.8443
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 58: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0056, Test 0.0067
          RMSE             : Train 225416.9703, Val 219319.1571, Test 225219.9736
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 59: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0094, Test 0.0045
          RMSE             : Train 225426.1878, Val 219733.5081, Test 225461.2917
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 60: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0057, Test 0.0047
          RMSE             : Train 225448.5369, Val 219329.9307, Test 225439.3130
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 61: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0160, Val -0.0061, Test 0.0069
          RMSE             : Train 225492.9784, Val 219367.9620, Test 225191.6771
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 62: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0070, Test 0.0036
          RMSE             : Train 225385.0630, Val 219465.2774, Test 225569.6845
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 63: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0163, Val -0.0064, Test 0.0057
          RMSE             : Train 225451.8473, Val 219399.7933, Test 225326.3375
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 64: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0172, Val -0.0052, Test 0.0065
          RMSE             : Train 225347.8522, Val 219268.4563, Test 225236.9701
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 65: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0061, Test 0.0070
          RMSE             : Train 225394.6305, Val 219374.8583, Test 225183.8139
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 66: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0162, Val -0.0065, Test 0.0057
          RMSE             : Train 225462.8484, Val 219412.9411, Test 225330.7494
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 67: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0165, Val -0.0081, Test 0.0048
          RMSE             : Train 225428.5715, Val 219593.4900, Test 225437.0225
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 68: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0036, Test 0.0061
          RMSE             : Train 225404.1565, Val 219098.8033, Test 225284.0440
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 69: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0163, Val -0.0071, Test 0.0047
          RMSE             : Train 225453.1632, Val 219483.4705, Test 225439.8112
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 70: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0062, Test 0.0065
          RMSE             : Train 225306.0485, Val 219379.8201, Test 225239.3711
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 71: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0165, Val -0.0047, Test 0.0061
          RMSE             : Train 225428.8551, Val 219221.3128, Test 225285.6729
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 72: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0032, Test 0.0076
          RMSE             : Train 225289.5054, Val 219060.0529, Test 225116.4413
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 73: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0066, Test 0.0049
          RMSE             : Train 225382.3049, Val 219427.2644, Test 225416.7910
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 74: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0050, Test 0.0071
          RMSE             : Train 225394.5536, Val 219256.1034, Test 225173.4002
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 75: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0105, Test 0.0035
          RMSE             : Train 225344.8251, Val 219844.9491, Test 225578.7849
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 76: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0054, Test 0.0044
          RMSE             : Train 225419.6395, Val 219291.0854, Test 225478.6015
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 77: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0097, Test 0.0054
          RMSE             : Train 225426.6446, Val 219767.5461, Test 225360.3870
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 78: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0035, Test 0.0060
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.13it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.37it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 17.71it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.82it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 11.53it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.28it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.72it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.39it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.02it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.97it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.43it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.13it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.12it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 24.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.06it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 25.73it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 17.09it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 17.21it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 17.50it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 10.88it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.89it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.31it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.21it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.22it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.33it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.90it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.38it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.86it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 29.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.91it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 19.96it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.51it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 17.71it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.89it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 13.34it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.67it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 27.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.08it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.71it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.72it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.96it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  8.43it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.63it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.37it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.94it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.38it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 18.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.32it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.72it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.44it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.66it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.54it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.60it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 12.66it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.00it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 44.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.82it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.51it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.15it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.11it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 17.30it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.67it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.21it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.65it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.70it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.50it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.71it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.04it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.90it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.33it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.77it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.49it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.54it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  5.21it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.44it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.99it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 13.04it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.46it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.77it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.43it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.16it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.77it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 18.27it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.12it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 30.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 14.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.16it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.82it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.37it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.93it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 18.98it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.79it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.43it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.05it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.29it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.93it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.88it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.85it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.79it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.97it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 28.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 29.49it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.31it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.22it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.76it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.42it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.28it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.30it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 25.10it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 22.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.06it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 16.54it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.84it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 17.75it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.66it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 30.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 17.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.96it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.07it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.28it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 17.95it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.48it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.42it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 17.35it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.09it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.84it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 19.70it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 18.72it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 20.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.37it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.35it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.33it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 10.27it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 17.69it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.09it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 19.42it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.54it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.03it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.13it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.97it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.31it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 17.46it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.83it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 19.73it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.80it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.47it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 34.01it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.23it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.05it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.53it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 22.19it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.42it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.65it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.47it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.08it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 22.65it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 20.14it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 23.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.80it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 24.04it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.84it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.91it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.33it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 17.82it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 20.97it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.41it/s]
          RMSE             : Train 225426.3830, Val 219082.6449, Test 225293.4574
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 79: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0165, Val -0.0051, Test 0.0060
          RMSE             : Train 225428.0697, Val 219262.3166, Test 225296.0458
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 80: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0050, Test 0.0064
          RMSE             : Train 225296.9495, Val 219246.6747, Test 225252.2534
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 81: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0074, Test 0.0033
          RMSE             : Train 225318.3545, Val 219508.5507, Test 225602.4329
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 82: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0110, Test 0.0045
          RMSE             : Train 225265.4059, Val 219903.2795, Test 225460.3049
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 83: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0046, Test 0.0064
          RMSE             : Train 225341.7660, Val 219203.2530, Test 225244.7199
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 84: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0183, Val -0.0073, Test 0.0061
          RMSE             : Train 225225.4570, Val 219502.6071, Test 225287.8986
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 85: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0048, Test 0.0063
          RMSE             : Train 225311.3183, Val 219225.5326, Test 225263.3711
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 86: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0073, Test 0.0042
          RMSE             : Train 225315.1428, Val 219504.7340, Test 225495.1091
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 87: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0052, Test 0.0074
          RMSE             : Train 225380.0447, Val 219277.8478, Test 225137.3764
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 88: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0067, Test 0.0049
          RMSE             : Train 225345.6128, Val 219438.1752, Test 225415.9339
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 89: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0054, Test 0.0052
          RMSE             : Train 225305.5306, Val 219290.2734, Test 225389.7454
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 90: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0084, Test 0.0046
          RMSE             : Train 225237.4542, Val 219622.1608, Test 225455.6959
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 91: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0051, Test 0.0063
          RMSE             : Train 225308.0079, Val 219262.1348, Test 225258.7724
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 92: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0172, Val -0.0063, Test 0.0056
          RMSE             : Train 225353.5434, Val 219395.5562, Test 225338.7905
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 93: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0190, Val -0.0056, Test 0.0060
          RMSE             : Train 225151.8302, Val 219314.7440, Test 225292.3476
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 94: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0048, Test 0.0068
          RMSE             : Train 225285.7060, Val 219227.1472, Test 225208.6509
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 95: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0086, Test 0.0038
          RMSE             : Train 225321.2246, Val 219646.3706, Test 225539.9930
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 96: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0026, Test 0.0068
          RMSE             : Train 225360.1334, Val 218992.6342, Test 225200.5564
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 97: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0074, Test 0.0048
          RMSE             : Train 225238.1182, Val 219518.2313, Test 225429.0304
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 98: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0042, Test 0.0049
          RMSE             : Train 225340.7580, Val 219161.1518, Test 225425.5059
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 99: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0064, Test 0.0059
          RMSE             : Train 225300.9876, Val 219398.5391, Test 225311.3661
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
Epoch 100: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0181, Val -0.0063, Test 0.0065

          RMSE             : Train 225247.9661, Val 219397.5002, Test 225243.5358
Best:
          R2_Score         : Train 0.0159, Val -0.0016, Test 0.0079
          RMSE             : Train 225504.5534, Val 218883.2134, Test 225077.0180
