  0%|          | 0/54068 [00:00<?, ?it/s]  3%|▎         | 1443/54068 [00:00<00:03, 14424.44it/s]  5%|▌         | 2886/54068 [00:00<00:04, 12790.00it/s]  8%|▊         | 4178/54068 [00:00<00:04, 10128.79it/s] 10%|█         | 5456/54068 [00:00<00:04, 10987.92it/s] 12%|█▏        | 6605/54068 [00:00<00:04, 10988.04it/s] 14%|█▍        | 7736/54068 [00:00<00:04, 10151.71it/s] 17%|█▋        | 9087/54068 [00:00<00:04, 11115.95it/s] 19%|█▉        | 10230/54068 [00:00<00:04, 10879.48it/s] 21%|██        | 11339/54068 [00:01<00:04, 10583.82it/s] 23%|██▎       | 12412/54068 [00:01<00:03, 10549.60it/s] 25%|██▍       | 13477/54068 [00:01<00:04, 9830.15it/s]  28%|██▊       | 15311/54068 [00:01<00:03, 12179.06it/s] 33%|███▎      | 18076/54068 [00:01<00:02, 16554.78it/s] 39%|███▊      | 20928/54068 [00:01<00:01, 19995.95it/s] 45%|████▌     | 24383/54068 [00:01<00:01, 24234.71it/s] 55%|█████▍    | 29532/54068 [00:01<00:00, 32243.19it/s] 64%|██████▎   | 34421/54068 [00:01<00:00, 37162.88it/s] 71%|███████   | 38415/54068 [00:01<00:00, 37986.47it/s] 78%|███████▊  | 42248/54068 [00:02<00:00, 34506.51it/s] 85%|████████▍ | 45784/54068 [00:02<00:00, 32963.10it/s] 91%|█████████ | 49285/54068 [00:02<00:00, 33521.96it/s] 99%|█████████▉| 53775/54068 [00:02<00:00, 36716.43it/s]100%|██████████| 54068/54068 [00:02<00:00, 22212.35it/s]
  0%|          | 0/7725 [00:00<?, ?it/s] 43%|████▎     | 3313/7725 [00:00<00:00, 33118.19it/s] 86%|████████▌ | 6625/7725 [00:00<00:00, 32952.14it/s]100%|██████████| 7725/7725 [00:00<00:00, 32788.29it/s]
  0%|          | 0/15449 [00:00<?, ?it/s] 14%|█▎        | 2096/15449 [00:00<00:00, 20949.78it/s] 27%|██▋       | 4191/15449 [00:00<00:00, 20935.65it/s] 41%|████      | 6285/15449 [00:00<00:00, 14578.53it/s] 51%|█████     | 7912/15449 [00:00<00:00, 13831.67it/s] 62%|██████▏   | 9527/15449 [00:00<00:00, 14502.72it/s] 72%|███████▏  | 11155/15449 [00:00<00:00, 14956.23it/s] 82%|████████▏ | 12710/15449 [00:00<00:00, 15086.18it/s] 93%|█████████▎| 14436/15449 [00:00<00:00, 15725.09it/s]100%|██████████| 15449/15449 [00:00<00:00, 15600.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.37it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.40it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.66it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.94it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 18.50it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.91it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.59it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.00it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.53it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.19it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.38it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.58it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.11it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.82it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.81it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.50it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.48it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 15.75it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.02it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.00it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 25.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 23.79it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.29it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.67it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.10it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 18.10it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.47it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.49it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.64it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.06it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 19.25it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.06it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.51it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.95it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.62it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.49it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.64it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.86it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.07it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.11it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.23it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.42it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.15it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 22.50it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.74it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.43it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.60it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.07it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.17it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.17it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.42it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.38it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.58it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.90it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.89it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.48it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.78it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.10it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.43it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.75it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 13.78it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.04it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.08it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.81it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.09it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.82it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.92it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.34it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.72it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.38it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.18it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 15.88it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.14it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.39it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  7.91it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.12it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.38it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 38.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.33it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.74it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.08it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.19it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.90it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.34it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.40it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.30it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.87it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 16.42it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.92it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.20it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.06it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 27.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 32.07it/s]Loading loan from data/company/loan_subset_clean.csv
Loading company from data/company/company_subset_clean.csv
Current loan columns Index(['Term', 'NoEmp', 'NewExist', 'CreateJob', 'RetainedJob', 'UrbanRural',
       'DisbursementGross', 'BalanceGross', 'ChgOffPrinGr', 'GrAppv',
       'BankState_al', 'BankState_an', 'BankState_ar', 'BankState_az',
       'BankState_ca', 'BankState_co', 'BankState_ct', 'BankState_dc',
       'BankState_de', 'BankState_en', 'BankState_fl', 'BankState_ga',
       'BankState_gu', 'BankState_hi', 'BankState_ia', 'BankState_id',
       'BankState_il', 'BankState_in', 'BankState_ks', 'BankState_ky',
       'BankState_la', 'BankState_ma', 'BankState_md', 'BankState_me',
       'BankState_mi', 'BankState_mn', 'BankState_mo', 'BankState_ms',
       'BankState_mt', 'BankState_nc', 'BankState_nd', 'BankState_ne',
       'BankState_nh', 'BankState_nj', 'BankState_nm', 'BankState_nv',
       'BankState_ny', 'BankState_oh', 'BankState_ok', 'BankState_or',
       'BankState_pa', 'BankState_pr', 'BankState_ri', 'BankState_sc',
       'BankState_sd', 'BankState_tn', 'BankState_tx', 'BankState_ut',
       'BankState_va', 'BankState_vi', 'BankState_vt', 'BankState_wa',
       'BankState_wi', 'BankState_wv', 'BankState_wy', 'RevLineCr_-',
       'RevLineCr_.', 'RevLineCr_0', 'RevLineCr_1', 'RevLineCr_2',
       'RevLineCr_3', 'RevLineCr_4', 'RevLineCr_5', 'RevLineCr_7',
       'RevLineCr_`', 'RevLineCr_a', 'RevLineCr_c', 'RevLineCr_n',
       'RevLineCr_q', 'RevLineCr_r', 'RevLineCr_t', 'RevLineCr_y', 'LowDoc_1',
       'LowDoc_a', 'LowDoc_c', 'LowDoc_n', 'LowDoc_r', 'LowDoc_s', 'LowDoc_y',
       'MIS_Status_p i f', 'Name'],
      dtype='object')
Current company columns Index(['name', 'current employee estimate', 'total employee estimate',
       'ind_airlines/aviation', 'ind_alternative dispute resolution',
       'ind_alternative medicine', 'ind_animation', 'ind_apparel & fashion',
       'ind_architecture & planning', 'ind_arts and crafts',
       ...
       'ind_wine and spirits', 'ind_wireless', 'ind_writing and editing',
       'sr_10001+', 'sr_1001 - 5000', 'sr_11 - 50', 'sr_201 - 500',
       'sr_5001 - 10000', 'sr_501 - 1000', 'sr_51 - 200'],
      dtype='object', length=157)
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 156 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0   [156, 200]  [4096, 200]   31400      31200
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           51601
Trainable params       51601
Non-trainable params       0
Mult-Adds              51300
=================================================================
n_classes=2
task=regression
model_name=company_fedsim_2022-09-08-21-27-47
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/company_fedsim_2022-09-08-21-27-47.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f5fdac4c070>, <metric.rmse.RMSE object at 0x7f5fdac4c0d0>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=156, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f5fdac4c040>
Epoch 1: Loss:            : Train 0.1941, Val 0.1693, Test 0.1694
          R2_Score         : Train -50.0963, Val -46.8137, Test -43.8091
          RMSE             : Train 1624894.8884, Val 1512289.7704, Test 1512664.0339
Best:
          R2_Score         : Train -50.0963, Val -46.8137, Test -43.8091
          RMSE             : Train 1624894.8884, Val 1512289.7704, Test 1512664.0339
Epoch 2: Loss:            : Train 0.1482, Val 0.1264, Test 0.1267
          R2_Score         : Train -38.0304, Val -34.6951, Test -32.5199
          RMSE             : Train 1420142.0955, Val 1306662.0035, Test 1308310.6406
Best:
          R2_Score         : Train -38.0304, Val -34.6951, Test -32.5199
          RMSE             : Train 1420142.0955, Val 1306662.0035, Test 1308310.6406
Epoch 3: Loss:            : Train 0.1071, Val 0.0874, Test 0.0877
          R2_Score         : Train -27.2713, Val -23.6630, Test -22.2018
          RMSE             : Train 1208658.6589, Val 1086129.2680, Test 1088480.5998
Best:
          R2_Score         : Train -27.2713, Val -23.6630, Test -22.2018
          RMSE             : Train 1208658.6589, Val 1086129.2680, Test 1088480.5998
Epoch 4: Loss:            : Train 0.0710, Val 0.0545, Test 0.0548
          R2_Score         : Train -17.7558, Val -14.3776, Test -13.4969
          RMSE             : Train 984459.4544, Val 857637.0319, Test 860394.3525
Best:
          R2_Score         : Train -17.7558, Val -14.3776, Test -13.4969
          RMSE             : Train 984459.4544, Val 857637.0319, Test 860394.3525
Epoch 5: Loss:            : Train 0.0421, Val 0.0302, Test 0.0304
          R2_Score         : Train -10.1492, Val -7.5131, Test -7.0559
          RMSE             : Train 759018.3803, Val 638119.9747, Test 641379.7990
Best:
          R2_Score         : Train -10.1492, Val -7.5131, Test -7.0559
          RMSE             : Train 759018.3803, Val 638119.9747, Test 641379.7990
Epoch 6: Loss:            : Train 0.0222, Val 0.0150, Test 0.0152
          R2_Score         : Train -4.9209, Val -3.2208, Test -3.0286
          RMSE             : Train 553127.2250, Val 449321.6616, Test 453560.8041
Best:
          R2_Score         : Train -4.9209, Val -3.2208, Test -3.0286
          RMSE             : Train 553127.2250, Val 449321.6616, Test 453560.8041
Epoch 7: Loss:            : Train 0.0109, Val 0.0073, Test 0.0075
          R2_Score         : Train -1.9043, Val -1.0494, Test -0.9894
          RMSE             : Train 387392.3759, Val 313090.8120, Test 318727.4439
Best:
          R2_Score         : Train -1.9043, Val -1.0494, Test -0.9894
          RMSE             : Train 387392.3759, Val 313090.8120, Test 318727.4439
Epoch 8: Loss:            : Train 0.0059, Val 0.0045, Test 0.0048
          R2_Score         : Train -0.5556, Val -0.2672, Test -0.2543
          RMSE             : Train 283518.8028, Val 246195.8627, Test 253084.5858
Best:
          R2_Score         : Train -0.5556, Val -0.2672, Test -0.2543
          RMSE             : Train 283518.8028, Val 246195.8627, Test 253084.5858
Epoch 9: Loss:            : Train 0.0045, Val 0.0041, Test 0.0044
          R2_Score         : Train -0.1738, Val -0.1508, Test -0.1463
          RMSE             : Train 246282.4266, Val 234612.8908, Test 241940.9060
Best:
          R2_Score         : Train -0.1738, Val -0.1508, Test -0.1463
          RMSE             : Train 246282.4266, Val 234612.8908, Test 241940.9060
Epoch 10: Loss:            : Train 0.0045, Val 0.0041, Test 0.0043
          R2_Score         : Train -0.1656, Val -0.1466, Test -0.1388
          RMSE             : Train 245413.6796, Val 234183.9689, Test 241142.9897
Best:
          R2_Score         : Train -0.1656, Val -0.1466, Test -0.1388
          RMSE             : Train 245413.6796, Val 234183.9689, Test 241142.9897
Epoch 11: Loss:            : Train 0.0042, Val 0.0038, Test 0.0040
          R2_Score         : Train -0.0944, Val -0.0725, Test -0.0504
          RMSE             : Train 237799.9994, Val 226496.5666, Test 231596.8610
Best:
          R2_Score         : Train -0.0944, Val -0.0725, Test -0.0504
          RMSE             : Train 237799.9994, Val 226496.5666, Test 231596.8610
Epoch 12: Loss:            : Train 0.0041, Val 0.0037, Test 0.0039
          R2_Score         : Train -0.0417, Val -0.0443, Test -0.0266
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.47it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.59it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.82it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.60it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.92it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.05it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.93it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.87it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.35it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.10it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 19.66it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 16.10it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.98it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.53it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.65it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.58it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.36it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.75it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.74it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.02it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.11it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.78it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 31.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.88it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 17.77it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.82it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 18.92it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.30it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.67it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.29it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 21.97it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 17.22it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.23it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.88it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.64it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.93it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 17.17it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.32it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.21it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.68it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.92it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.11it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.40it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.64it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.33it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.30it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.65it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 14.60it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.25it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.18it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.44it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.87it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.93it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.34it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.30it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 15.25it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.62it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 23.01it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 25.56it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.38it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 17.49it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.96it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 17.49it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.32it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.00it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 27.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 13.16it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.38it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.28it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.18it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.34it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.88it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.67it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.95it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 30.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  6.18it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.90it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.83it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.68it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.95it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.13it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.65it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 10.84it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.54it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.63it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.13it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.85it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.16it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.03it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.92it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.94it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.69it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.99it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.50it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 27.93it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 29.81it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.38it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 16.41it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.93it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.62it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.81it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 13.61it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.76it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 25.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 12.90it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.93it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.96it/s]Train:  21%|██▏       | 3/14 [00:00<00:01, 10.37it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  6.19it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.47it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.90it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 15.34it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.83it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.56it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.61it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.55it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.66it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.40it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  6.51it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.36it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.73it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.46it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.74it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.16it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.15it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 25.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 27.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.22it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.19it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.68it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.20it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.16it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.27it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.72it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.24it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.02it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.51it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.01it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.50it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.67it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.79it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.75it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.24it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  8.80it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.32it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.57it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.66it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.32it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.99it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 13.23it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.40it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.52it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.22it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.01it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  8.94it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  6.70it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.83it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.09it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.43it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.67it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.91it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.32it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.87it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.13it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.60it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.85it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.47it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.44it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.80it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.08it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.14it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.81it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.60it/s]Train:  14%|█▍        | 2/14 [00:00<00:06,  1.92it/s]Train:  21%|██▏       | 3/14 [00:01<00:03,  2.79it/s]Train:  36%|███▌      | 5/14 [00:01<00:01,  5.11it/s]Train:  43%|████▎     | 6/14 [00:01<00:01,  5.27it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.83it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.64it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.91it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.87it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.05it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.34it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.85it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.96it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.45it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.31it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.88it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 13.62it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.63it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.86it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.09it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.85it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.73it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.20it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 11.47it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.81it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.66it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.51it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:01,  2.05it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  3.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  6.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.25it/s]
          RMSE             : Train 232005.6619, Val 223492.1466, Test 228955.7750
Best:
          R2_Score         : Train -0.0417, Val -0.0443, Test -0.0266
          RMSE             : Train 232005.6619, Val 223492.1466, Test 228955.7750
Epoch 13: Loss:            : Train 0.0039, Val 0.0037, Test 0.0038
          R2_Score         : Train -0.0194, Val -0.0280, Test -0.0127
          RMSE             : Train 229515.0575, Val 221750.6783, Test 227402.0106
Best:
          R2_Score         : Train -0.0194, Val -0.0280, Test -0.0127
          RMSE             : Train 229515.0575, Val 221750.6783, Test 227402.0106
Epoch 14: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train -0.0070, Val -0.0201, Test -0.0056
          RMSE             : Train 228109.6629, Val 220894.3251, Test 226610.5502
Best:
          R2_Score         : Train -0.0070, Val -0.0201, Test -0.0056
          RMSE             : Train 228109.6629, Val 220894.3251, Test 226610.5502
Epoch 15: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train -0.0008, Val -0.0167, Test -0.0018
          RMSE             : Train 227403.4171, Val 220526.0743, Test 226178.2444
Best:
          R2_Score         : Train -0.0008, Val -0.0167, Test -0.0018
          RMSE             : Train 227403.4171, Val 220526.0743, Test 226178.2444
Epoch 16: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0036, Val -0.0113, Test 0.0016
          RMSE             : Train 226904.5202, Val 219939.2343, Test 225789.4819
Best:
          R2_Score         : Train 0.0036, Val -0.0113, Test 0.0016
          RMSE             : Train 226904.5202, Val 219939.2343, Test 225789.4819
Epoch 17: Loss:            : Train 0.0039, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0054, Val -0.0100, Test 0.0027
          RMSE             : Train 226696.7306, Val 219798.6184, Test 225672.5983
Best:
          R2_Score         : Train 0.0054, Val -0.0100, Test 0.0027
          RMSE             : Train 226696.7306, Val 219798.6184, Test 225672.5983
Epoch 18: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0071, Val -0.0073, Test 0.0039
          RMSE             : Train 226504.9957, Val 219506.2429, Test 225535.8772
Best:
          R2_Score         : Train 0.0071, Val -0.0073, Test 0.0039
          RMSE             : Train 226504.9957, Val 219506.2429, Test 225535.8772
Epoch 19: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0079, Val -0.0113, Test 0.0027
          RMSE             : Train 226417.4325, Val 219939.2755, Test 225674.2617
Best:
          R2_Score         : Train 0.0071, Val -0.0073, Test 0.0039
          RMSE             : Train 226504.9957, Val 219506.2429, Test 225535.8772
Epoch 20: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0104, Val -0.0039, Test 0.0040
          RMSE             : Train 226126.4024, Val 219128.3930, Test 225521.7327
Best:
          R2_Score         : Train 0.0104, Val -0.0039, Test 0.0040
          RMSE             : Train 226126.4024, Val 219128.3930, Test 225521.7327
Epoch 21: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0104, Val -0.0029, Test 0.0063
          RMSE             : Train 226125.8831, Val 219024.0330, Test 225261.1935
Best:
          R2_Score         : Train 0.0104, Val -0.0029, Test 0.0063
          RMSE             : Train 226125.8831, Val 219024.0330, Test 225261.1935
Epoch 22: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0117, Val -0.0026, Test 0.0066
          RMSE             : Train 225978.9267, Val 218991.9868, Test 225225.6044
Best:
          R2_Score         : Train 0.0117, Val -0.0026, Test 0.0066
          RMSE             : Train 225978.9267, Val 218991.9868, Test 225225.6044
Epoch 23: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0124, Val -0.0024, Test 0.0063
          RMSE             : Train 225905.8646, Val 218972.2112, Test 225257.1742
Best:
          R2_Score         : Train 0.0124, Val -0.0024, Test 0.0063
          RMSE             : Train 225905.8646, Val 218972.2112, Test 225257.1742
Epoch 24: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0130, Val -0.0009, Test 0.0076
          RMSE             : Train 225832.4676, Val 218806.5459, Test 225114.5095
Best:
          R2_Score         : Train 0.0130, Val -0.0009, Test 0.0076
          RMSE             : Train 225832.4676, Val 218806.5459, Test 225114.5095
Epoch 25: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0129, Val -0.0058, Test 0.0046
          RMSE             : Train 225842.2956, Val 219335.1883, Test 225453.3865
Best:
          R2_Score         : Train 0.0130, Val -0.0009, Test 0.0076
          RMSE             : Train 225832.4676, Val 218806.5459, Test 225114.5095
Epoch 26: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0135, Val -0.0015, Test 0.0074
          RMSE             : Train 225774.4445, Val 218870.8417, Test 225132.7934
Best:
          R2_Score         : Train 0.0130, Val -0.0009, Test 0.0076
          RMSE             : Train 225832.4676, Val 218806.5459, Test 225114.5095
Epoch 27: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 28: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0141, Val -0.0012, Test 0.0080
          RMSE             : Train 225709.4286, Val 218831.0120, Test 225065.3223
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 29: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0142, Val -0.0018, Test 0.0079
          RMSE             : Train 225695.1190, Val 218904.8542, Test 225074.5879
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 30: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0143, Val -0.0023, Test 0.0064
          RMSE             : Train 225684.5319, Val 218955.3374, Test 225245.6414
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 31: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0149, Val -0.0043, Test 0.0073
          RMSE             : Train 225622.0310, Val 219178.2494, Test 225148.0196
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 32: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0148, Val -0.0049, Test 0.0041
          RMSE             : Train 225632.7692, Val 219239.1689, Test 225511.3611
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 33: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0157, Val -0.0021, Test 0.0074
          RMSE             : Train 225527.6442, Val 218930.9229, Test 225139.3373
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 34: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0157, Val -0.0027, Test 0.0072
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.40it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.13it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.33it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.21it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.23it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.91it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.00it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.40it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.80it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.25it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.97it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.63it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.76it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.81it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.81it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.00it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.71it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.07it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.84it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  9.05it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.73it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.82it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.47it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 26.41it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 16.40it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.36it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.11it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.55it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.74it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.33it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.60it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.58it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.70it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.56it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.62it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.12it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.01it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.32it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.65it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.53it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.86it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00,  9.79it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.91it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.27it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.25it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 26.58it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 26.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.27it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.16it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.56it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  8.14it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 11.92it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.01it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.27it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 23.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 21.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.65it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.96it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.01it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.49it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.92it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.04it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.58it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01, 11.85it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.37it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.34it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.78it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.47it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.04it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.15it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  9.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.63it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.24it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.54it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.15it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.52it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.15it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 15.56it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.70it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.66it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.29it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.56it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.60it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  3.82it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.01it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.70it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.43it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.00it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.44it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.30it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  9.09it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 13.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.15it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.76it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 28.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 16.53it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.28it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.00it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.64it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.61it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.88it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.07it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.23it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.34it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.55it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.59it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  6.39it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  6.73it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  7.06it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.32it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.19it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 20.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.58it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.65it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.18it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.07it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.16it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.04it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.04it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.01it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  4.77it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.72it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.12it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.74it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.38it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.22it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.97it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.29it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.23it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.90it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.07it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.64it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  8.86it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  8.85it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00,  9.03it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  7.92it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  6.42it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.56it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  5.22it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  4.56it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  5.60it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.33it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.05it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.04it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.66it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 12.20it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.89it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 15.84it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.78it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  8.33it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.20it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.96it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.64it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  5.48it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.48it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.77it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.36it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.87it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.75it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.66it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.12it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  4.75it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.21it/s]Train:  21%|██▏       | 3/14 [00:00<00:02,  4.95it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.25it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.59it/s]Train:  57%|█████▋    | 8/14 [00:01<00:01,  4.46it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.23it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.27it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  7.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.12it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.36it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.75it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.14it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.70it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.94it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  7.68it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  8.80it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 10.04it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  7.77it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.90it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.15it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 19.43it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 15.32it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.61it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 21.87it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 18.68it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.87it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.56it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.25it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  5.49it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.37it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.26it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.55it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.11it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.70it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 14.56it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.20it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 10.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.62it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.68it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.31it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.76it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.14it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.63it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.43it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.81it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  2.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.87it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.01it/s]
          RMSE             : Train 225525.9376, Val 219005.2423, Test 225156.0527
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 35: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0153, Val -0.0043, Test 0.0068
          RMSE             : Train 225573.8786, Val 219177.5833, Test 225208.5409
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 36: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0148, Val -0.0010, Test 0.0063
          RMSE             : Train 225632.0830, Val 218812.0455, Test 225259.6754
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 37: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0158, Val -0.0037, Test 0.0074
          RMSE             : Train 225509.7315, Val 219113.5590, Test 225139.9003
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 38: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0159, Val -0.0039, Test 0.0071
          RMSE             : Train 225502.9227, Val 219136.5828, Test 225168.7674
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 39: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0021, Test 0.0071
          RMSE             : Train 225442.2649, Val 218933.1259, Test 225173.1299
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 40: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0049, Test 0.0065
          RMSE             : Train 225364.1962, Val 219242.5946, Test 225244.0858
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 41: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0034, Test 0.0079
          RMSE             : Train 225402.5996, Val 219077.7372, Test 225075.4207
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 42: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0011, Test 0.0083
          RMSE             : Train 225385.8682, Val 218821.0109, Test 225036.8953
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 43: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0026, Test 0.0076
          RMSE             : Train 225384.8458, Val 218988.7166, Test 225110.1154
Best:
          R2_Score         : Train 0.0128, Val -0.0002, Test 0.0079
          RMSE             : Train 225858.9348, Val 218729.2441, Test 225081.6560
Epoch 44: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 45: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0160, Val -0.0032, Test 0.0070
          RMSE             : Train 225486.2451, Val 219056.1472, Test 225179.9700
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 46: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0051, Test 0.0069
          RMSE             : Train 225415.3097, Val 219259.2804, Test 225194.2914
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 47: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0172, Val -0.0012, Test 0.0075
          RMSE             : Train 225352.7185, Val 218836.9107, Test 225127.0778
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 48: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0174, Val -0.0055, Test 0.0072
          RMSE             : Train 225328.9863, Val 219308.9070, Test 225159.1661
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 49: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0030, Test 0.0058
          RMSE             : Train 225413.3559, Val 219032.7906, Test 225317.5224
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 50: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0054, Test 0.0063
          RMSE             : Train 225384.8622, Val 219295.5239, Test 225266.5172
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 51: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0023, Test 0.0071
          RMSE             : Train 225376.2652, Val 218954.4259, Test 225172.2320
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 52: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0030, Test 0.0064
          RMSE             : Train 225414.6238, Val 219030.2052, Test 225245.9975
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 53: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0030, Test 0.0062
          RMSE             : Train 225416.0209, Val 219028.7343, Test 225274.2808
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 54: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0165, Val -0.0027, Test 0.0061
          RMSE             : Train 225434.0873, Val 219001.8182, Test 225289.4856
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 55: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0167, Val -0.0053, Test 0.0036
          RMSE             : Train 225413.7632, Val 219283.2599, Test 225565.8479
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 56: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0160, Val -0.0027, Test 0.0067
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.06it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.73it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.42it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 15.54it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.21it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.13it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 16.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.84it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.38it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 14.44it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.48it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 18.58it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.95it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.95it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.75it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.92it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.00it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.03it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 11.68it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.56it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.72it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.73it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.73it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.21it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.96it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.28it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.45it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.32it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.06it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.45it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.77it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 22.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 24.31it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.37it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.26it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.49it/s]Train:  50%|█████     | 7/14 [00:01<00:00,  7.04it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.57it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.87it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.94it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.63it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.58it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.41it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  9.60it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 11.61it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.30it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.92it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.55it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.71it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.80it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 12.76it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.83it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.36it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 16.86it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 13.40it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.15it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 16.33it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.65it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.35it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.04it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  8.61it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.04it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.38it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.73it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.49it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  7.36it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 10.05it/s]Train:  64%|██████▍   | 9/14 [00:01<00:00,  9.84it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.48it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.21it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.03it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.01it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 17.48it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.38it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.93it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.00it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 20.64it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.60it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 17.62it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.86it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 18.97it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.20it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.71it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 14.45it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.96it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.57it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.48it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.01it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.70it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.87it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.30it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  6.41it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.75it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.02it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.72it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 15.52it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.82it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.99it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.73it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.21it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.69it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  6.48it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.55it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 16.92it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.91it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 14.85it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.00it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  3.39it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.38it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  4.94it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.30it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.52it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 10.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.34it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.80it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 12.28it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 17.04it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 14.11it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.79it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.30it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  5.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.60it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.31it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  9.68it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.20it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.64it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.67it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  8.66it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00,  9.29it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.34it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  7.73it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  8.50it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.68it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.22it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 12.40it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.04it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 10.64it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.64it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.67it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.70it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.60it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.98it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.29it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.21it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 15.23it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.91it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.51it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.84it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.40it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.22it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 11.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.99it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.43it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.62it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.54it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.81it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.57it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  9.92it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.78it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.46it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  7.02it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.28it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 19.06it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.03it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.58it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.50it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 14.10it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  8.41it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.67it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 12.70it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 11.39it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.68it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  8.61it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.65it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.14it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 13.10it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 21.75it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 18.19it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 18.53it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.42it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.83it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.80it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 20.72it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 19.45it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.34it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.67it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.02it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.98it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.83it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.29it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 15.44it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.59it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.28it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 13.24it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 12.28it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.48it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  4.09it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.19it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.38it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.33it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00,  6.59it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  7.81it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  9.34it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.66it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.69it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.19it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.95it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  6.78it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.39it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 11.83it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.76it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.64it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.47it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.49it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.52it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 21.86it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  7.69it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.46it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.14it/s]
          RMSE             : Train 225486.6875, Val 218998.9738, Test 225210.8025
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 57: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0171, Val -0.0050, Test 0.0068
          RMSE             : Train 225365.6199, Val 219249.1886, Test 225204.7795
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 58: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0041, Test 0.0056
          RMSE             : Train 225338.0787, Val 219153.3983, Test 225342.8486
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 59: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0166, Val -0.0042, Test 0.0069
          RMSE             : Train 225418.2583, Val 219160.5837, Test 225190.8088
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 60: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0168, Val -0.0038, Test 0.0049
          RMSE             : Train 225398.7706, Val 219117.5071, Test 225423.6589
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 61: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0185, Val -0.0031, Test 0.0075
          RMSE             : Train 225202.4732, Val 219047.5749, Test 225129.0125
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 62: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0026, Test 0.0071
          RMSE             : Train 225279.7410, Val 218991.6625, Test 225176.1334
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 63: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0164, Val -0.0036, Test 0.0047
          RMSE             : Train 225446.1321, Val 219096.6453, Test 225441.7564
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 64: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0170, Val -0.0046, Test 0.0074
          RMSE             : Train 225378.1992, Val 219203.5638, Test 225134.9571
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 65: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0013, Test 0.0069
          RMSE             : Train 225291.9835, Val 218844.1722, Test 225190.8775
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 66: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0049, Test 0.0070
          RMSE             : Train 225282.0225, Val 219239.6070, Test 225187.7876
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 67: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0169, Val -0.0033, Test 0.0041
          RMSE             : Train 225383.6081, Val 219070.4008, Test 225507.4546
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 68: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0033, Test 0.0080
          RMSE             : Train 225259.6726, Val 219063.3701, Test 225069.6233
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 69: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0068, Test 0.0052
          RMSE             : Train 225283.3633, Val 219448.5996, Test 225388.4305
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 70: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0172, Val -0.0045, Test 0.0054
          RMSE             : Train 225347.5307, Val 219194.6168, Test 225361.2004
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 71: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0034, Test 0.0058
          RMSE             : Train 225287.4515, Val 219071.2770, Test 225316.2637
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 72: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0176, Val -0.0051, Test 0.0063
          RMSE             : Train 225304.6200, Val 219266.6246, Test 225260.3589
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 73: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0188, Val -0.0046, Test 0.0059
          RMSE             : Train 225172.0539, Val 219210.4213, Test 225307.0241
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 74: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0052, Test 0.0070
          RMSE             : Train 225241.1353, Val 219268.1160, Test 225182.3471
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 75: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0032, Test 0.0073
          RMSE             : Train 225240.3207, Val 219056.4779, Test 225152.2766
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 76: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0090, Test 0.0043
          RMSE             : Train 225314.2941, Val 219691.3415, Test 225488.4446
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 77: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0177, Val -0.0022, Test 0.0075
          RMSE             : Train 225292.9372, Val 218947.5045, Test 225124.6610
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 78: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0173, Val -0.0050, Test 0.0072
          RMSE             : Train 225344.0034, Val 219251.6942, Test 225162.7739
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 19.20it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.57it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.89it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.99it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 19.92it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 17.32it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.24it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.23it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 17.51it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.19it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.60it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.14it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  9.68it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.73it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.25it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.88it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.54it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.01it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.29it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.14it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.87it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.29it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.68it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.68it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.80it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.44it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 10.87it/s]Train:  43%|████▎     | 6/14 [00:00<00:00,  9.46it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 10.85it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.59it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 11.09it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.66it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.94it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.34it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  7.57it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  6.15it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  7.61it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.06it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 15.02it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 13.97it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.86it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00,  9.52it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 10.74it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.12it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  8.78it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.20it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.08it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.45it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.24it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.96it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 11.51it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.92it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 10.01it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.04it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 13.65it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.64it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.85it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.82it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.07it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 15.24it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.66it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  8.30it/s]Train:  14%|█▍        | 2/14 [00:00<00:02,  5.00it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.39it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.46it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00,  9.28it/s]Train:  79%|███████▊  | 11/14 [00:01<00:00, 13.40it/s]Train:  93%|█████████▎| 13/14 [00:01<00:00, 14.01it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.18it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.75it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.11it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 15.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.39it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.30it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:04,  3.08it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  7.04it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.44it/s]Train:  50%|█████     | 7/14 [00:00<00:00,  9.50it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 13.99it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00, 12.44it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 11.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.76it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 14.71it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.35it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.50it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.84it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 16.84it/s]Train:  36%|███▌      | 5/14 [00:00<00:00,  9.96it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 14.57it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.80it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.72it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 33.31it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  8.59it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.86it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 22.41it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 10.64it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.24it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 11.11it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 14.75it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.16it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.79it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.78it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 22.06it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 20.97it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  7.01it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 13.22it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 13.13it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 16.07it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 19.27it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.92it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.54it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 23.05it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 25.08it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:05,  2.21it/s]Train:  14%|█▍        | 2/14 [00:00<00:03,  3.57it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  7.19it/s]Train:  43%|████▎     | 6/14 [00:00<00:01,  7.82it/s]Train:  57%|█████▋    | 8/14 [00:01<00:00,  9.61it/s]Train:  71%|███████▏  | 10/14 [00:01<00:00, 10.80it/s]Train:  86%|████████▌ | 12/14 [00:01<00:00,  9.23it/s]Train: 100%|██████████| 14/14 [00:01<00:00,  8.95it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.14it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 19.05it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 13.75it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.42it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.88it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:01,  7.78it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 12.59it/s]Train:  36%|███▌      | 5/14 [00:00<00:01,  8.15it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 12.30it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 12.15it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 15.69it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.17it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 25.65it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.95it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.59it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.35it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 14.07it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 14.71it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 17.43it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.93it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.46it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.43it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 18.80it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.85it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  8.59it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 16.35it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 11.30it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 15.13it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.75it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.45it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  6.92it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.71it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.60it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 25.14it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:03,  3.44it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 12.05it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 11.41it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.64it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.53it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 14.35it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.77it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 11.74it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  9.81it/s]Test:  50%|█████     | 2/4 [00:00<00:00,  9.88it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00,  9.57it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 11.83it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:   7%|▋         | 1/14 [00:00<00:02,  5.13it/s]Train:  21%|██▏       | 3/14 [00:00<00:01,  8.80it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 10.31it/s]Train:  57%|█████▋    | 8/14 [00:00<00:00, 15.72it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 16.02it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 13.06it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 13.49it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 10.01it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.98it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  3.71it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 12.07it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  21%|██▏       | 3/14 [00:00<00:00, 14.11it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 24.39it/s]Train:  71%|███████▏  | 10/14 [00:00<00:00, 18.98it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 16.22it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 18.35it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.09it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.08it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.02it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 16.44it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 14.53it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  9.62it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 20.52it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 18.70it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 15.33it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 10.58it/s]Train: 100%|██████████| 14/14 [00:01<00:00, 12.68it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  4.72it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  6.05it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  5.80it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  4.60it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 10.64it/s]Test: 100%|██████████| 4/4 [00:00<00:00,  9.10it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 15.92it/s]Train:  29%|██▊       | 4/14 [00:00<00:00, 16.89it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 12.05it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 16.90it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 14.99it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.33it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 32.13it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 11.79it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 13.92it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 18.36it/s]Train:  36%|███▌      | 5/14 [00:00<00:00, 14.70it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 14.89it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 15.92it/s]Train:  79%|███████▊  | 11/14 [00:00<00:00, 13.30it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.69it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00, 23.76it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  25%|██▌       | 1/4 [00:00<00:00,  6.30it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 17.17it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:00, 12.87it/s]Train:  29%|██▊       | 4/14 [00:00<00:01,  8.38it/s]Train:  50%|█████     | 7/14 [00:00<00:00, 13.26it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 12.84it/s]Train:  93%|█████████▎| 13/14 [00:00<00:00, 18.35it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 15.96it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.53it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  7.53it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  75%|███████▌  | 3/4 [00:00<00:00, 29.23it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 30.54it/s]
Train:   0%|          | 0/14 [00:00<?, ?it/s]Train:  14%|█▍        | 2/14 [00:00<00:01,  6.87it/s]Train:  43%|████▎     | 6/14 [00:00<00:00, 15.99it/s]Train:  64%|██████▍   | 9/14 [00:00<00:00, 13.48it/s]Train:  86%|████████▌ | 12/14 [00:00<00:00, 16.58it/s]Train: 100%|██████████| 14/14 [00:00<00:00, 16.26it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/2 [00:00<?, ?it/s]Val:  50%|█████     | 1/2 [00:00<00:00,  5.31it/s]Val: 100%|██████████| 2/2 [00:00<00:00,  9.30it/s]
/mnt/n1p1/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/4 [00:00<?, ?it/s]Test:  50%|█████     | 2/4 [00:00<00:00, 14.37it/s]Test: 100%|██████████| 4/4 [00:00<00:00, 18.11it/s]
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 79: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0175, Val -0.0053, Test 0.0053
          RMSE             : Train 225321.6806, Val 219279.8670, Test 225371.4248
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 80: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0184, Val -0.0030, Test 0.0056
          RMSE             : Train 225210.0244, Val 219030.4615, Test 225341.7446
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 81: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0178, Val -0.0016, Test 0.0061
          RMSE             : Train 225288.9143, Val 218877.3787, Test 225284.6481
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 82: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0186, Val -0.0039, Test 0.0067
          RMSE             : Train 225190.9813, Val 219133.7930, Test 225221.4656
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 83: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0040, Test 0.0075
          RMSE             : Train 225240.0252, Val 219146.2997, Test 225123.1605
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 84: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0181, Val -0.0040, Test 0.0060
          RMSE             : Train 225248.6005, Val 219146.1560, Test 225301.0108
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 85: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0190, Val -0.0049, Test 0.0066
          RMSE             : Train 225143.3875, Val 219240.8076, Test 225223.9962
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 86: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0181, Val -0.0035, Test 0.0062
          RMSE             : Train 225249.9776, Val 219084.2135, Test 225269.5634
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 87: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0182, Val -0.0055, Test 0.0048
          RMSE             : Train 225234.0389, Val 219304.6508, Test 225433.1796
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 88: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0187, Val -0.0031, Test 0.0070
          RMSE             : Train 225184.3798, Val 219038.8058, Test 225180.7627
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 89: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0040, Test 0.0073
          RMSE             : Train 225262.8911, Val 219142.6737, Test 225149.0734
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 90: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0187, Val -0.0059, Test 0.0053
          RMSE             : Train 225184.4821, Val 219354.3221, Test 225380.3127
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 91: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0181, Val -0.0047, Test 0.0058
          RMSE             : Train 225250.7802, Val 219219.6233, Test 225320.9888
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 92: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0187, Val -0.0064, Test 0.0050
          RMSE             : Train 225186.4619, Val 219408.4271, Test 225409.6965
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 93: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0189, Val -0.0032, Test 0.0077
          RMSE             : Train 225155.4098, Val 219056.3460, Test 225107.4376
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 94: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0189, Val -0.0042, Test 0.0067
          RMSE             : Train 225154.9193, Val 219164.3755, Test 225212.1761
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 95: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0180, Val -0.0045, Test 0.0058
          RMSE             : Train 225261.2416, Val 219198.4583, Test 225318.0686
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 96: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0187, Val -0.0047, Test 0.0079
          RMSE             : Train 225186.1267, Val 219214.4585, Test 225074.6616
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 97: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0183, Val -0.0048, Test 0.0047
          RMSE             : Train 225225.6643, Val 219229.2269, Test 225441.6751
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 98: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0186, Val -0.0071, Test 0.0054
          RMSE             : Train 225191.5717, Val 219480.9836, Test 225364.8893
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 99: Loss:            : Train 0.0037, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0185, Val -0.0042, Test 0.0057
          RMSE             : Train 225209.3206, Val 219164.1665, Test 225327.8502
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083
          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
Epoch 100: Loss:            : Train 0.0038, Val 0.0036, Test 0.0038
          R2_Score         : Train 0.0185, Val -0.0032, Test 0.0069
          RMSE             : Train 225205.0220, Val 219059.7788, Test 225188.3718
Best:
          R2_Score         : Train 0.0162, Val 0.0004, Test 0.0083

          RMSE             : Train 225468.1208, Val 218656.6777, Test 225035.8093
