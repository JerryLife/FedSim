Loading MSD from data/song/msd_clean.csv
Loading FMA from data/song/fma_clean.csv
Current MSD columns Index(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',
       '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24',
       '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36',
       '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48',
       '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60',
       '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72',
       '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84',
       '85', '86', '87', '88', '89', 'title'],
      dtype='object')
Current FMA columns Index(['title', '0', '1', '2', '3', '4', '5', '6', '7', '8',
       ...
       '508', '509', '510', '511', '512', '513', '514', '515', '516', '517'],
      dtype='object', length=519)
Loading data from cache
Done
Calculating noise scale
Standard variance of sim_score: 383.00
Adding noise of scale 0.10472837174429839 to sim_scores
Adding noise of scale 0.10472837174429839 to sim_scores
Adding noise of scale 0.10472837174429839 to sim_scores
Preparing time (sec): 52
Initializing dataloader
Done
Prepare for training
Start training
================================================================================
                                    Kernel Shape Output Shape  Params  \
Layer                                                                   
0_local_models.0.fc_layers.Linear_0    [91, 100]   [128, 100]    9200   
1_local_models.0.fc_layers.Linear_1    [100, 50]    [128, 50]    5050   
2_local_models.1.fc_layers.Linear_0   [518, 100]   [128, 100]   51900   
3_local_models.1.fc_layers.Linear_1    [100, 50]    [128, 50]    5050   
4_agg_model.fc_layers.Linear_0        [100, 100]   [128, 100]   10100   
5_agg_model.fc_layers.Linear_1          [100, 1]     [128, 1]     101   

                                     Mult-Adds  
Layer                                           
0_local_models.0.fc_layers.Linear_0       9100  
1_local_models.0.fc_layers.Linear_1       5000  
2_local_models.1.fc_layers.Linear_0      51800  
3_local_models.1.fc_layers.Linear_1       5000  
4_agg_model.fc_layers.Linear_0           10000  
5_agg_model.fc_layers.Linear_1             100  
--------------------------------------------------------------------------------
                      Totals
Total params           81401
Trainable params       81401
Non-trainable params       0
Mult-Adds              81000
================================================================================
n_classes=2
task=regression
model_name=song_featuresim_2022-01-27-05-39-01
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:0
test_batch_size=4096
train_batch_size=128
learning_rate=0.001
weight_decay=1e-05
num_epochs=50
model_save_path=ckp/song_featuresim_2022-01-27-05-39-01.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse', 'mae']
metrics_f=[<metric.r2_score.R2Score object at 0x7fc5ac490760>, <metric.rmse.RMSE object at 0x7fc5ac490850>, <metric.mae.MAE object at 0x7fc5ac490a60>]
hidden_sizes=[50, 50]
model=SplitNN(
  (agg_model): MLP(
    (fc_layers): ModuleList(
      (0): Linear(in_features=100, out_features=100, bias=True)
      (1): Linear(in_features=100, out_features=1, bias=True)
    )
  )
  (local_models): ModuleList(
    (0): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=91, out_features=100, bias=True)
        (1): Linear(in_features=100, out_features=50, bias=True)
      )
    )
    (1): MLP(
      (fc_layers): ModuleList(
        (0): Linear(in_features=518, out_features=100, bias=True)
        (1): Linear(in_features=100, out_features=50, bias=True)
      )
    )
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fc5ac4908b0>
dataset_type=real
drop_key=True
num_common_features=1
tree_radius=0.01
tree_leaf_size=1000
knn_k=30
grid_min=-10.0
grid_max=10.0
grid_width=1.5
sim_scaler=StandardScaler()
filter_top_k=None
link_n_jobs=1
psig_p=4
sim_leak_p=0.01
link_threshold_t=0.1
link_epsilon=0.1
n_hash_lsh=50
edit_distance_threshold=10
n_hash_func=50
collision_rate=0.01
qgram_q=4
link_delta=0.01
feature_wise_sim=False
blocking_method=knn_priv_str
center_threshold=0.5
n_clusters=100
local_hidden_sizes=[[100], [100]]
cut_dims=[50, 50]
agg_hidden_sizes=[100]
scale_analysis=<utils.privacy.SimNoiseScale object at 0x7fc5ac490e80>
data1_shape=(349270, 91)
data2_shape=(63147, 519)
