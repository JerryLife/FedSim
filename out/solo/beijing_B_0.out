  0%|          | 0/98735 [00:00<?, ?it/s]  7%|▋         | 6540/98735 [00:00<00:01, 65376.53it/s] 15%|█▍        | 14766/98735 [00:00<00:01, 75301.38it/s] 23%|██▎       | 22928/98735 [00:00<00:00, 78182.80it/s] 31%|███▏      | 31078/98735 [00:00<00:00, 79489.45it/s] 40%|███▉      | 39267/98735 [00:00<00:00, 80351.82it/s] 48%|████▊     | 47427/98735 [00:00<00:00, 80775.27it/s] 56%|█████▋    | 55632/98735 [00:00<00:00, 81190.56it/s] 65%|██████▍   | 63822/98735 [00:00<00:00, 81415.19it/s] 73%|███████▎  | 72008/98735 [00:00<00:00, 81551.40it/s] 81%|████████  | 80164/98735 [00:01<00:00, 81551.08it/s] 89%|████████▉ | 88320/98735 [00:01<00:00, 78184.07it/s] 98%|█████████▊| 96620/98735 [00:01<00:00, 79604.86it/s]100%|██████████| 98735/98735 [00:01<00:00, 79630.71it/s]
  0%|          | 0/14105 [00:00<?, ?it/s] 59%|█████▉    | 8308/14105 [00:00<00:00, 83077.11it/s]100%|██████████| 14105/14105 [00:00<00:00, 83158.67it/s]
  0%|          | 0/28210 [00:00<?, ?it/s] 30%|██▉       | 8324/28210 [00:00<00:00, 83233.93it/s] 59%|█████▉    | 16686/28210 [00:00<00:00, 83459.78it/s] 89%|████████▊ | 25032/28210 [00:00<00:00, 83373.60it/s]100%|██████████| 28210/28210 [00:00<00:00, 83324.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.63it/s]Train:  20%|██        | 5/25 [00:00<00:00, 23.92it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 29.17it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 32.26it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 35.76it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 38.88it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.28it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.19it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.55it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.76it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 34.14it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 37.90it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 39.96it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 73.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 12.47it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.46it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.31it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 20.81it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 24.27it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.37it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 27.18it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 93.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.20it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.61it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 25.75it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 29.49it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 30.57it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 30.37it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 90.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.34it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 41.87it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.07it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 22.53it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 28.23it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 31.05it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 33.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  3.36it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 12.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 39.61it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 51.13it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.58it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 31.62it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 35.32it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 38.43it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 40.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 43.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 46.14it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 52.98it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 35.05it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 36.00it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 39.44it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 40.97it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 43.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 41.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 46.23it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 53.06it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 29.03it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 36.50it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 39.71it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 41.52it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 44.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 41.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 39.46it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 48.44it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 29.36it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 38.72it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 39.55it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 41.06it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 43.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 43.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 46.19it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 52.96it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.34it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.29it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 35.25it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 36.01it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 29.36it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 36.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 44.80it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 49.66it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 25.80it/s]Train:  40%|████      | 10/25 [00:00<00:00, 33.44it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 37.70it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 38.36it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 40.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 37.95it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 37.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 45.18it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 52.04it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 26.41it/s]Train:  40%|████      | 10/25 [00:00<00:00, 31.12it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 35.07it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 37.74it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.33it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 33.95it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.27it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.28it/s]Train:  40%|████      | 10/25 [00:00<00:00, 30.21it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 35.38it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 38.22it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.60it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 35.21it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.44it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 26.95it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 32.48it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 32.71it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 34.91it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.08it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 35.12it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.28it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 27.21it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 33.67it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 36.41it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 38.01it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.42it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.23it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.80it/s]Loading house from data/beijing/house_clean.csv
Loading airbnb from data/beijing/airbnb_clean.csv
Current house columns Index(['cid', 'DOM', 'followers', 'square', 'livingRoom', 'drawingRoom',
       'kitchen', 'bathRoom', 'floor', 'constructionTime', 'ladderRatio',
       'elevator', 'fiveYearsProperty', 'subway', 'did_2', 'did_3', 'did_4',
       'did_5', 'did_6', 'did_7', 'did_8', 'did_9', 'did_10', 'did_11',
       'did_12', 'did_13', 'bt_2', 'bt_3', 'bt_4', 'rc_2', 'rc_3', 'rc_4',
       'bs_2', 'bs_3', 'bs_4', 'bs_5', 'bs_6', 'ty_2014', 'ty_2015', 'ty_2016',
       'ty_2017', 'ty_2018', 'tm_2', 'tm_3', 'tm_4', 'tm_5', 'tm_6', 'tm_7',
       'tm_8', 'tm_9', 'tm_10', 'tm_11', 'tm_12', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'price', 'minimum_nights', 'number_of_reviews',
       'reviews_per_month', 'calculated_host_listings_count',
       'availability_365', 'nbr_丰台区 ', 'nbr_大兴区 ', 'nbr_密云县 ', 'nbr_平谷区 ',
       'nbr_延庆县 ', 'nbr_怀柔区 ', 'nbr_房山区', 'nbr_昌平区', 'nbr_朝阳区 ', 'nbr_海淀区',
       'nbr_石景山区', 'nbr_西城区', 'nbr_通州区 ', 'nbr_门头沟区 ', 'nbr_顺义区 ',
       'rt_Private room', 'rt_Shared room'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 25 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0    [23, 400]  [4096, 400]    9600       9200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           90001
Trainable params       90001
Non-trainable params       0
Mult-Adds              89400
=================================================================
n_classes=2
task=regression
model_name=beijing_B_2022-05-21-20-44-13
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:0
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/beijing_B_2022-05-21-20-44-13.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7ff76f47d5e0>, <metric.rmse.RMSE object at 0x7ff76f47d610>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=23, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7ff76f47d580>
Epoch 1: Loss:            : Train 0.0401, Val 0.0327, Test 0.0332
          R2_Score         : Train -0.1823, Val 0.0240, Test 0.0283
          RMSE             : Train 198.8834, Val 182.6639, Test 180.7787
Best:
          R2_Score         : Train -0.1823, Val 0.0240, Test 0.0283
          RMSE             : Train 198.8834, Val 182.6639, Test 180.7787
Epoch 2: Loss:            : Train 0.0311, Val 0.0302, Test 0.0300
          R2_Score         : Train 0.0911, Val 0.1237, Test 0.1250
          RMSE             : Train 174.3781, Val 173.0793, Test 171.5486
Best:
          R2_Score         : Train 0.0911, Val 0.1237, Test 0.1250
          RMSE             : Train 174.3781, Val 173.0793, Test 171.5486
Epoch 3: Loss:            : Train 0.0295, Val 0.0297, Test 0.0295
          R2_Score         : Train 0.1319, Val 0.1392, Test 0.1389
          RMSE             : Train 170.4228, Val 171.5404, Test 170.1802
Best:
          R2_Score         : Train 0.1319, Val 0.1392, Test 0.1389
          RMSE             : Train 170.4228, Val 171.5404, Test 170.1802
Epoch 4: Loss:            : Train 0.0292, Val 0.0294, Test 0.0292
          R2_Score         : Train 0.1450, Val 0.1499, Test 0.1491
          RMSE             : Train 169.1329, Val 170.4769, Test 169.1724
Best:
          R2_Score         : Train 0.1450, Val 0.1499, Test 0.1491
          RMSE             : Train 169.1329, Val 170.4769, Test 169.1724
Epoch 5: Loss:            : Train 0.0288, Val 0.0290, Test 0.0289
          R2_Score         : Train 0.1548, Val 0.1583, Test 0.1572
          RMSE             : Train 168.1540, Val 169.6324, Test 168.3659
Best:
          R2_Score         : Train 0.1548, Val 0.1583, Test 0.1572
          RMSE             : Train 168.1540, Val 169.6324, Test 168.3659
Epoch 6: Loss:            : Train 0.0286, Val 0.0291, Test 0.0287
          R2_Score         : Train 0.1626, Val 0.1631, Test 0.1620
          RMSE             : Train 167.3755, Val 169.1476, Test 167.8804
Best:
          R2_Score         : Train 0.1626, Val 0.1631, Test 0.1620
          RMSE             : Train 167.3755, Val 169.1476, Test 167.8804
Epoch 7: Loss:            : Train 0.0284, Val 0.0286, Test 0.0284
          R2_Score         : Train 0.1686, Val 0.1714, Test 0.1709
          RMSE             : Train 166.7756, Val 168.3027, Test 166.9886
Best:
          R2_Score         : Train 0.1686, Val 0.1714, Test 0.1709
          RMSE             : Train 166.7756, Val 168.3027, Test 166.9886
Epoch 8: Loss:            : Train 0.0282, Val 0.0284, Test 0.0282
          R2_Score         : Train 0.1746, Val 0.1779, Test 0.1764
          RMSE             : Train 166.1771, Val 167.6439, Test 166.4363
Best:
          R2_Score         : Train 0.1746, Val 0.1779, Test 0.1764
          RMSE             : Train 166.1771, Val 167.6439, Test 166.4363
Epoch 9: Loss:            : Train 0.0278, Val 0.0282, Test 0.0280
          R2_Score         : Train 0.1815, Val 0.1843, Test 0.1825
          RMSE             : Train 165.4837, Val 166.9908, Test 165.8183
Best:
          R2_Score         : Train 0.1815, Val 0.1843, Test 0.1825
          RMSE             : Train 165.4837, Val 166.9908, Test 165.8183
Epoch 10: Loss:            : Train 0.0279, Val 0.0280, Test 0.0278
          R2_Score         : Train 0.1883, Val 0.1897, Test 0.1886
          RMSE             : Train 164.7886, Val 166.4397, Test 165.2008
Best:
          R2_Score         : Train 0.1883, Val 0.1897, Test 0.1886
          RMSE             : Train 164.7886, Val 166.4397, Test 165.2008
Epoch 11: Loss:            : Train 0.0275, Val 0.0278, Test 0.0276
          R2_Score         : Train 0.1941, Val 0.1934, Test 0.1939
          RMSE             : Train 164.1974, Val 166.0565, Test 164.6522
Best:
          R2_Score         : Train 0.1941, Val 0.1934, Test 0.1939
          RMSE             : Train 164.1974, Val 166.0565, Test 164.6522
Epoch 12: Loss:            : Train 0.0274, Val 0.0276, Test 0.0275
          R2_Score         : Train 0.1988, Val 0.1976, Test 0.1981
          RMSE             : Train 163.7228, Val 165.6218, Test 164.2239
Best:
          R2_Score         : Train 0.1988, Val 0.1976, Test 0.1981
          RMSE             : Train 163.7228, Val 165.6218, Test 164.2239
Epoch 13: Loss:            : Train 0.0273, Val 0.0275, Test 0.0272
          R2_Score         : Train 0.2042, Val 0.2062, Test 0.2060
          RMSE             : Train 163.1649, Val 164.7350, Test 163.4174
Best:
          R2_Score         : Train 0.2042, Val 0.2062, Test 0.2060
          RMSE             : Train 163.1649, Val 164.7350, Test 163.4174
Epoch 14: Loss:            : Train 0.0271, Val 0.0272, Test 0.0271
          R2_Score         : Train 0.2083, Val 0.2098, Test 0.2097
          RMSE             : Train 162.7462, Val 164.3538, Test 163.0377
Best:
          R2_Score         : Train 0.2083, Val 0.2098, Test 0.2097
          RMSE             : Train 162.7462, Val 164.3538, Test 163.0377
Epoch 15: Loss:            : Train 0.0269, Val 0.0271, Test 0.0269
          R2_Score         : Train 0.2121, Val 0.2153, Test 0.2148
          RMSE             : Train 162.3609, Val 163.7828, Test 162.5074
Best:
          R2_Score         : Train 0.2121, Val 0.2153, Test 0.2148
          RMSE             : Train 162.3609, Val 163.7828, Test 162.5074
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 45.19it/s]Train:  40%|████      | 10/25 [00:00<00:00, 37.12it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 36.13it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 35.35it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 35.49it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.11it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.13it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.95it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 28.69it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 34.23it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 35.40it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 33.47it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 33.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.37it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.63it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.27it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 25.28it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 29.69it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 33.47it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 35.45it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 33.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.40it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.40it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.29it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 31.83it/s]Train:  40%|████      | 10/25 [00:00<00:00, 32.54it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 32.96it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 32.82it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 35.63it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 22.32it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.09it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.67it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 32.23it/s]Train:  40%|████      | 10/25 [00:00<00:00, 32.66it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.32it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 34.59it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.92it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.35it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.87it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.19it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.90it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 32.89it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 35.67it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.45it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.03it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.62it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.45it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.24it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.57it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 35.07it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.10it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.07it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.79it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.33it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.31it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.77it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 36.61it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.69it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.35it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.96it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 19.34it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 27.85it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.96it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 36.84it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.49it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 30.77it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.42it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.85it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 30.83it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 35.44it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 37.70it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.71it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 31.10it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.75it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 24.32it/s]Train:  40%|████      | 10/25 [00:00<00:00, 32.46it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 34.88it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 37.64it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.41it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 31.42it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.03it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 22.75it/s]Train:  40%|████      | 10/25 [00:00<00:00, 29.67it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 33.36it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 34.30it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 22.54it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 29.82it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.53it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 23.51it/s]Train:  40%|████      | 10/25 [00:00<00:00, 31.30it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 34.63it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 36.21it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 22.58it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 32.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.89it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 26.67it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 33.59it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 36.80it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 37.80it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  8.96it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.59it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.11it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 32.29it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 30.54it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 30.15it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 32.81it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 35.41it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.77it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.20it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.86it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 45.26it/s]Train:  40%|████      | 10/25 [00:00<00:00, 37.49it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 36.70it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 36.31it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 37.09it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.01it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.77it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.36it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 42.77it/s]Train:  40%|████      | 10/25 [00:00<00:00, 34.73it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.46it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 33.29it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 34.87it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.91it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.15it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.53it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.22it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 31.87it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 34.08it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 35.86it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.14it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.35it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.40it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 27.37it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 33.39it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 33.79it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 35.02it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.88it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.60it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 25.69it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 32.16it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 35.31it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 35.82it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 21.31it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.34it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.13it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 23.65it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 30.82it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 33.64it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.75it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 22.87it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.33it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.64it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 32.61it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 31.41it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 31.76it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 32.20it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.00it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.82it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.01it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.54it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.85it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.56it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 36.20it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.65it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 27.99it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.74it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.07it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.99it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.92it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 36.40it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.94it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.63it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.13it/s]
Epoch 16: Loss:            : Train 0.0267, Val 0.0271, Test 0.0269
          R2_Score         : Train 0.2169, Val 0.2163, Test 0.2152
          RMSE             : Train 161.8605, Val 163.6831, Test 162.4639
Best:
          R2_Score         : Train 0.2169, Val 0.2163, Test 0.2152
          RMSE             : Train 161.8605, Val 163.6831, Test 162.4639
Epoch 17: Loss:            : Train 0.0266, Val 0.0269, Test 0.0267
          R2_Score         : Train 0.2218, Val 0.2230, Test 0.2225
          RMSE             : Train 161.3549, Val 162.9743, Test 161.7133
Best:
          R2_Score         : Train 0.2218, Val 0.2230, Test 0.2225
          RMSE             : Train 161.3549, Val 162.9743, Test 161.7133
Epoch 18: Loss:            : Train 0.0264, Val 0.0268, Test 0.0265
          R2_Score         : Train 0.2254, Val 0.2280, Test 0.2270
          RMSE             : Train 160.9789, Val 162.4515, Test 161.2367
Best:
          R2_Score         : Train 0.2254, Val 0.2280, Test 0.2270
          RMSE             : Train 160.9789, Val 162.4515, Test 161.2367
Epoch 19: Loss:            : Train 0.0262, Val 0.0268, Test 0.0264
          R2_Score         : Train 0.2301, Val 0.2287, Test 0.2289
          RMSE             : Train 160.4891, Val 162.3799, Test 161.0378
Best:
          R2_Score         : Train 0.2301, Val 0.2287, Test 0.2289
          RMSE             : Train 160.4891, Val 162.3799, Test 161.0378
Epoch 20: Loss:            : Train 0.0262, Val 0.0265, Test 0.0263
          R2_Score         : Train 0.2339, Val 0.2296, Test 0.2324
          RMSE             : Train 160.0951, Val 162.2903, Test 160.6710
Best:
          R2_Score         : Train 0.2339, Val 0.2296, Test 0.2324
          RMSE             : Train 160.0951, Val 162.2903, Test 160.6710
Epoch 21: Loss:            : Train 0.0261, Val 0.0265, Test 0.0262
          R2_Score         : Train 0.2374, Val 0.2358, Test 0.2367
          RMSE             : Train 159.7323, Val 161.6339, Test 160.2232
Best:
          R2_Score         : Train 0.2374, Val 0.2358, Test 0.2367
          RMSE             : Train 159.7323, Val 161.6339, Test 160.2232
Epoch 22: Loss:            : Train 0.0259, Val 0.0264, Test 0.0261
          R2_Score         : Train 0.2428, Val 0.2417, Test 0.2402
          RMSE             : Train 159.1578, Val 161.0096, Test 159.8581
Best:
          R2_Score         : Train 0.2428, Val 0.2417, Test 0.2402
          RMSE             : Train 159.1578, Val 161.0096, Test 159.8581
Epoch 23: Loss:            : Train 0.0256, Val 0.0266, Test 0.0260
          R2_Score         : Train 0.2448, Val 0.2385, Test 0.2412
          RMSE             : Train 158.9490, Val 161.3473, Test 159.7465
Best:
          R2_Score         : Train 0.2428, Val 0.2417, Test 0.2402
          RMSE             : Train 159.1578, Val 161.0096, Test 159.8581
Epoch 24: Loss:            : Train 0.0257, Val 0.0263, Test 0.0259
          R2_Score         : Train 0.2465, Val 0.2470, Test 0.2457
          RMSE             : Train 158.7713, Val 160.4389, Test 159.2784
Best:
          R2_Score         : Train 0.2465, Val 0.2470, Test 0.2457
          RMSE             : Train 158.7713, Val 160.4389, Test 159.2784
Epoch 25: Loss:            : Train 0.0255, Val 0.0262, Test 0.0258
          R2_Score         : Train 0.2502, Val 0.2479, Test 0.2492
          RMSE             : Train 158.3860, Val 160.3516, Test 158.9042
Best:
          R2_Score         : Train 0.2502, Val 0.2479, Test 0.2492
          RMSE             : Train 158.3860, Val 160.3516, Test 158.9042
Epoch 26: Loss:            : Train 0.0254, Val 0.0260, Test 0.0258
          R2_Score         : Train 0.2538, Val 0.2440, Test 0.2477
          RMSE             : Train 158.0069, Val 160.7629, Test 159.0637
Best:
          R2_Score         : Train 0.2502, Val 0.2479, Test 0.2492
          RMSE             : Train 158.3860, Val 160.3516, Test 158.9042
Epoch 27: Loss:            : Train 0.0253, Val 0.0259, Test 0.0256
          R2_Score         : Train 0.2546, Val 0.2501, Test 0.2519
          RMSE             : Train 157.9174, Val 160.1108, Test 158.6176
Best:
          R2_Score         : Train 0.2546, Val 0.2501, Test 0.2519
          RMSE             : Train 157.9174, Val 160.1108, Test 158.6176
Epoch 28: Loss:            : Train 0.0255, Val 0.0259, Test 0.0255
          R2_Score         : Train 0.2592, Val 0.2525, Test 0.2551
          RMSE             : Train 157.4336, Val 159.8588, Test 158.2857
Best:
          R2_Score         : Train 0.2592, Val 0.2525, Test 0.2551
          RMSE             : Train 157.4336, Val 159.8588, Test 158.2857
Epoch 29: Loss:            : Train 0.0253, Val 0.0259, Test 0.0257
          R2_Score         : Train 0.2602, Val 0.2510, Test 0.2509
          RMSE             : Train 157.3276, Val 160.0175, Test 158.7315
Best:
          R2_Score         : Train 0.2592, Val 0.2525, Test 0.2551
          RMSE             : Train 157.4336, Val 159.8588, Test 158.2857
Epoch 30: Loss:            : Train 0.0253, Val 0.0258, Test 0.0254
          R2_Score         : Train 0.2602, Val 0.2565, Test 0.2588
          RMSE             : Train 157.3242, Val 159.4293, Test 157.8858
Best:
          R2_Score         : Train 0.2602, Val 0.2565, Test 0.2588
          RMSE             : Train 157.3242, Val 159.4293, Test 157.8858
Epoch 31: Loss:            : Train 0.0251, Val 0.0255, Test 0.0251
          R2_Score         : Train 0.2644, Val 0.2680, Test 0.2677
          RMSE             : Train 156.8753, Val 158.1934, Test 156.9328
Best:
          R2_Score         : Train 0.2644, Val 0.2680, Test 0.2677
          RMSE             : Train 156.8753, Val 158.1934, Test 156.9328
Epoch 32: Loss:            : Train 0.0250, Val 0.0256, Test 0.0251
          R2_Score         : Train 0.2662, Val 0.2642, Test 0.2673
          RMSE             : Train 156.6871, Val 158.5987, Test 156.9757
Best:
          R2_Score         : Train 0.2644, Val 0.2680, Test 0.2677
          RMSE             : Train 156.8753, Val 158.1934, Test 156.9328
Epoch 33: Loss:            : Train 0.0250, Val 0.0257, Test 0.0251
          R2_Score         : Train 0.2713, Val 0.2674, Test 0.2699
          RMSE             : Train 156.1397, Val 158.2542, Test 156.7040
Best:
          R2_Score         : Train 0.2644, Val 0.2680, Test 0.2677
          RMSE             : Train 156.8753, Val 158.1934, Test 156.9328
Epoch 34: Loss:            : Train 0.0248, Val 0.0257, Test 0.0250
          R2_Score         : Train 0.2740, Val 0.2660, Test 0.2711
          RMSE             : Train 155.8477, Val 158.4104, Test 156.5710
Best:
          R2_Score         : Train 0.2644, Val 0.2680, Test 0.2677
          RMSE             : Train 156.8753, Val 158.1934, Test 156.9328
Epoch 35: Loss:            : Train 0.0248, Val 0.0253, Test 0.0250
          R2_Score         : Train 0.2738, Val 0.2708, Test 0.2713
          RMSE             : Train 155.8742, Val 157.8876, Test 156.5488
Best:
          R2_Score         : Train 0.2738, Val 0.2708, Test 0.2713
          RMSE             : Train 155.8742, Val 157.8876, Test 156.5488
Epoch 36: Loss:            : Train 0.0247, Val 0.0252, Test 0.0250
          R2_Score         : Train 0.2768, Val 0.2734, Test 0.2723
          RMSE             : Train 155.5463, Val 157.6096, Test 156.4466
Best:
          R2_Score         : Train 0.2768, Val 0.2734, Test 0.2723
          RMSE             : Train 155.5463, Val 157.6096, Test 156.4466
Epoch 37: Loss:            : Train 0.0248, Val 0.0254, Test 0.0249
          R2_Score         : Train 0.2755, Val 0.2752, Test 0.2740
          RMSE             : Train 155.6843, Val 157.4054, Test 156.2608
Best:
          R2_Score         : Train 0.2755, Val 0.2752, Test 0.2740
          RMSE             : Train 155.6843, Val 157.4054, Test 156.2608
Epoch 38: Loss:            : Train 0.0246, Val 0.0251, Test 0.0248
          R2_Score         : Train 0.2813, Val 0.2785, Test 0.2776
          RMSE             : Train 155.0595, Val 157.0526, Test 155.8768
Best:
          R2_Score         : Train 0.2813, Val 0.2785, Test 0.2776
          RMSE             : Train 155.0595, Val 157.0526, Test 155.8768
Epoch 39: Loss:            : Train 0.0245, Val 0.0261, Test 0.0251
          R2_Score         : Train 0.2820, Val 0.2686, Test 0.2695
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.67it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 35.57it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 34.56it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 33.71it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 33.50it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.71it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.02it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.94it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.13it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 35.64it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 36.80it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.49it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 27.52it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.19it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 29.84it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 34.78it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 37.61it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.64it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 31.63it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.32it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 25.41it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 30.97it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 36.09it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 38.45it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.53it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 33.76it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.03it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 26.84it/s]Train:  40%|████      | 10/25 [00:00<00:00, 32.06it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 36.36it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 38.46it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.65it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 33.57it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.87it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 26.78it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 25.43it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 30.95it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 34.17it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 37.04it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.68it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 34.62it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.80it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 28.06it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 34.64it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 37.96it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 38.01it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 64.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.39it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.31it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.86it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 42.85it/s]Train:  40%|████      | 10/25 [00:00<00:00, 35.39it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 34.83it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 34.17it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 35.40it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.36it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.79it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.42it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 45.63it/s]Train:  40%|████      | 10/25 [00:00<00:00, 35.71it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 34.76it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 34.78it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 37.02it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.25it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.19it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.49it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 31.93it/s]Train:  40%|████      | 10/25 [00:00<00:00, 31.55it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 31.65it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 30.58it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 32.91it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.45it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.45it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.76it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 32.31it/s]Train:  40%|████      | 10/25 [00:00<00:00, 31.26it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 32.68it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 33.44it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 36.07it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.81it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.91it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.11it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 26.67it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 33.49it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 37.05it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.85it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.98it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.42it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.07it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 27.32it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 34.25it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 33.73it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.56it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.55it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.04it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.16it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 34.34it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 33.95it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 32.71it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 32.51it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.47it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.89it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.44it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.88it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 34.83it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 34.73it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 34.48it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 35.99it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.05it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.66it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.25it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.79it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 29.02it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.73it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 36.29it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.46it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 27.87it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.67it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 22.29it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.59it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 34.75it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 37.55it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.91it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.66it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.29it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.77it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.20it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 36.01it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 38.12it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.02it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 32.26it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.83it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 23.82it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 27.82it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 32.28it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 34.95it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 40.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 32.91it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.38it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 25.04it/s]Train:  40%|████      | 10/25 [00:00<00:00, 32.99it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 34.92it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 36.95it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.48it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 30.68it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.36it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 23.85it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 35.58it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 32.60it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 32.20it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 30.18it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.86it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 38.13it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.03it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 25.34it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 32.03it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 35.05it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 35.34it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.99it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 25.31it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.13it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 27.28it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 33.13it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 35.77it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 36.68it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.80it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.15it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.61it/s]
          RMSE             : Train 154.9877, Val 158.1276, Test 156.7494
Best:
          R2_Score         : Train 0.2813, Val 0.2785, Test 0.2776
          RMSE             : Train 155.0595, Val 157.0526, Test 155.8768
Epoch 40: Loss:            : Train 0.0245, Val 0.0251, Test 0.0245
          R2_Score         : Train 0.2805, Val 0.2811, Test 0.2847
          RMSE             : Train 155.1458, Val 156.7689, Test 155.1061
Best:
          R2_Score         : Train 0.2805, Val 0.2811, Test 0.2847
          RMSE             : Train 155.1458, Val 156.7689, Test 155.1061
Epoch 41: Loss:            : Train 0.0246, Val 0.0252, Test 0.0247
          R2_Score         : Train 0.2858, Val 0.2834, Test 0.2820
          RMSE             : Train 154.5814, Val 156.5156, Test 155.3970
Best:
          R2_Score         : Train 0.2858, Val 0.2834, Test 0.2820
          RMSE             : Train 154.5814, Val 156.5156, Test 155.3970
Epoch 42: Loss:            : Train 0.0243, Val 0.0251, Test 0.0247
          R2_Score         : Train 0.2866, Val 0.2779, Test 0.2800
          RMSE             : Train 154.4878, Val 157.1190, Test 155.6134
Best:
          R2_Score         : Train 0.2858, Val 0.2834, Test 0.2820
          RMSE             : Train 154.5814, Val 156.5156, Test 155.3970
Epoch 43: Loss:            : Train 0.0244, Val 0.0252, Test 0.0246
          R2_Score         : Train 0.2839, Val 0.2841, Test 0.2837
          RMSE             : Train 154.7792, Val 156.4455, Test 155.2086
Best:
          R2_Score         : Train 0.2839, Val 0.2841, Test 0.2837
          RMSE             : Train 154.7792, Val 156.4455, Test 155.2086
Epoch 44: Loss:            : Train 0.0244, Val 0.0249, Test 0.0244
          R2_Score         : Train 0.2895, Val 0.2859, Test 0.2877
          RMSE             : Train 154.1761, Val 156.2398, Test 154.7773
Best:
          R2_Score         : Train 0.2895, Val 0.2859, Test 0.2877
          RMSE             : Train 154.1761, Val 156.2398, Test 154.7773
Epoch 45: Loss:            : Train 0.0243, Val 0.0253, Test 0.0245
          R2_Score         : Train 0.2904, Val 0.2849, Test 0.2860
          RMSE             : Train 154.0817, Val 156.3502, Test 154.9625
Best:
          R2_Score         : Train 0.2895, Val 0.2859, Test 0.2877
          RMSE             : Train 154.1761, Val 156.2398, Test 154.7773
Epoch 46: Loss:            : Train 0.0241, Val 0.0250, Test 0.0245
          R2_Score         : Train 0.2934, Val 0.2826, Test 0.2860
          RMSE             : Train 153.7576, Val 156.6078, Test 154.9605
Best:
          R2_Score         : Train 0.2895, Val 0.2859, Test 0.2877
          RMSE             : Train 154.1761, Val 156.2398, Test 154.7773
Epoch 47: Loss:            : Train 0.0242, Val 0.0249, Test 0.0244
          R2_Score         : Train 0.2933, Val 0.2846, Test 0.2894
          RMSE             : Train 153.7687, Val 156.3908, Test 154.5898
Best:
          R2_Score         : Train 0.2895, Val 0.2859, Test 0.2877
          RMSE             : Train 154.1761, Val 156.2398, Test 154.7773
Epoch 48: Loss:            : Train 0.0241, Val 0.0258, Test 0.0250
          R2_Score         : Train 0.2945, Val 0.2763, Test 0.2724
          RMSE             : Train 153.6352, Val 157.2906, Test 156.4308
Best:
          R2_Score         : Train 0.2895, Val 0.2859, Test 0.2877
          RMSE             : Train 154.1761, Val 156.2398, Test 154.7773
Epoch 49: Loss:            : Train 0.0243, Val 0.0246, Test 0.0241
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Best:
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Epoch 50: Loss:            : Train 0.0241, Val 0.0250, Test 0.0244
          R2_Score         : Train 0.2966, Val 0.2900, Test 0.2895
          RMSE             : Train 153.4044, Val 155.7925, Test 154.5885
Best:
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Epoch 51: Loss:            : Train 0.0240, Val 0.0246, Test 0.0243
          R2_Score         : Train 0.2972, Val 0.2834, Test 0.2897
          RMSE             : Train 153.3432, Val 156.5151, Test 154.5662
Best:
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Epoch 52: Loss:            : Train 0.0239, Val 0.0248, Test 0.0243
          R2_Score         : Train 0.2986, Val 0.2856, Test 0.2917
          RMSE             : Train 153.1889, Val 156.2714, Test 154.3490
Best:
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Epoch 53: Loss:            : Train 0.0239, Val 0.0254, Test 0.0245
          R2_Score         : Train 0.3000, Val 0.2885, Test 0.2874
          RMSE             : Train 153.0302, Val 155.9631, Test 154.8130
Best:
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Epoch 54: Loss:            : Train 0.0236, Val 0.0248, Test 0.0246
          R2_Score         : Train 0.3028, Val 0.2750, Test 0.2830
          RMSE             : Train 152.7219, Val 157.4363, Test 155.2934
Best:
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Epoch 55: Loss:            : Train 0.0240, Val 0.0248, Test 0.0243
          R2_Score         : Train 0.3004, Val 0.2929, Test 0.2917
          RMSE             : Train 152.9866, Val 155.4746, Test 154.3405
Best:
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Epoch 56: Loss:            : Train 0.0238, Val 0.0250, Test 0.0246
          R2_Score         : Train 0.3025, Val 0.2760, Test 0.2823
          RMSE             : Train 152.7555, Val 157.3271, Test 155.3640
Best:
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Epoch 57: Loss:            : Train 0.0240, Val 0.0245, Test 0.0240
          R2_Score         : Train 0.2988, Val 0.2944, Test 0.2997
          RMSE             : Train 153.1685, Val 155.3097, Test 153.4654
Best:
          R2_Score         : Train 0.2908, Val 0.2961, Test 0.2964
          RMSE             : Train 154.0407, Val 155.1265, Test 153.8293
Epoch 58: Loss:            : Train 0.0236, Val 0.0244, Test 0.0240
          R2_Score         : Train 0.3051, Val 0.2988, Test 0.2997
          RMSE             : Train 152.4710, Val 154.8282, Test 153.4749
Best:
          R2_Score         : Train 0.3051, Val 0.2988, Test 0.2997
          RMSE             : Train 152.4710, Val 154.8282, Test 153.4749
Epoch 59: Loss:            : Train 0.0238, Val 0.0244, Test 0.0239
          R2_Score         : Train 0.3033, Val 0.2983, Test 0.3039
          RMSE             : Train 152.6712, Val 154.8770, Test 153.0047
Best:
          R2_Score         : Train 0.3051, Val 0.2988, Test 0.2997
          RMSE             : Train 152.4710, Val 154.8282, Test 153.4749
Epoch 60: Loss:            : Train 0.0238, Val 0.0246, Test 0.0240
          R2_Score         : Train 0.3027, Val 0.2994, Test 0.3003
          RMSE             : Train 152.7404, Val 154.7624, Test 153.4076
Best:
          R2_Score         : Train 0.3027, Val 0.2994, Test 0.3003
          RMSE             : Train 152.7404, Val 154.7624, Test 153.4076
Epoch 61: Loss:            : Train 0.0236, Val 0.0243, Test 0.0238
          R2_Score         : Train 0.3080, Val 0.3052, Test 0.3064
          RMSE             : Train 152.1551, Val 154.1190, Test 152.7335
Best:
          R2_Score         : Train 0.3080, Val 0.3052, Test 0.3064
          RMSE             : Train 152.1551, Val 154.1190, Test 152.7335
Epoch 62: Loss:            : Train 0.0236, Val 0.0249, Test 0.0240
          R2_Score         : Train 0.3085, Val 0.3004, Test 0.3025
          RMSE             : Train 152.1029, Val 154.6479, Test 153.1586

Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 44.67it/s]Train:  40%|████      | 10/25 [00:00<00:00, 35.86it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 34.78it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 34.15it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 35.22it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.59it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.76it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.45it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 45.41it/s]Train:  40%|████      | 10/25 [00:00<00:00, 36.16it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 35.18it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 34.48it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 35.31it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.81it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.91it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.42it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 44.46it/s]Train:  40%|████      | 10/25 [00:00<00:00, 35.85it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 34.13it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 33.83it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 36.87it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.38it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.62it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.03it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 32.64it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 36.28it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 36.92it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.76it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.55it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.07it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 27.87it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 34.76it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 35.89it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 36.85it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.62it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.62it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.48it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 27.77it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 33.29it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 36.56it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 37.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.89it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.48it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.16it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 27.69it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 34.53it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 37.51it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.50it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.22it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.79it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.85it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 35.48it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 35.86it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 36.04it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 35.62it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.70it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.96it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.35it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.31it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 35.03it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 35.38it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 35.66it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 36.96it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.99it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 30.39it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.91it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 22.81it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 29.51it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 35.02it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 37.70it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.69it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 29.86it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.44it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.68it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.49it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 34.77it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 37.23it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.63it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.86it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.37it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 22.90it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.69it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 36.48it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 37.67it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 40.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 24.63it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 31.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.62it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 25.23it/s]Train:  40%|████      | 10/25 [00:00<00:00, 33.22it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 37.15it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 37.73it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 24.42it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 31.92it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.51it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 26.62it/s]Train:  40%|████      | 10/25 [00:00<00:00, 33.42it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 37.46it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 39.59it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 40.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.54it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 29.71it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.71it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 25.96it/s]Train:  40%|████      | 10/25 [00:00<00:00, 29.80it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 33.74it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 35.83it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.17it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 35.03it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.47it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 26.34it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 33.19it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 34.76it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 37.10it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.80it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 32.96it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.21it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 26.80it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 33.80it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 37.31it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 38.70it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.15it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.29it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.79it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 45.19it/s]Train:  40%|████      | 10/25 [00:00<00:00, 37.20it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 36.20it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 35.73it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 36.56it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.54it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.99it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.70it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.92it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 33.17it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 36.84it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 38.82it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.83it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.50it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.89it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 27.89it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 33.19it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 36.90it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 37.71it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.92it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.73it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.32it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 27.97it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 34.71it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 36.48it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 38.66it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.89it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.49it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.16it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 31.87it/s]Train:  40%|████      | 10/25 [00:00<00:00, 32.87it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 34.29it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 36.63it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 40.33it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.62it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.02it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.64it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 35.42it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 36.18it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 36.29it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 36.33it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 40.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.26it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.82it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.25it/s]Best:
          R2_Score         : Train 0.3080, Val 0.3052, Test 0.3064
          RMSE             : Train 152.1551, Val 154.1190, Test 152.7335
Epoch 63: Loss:            : Train 0.0236, Val 0.0243, Test 0.0239
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Best:
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Epoch 64: Loss:            : Train 0.0237, Val 0.0245, Test 0.0240
          R2_Score         : Train 0.3085, Val 0.3013, Test 0.3006
          RMSE             : Train 152.1002, Val 154.5449, Test 153.3729
Best:
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Epoch 65: Loss:            : Train 0.0236, Val 0.0242, Test 0.0237
          R2_Score         : Train 0.3110, Val 0.3054, Test 0.3095
          RMSE             : Train 151.8255, Val 154.0992, Test 152.3977
Best:
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Epoch 66: Loss:            : Train 0.0234, Val 0.0246, Test 0.0239
          R2_Score         : Train 0.3119, Val 0.3018, Test 0.3039
          RMSE             : Train 151.7264, Val 154.4926, Test 153.0137
Best:
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Epoch 67: Loss:            : Train 0.0235, Val 0.0245, Test 0.0239
          R2_Score         : Train 0.3105, Val 0.3005, Test 0.3041
          RMSE             : Train 151.8809, Val 154.6399, Test 152.9873
Best:
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Epoch 68: Loss:            : Train 0.0235, Val 0.0246, Test 0.0239
          R2_Score         : Train 0.3125, Val 0.3041, Test 0.3049
          RMSE             : Train 151.6641, Val 154.2428, Test 152.8978
Best:
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Epoch 69: Loss:            : Train 0.0234, Val 0.0246, Test 0.0240
          R2_Score         : Train 0.3151, Val 0.2912, Test 0.3003
          RMSE             : Train 151.3684, Val 155.6633, Test 153.3992
Best:
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Epoch 70: Loss:            : Train 0.0233, Val 0.0243, Test 0.0237
          R2_Score         : Train 0.3143, Val 0.3075, Test 0.3084
          RMSE             : Train 151.4647, Val 153.8638, Test 152.5131
Best:
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Epoch 71: Loss:            : Train 0.0233, Val 0.0244, Test 0.0240
          R2_Score         : Train 0.3162, Val 0.3034, Test 0.3015
          RMSE             : Train 151.2483, Val 154.3172, Test 153.2732
Best:
          R2_Score         : Train 0.3101, Val 0.3077, Test 0.3053
          RMSE             : Train 151.9210, Val 153.8446, Test 152.8520
Epoch 72: Loss:            : Train 0.0234, Val 0.0242, Test 0.0236
          R2_Score         : Train 0.3145, Val 0.3145, Test 0.3138
          RMSE             : Train 151.4445, Val 153.0838, Test 151.9206
Best:
          R2_Score         : Train 0.3145, Val 0.3145, Test 0.3138
          RMSE             : Train 151.4445, Val 153.0838, Test 151.9206
Epoch 73: Loss:            : Train 0.0233, Val 0.0237, Test 0.0235
          R2_Score         : Train 0.3187, Val 0.3133, Test 0.3149
          RMSE             : Train 150.9775, Val 153.2198, Test 151.7931
Best:
          R2_Score         : Train 0.3145, Val 0.3145, Test 0.3138
          RMSE             : Train 151.4445, Val 153.0838, Test 151.9206
Epoch 74: Loss:            : Train 0.0232, Val 0.0247, Test 0.0240
          R2_Score         : Train 0.3196, Val 0.3074, Test 0.3038
          RMSE             : Train 150.8770, Val 153.8741, Test 153.0185
Best:
          R2_Score         : Train 0.3145, Val 0.3145, Test 0.3138
          RMSE             : Train 151.4445, Val 153.0838, Test 151.9206
Epoch 75: Loss:            : Train 0.0235, Val 0.0247, Test 0.0243
          R2_Score         : Train 0.3144, Val 0.2973, Test 0.2940
          RMSE             : Train 151.4540, Val 154.9866, Test 154.0952
Best:
          R2_Score         : Train 0.3145, Val 0.3145, Test 0.3138
          RMSE             : Train 151.4445, Val 153.0838, Test 151.9206
Epoch 76: Loss:            : Train 0.0233, Val 0.0238, Test 0.0235
          R2_Score         : Train 0.3185, Val 0.3095, Test 0.3141
          RMSE             : Train 150.9965, Val 153.6348, Test 151.8796
Best:
          R2_Score         : Train 0.3145, Val 0.3145, Test 0.3138
          RMSE             : Train 151.4445, Val 153.0838, Test 151.9206
Epoch 77: Loss:            : Train 0.0232, Val 0.0239, Test 0.0238
          R2_Score         : Train 0.3216, Val 0.3046, Test 0.3060
          RMSE             : Train 150.6582, Val 154.1893, Test 152.7742
Best:
          R2_Score         : Train 0.3145, Val 0.3145, Test 0.3138
          RMSE             : Train 151.4445, Val 153.0838, Test 151.9206
Epoch 78: Loss:            : Train 0.0231, Val 0.0241, Test 0.0235
          R2_Score         : Train 0.3212, Val 0.3157, Test 0.3151
          RMSE             : Train 150.7026, Val 152.9531, Test 151.7738
Best:
          R2_Score         : Train 0.3212, Val 0.3157, Test 0.3151
          RMSE             : Train 150.7026, Val 152.9531, Test 151.7738
Epoch 79: Loss:            : Train 0.0231, Val 0.0240, Test 0.0237
          R2_Score         : Train 0.3247, Val 0.3035, Test 0.3100
          RMSE             : Train 150.3037, Val 154.3054, Test 152.3390
Best:
          R2_Score         : Train 0.3212, Val 0.3157, Test 0.3151
          RMSE             : Train 150.7026, Val 152.9531, Test 151.7738
Epoch 80: Loss:            : Train 0.0229, Val 0.0241, Test 0.0236
          R2_Score         : Train 0.3243, Val 0.3145, Test 0.3130
          RMSE             : Train 150.3495, Val 153.0794, Test 152.0078
Best:
          R2_Score         : Train 0.3212, Val 0.3157, Test 0.3151
          RMSE             : Train 150.7026, Val 152.9531, Test 151.7738
Epoch 81: Loss:            : Train 0.0231, Val 0.0238, Test 0.0234
          R2_Score         : Train 0.3228, Val 0.3143, Test 0.3188
          RMSE             : Train 150.5176, Val 153.1102, Test 151.3680
Best:
          R2_Score         : Train 0.3212, Val 0.3157, Test 0.3151
          RMSE             : Train 150.7026, Val 152.9531, Test 151.7738
Epoch 82: Loss:            : Train 0.0231, Val 0.0239, Test 0.0235
          R2_Score         : Train 0.3245, Val 0.3148, Test 0.3157
          RMSE             : Train 150.3282, Val 153.0541, Test 151.7016
Best:
          R2_Score         : Train 0.3212, Val 0.3157, Test 0.3151
          RMSE             : Train 150.7026, Val 152.9531, Test 151.7738
Epoch 83: Loss:            : Train 0.0230, Val 0.0238, Test 0.0232
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Epoch 84: Loss:            : Train 0.0231, Val 0.0238, Test 0.0233
          R2_Score         : Train 0.3248, Val 0.3209, Test 0.3226
          RMSE             : Train 150.2989, Val 152.3622, Test 150.9381
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Epoch 85: Loss:            : Train 0.0229, Val 0.0244, Test 0.0237
          R2_Score         : Train 0.3274, Val 0.3092, Test 0.3113
          RMSE             : Train 150.0087, Val 153.6741, Test 152.1898
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.23it/s]Train:  20%|██        | 5/25 [00:00<00:00, 23.39it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.39it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 31.26it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 33.10it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.01it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.01it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.47it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.79it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 29.03it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 34.54it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 37.10it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.37it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.59it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.22it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.03it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.60it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 34.28it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 37.00it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.87it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 32.98it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.58it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.77it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 30.87it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 35.18it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 37.75it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 38.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 22.69it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 27.97it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.46it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 18.77it/s]Train:  40%|████      | 10/25 [00:00<00:00, 24.19it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.00it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 22.73it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 17.31it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 28.71it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.10it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 19.39it/s]Train:  40%|████      | 10/25 [00:00<00:00, 23.39it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 24.97it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 24.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 18.66it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 25.42it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.32it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 20.40it/s]Train:  40%|████      | 10/25 [00:00<00:00, 25.28it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.04it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.76it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 20.50it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 36.29it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 39.53it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 38.18it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.14it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 17.55it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 19.57it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 21.56it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  4.70it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.54it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 17.19it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 37.11it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 23.01it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 20.70it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 22.01it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 24.52it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  5.61it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.89it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.45it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 43.76it/s]Train:  40%|████      | 10/25 [00:00<00:00, 29.11it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 26.45it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 23.64it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 26.10it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  6.65it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.97it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.77it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 44.49it/s]Train:  40%|████      | 10/25 [00:00<00:00, 30.34it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 26.92it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 26.35it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.05it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 12.40it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.67it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  7.06it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.67it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.96it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.23it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 30.02it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 13.12it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.48it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  7.47it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 23.11it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 28.09it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.24it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 31.02it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 63.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.09it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.35it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.44it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 22.25it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 28.22it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 30.96it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 31.45it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 20.77it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.93it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.54it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.15it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 30.20it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 32.82it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.73it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 22.13it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.02it/s]

Epoch 86: Loss:            : Train 0.0230, Val 0.0237, Test 0.0233
          R2_Score         : Train 0.3258, Val 0.3198, Test 0.3209
          RMSE             : Train 150.1822, Val 152.4855, Test 151.1312
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Epoch 87: Loss:            : Train 0.0229, Val 0.0241, Test 0.0235
          R2_Score         : Train 0.3300, Val 0.3191, Test 0.3160
          RMSE             : Train 149.7210, Val 152.5689, Test 151.6700
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Epoch 88: Loss:            : Train 0.0229, Val 0.0238, Test 0.0234
          R2_Score         : Train 0.3265, Val 0.3128, Test 0.3171
          RMSE             : Train 150.1077, Val 153.2682, Test 151.5526
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Epoch 89: Loss:            : Train 0.0228, Val 0.0239, Test 0.0234
          R2_Score         : Train 0.3291, Val 0.3138, Test 0.3169
          RMSE             : Train 149.8174, Val 153.1598, Test 151.5777
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Epoch 90: Loss:            : Train 0.0230, Val 0.0239, Test 0.0234
          R2_Score         : Train 0.3274, Val 0.3175, Test 0.3192
          RMSE             : Train 150.0061, Val 152.7507, Test 151.3230
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Epoch 91: Loss:            : Train 0.0229, Val 0.0242, Test 0.0236
          R2_Score         : Train 0.3276, Val 0.3114, Test 0.3120
          RMSE             : Train 149.9910, Val 153.4328, Test 152.1155
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Epoch 92: Loss:            : Train 0.0229, Val 0.0239, Test 0.0232
          R2_Score         : Train 0.3300, Val 0.3189, Test 0.3234
          RMSE             : Train 149.7166, Val 152.5857, Test 150.8558
Best:
          R2_Score         : Train 0.3282, Val 0.3233, Test 0.3254
          RMSE             : Train 149.9242, Val 152.0985, Test 150.6256
Epoch 93: Loss:            : Train 0.0229, Val 0.0235, Test 0.0230
          R2_Score         : Train 0.3298, Val 0.3278, Test 0.3290
          RMSE             : Train 149.7454, Val 151.5870, Test 150.2206
Best:
          R2_Score         : Train 0.3298, Val 0.3278, Test 0.3290
          RMSE             : Train 149.7454, Val 151.5870, Test 150.2206
Epoch 94: Loss:            : Train 0.0228, Val 0.0237, Test 0.0235
          R2_Score         : Train 0.3321, Val 0.3134, Test 0.3139
          RMSE             : Train 149.4804, Val 153.2045, Test 151.9081
Best:
          R2_Score         : Train 0.3298, Val 0.3278, Test 0.3290
          RMSE             : Train 149.7454, Val 151.5870, Test 150.2206
Epoch 95: Loss:            : Train 0.0229, Val 0.0237, Test 0.0233
          R2_Score         : Train 0.3311, Val 0.3234, Test 0.3227
          RMSE             : Train 149.5943, Val 152.0891, Test 150.9312
Best:
          R2_Score         : Train 0.3298, Val 0.3278, Test 0.3290
          RMSE             : Train 149.7454, Val 151.5870, Test 150.2206
Epoch 96: Loss:            : Train 0.0230, Val 0.0241, Test 0.0234
          R2_Score         : Train 0.3324, Val 0.3224, Test 0.3198
          RMSE             : Train 149.4542, Val 152.2013, Test 151.2481
Best:
          R2_Score         : Train 0.3298, Val 0.3278, Test 0.3290
          RMSE             : Train 149.7454, Val 151.5870, Test 150.2206
Epoch 97: Loss:            : Train 0.0227, Val 0.0237, Test 0.0231
          R2_Score         : Train 0.3341, Val 0.3276, Test 0.3279
          RMSE             : Train 149.2610, Val 151.6126, Test 150.3488
Best:
          R2_Score         : Train 0.3298, Val 0.3278, Test 0.3290
          RMSE             : Train 149.7454, Val 151.5870, Test 150.2206
Epoch 98: Loss:            : Train 0.0227, Val 0.0235, Test 0.0231
          R2_Score         : Train 0.3349, Val 0.3251, Test 0.3271
          RMSE             : Train 149.1717, Val 151.8921, Test 150.4353
Best:
          R2_Score         : Train 0.3298, Val 0.3278, Test 0.3290
          RMSE             : Train 149.7454, Val 151.5870, Test 150.2206
Epoch 99: Loss:            : Train 0.0227, Val 0.0242, Test 0.0234
          R2_Score         : Train 0.3351, Val 0.3154, Test 0.3191
          RMSE             : Train 149.1462, Val 152.9829, Test 151.3347
Best:
          R2_Score         : Train 0.3298, Val 0.3278, Test 0.3290
          RMSE             : Train 149.7454, Val 151.5870, Test 150.2206
Epoch 100: Loss:            : Train 0.0226, Val 0.0239, Test 0.0232
          R2_Score         : Train 0.3364, Val 0.3223, Test 0.3243
          RMSE             : Train 149.0015, Val 152.2043, Test 150.7559
Best:
          R2_Score         : Train 0.3298, Val 0.3278, Test 0.3290
          RMSE             : Train 149.7454, Val 151.5870, Test 150.2206
