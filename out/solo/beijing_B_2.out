  0%|          | 0/98735 [00:00<?, ?it/s]  6%|▌         | 5633/98735 [00:00<00:01, 56324.28it/s] 11%|█▏        | 11266/98735 [00:00<00:02, 34735.17it/s] 18%|█▊        | 17520/98735 [00:00<00:01, 44223.59it/s] 26%|██▌       | 25493/98735 [00:00<00:01, 55858.81it/s] 34%|███▍      | 33481/98735 [00:00<00:01, 63518.09it/s] 41%|████      | 40306/98735 [00:00<00:00, 62038.59it/s] 49%|████▉     | 48170/98735 [00:00<00:00, 67001.82it/s] 57%|█████▋    | 56154/98735 [00:00<00:00, 70842.64it/s] 65%|██████▍   | 63778/98735 [00:01<00:00, 72458.92it/s] 72%|███████▏  | 71412/98735 [00:01<00:00, 73620.72it/s] 80%|████████  | 79389/98735 [00:01<00:00, 75463.17it/s] 89%|████████▊ | 87429/98735 [00:01<00:00, 76942.29it/s] 97%|█████████▋| 95485/98735 [00:01<00:00, 78025.70it/s]100%|██████████| 98735/98735 [00:01<00:00, 67553.96it/s]
  0%|          | 0/14105 [00:00<?, ?it/s] 57%|█████▋    | 7985/14105 [00:00<00:00, 79842.08it/s]100%|██████████| 14105/14105 [00:00<00:00, 79411.66it/s]
  0%|          | 0/28210 [00:00<?, ?it/s] 28%|██▊       | 7787/28210 [00:00<00:00, 77868.22it/s] 56%|█████▌    | 15833/28210 [00:00<00:00, 79389.82it/s] 85%|████████▍ | 23914/28210 [00:00<00:00, 80027.95it/s]100%|██████████| 28210/28210 [00:00<00:00, 79614.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  7.61it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.95it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.61it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.77it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.47it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 30.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  7.41it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.04it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.04it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 18.85it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.09it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 30.14it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.55it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 24.86it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.67it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.09it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.05it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.54it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 29.82it/s]Train:  40%|████      | 10/25 [00:00<00:00, 28.81it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.29it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 27.18it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 32.32it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.28it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.64it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.57it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 26.44it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 26.94it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 26.08it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.54it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 29.72it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 16.20it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 13.49it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.58it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.02it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 27.83it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 23.61it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 25.00it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 27.75it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 32.63it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.26it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00,  9.73it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 18.33it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.91it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.46it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.14it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.15it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 19.57it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 21.22it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 21.92it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 29.72it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 37.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 28.74it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 45.23it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 26.66it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 27.64it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 34.12it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 30.51it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 23.78it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.17it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 30.93it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 41.55it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.68it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 12.99it/s]Train:  32%|███▏      | 8/25 [00:00<00:01, 15.97it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 18.79it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 24.75it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 20.57it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  7.96it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 13.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 18.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.14it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 12.27it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.76it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 21.08it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 14.58it/s]Train:  72%|███████▏  | 18/25 [00:01<00:00, 16.72it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 15.09it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 18.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 13.61it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 19.24it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.83it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 13.65it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.23it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 29.25it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.39it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 21.00it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 15.11it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 20.19it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.73it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 18.14it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 26.02it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 20.06it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 22.05it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 17.84it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 17.22it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 17.31it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 21.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 18.27it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.39it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 29.18it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 15.62it/s]Train:  40%|████      | 10/25 [00:00<00:00, 17.56it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 20.98it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.14it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 23.47it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 15.55it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 31.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.68it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 37.31it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 32.46it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 28.09it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 25.84it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 29.57it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 26.79it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.08it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 32.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.04it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 27.75it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 32.36it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 29.10it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.47it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 27.36it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.49it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 31.73it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.05it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 37.21it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 31.14it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 30.41it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 33.15it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 33.66it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.22it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  7.84it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.98it/s]Loading house from data/beijing/house_clean.csv
Loading airbnb from data/beijing/airbnb_clean.csv
Current house columns Index(['cid', 'DOM', 'followers', 'square', 'livingRoom', 'drawingRoom',
       'kitchen', 'bathRoom', 'floor', 'constructionTime', 'ladderRatio',
       'elevator', 'fiveYearsProperty', 'subway', 'did_2', 'did_3', 'did_4',
       'did_5', 'did_6', 'did_7', 'did_8', 'did_9', 'did_10', 'did_11',
       'did_12', 'did_13', 'bt_2', 'bt_3', 'bt_4', 'rc_2', 'rc_3', 'rc_4',
       'bs_2', 'bs_3', 'bs_4', 'bs_5', 'bs_6', 'ty_2014', 'ty_2015', 'ty_2016',
       'ty_2017', 'ty_2018', 'tm_2', 'tm_3', 'tm_4', 'tm_5', 'tm_6', 'tm_7',
       'tm_8', 'tm_9', 'tm_10', 'tm_11', 'tm_12', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'price', 'minimum_nights', 'number_of_reviews',
       'reviews_per_month', 'calculated_host_listings_count',
       'availability_365', 'nbr_丰台区 ', 'nbr_大兴区 ', 'nbr_密云县 ', 'nbr_平谷区 ',
       'nbr_延庆县 ', 'nbr_怀柔区 ', 'nbr_房山区', 'nbr_昌平区', 'nbr_朝阳区 ', 'nbr_海淀区',
       'nbr_石景山区', 'nbr_西城区', 'nbr_通州区 ', 'nbr_门头沟区 ', 'nbr_顺义区 ',
       'rt_Private room', 'rt_Shared room'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 25 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0    [23, 400]  [4096, 400]    9600       9200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           90001
Trainable params       90001
Non-trainable params       0
Mult-Adds              89400
=================================================================
n_classes=2
task=regression
model_name=beijing_B_2022-05-21-21-23-18
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/beijing_B_2022-05-21-21-23-18.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7ff07674e730>, <metric.rmse.RMSE object at 0x7ff07674e760>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=23, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7ff07674e6d0>
Epoch 1: Loss:            : Train 0.0373, Val 0.0314, Test 0.0319
          R2_Score         : Train -0.0979, Val 0.0629, Test 0.0653
          RMSE             : Train 191.6546, Val 178.9826, Test 177.3027
Best:
          R2_Score         : Train -0.0979, Val 0.0629, Test 0.0653
          RMSE             : Train 191.6546, Val 178.9826, Test 177.3027
Epoch 2: Loss:            : Train 0.0304, Val 0.0300, Test 0.0298
          R2_Score         : Train 0.1079, Val 0.1287, Test 0.1292
          RMSE             : Train 172.7624, Val 172.5894, Test 171.1351
Best:
          R2_Score         : Train 0.1079, Val 0.1287, Test 0.1292
          RMSE             : Train 172.7624, Val 172.5894, Test 171.1351
Epoch 3: Loss:            : Train 0.0295, Val 0.0296, Test 0.0294
          R2_Score         : Train 0.1351, Val 0.1414, Test 0.1411
          RMSE             : Train 170.1025, Val 171.3244, Test 169.9674
Best:
          R2_Score         : Train 0.1351, Val 0.1414, Test 0.1411
          RMSE             : Train 170.1025, Val 171.3244, Test 169.9674
Epoch 4: Loss:            : Train 0.0292, Val 0.0293, Test 0.0291
          R2_Score         : Train 0.1477, Val 0.1502, Test 0.1506
          RMSE             : Train 168.8614, Val 170.4449, Test 169.0200
Best:
          R2_Score         : Train 0.1477, Val 0.1502, Test 0.1506
          RMSE             : Train 168.8614, Val 170.4449, Test 169.0200
Epoch 5: Loss:            : Train 0.0288, Val 0.0292, Test 0.0289
          R2_Score         : Train 0.1566, Val 0.1588, Test 0.1576
          RMSE             : Train 167.9783, Val 169.5795, Test 168.3235
Best:
          R2_Score         : Train 0.1566, Val 0.1588, Test 0.1576
          RMSE             : Train 167.9783, Val 169.5795, Test 168.3235
Epoch 6: Loss:            : Train 0.0285, Val 0.0288, Test 0.0286
          R2_Score         : Train 0.1646, Val 0.1656, Test 0.1656
          RMSE             : Train 167.1783, Val 168.8893, Test 167.5178
Best:
          R2_Score         : Train 0.1646, Val 0.1656, Test 0.1656
          RMSE             : Train 167.1783, Val 168.8893, Test 167.5178
Epoch 7: Loss:            : Train 0.0283, Val 0.0285, Test 0.0284
          R2_Score         : Train 0.1710, Val 0.1721, Test 0.1718
          RMSE             : Train 166.5388, Val 168.2324, Test 166.8924
Best:
          R2_Score         : Train 0.1710, Val 0.1721, Test 0.1718
          RMSE             : Train 166.5388, Val 168.2324, Test 166.8924
Epoch 8: Loss:            : Train 0.0280, Val 0.0282, Test 0.0281
          R2_Score         : Train 0.1783, Val 0.1810, Test 0.1797
          RMSE             : Train 165.8035, Val 167.3238, Test 166.0947
Best:
          R2_Score         : Train 0.1783, Val 0.1810, Test 0.1797
          RMSE             : Train 165.8035, Val 167.3238, Test 166.0947
Epoch 9: Loss:            : Train 0.0277, Val 0.0283, Test 0.0280
          R2_Score         : Train 0.1850, Val 0.1857, Test 0.1834
          RMSE             : Train 165.1230, Val 166.8444, Test 165.7227
Best:
          R2_Score         : Train 0.1850, Val 0.1857, Test 0.1834
          RMSE             : Train 165.1230, Val 166.8444, Test 165.7227
Epoch 10: Loss:            : Train 0.0276, Val 0.0279, Test 0.0277
          R2_Score         : Train 0.1907, Val 0.1937, Test 0.1916
          RMSE             : Train 164.5430, Val 166.0259, Test 164.8914
Best:
          R2_Score         : Train 0.1907, Val 0.1937, Test 0.1916
          RMSE             : Train 164.5430, Val 166.0259, Test 164.8914
Epoch 11: Loss:            : Train 0.0274, Val 0.0278, Test 0.0276
          R2_Score         : Train 0.1970, Val 0.1967, Test 0.1962
          RMSE             : Train 163.9094, Val 165.7119, Test 164.4254
Best:
          R2_Score         : Train 0.1970, Val 0.1967, Test 0.1962
          RMSE             : Train 163.9094, Val 165.7119, Test 164.4254
Epoch 12: Loss:            : Train 0.0273, Val 0.0275, Test 0.0273
          R2_Score         : Train 0.2021, Val 0.2038, Test 0.2034
          RMSE             : Train 163.3811, Val 164.9789, Test 163.6866
Best:
          R2_Score         : Train 0.2021, Val 0.2038, Test 0.2034
          RMSE             : Train 163.3811, Val 164.9789, Test 163.6866
Epoch 13: Loss:            : Train 0.0272, Val 0.0278, Test 0.0273
          R2_Score         : Train 0.2075, Val 0.2068, Test 0.2044
          RMSE             : Train 162.8331, Val 164.6657, Test 163.5781
Best:
          R2_Score         : Train 0.2075, Val 0.2068, Test 0.2044
          RMSE             : Train 162.8331, Val 164.6657, Test 163.5781
Epoch 14: Loss:            : Train 0.0270, Val 0.0272, Test 0.0270
          R2_Score         : Train 0.2113, Val 0.2136, Test 0.2125
          RMSE             : Train 162.4357, Val 163.9661, Test 162.7443
Best:
          R2_Score         : Train 0.2113, Val 0.2136, Test 0.2125
          RMSE             : Train 162.4357, Val 163.9661, Test 162.7443
Epoch 15: Loss:            : Train 0.0267, Val 0.0272, Test 0.0269
          R2_Score         : Train 0.2160, Val 0.2171, Test 0.2167
          RMSE             : Train 161.9504, Val 163.5998, Test 162.3070
Best:
          R2_Score         : Train 0.2160, Val 0.2171, Test 0.2167
          RMSE             : Train 161.9504, Val 163.5998, Test 162.3070
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 41.66it/s]Train:  40%|████      | 10/25 [00:00<00:00, 36.72it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.97it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 33.93it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 32.95it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.78it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.84it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.21it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.05it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.40it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 34.07it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 30.17it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 31.33it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 30.05it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 59.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.33it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 39.48it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.03it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 29.69it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 29.05it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.55it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.56it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 32.17it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 87.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.29it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.11it/s]Train:  20%|██        | 5/25 [00:00<00:00, 23.55it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 18.98it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.71it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.23it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 25.52it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 24.89it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 22.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.53it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.12it/s]Train:  20%|██        | 5/25 [00:00<00:00, 21.53it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.60it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.99it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.89it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 24.95it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.95it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.47it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 41.78it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.54it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 30.56it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 29.09it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 29.80it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 31.77it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.95it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.81it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.61it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 29.17it/s]Train:  40%|████      | 10/25 [00:00<00:00, 26.20it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 24.35it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 22.94it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 25.96it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.26it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.15it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.81it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.38it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 32.27it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 27.92it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 26.16it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.53it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.96it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.69it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 26.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.16it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.11it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.33it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 28.99it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 33.75it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 29.44it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.14it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 29.41it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.83it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 17.68it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 27.52it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 23.72it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 20.85it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 20.72it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 19.63it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 21.59it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 29.77it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.62it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 22.68it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 34.84it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 30.08it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.32it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 25.78it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 24.79it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 31.99it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.45it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 25.55it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 35.76it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 29.67it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.41it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 25.53it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 20.05it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 31.36it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.94it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 28.60it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.30it/s]Train:  40%|████      | 10/25 [00:00<00:00, 24.14it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 31.60it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 29.06it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 26.71it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 12.68it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 38.99it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.26it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 35.13it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 27.03it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 16.90it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 21.18it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 19.17it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 21.99it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.79it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.02it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.72it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 28.51it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 21.10it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 21.71it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 25.96it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 24.02it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 25.54it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  5.57it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 24.90it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.47it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.38it/s]Train:  20%|██        | 5/25 [00:00<00:00, 24.15it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.99it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.02it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.74it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 31.36it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.67it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 33.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.51it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.76it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.89it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 37.75it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 26.89it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.63it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.49it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.34it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.64it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.59it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.59it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.55it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.30it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 28.69it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.90it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 25.69it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 10.02it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.52it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.90it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.97it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.65it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 21.81it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 21.81it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.24it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 27.13it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.43it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 20.87it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.73it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:06,  3.95it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.55it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 19.92it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 21.98it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.09it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 29.06it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 38.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 18.62it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.01it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.44it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 18.39it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 18.82it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 20.32it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.57it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.18it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.47it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 18.47it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.54it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 10.11it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.60it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.26it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 21.05it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 22.78it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 19.08it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 25.18it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.16it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 19.29it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.70it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.31it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.69it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 20.22it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 25.44it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 22.05it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 21.73it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 28.07it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.85it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 27.77it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.02it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.09it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.86it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 29.04it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 33.46it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 26.09it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.67it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 21.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 35.05it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 41.49it/s]
Epoch 16: Loss:            : Train 0.0266, Val 0.0270, Test 0.0266
          R2_Score         : Train 0.2215, Val 0.2232, Test 0.2234
          RMSE             : Train 161.3861, Val 162.9578, Test 161.6129
Best:
          R2_Score         : Train 0.2215, Val 0.2232, Test 0.2234
          RMSE             : Train 161.3861, Val 162.9578, Test 161.6129
Epoch 17: Loss:            : Train 0.0263, Val 0.0268, Test 0.0266
          R2_Score         : Train 0.2254, Val 0.2230, Test 0.2241
          RMSE             : Train 160.9810, Val 162.9814, Test 161.5450
Best:
          R2_Score         : Train 0.2215, Val 0.2232, Test 0.2234
          RMSE             : Train 161.3861, Val 162.9578, Test 161.6129
Epoch 18: Loss:            : Train 0.0263, Val 0.0269, Test 0.0266
          R2_Score         : Train 0.2282, Val 0.2246, Test 0.2256
          RMSE             : Train 160.6937, Val 162.8123, Test 161.3882
Best:
          R2_Score         : Train 0.2282, Val 0.2246, Test 0.2256
          RMSE             : Train 160.6937, Val 162.8123, Test 161.3882
Epoch 19: Loss:            : Train 0.0262, Val 0.0268, Test 0.0264
          R2_Score         : Train 0.2307, Val 0.2294, Test 0.2306
          RMSE             : Train 160.4283, Val 162.3095, Test 160.8685
Best:
          R2_Score         : Train 0.2307, Val 0.2294, Test 0.2306
          RMSE             : Train 160.4283, Val 162.3095, Test 160.8685
Epoch 20: Loss:            : Train 0.0261, Val 0.0266, Test 0.0264
          R2_Score         : Train 0.2352, Val 0.2273, Test 0.2303
          RMSE             : Train 159.9585, Val 162.5244, Test 160.8929
Best:
          R2_Score         : Train 0.2307, Val 0.2294, Test 0.2306
          RMSE             : Train 160.4283, Val 162.3095, Test 160.8685
Epoch 21: Loss:            : Train 0.0262, Val 0.0268, Test 0.0263
          R2_Score         : Train 0.2343, Val 0.2359, Test 0.2345
          RMSE             : Train 160.0501, Val 161.6214, Test 160.4519
Best:
          R2_Score         : Train 0.2343, Val 0.2359, Test 0.2345
          RMSE             : Train 160.0501, Val 161.6214, Test 160.4519
Epoch 22: Loss:            : Train 0.0258, Val 0.0265, Test 0.0260
          R2_Score         : Train 0.2412, Val 0.2416, Test 0.2421
          RMSE             : Train 159.3274, Val 161.0163, Test 159.6542
Best:
          R2_Score         : Train 0.2412, Val 0.2416, Test 0.2421
          RMSE             : Train 159.3274, Val 161.0163, Test 159.6542
Epoch 23: Loss:            : Train 0.0258, Val 0.0262, Test 0.0261
          R2_Score         : Train 0.2433, Val 0.2374, Test 0.2390
          RMSE             : Train 159.1062, Val 161.4591, Test 159.9783
Best:
          R2_Score         : Train 0.2412, Val 0.2416, Test 0.2421
          RMSE             : Train 159.3274, Val 161.0163, Test 159.6542
Epoch 24: Loss:            : Train 0.0259, Val 0.0262, Test 0.0258
          R2_Score         : Train 0.2456, Val 0.2452, Test 0.2476
          RMSE             : Train 158.8638, Val 160.6367, Test 159.0726
Best:
          R2_Score         : Train 0.2456, Val 0.2452, Test 0.2476
          RMSE             : Train 158.8638, Val 160.6367, Test 159.0726
Epoch 25: Loss:            : Train 0.0257, Val 0.0263, Test 0.0259
          R2_Score         : Train 0.2496, Val 0.2454, Test 0.2465
          RMSE             : Train 158.4417, Val 160.6181, Test 159.1952
Best:
          R2_Score         : Train 0.2496, Val 0.2454, Test 0.2465
          RMSE             : Train 158.4417, Val 160.6181, Test 159.1952
Epoch 26: Loss:            : Train 0.0256, Val 0.0261, Test 0.0257
          R2_Score         : Train 0.2524, Val 0.2499, Test 0.2503
          RMSE             : Train 158.1463, Val 160.1320, Test 158.7867
Best:
          R2_Score         : Train 0.2524, Val 0.2499, Test 0.2503
          RMSE             : Train 158.1463, Val 160.1320, Test 158.7867
Epoch 27: Loss:            : Train 0.0255, Val 0.0261, Test 0.0256
          R2_Score         : Train 0.2546, Val 0.2537, Test 0.2551
          RMSE             : Train 157.9222, Val 159.7253, Test 158.2855
Best:
          R2_Score         : Train 0.2546, Val 0.2537, Test 0.2551
          RMSE             : Train 157.9222, Val 159.7253, Test 158.2855
Epoch 28: Loss:            : Train 0.0256, Val 0.0259, Test 0.0254
          R2_Score         : Train 0.2571, Val 0.2569, Test 0.2594
          RMSE             : Train 157.6531, Val 159.3876, Test 157.8290
Best:
          R2_Score         : Train 0.2571, Val 0.2569, Test 0.2594
          RMSE             : Train 157.6531, Val 159.3876, Test 157.8290
Epoch 29: Loss:            : Train 0.0253, Val 0.0258, Test 0.0255
          R2_Score         : Train 0.2581, Val 0.2539, Test 0.2553
          RMSE             : Train 157.5449, Val 159.7015, Test 158.2582
Best:
          R2_Score         : Train 0.2571, Val 0.2569, Test 0.2594
          RMSE             : Train 157.6531, Val 159.3876, Test 157.8290
Epoch 30: Loss:            : Train 0.0252, Val 0.0259, Test 0.0255
          R2_Score         : Train 0.2620, Val 0.2540, Test 0.2576
          RMSE             : Train 157.1281, Val 159.6991, Test 158.0173
Best:
          R2_Score         : Train 0.2571, Val 0.2569, Test 0.2594
          RMSE             : Train 157.6531, Val 159.3876, Test 157.8290
Epoch 31: Loss:            : Train 0.0252, Val 0.0258, Test 0.0253
          R2_Score         : Train 0.2626, Val 0.2624, Test 0.2626
          RMSE             : Train 157.0677, Val 158.7925, Test 157.4851
Best:
          R2_Score         : Train 0.2626, Val 0.2624, Test 0.2626
          RMSE             : Train 157.0677, Val 158.7925, Test 157.4851
Epoch 32: Loss:            : Train 0.0252, Val 0.0257, Test 0.0252
          R2_Score         : Train 0.2636, Val 0.2636, Test 0.2651
          RMSE             : Train 156.9586, Val 158.6629, Test 157.2155
Best:
          R2_Score         : Train 0.2636, Val 0.2636, Test 0.2651
          RMSE             : Train 156.9586, Val 158.6629, Test 157.2155
Epoch 33: Loss:            : Train 0.0249, Val 0.0258, Test 0.0252
          R2_Score         : Train 0.2688, Val 0.2649, Test 0.2664
          RMSE             : Train 156.4046, Val 158.5235, Test 157.0719
Best:
          R2_Score         : Train 0.2688, Val 0.2649, Test 0.2664
          RMSE             : Train 156.4046, Val 158.5235, Test 157.0719
Epoch 34: Loss:            : Train 0.0250, Val 0.0258, Test 0.0253
          R2_Score         : Train 0.2704, Val 0.2638, Test 0.2645
          RMSE             : Train 156.2389, Val 158.6422, Test 157.2829
Best:
          R2_Score         : Train 0.2688, Val 0.2649, Test 0.2664
          RMSE             : Train 156.4046, Val 158.5235, Test 157.0719
Epoch 35: Loss:            : Train 0.0249, Val 0.0256, Test 0.0251
          R2_Score         : Train 0.2709, Val 0.2662, Test 0.2673
          RMSE             : Train 156.1808, Val 158.3876, Test 156.9804
Best:
          R2_Score         : Train 0.2709, Val 0.2662, Test 0.2673
          RMSE             : Train 156.1808, Val 158.3876, Test 156.9804
Epoch 36: Loss:            : Train 0.0248, Val 0.0258, Test 0.0251
          R2_Score         : Train 0.2728, Val 0.2637, Test 0.2682
          RMSE             : Train 155.9797, Val 158.6572, Test 156.8886
Best:
          R2_Score         : Train 0.2709, Val 0.2662, Test 0.2673
          RMSE             : Train 156.1808, Val 158.3876, Test 156.9804
Epoch 37: Loss:            : Train 0.0247, Val 0.0256, Test 0.0252
          R2_Score         : Train 0.2766, Val 0.2615, Test 0.2661
          RMSE             : Train 155.5673, Val 158.8917, Test 157.1122
Best:
          R2_Score         : Train 0.2709, Val 0.2662, Test 0.2673
          RMSE             : Train 156.1808, Val 158.3876, Test 156.9804
Epoch 38: Loss:            : Train 0.0248, Val 0.0254, Test 0.0248
          R2_Score         : Train 0.2741, Val 0.2733, Test 0.2772
          RMSE             : Train 155.8399, Val 157.6145, Test 155.9154
Best:
          R2_Score         : Train 0.2741, Val 0.2733, Test 0.2772
          RMSE             : Train 155.8399, Val 157.6145, Test 155.9154
Epoch 39: Loss:            : Train 0.0246, Val 0.0253, Test 0.0251
          R2_Score         : Train 0.2780, Val 0.2644, Test 0.2670
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 19.75it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 34.08it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.60it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.59it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 22.17it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 21.01it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.96it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 23.53it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.03it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 24.30it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.50it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 26.90it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 20.94it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 22.26it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 21.90it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 14.07it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.38it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.23it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.29it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 32.40it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 28.36it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.55it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.61it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 28.10it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 15.61it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 24.27it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.76it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 27.32it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.80it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.31it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 29.56it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.91it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.51it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 24.06it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 39.88it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.82it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.83it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 19.46it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.27it/s]Train:  40%|████      | 10/25 [00:00<00:00, 17.02it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 21.53it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 19.40it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 20.82it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 20.73it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.96it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 41.01it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.44it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 37.75it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.97it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 20.36it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 23.59it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 26.58it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 24.59it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.80it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 37.43it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.84it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 30.39it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.70it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.43it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.50it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.20it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 22.69it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.93it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.61it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.51it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 38.66it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.38it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 21.49it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 18.99it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 19.62it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 19.81it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 18.87it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 39.65it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 39.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.83it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 17.47it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.33it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 18.55it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.40it/s]Train:  20%|██        | 5/25 [00:00<00:00, 24.64it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.57it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 20.52it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 19.96it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 22.22it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.26it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.57it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  9.50it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.80it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  7.83it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 26.08it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 25.79it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.68it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 29.75it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.05it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 22.82it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.66it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.79it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 26.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.38it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.34it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 21.28it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 29.26it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 24.22it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 21.91it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 22.92it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.95it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 11.64it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.40it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.64it/s]Train:  20%|██        | 5/25 [00:00<00:01, 19.75it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.62it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.29it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 25.98it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.14it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 28.01it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 46.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 14.34it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.65it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 11.46it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 20.51it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 20.45it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.11it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.41it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.06it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.68it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.06it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.12it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 10.51it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.59it/s]Train:  40%|████      | 10/25 [00:00<00:00, 22.11it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 22.68it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 24.79it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 29.39it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  7.82it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 14.47it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.57it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 11.37it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.87it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 19.82it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 23.29it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.53it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 24.08it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 27.97it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.64it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.33it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.59it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 17.08it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 26.87it/s]Train:  40%|████      | 10/25 [00:00<00:00, 19.30it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 20.68it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 21.73it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 22.12it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.36it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 26.27it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.87it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.94it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 33.94it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 28.30it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.83it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 27.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 16.08it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 26.64it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.18it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.75it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 15.48it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.14it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 20.21it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 21.06it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 19.69it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 21.12it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.24it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 38.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.76it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.06it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 12.93it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 19.66it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.00it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 16.92it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 20.82it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 20.99it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 20.26it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 34.66it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 41.01it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.31it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 14.51it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.92it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 17.72it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 16.62it/s]Train:  76%|███████▌  | 19/25 [00:01<00:00, 19.48it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 19.87it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.51it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 41.33it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 44.56it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 16.10it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 20.87it/s]Train:  40%|████      | 10/25 [00:00<00:01, 14.59it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 15.60it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 18.22it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 22.53it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 21.72it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 36.93it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 36.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 27.74it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 15.98it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 17.23it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.36it/s]Train:  20%|██        | 5/25 [00:00<00:01, 15.33it/s]Train:  40%|████      | 10/25 [00:00<00:00, 26.21it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.79it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.24it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.10it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.98it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  8.02it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 18.45it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 14.56it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 16.44it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 36.31it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.52it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 23.71it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.96it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 30.41it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.30it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  4.82it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.03it/s]
          RMSE             : Train 155.4217, Val 158.5758, Test 157.0127
Best:
          R2_Score         : Train 0.2741, Val 0.2733, Test 0.2772
          RMSE             : Train 155.8399, Val 157.6145, Test 155.9154
Epoch 40: Loss:            : Train 0.0248, Val 0.0263, Test 0.0252
          R2_Score         : Train 0.2763, Val 0.2669, Test 0.2670
          RMSE             : Train 155.6030, Val 158.3116, Test 157.0148
Best:
          R2_Score         : Train 0.2741, Val 0.2733, Test 0.2772
          RMSE             : Train 155.8399, Val 157.6145, Test 155.9154
Epoch 41: Loss:            : Train 0.0246, Val 0.0259, Test 0.0250
          R2_Score         : Train 0.2793, Val 0.2683, Test 0.2715
          RMSE             : Train 155.2749, Val 158.1536, Test 156.5334
Best:
          R2_Score         : Train 0.2741, Val 0.2733, Test 0.2772
          RMSE             : Train 155.8399, Val 157.6145, Test 155.9154
Epoch 42: Loss:            : Train 0.0244, Val 0.0250, Test 0.0247
          R2_Score         : Train 0.2822, Val 0.2773, Test 0.2803
          RMSE             : Train 154.9666, Val 157.1767, Test 155.5760
Best:
          R2_Score         : Train 0.2822, Val 0.2773, Test 0.2803
          RMSE             : Train 154.9666, Val 157.1767, Test 155.5760
Epoch 43: Loss:            : Train 0.0244, Val 0.0251, Test 0.0246
          R2_Score         : Train 0.2836, Val 0.2796, Test 0.2822
          RMSE             : Train 154.8109, Val 156.9361, Test 155.3766
Best:
          R2_Score         : Train 0.2836, Val 0.2796, Test 0.2822
          RMSE             : Train 154.8109, Val 156.9361, Test 155.3766
Epoch 44: Loss:            : Train 0.0244, Val 0.0252, Test 0.0247
          R2_Score         : Train 0.2842, Val 0.2763, Test 0.2801
          RMSE             : Train 154.7478, Val 157.2950, Test 155.6036
Best:
          R2_Score         : Train 0.2836, Val 0.2796, Test 0.2822
          RMSE             : Train 154.8109, Val 156.9361, Test 155.3766
Epoch 45: Loss:            : Train 0.0242, Val 0.0253, Test 0.0247
          R2_Score         : Train 0.2875, Val 0.2795, Test 0.2802
          RMSE             : Train 154.3969, Val 156.9403, Test 155.5967
Best:
          R2_Score         : Train 0.2836, Val 0.2796, Test 0.2822
          RMSE             : Train 154.8109, Val 156.9361, Test 155.3766
Epoch 46: Loss:            : Train 0.0244, Val 0.0251, Test 0.0245
          R2_Score         : Train 0.2898, Val 0.2790, Test 0.2859
          RMSE             : Train 154.1417, Val 157.0017, Test 154.9776
Best:
          R2_Score         : Train 0.2836, Val 0.2796, Test 0.2822
          RMSE             : Train 154.8109, Val 156.9361, Test 155.3766
Epoch 47: Loss:            : Train 0.0244, Val 0.0253, Test 0.0245
          R2_Score         : Train 0.2871, Val 0.2799, Test 0.2856
          RMSE             : Train 154.4368, Val 156.9023, Test 155.0032
Best:
          R2_Score         : Train 0.2871, Val 0.2799, Test 0.2856
          RMSE             : Train 154.4368, Val 156.9023, Test 155.0032
Epoch 48: Loss:            : Train 0.0244, Val 0.0251, Test 0.0246
          R2_Score         : Train 0.2842, Val 0.2790, Test 0.2828
          RMSE             : Train 154.7473, Val 156.9919, Test 155.3089
Best:
          R2_Score         : Train 0.2871, Val 0.2799, Test 0.2856
          RMSE             : Train 154.4368, Val 156.9023, Test 155.0032
Epoch 49: Loss:            : Train 0.0243, Val 0.0249, Test 0.0244
          R2_Score         : Train 0.2880, Val 0.2878, Test 0.2900
          RMSE             : Train 154.3357, Val 156.0331, Test 154.5277
Best:
          R2_Score         : Train 0.2880, Val 0.2878, Test 0.2900
          RMSE             : Train 154.3357, Val 156.0331, Test 154.5277
Epoch 50: Loss:            : Train 0.0242, Val 0.0246, Test 0.0242
          R2_Score         : Train 0.2933, Val 0.2907, Test 0.2952
          RMSE             : Train 153.7597, Val 155.7218, Test 153.9610
Best:
          R2_Score         : Train 0.2933, Val 0.2907, Test 0.2952
          RMSE             : Train 153.7597, Val 155.7218, Test 153.9610
Epoch 51: Loss:            : Train 0.0241, Val 0.0251, Test 0.0245
          R2_Score         : Train 0.2951, Val 0.2781, Test 0.2867
          RMSE             : Train 153.5640, Val 157.0953, Test 154.8901
Best:
          R2_Score         : Train 0.2933, Val 0.2907, Test 0.2952
          RMSE             : Train 153.7597, Val 155.7218, Test 153.9610
Epoch 52: Loss:            : Train 0.0241, Val 0.0249, Test 0.0246
          R2_Score         : Train 0.2958, Val 0.2738, Test 0.2830
          RMSE             : Train 153.4865, Val 157.5594, Test 155.2941
Best:
          R2_Score         : Train 0.2933, Val 0.2907, Test 0.2952
          RMSE             : Train 153.7597, Val 155.7218, Test 153.9610
Epoch 53: Loss:            : Train 0.0243, Val 0.0248, Test 0.0245
          R2_Score         : Train 0.2908, Val 0.2781, Test 0.2835
          RMSE             : Train 154.0369, Val 157.0907, Test 155.2378
Best:
          R2_Score         : Train 0.2933, Val 0.2907, Test 0.2952
          RMSE             : Train 153.7597, Val 155.7218, Test 153.9610
Epoch 54: Loss:            : Train 0.0239, Val 0.0249, Test 0.0243
          R2_Score         : Train 0.2958, Val 0.2857, Test 0.2913
          RMSE             : Train 153.4894, Val 156.2618, Test 154.3910
Best:
          R2_Score         : Train 0.2933, Val 0.2907, Test 0.2952
          RMSE             : Train 153.7597, Val 155.7218, Test 153.9610
Epoch 55: Loss:            : Train 0.0240, Val 0.0245, Test 0.0241
          R2_Score         : Train 0.2983, Val 0.2946, Test 0.2975
          RMSE             : Train 153.2152, Val 155.2887, Test 153.7151
Best:
          R2_Score         : Train 0.2983, Val 0.2946, Test 0.2975
          RMSE             : Train 153.2152, Val 155.2887, Test 153.7151
Epoch 56: Loss:            : Train 0.0240, Val 0.0248, Test 0.0241
          R2_Score         : Train 0.2987, Val 0.2964, Test 0.2984
          RMSE             : Train 153.1699, Val 155.0909, Test 153.6173
Best:
          R2_Score         : Train 0.2987, Val 0.2964, Test 0.2984
          RMSE             : Train 153.1699, Val 155.0909, Test 153.6173
Epoch 57: Loss:            : Train 0.0238, Val 0.0245, Test 0.0240
          R2_Score         : Train 0.3011, Val 0.2930, Test 0.2992
          RMSE             : Train 152.9161, Val 155.4634, Test 153.5270
Best:
          R2_Score         : Train 0.2987, Val 0.2964, Test 0.2984
          RMSE             : Train 153.1699, Val 155.0909, Test 153.6173
Epoch 58: Loss:            : Train 0.0239, Val 0.0251, Test 0.0243
          R2_Score         : Train 0.3021, Val 0.2906, Test 0.2919
          RMSE             : Train 152.8072, Val 155.7283, Test 154.3263
Best:
          R2_Score         : Train 0.2987, Val 0.2964, Test 0.2984
          RMSE             : Train 153.1699, Val 155.0909, Test 153.6173
Epoch 59: Loss:            : Train 0.0238, Val 0.0250, Test 0.0243
          R2_Score         : Train 0.3033, Val 0.2888, Test 0.2924
          RMSE             : Train 152.6697, Val 155.9254, Test 154.2685
Best:
          R2_Score         : Train 0.2987, Val 0.2964, Test 0.2984
          RMSE             : Train 153.1699, Val 155.0909, Test 153.6173
Epoch 60: Loss:            : Train 0.0238, Val 0.0247, Test 0.0240
          R2_Score         : Train 0.3013, Val 0.2942, Test 0.2997
          RMSE             : Train 152.8867, Val 155.3354, Test 153.4678
Best:
          R2_Score         : Train 0.2987, Val 0.2964, Test 0.2984
          RMSE             : Train 153.1699, Val 155.0909, Test 153.6173
Epoch 61: Loss:            : Train 0.0236, Val 0.0244, Test 0.0239
          R2_Score         : Train 0.3057, Val 0.2988, Test 0.3041
          RMSE             : Train 152.4048, Val 154.8204, Test 152.9874
Best:
          R2_Score         : Train 0.3057, Val 0.2988, Test 0.3041
          RMSE             : Train 152.4048, Val 154.8204, Test 152.9874
Epoch 62: Loss:            : Train 0.0238, Val 0.0244, Test 0.0239
          R2_Score         : Train 0.3047, Val 0.2986, Test 0.3024
          RMSE             : Train 152.5156, Val 154.8507, Test 153.1707

Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.28it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.19it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 24.42it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 28.03it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 24.14it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.44it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 25.16it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.74it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 29.80it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.10it/s]Train:  20%|██        | 5/25 [00:00<00:00, 21.03it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 21.80it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.34it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.71it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.79it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 23.80it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.39it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  5.64it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 18.75it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.31it/s]Train:  20%|██        | 5/25 [00:00<00:01, 18.10it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 17.49it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.47it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.01it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 23.10it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 17.59it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 19.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.03it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 10.62it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.82it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  4.97it/s]Train:  20%|██        | 5/25 [00:00<00:01, 19.13it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.24it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 18.71it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 18.79it/s]Train:  72%|███████▏  | 18/25 [00:01<00:00, 18.36it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 19.34it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 17.57it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 18.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 28.40it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 34.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.04it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.43it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.90it/s]Train:  20%|██        | 5/25 [00:00<00:00, 24.76it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.49it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 28.38it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.07it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 21.85it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.06it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 25.13it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.42it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 25.65it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.93it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.14it/s]Train:  20%|██        | 5/25 [00:00<00:00, 24.09it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.83it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.04it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 22.00it/s]Train:  76%|███████▌  | 19/25 [00:01<00:00, 16.83it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 20.41it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.01it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 19.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.64it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.24it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 17.30it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 20.92it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 17.96it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 20.91it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 26.15it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  8.72it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 15.29it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.16it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.33it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 29.89it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 27.00it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 23.80it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 22.46it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 27.94it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.81it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 17.16it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.35it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 11.09it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.94it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 21.72it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.37it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 24.39it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.09it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 24.87it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  7.15it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 34.91it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 39.50it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 17.10it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.29it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 27.49it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 30.60it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 27.98it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.35it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.85it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 39.56it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.52it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 32.01it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.04it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 22.13it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 25.04it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 23.37it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.70it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 31.84it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.77it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 22.61it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.82it/s]Train:  40%|████      | 10/25 [00:00<00:00, 18.31it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 21.10it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 19.47it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 20.84it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 21.65it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 24.12it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 34.45it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.65it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 22.46it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.49it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 25.18it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.24it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 24.88it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.12it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 12.83it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 35.77it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.98it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 22.86it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 20.81it/s]Train:  40%|████      | 10/25 [00:00<00:00, 23.29it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 29.96it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.29it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.74it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.96it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 32.83it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.92it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 37.69it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.41it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 17.65it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 20.05it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 20.99it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 20.19it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.14it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.73it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 29.35it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.64it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 23.37it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 18.91it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.15it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 21.67it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 21.80it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.34it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.52it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 24.24it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.06it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 25.86it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.84it/s]Train:  40%|████      | 10/25 [00:00<00:00, 25.82it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 24.62it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 26.37it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 30.06it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.59it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 56.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  8.47it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 27.88it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.69it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 17.46it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 17.67it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 19.09it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 19.12it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 23.58it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 22.84it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 22.92it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 16.83it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.06it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.47it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.25it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 14.59it/s]Train:  40%|████      | 10/25 [00:00<00:00, 20.75it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 20.15it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 21.12it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 19.83it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 22.35it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.29it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.14it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.92it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 18.42it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 20.00it/s]Train:  40%|████      | 10/25 [00:00<00:00, 22.99it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 21.42it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 26.02it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 22.64it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 22.07it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 38.88it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 38.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 11.73it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.67it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.97it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 17.08it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 15.14it/s]Train:  40%|████      | 10/25 [00:00<00:00, 18.74it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 18.41it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 19.45it/s]Train:  76%|███████▌  | 19/25 [00:01<00:00, 19.55it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 21.62it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 19.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 19.41it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.64it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.88it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.32it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 16.58it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 17.91it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 23.43it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 20.94it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.01it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 20.96it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 19.74it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 18.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 42.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 15.29it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.50it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.40it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 28.79it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 24.60it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 21.70it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.17it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 22.85it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 24.28it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.22it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 20.86it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.30it/s]Best:
          R2_Score         : Train 0.3057, Val 0.2988, Test 0.3041
          RMSE             : Train 152.4048, Val 154.8204, Test 152.9874
Epoch 63: Loss:            : Train 0.0236, Val 0.0247, Test 0.0240
          R2_Score         : Train 0.3079, Val 0.2918, Test 0.2994
          RMSE             : Train 152.1668, Val 155.6018, Test 153.5038
Best:
          R2_Score         : Train 0.3057, Val 0.2988, Test 0.3041
          RMSE             : Train 152.4048, Val 154.8204, Test 152.9874
Epoch 64: Loss:            : Train 0.0237, Val 0.0244, Test 0.0238
          R2_Score         : Train 0.3066, Val 0.2993, Test 0.3071
          RMSE             : Train 152.3102, Val 154.7744, Test 152.6555
Best:
          R2_Score         : Train 0.3066, Val 0.2993, Test 0.3071
          RMSE             : Train 152.3102, Val 154.7744, Test 152.6555
Epoch 65: Loss:            : Train 0.0236, Val 0.0256, Test 0.0248
          R2_Score         : Train 0.3080, Val 0.2685, Test 0.2777
          RMSE             : Train 152.1578, Val 158.1347, Test 155.8602
Best:
          R2_Score         : Train 0.3066, Val 0.2993, Test 0.3071
          RMSE             : Train 152.3102, Val 154.7744, Test 152.6555
Epoch 66: Loss:            : Train 0.0237, Val 0.0248, Test 0.0240
          R2_Score         : Train 0.3055, Val 0.2993, Test 0.3025
          RMSE             : Train 152.4285, Val 154.7661, Test 153.1648
Best:
          R2_Score         : Train 0.3055, Val 0.2993, Test 0.3025
          RMSE             : Train 152.4285, Val 154.7661, Test 153.1648
Epoch 67: Loss:            : Train 0.0236, Val 0.0256, Test 0.0246
          R2_Score         : Train 0.3100, Val 0.2867, Test 0.2848
          RMSE             : Train 151.9411, Val 156.1582, Test 155.0974
Best:
          R2_Score         : Train 0.3055, Val 0.2993, Test 0.3025
          RMSE             : Train 152.4285, Val 154.7661, Test 153.1648
Epoch 68: Loss:            : Train 0.0235, Val 0.0241, Test 0.0238
          R2_Score         : Train 0.3111, Val 0.3009, Test 0.3065
          RMSE             : Train 151.8199, Val 154.5890, Test 152.7210
Best:
          R2_Score         : Train 0.3111, Val 0.3009, Test 0.3065
          RMSE             : Train 151.8199, Val 154.5890, Test 152.7210
Epoch 69: Loss:            : Train 0.0234, Val 0.0244, Test 0.0238
          R2_Score         : Train 0.3132, Val 0.3043, Test 0.3056
          RMSE             : Train 151.5798, Val 154.2213, Test 152.8184
Best:
          R2_Score         : Train 0.3132, Val 0.3043, Test 0.3056
          RMSE             : Train 151.5798, Val 154.2213, Test 152.8184
Epoch 70: Loss:            : Train 0.0235, Val 0.0247, Test 0.0240
          R2_Score         : Train 0.3141, Val 0.2999, Test 0.3015
          RMSE             : Train 151.4810, Val 154.7080, Test 153.2710
Best:
          R2_Score         : Train 0.3132, Val 0.3043, Test 0.3056
          RMSE             : Train 151.5798, Val 154.2213, Test 152.8184
Epoch 71: Loss:            : Train 0.0236, Val 0.0253, Test 0.0241
          R2_Score         : Train 0.3086, Val 0.2976, Test 0.2997
          RMSE             : Train 152.0886, Val 154.9604, Test 153.4721
Best:
          R2_Score         : Train 0.3132, Val 0.3043, Test 0.3056
          RMSE             : Train 151.5798, Val 154.2213, Test 152.8184
Epoch 72: Loss:            : Train 0.0234, Val 0.0245, Test 0.0237
          R2_Score         : Train 0.3137, Val 0.3063, Test 0.3097
          RMSE             : Train 151.5294, Val 153.9925, Test 152.3707
Best:
          R2_Score         : Train 0.3137, Val 0.3063, Test 0.3097
          RMSE             : Train 151.5294, Val 153.9925, Test 152.3707
Epoch 73: Loss:            : Train 0.0233, Val 0.0243, Test 0.0238
          R2_Score         : Train 0.3165, Val 0.2952, Test 0.3042
          RMSE             : Train 151.2139, Val 155.2226, Test 152.9809
Best:
          R2_Score         : Train 0.3137, Val 0.3063, Test 0.3097
          RMSE             : Train 151.5294, Val 153.9925, Test 152.3707
Epoch 74: Loss:            : Train 0.0234, Val 0.0248, Test 0.0241
          R2_Score         : Train 0.3124, Val 0.3040, Test 0.2999
          RMSE             : Train 151.6732, Val 154.2466, Test 153.4430
Best:
          R2_Score         : Train 0.3137, Val 0.3063, Test 0.3097
          RMSE             : Train 151.5294, Val 153.9925, Test 152.3707
Epoch 75: Loss:            : Train 0.0234, Val 0.0240, Test 0.0236
          R2_Score         : Train 0.3160, Val 0.3092, Test 0.3117
          RMSE             : Train 151.2719, Val 153.6769, Test 152.1450
Best:
          R2_Score         : Train 0.3160, Val 0.3092, Test 0.3117
          RMSE             : Train 151.2719, Val 153.6769, Test 152.1450
Epoch 76: Loss:            : Train 0.0234, Val 0.0243, Test 0.0239
          R2_Score         : Train 0.3161, Val 0.2981, Test 0.3045
          RMSE             : Train 151.2640, Val 154.9041, Test 152.9411
Best:
          R2_Score         : Train 0.3160, Val 0.3092, Test 0.3117
          RMSE             : Train 151.2719, Val 153.6769, Test 152.1450
Epoch 77: Loss:            : Train 0.0233, Val 0.0242, Test 0.0237
          R2_Score         : Train 0.3185, Val 0.3018, Test 0.3093
          RMSE             : Train 150.9997, Val 154.4895, Test 152.4134
Best:
          R2_Score         : Train 0.3160, Val 0.3092, Test 0.3117
          RMSE             : Train 151.2719, Val 153.6769, Test 152.1450
Epoch 78: Loss:            : Train 0.0233, Val 0.0243, Test 0.0237
          R2_Score         : Train 0.3185, Val 0.3090, Test 0.3103
          RMSE             : Train 150.9974, Val 153.6913, Test 152.3051
Best:
          R2_Score         : Train 0.3160, Val 0.3092, Test 0.3117
          RMSE             : Train 151.2719, Val 153.6769, Test 152.1450
Epoch 79: Loss:            : Train 0.0232, Val 0.0244, Test 0.0238
          R2_Score         : Train 0.3212, Val 0.3065, Test 0.3086
          RMSE             : Train 150.6933, Val 153.9684, Test 152.4930
Best:
          R2_Score         : Train 0.3160, Val 0.3092, Test 0.3117
          RMSE             : Train 151.2719, Val 153.6769, Test 152.1450
Epoch 80: Loss:            : Train 0.0234, Val 0.0240, Test 0.0234
          R2_Score         : Train 0.3165, Val 0.3134, Test 0.3186
          RMSE             : Train 151.2237, Val 153.2095, Test 151.3807
Best:
          R2_Score         : Train 0.3165, Val 0.3134, Test 0.3186
          RMSE             : Train 151.2237, Val 153.2095, Test 151.3807
Epoch 81: Loss:            : Train 0.0232, Val 0.0240, Test 0.0233
          R2_Score         : Train 0.3216, Val 0.3170, Test 0.3206
          RMSE             : Train 150.6547, Val 152.7992, Test 151.1664
Best:
          R2_Score         : Train 0.3216, Val 0.3170, Test 0.3206
          RMSE             : Train 150.6547, Val 152.7992, Test 151.1664
Epoch 82: Loss:            : Train 0.0232, Val 0.0241, Test 0.0236
          R2_Score         : Train 0.3194, Val 0.3047, Test 0.3130
          RMSE             : Train 150.8979, Val 154.1782, Test 152.0069
Best:
          R2_Score         : Train 0.3216, Val 0.3170, Test 0.3206
          RMSE             : Train 150.6547, Val 152.7992, Test 151.1664
Epoch 83: Loss:            : Train 0.0231, Val 0.0246, Test 0.0238
          R2_Score         : Train 0.3217, Val 0.3035, Test 0.3078
          RMSE             : Train 150.6400, Val 154.3095, Test 152.5791
Best:
          R2_Score         : Train 0.3216, Val 0.3170, Test 0.3206
          RMSE             : Train 150.6547, Val 152.7992, Test 151.1664
Epoch 84: Loss:            : Train 0.0231, Val 0.0246, Test 0.0239
          R2_Score         : Train 0.3205, Val 0.3013, Test 0.3055
          RMSE             : Train 150.7724, Val 154.5547, Test 152.8360
Best:
          R2_Score         : Train 0.3216, Val 0.3170, Test 0.3206
          RMSE             : Train 150.6547, Val 152.7992, Test 151.1664
Epoch 85: Loss:            : Train 0.0232, Val 0.0250, Test 0.0240
          R2_Score         : Train 0.3212, Val 0.3003, Test 0.3017
          RMSE             : Train 150.6953, Val 154.6598, Test 153.2472
Best:
          R2_Score         : Train 0.3216, Val 0.3170, Test 0.3206
          RMSE             : Train 150.6547, Val 152.7992, Test 151.1664
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.17it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 29.51it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 21.33it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 18.59it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 22.76it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 21.38it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.88it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.35it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 12.71it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.73it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.01it/s]Train:  20%|██        | 5/25 [00:00<00:01, 15.90it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 17.44it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 26.09it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 24.40it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 25.34it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 21.66it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.77it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 18.67it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.99it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 11.86it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 13.00it/s]Train:  32%|███▏      | 8/25 [00:00<00:01, 16.11it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 20.81it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 20.98it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 25.06it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 22.94it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 13.47it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 21.93it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 16.51it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.09it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.32it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 28.10it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 25.17it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 17.87it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 20.77it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 14.72it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 19.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 24.22it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 32.04it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.48it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 28.24it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 35.21it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 19.29it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 16.34it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 18.33it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 17.05it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 22.68it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 30.30it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.45it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 20.54it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 19.92it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 18.02it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 14.51it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 17.66it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 21.37it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.89it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 23.85it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.51it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.95it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 14.55it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 26.17it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.21it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 22.43it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 25.57it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 22.19it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 19.95it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 31.81it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.90it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.93it/s]Train:  20%|██        | 5/25 [00:00<00:01, 18.19it/s]Train:  40%|████      | 10/25 [00:00<00:00, 27.56it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 18.48it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 19.58it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 19.14it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 20.06it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 44.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  9.85it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 26.84it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.13it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 28.05it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 20.12it/s]Train:  40%|████      | 10/25 [00:00<00:00, 25.25it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 21.97it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 19.95it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 21.31it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 22.11it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 22.34it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.80it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 38.41it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.49it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 23.27it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.52it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.85it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 20.12it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 40.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.11it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 28.16it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.93it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 33.85it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.31it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 23.46it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.47it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 21.06it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 22.03it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.59it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.24it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 12.34it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.78it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.81it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.99it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 20.47it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 26.95it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 18.75it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 17.86it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 23.97it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 19.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 59.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 10.56it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.12it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.45it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.60it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 17.61it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 17.80it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 19.40it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 23.41it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.14it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 52.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.03it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 14.82it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 17.19it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  4.96it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 20.79it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.32it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 24.28it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 23.13it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.90it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.12it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.15it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.31it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 23.04it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 31.25it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.37it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 21.91it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 25.84it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.65it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.55it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.69it/s]

Epoch 86: Loss:            : Train 0.0229, Val 0.0242, Test 0.0238
          R2_Score         : Train 0.3253, Val 0.2997, Test 0.3050
          RMSE             : Train 150.2439, Val 154.7216, Test 152.8900
Best:
          R2_Score         : Train 0.3216, Val 0.3170, Test 0.3206
          RMSE             : Train 150.6547, Val 152.7992, Test 151.1664
Epoch 87: Loss:            : Train 0.0230, Val 0.0239, Test 0.0233
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 88: Loss:            : Train 0.0231, Val 0.0238, Test 0.0232
          R2_Score         : Train 0.3268, Val 0.3166, Test 0.3231
          RMSE             : Train 150.0785, Val 152.8466, Test 150.8847
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 89: Loss:            : Train 0.0230, Val 0.0244, Test 0.0235
          R2_Score         : Train 0.3272, Val 0.3128, Test 0.3170
          RMSE             : Train 150.0271, Val 153.2703, Test 151.5597
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 90: Loss:            : Train 0.0229, Val 0.0243, Test 0.0234
          R2_Score         : Train 0.3283, Val 0.3117, Test 0.3198
          RMSE             : Train 149.9088, Val 153.3966, Test 151.2481
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 91: Loss:            : Train 0.0231, Val 0.0239, Test 0.0234
          R2_Score         : Train 0.3249, Val 0.3115, Test 0.3179
          RMSE             : Train 150.2847, Val 153.4198, Test 151.4613
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 92: Loss:            : Train 0.0231, Val 0.0245, Test 0.0236
          R2_Score         : Train 0.3249, Val 0.3105, Test 0.3142
          RMSE             : Train 150.2860, Val 153.5294, Test 151.8724
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 93: Loss:            : Train 0.0231, Val 0.0238, Test 0.0233
          R2_Score         : Train 0.3269, Val 0.3168, Test 0.3209
          RMSE             : Train 150.0591, Val 152.8245, Test 151.1342
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 94: Loss:            : Train 0.0229, Val 0.0243, Test 0.0234
          R2_Score         : Train 0.3292, Val 0.3149, Test 0.3188
          RMSE             : Train 149.8084, Val 153.0434, Test 151.3624
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 95: Loss:            : Train 0.0231, Val 0.0246, Test 0.0240
          R2_Score         : Train 0.3283, Val 0.3043, Test 0.3023
          RMSE             : Train 149.9127, Val 154.2146, Test 153.1802
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 96: Loss:            : Train 0.0229, Val 0.0245, Test 0.0234
          R2_Score         : Train 0.3320, Val 0.3134, Test 0.3184
          RMSE             : Train 149.4901, Val 153.2039, Test 151.4119
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 97: Loss:            : Train 0.0228, Val 0.0239, Test 0.0233
          R2_Score         : Train 0.3303, Val 0.3190, Test 0.3226
          RMSE             : Train 149.6835, Val 152.5841, Test 150.9391
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 98: Loss:            : Train 0.0228, Val 0.0238, Test 0.0233
          R2_Score         : Train 0.3313, Val 0.3149, Test 0.3219
          RMSE             : Train 149.5735, Val 153.0343, Test 151.0208
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 99: Loss:            : Train 0.0229, Val 0.0243, Test 0.0234
          R2_Score         : Train 0.3291, Val 0.3183, Test 0.3185
          RMSE             : Train 149.8143, Val 152.6604, Test 151.3983
Best:
          R2_Score         : Train 0.3246, Val 0.3221, Test 0.3233
          RMSE             : Train 150.3163, Val 152.2300, Test 150.8597
Epoch 100: Loss:            : Train 0.0228, Val 0.0236, Test 0.0230
          R2_Score         : Train 0.3306, Val 0.3225, Test 0.3291
          RMSE             : Train 149.6481, Val 152.1899, Test 150.2192
Best:
          R2_Score         : Train 0.3306, Val 0.3225, Test 0.3291
          RMSE             : Train 149.6481, Val 152.1899, Test 150.2192
