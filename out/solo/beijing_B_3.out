  0%|          | 0/98735 [00:00<?, ?it/s]  8%|▊         | 7528/98735 [00:00<00:01, 75252.08it/s] 15%|█▌        | 15054/98735 [00:00<00:01, 74295.51it/s] 23%|██▎       | 22485/98735 [00:00<00:01, 73773.07it/s] 30%|███       | 29863/98735 [00:00<00:00, 71822.14it/s] 38%|███▊      | 37052/98735 [00:00<00:00, 66143.22it/s] 44%|████▍     | 43732/98735 [00:00<00:01, 52424.56it/s] 50%|█████     | 49376/98735 [00:00<00:01, 45239.03it/s] 58%|█████▊    | 57048/98735 [00:00<00:00, 52836.79it/s] 66%|██████▌   | 64796/98735 [00:01<00:00, 59153.46it/s] 73%|███████▎  | 72520/98735 [00:01<00:00, 64001.23it/s] 81%|████████▏ | 80245/98735 [00:01<00:00, 67668.36it/s] 88%|████████▊ | 87330/98735 [00:01<00:00, 66432.87it/s] 95%|█████████▌| 94196/98735 [00:01<00:00, 66498.84it/s]100%|██████████| 98735/98735 [00:01<00:00, 63177.90it/s]
  0%|          | 0/14105 [00:00<?, ?it/s] 57%|█████▋    | 8003/14105 [00:00<00:00, 80026.64it/s]100%|██████████| 14105/14105 [00:00<00:00, 80380.56it/s]
  0%|          | 0/28210 [00:00<?, ?it/s] 29%|██▊       | 8045/28210 [00:00<00:00, 80444.90it/s] 57%|█████▋    | 16121/28210 [00:00<00:00, 80629.05it/s] 86%|████████▌ | 24184/28210 [00:00<00:00, 73919.80it/s]100%|██████████| 28210/28210 [00:00<00:00, 75553.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 35.35it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 38.25it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 38.21it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 38.46it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 39.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 87.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 37.14it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 47.15it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 28.34it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.88it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 31.38it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 30.04it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.23it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 31.55it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 86.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 36.29it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 39.81it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.31it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 29.11it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 30.28it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.86it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 29.52it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.99it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.38it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 40.09it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.56it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 28.52it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 27.79it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 24.26it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 30.77it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 28.25it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.11it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 90.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 36.84it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 48.09it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.49it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 26.45it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 31.77it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 33.00it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 36.16it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.10it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.74it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.18it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.06it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 26.82it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 26.02it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 28.34it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 32.15it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.98it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 19.49it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.61it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.92it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 25.40it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 27.61it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 29.26it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 27.81it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.11it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 25.75it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.58it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 23.58it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 29.81it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.65it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 38.38it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 35.67it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 36.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 10.02it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 24.50it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.05it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.48it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 31.75it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 30.62it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 29.17it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 25.44it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.58it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 35.14it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 46.07it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 24.33it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.13it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 37.51it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 30.54it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 27.06it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 28.34it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 35.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 38.38it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 41.95it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 21.98it/s]Train:  40%|████      | 10/25 [00:00<00:00, 27.28it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 31.69it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 27.73it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 25.43it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.76it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 33.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 42.74it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 49.39it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 30.08it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 36.73it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.84it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 21.33it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 25.02it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 23.60it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 19.66it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 32.08it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 38.44it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.07it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 20.99it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 25.78it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.77it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.17it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.73it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 34.80it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.97it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 26.20it/s]Train:  40%|████      | 10/25 [00:00<00:00, 35.14it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 29.58it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 30.52it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 29.07it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.65it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 35.42it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.45it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 31.52it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.16it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 19.14it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.49it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.29it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 29.04it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 75.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.59it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.89it/s]Loading house from data/beijing/house_clean.csv
Loading airbnb from data/beijing/airbnb_clean.csv
Current house columns Index(['cid', 'DOM', 'followers', 'square', 'livingRoom', 'drawingRoom',
       'kitchen', 'bathRoom', 'floor', 'constructionTime', 'ladderRatio',
       'elevator', 'fiveYearsProperty', 'subway', 'did_2', 'did_3', 'did_4',
       'did_5', 'did_6', 'did_7', 'did_8', 'did_9', 'did_10', 'did_11',
       'did_12', 'did_13', 'bt_2', 'bt_3', 'bt_4', 'rc_2', 'rc_3', 'rc_4',
       'bs_2', 'bs_3', 'bs_4', 'bs_5', 'bs_6', 'ty_2014', 'ty_2015', 'ty_2016',
       'ty_2017', 'ty_2018', 'tm_2', 'tm_3', 'tm_4', 'tm_5', 'tm_6', 'tm_7',
       'tm_8', 'tm_9', 'tm_10', 'tm_11', 'tm_12', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'price', 'minimum_nights', 'number_of_reviews',
       'reviews_per_month', 'calculated_host_listings_count',
       'availability_365', 'nbr_丰台区 ', 'nbr_大兴区 ', 'nbr_密云县 ', 'nbr_平谷区 ',
       'nbr_延庆县 ', 'nbr_怀柔区 ', 'nbr_房山区', 'nbr_昌平区', 'nbr_朝阳区 ', 'nbr_海淀区',
       'nbr_石景山区', 'nbr_西城区', 'nbr_通州区 ', 'nbr_门头沟区 ', 'nbr_顺义区 ',
       'rt_Private room', 'rt_Shared room'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 25 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0    [23, 400]  [4096, 400]    9600       9200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           90001
Trainable params       90001
Non-trainable params       0
Mult-Adds              89400
=================================================================
n_classes=2
task=regression
model_name=beijing_B_2022-05-21-21-23-20
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/beijing_B_2022-05-21-21-23-20.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f61312383a0>, <metric.rmse.RMSE object at 0x7f61312383d0>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=23, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f6131238340>
Epoch 1: Loss:            : Train 0.0380, Val 0.0317, Test 0.0323
          R2_Score         : Train -0.1186, Val 0.0515, Test 0.0533
          RMSE             : Train 193.4489, Val 180.0740, Test 178.4342
Best:
          R2_Score         : Train -0.1186, Val 0.0515, Test 0.0533
          RMSE             : Train 193.4489, Val 180.0740, Test 178.4342
Epoch 2: Loss:            : Train 0.0307, Val 0.0301, Test 0.0300
          R2_Score         : Train 0.1033, Val 0.1247, Test 0.1257
          RMSE             : Train 173.2042, Val 172.9782, Test 171.4836
Best:
          R2_Score         : Train 0.1033, Val 0.1247, Test 0.1257
          RMSE             : Train 173.2042, Val 172.9782, Test 171.4836
Epoch 3: Loss:            : Train 0.0296, Val 0.0296, Test 0.0295
          R2_Score         : Train 0.1322, Val 0.1394, Test 0.1390
          RMSE             : Train 170.3892, Val 171.5214, Test 170.1655
Best:
          R2_Score         : Train 0.1322, Val 0.1394, Test 0.1390
          RMSE             : Train 170.3892, Val 171.5214, Test 170.1655
Epoch 4: Loss:            : Train 0.0292, Val 0.0292, Test 0.0291
          R2_Score         : Train 0.1451, Val 0.1491, Test 0.1493
          RMSE             : Train 169.1186, Val 170.5586, Test 169.1519
Best:
          R2_Score         : Train 0.1451, Val 0.1491, Test 0.1493
          RMSE             : Train 169.1186, Val 170.5586, Test 169.1519
Epoch 5: Loss:            : Train 0.0288, Val 0.0291, Test 0.0289
          R2_Score         : Train 0.1543, Val 0.1570, Test 0.1555
          RMSE             : Train 168.2027, Val 169.7577, Test 168.5272
Best:
          R2_Score         : Train 0.1543, Val 0.1570, Test 0.1555
          RMSE             : Train 168.2027, Val 169.7577, Test 168.5272
Epoch 6: Loss:            : Train 0.0286, Val 0.0287, Test 0.0287
          R2_Score         : Train 0.1616, Val 0.1645, Test 0.1631
          RMSE             : Train 167.4800, Val 169.0055, Test 167.7714
Best:
          R2_Score         : Train 0.1616, Val 0.1645, Test 0.1631
          RMSE             : Train 167.4800, Val 169.0055, Test 167.7714
Epoch 7: Loss:            : Train 0.0285, Val 0.0290, Test 0.0287
          R2_Score         : Train 0.1678, Val 0.1668, Test 0.1645
          RMSE             : Train 166.8551, Val 168.7750, Test 167.6335
Best:
          R2_Score         : Train 0.1678, Val 0.1668, Test 0.1645
          RMSE             : Train 166.8551, Val 168.7750, Test 167.6335
Epoch 8: Loss:            : Train 0.0282, Val 0.0285, Test 0.0283
          R2_Score         : Train 0.1746, Val 0.1776, Test 0.1755
          RMSE             : Train 166.1801, Val 167.6782, Test 166.5199
Best:
          R2_Score         : Train 0.1746, Val 0.1776, Test 0.1755
          RMSE             : Train 166.1801, Val 167.6782, Test 166.5199
Epoch 9: Loss:            : Train 0.0280, Val 0.0283, Test 0.0281
          R2_Score         : Train 0.1811, Val 0.1818, Test 0.1809
          RMSE             : Train 165.5164, Val 167.2421, Test 165.9764
Best:
          R2_Score         : Train 0.1811, Val 0.1818, Test 0.1809
          RMSE             : Train 165.5164, Val 167.2421, Test 165.9764
Epoch 10: Loss:            : Train 0.0279, Val 0.0281, Test 0.0279
          R2_Score         : Train 0.1874, Val 0.1896, Test 0.1864
          RMSE             : Train 164.8876, Val 166.4414, Test 165.4148
Best:
          R2_Score         : Train 0.1874, Val 0.1896, Test 0.1864
          RMSE             : Train 164.8876, Val 166.4414, Test 165.4148
Epoch 11: Loss:            : Train 0.0275, Val 0.0280, Test 0.0277
          R2_Score         : Train 0.1939, Val 0.1935, Test 0.1925
          RMSE             : Train 164.2256, Val 166.0462, Test 164.7995
Best:
          R2_Score         : Train 0.1939, Val 0.1935, Test 0.1925
          RMSE             : Train 164.2256, Val 166.0462, Test 164.7995
Epoch 12: Loss:            : Train 0.0273, Val 0.0277, Test 0.0276
          R2_Score         : Train 0.1993, Val 0.1943, Test 0.1943
          RMSE             : Train 163.6668, Val 165.9590, Test 164.6171
Best:
          R2_Score         : Train 0.1993, Val 0.1943, Test 0.1943
          RMSE             : Train 163.6668, Val 165.9590, Test 164.6171
Epoch 13: Loss:            : Train 0.0272, Val 0.0274, Test 0.0273
          R2_Score         : Train 0.2030, Val 0.2052, Test 0.2044
          RMSE             : Train 163.2952, Val 164.8352, Test 163.5831
Best:
          R2_Score         : Train 0.2030, Val 0.2052, Test 0.2044
          RMSE             : Train 163.2952, Val 164.8352, Test 163.5831
Epoch 14: Loss:            : Train 0.0271, Val 0.0275, Test 0.0272
          R2_Score         : Train 0.2085, Val 0.2113, Test 0.2084
          RMSE             : Train 162.7275, Val 164.1978, Test 163.1676
Best:
          R2_Score         : Train 0.2085, Val 0.2113, Test 0.2084
          RMSE             : Train 162.7275, Val 164.1978, Test 163.1676
Epoch 15: Loss:            : Train 0.0269, Val 0.0272, Test 0.0270
          R2_Score         : Train 0.2132, Val 0.2122, Test 0.2114
          RMSE             : Train 162.2418, Val 164.1115, Test 162.8570
Best:
          R2_Score         : Train 0.2132, Val 0.2122, Test 0.2114
          RMSE             : Train 162.2418, Val 164.1115, Test 162.8570
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 29.40it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 15.73it/s]Train:  40%|████      | 10/25 [00:00<00:00, 18.04it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 18.17it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 23.40it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.40it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 23.93it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 57.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 12.18it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.52it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.27it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 16.75it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 16.78it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.45it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 32.27it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 30.52it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.39it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.03it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 12.13it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 24.61it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.47it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.89it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 25.05it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 26.83it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 32.72it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 31.25it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.23it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  8.86it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.38it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.20it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.88it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 28.39it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 35.60it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 32.21it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 32.08it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 28.60it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.04it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 14.70it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.60it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.04it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 30.14it/s]Train:  40%|████      | 10/25 [00:00<00:00, 33.28it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.32it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 32.93it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 33.91it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 21.34it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 14.24it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.92it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.31it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.30it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 29.09it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 30.24it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 30.58it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 32.62it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  4.72it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.12it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 23.65it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.51it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 11.14it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.69it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 29.48it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 29.44it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  6.49it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.75it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.43it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.45it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.67it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 24.09it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 22.16it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 27.62it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.68it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.51it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.78it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 22.96it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 23.39it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.22it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 29.88it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 34.77it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 32.08it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 10.32it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 22.11it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.91it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 13.52it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.90it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 31.01it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.97it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 31.39it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.42it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 36.01it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.28it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 25.45it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 30.67it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 28.04it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.47it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.26it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 28.73it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 17.22it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 21.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 33.97it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.44it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.09it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 15.10it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.17it/s]Train:  40%|████      | 10/25 [00:00<00:00, 20.36it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.03it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.79it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 13.58it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.09it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 18.33it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.69it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 25.00it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 36.06it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 30.86it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 28.48it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 28.80it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 12.70it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 26.23it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.50it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 37.04it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.54it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 21.99it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.97it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.74it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 27.85it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 55.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  9.35it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 21.05it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.46it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.65it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 25.54it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.44it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 29.65it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 33.96it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 31.44it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 30.98it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.09it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 27.55it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.57it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 34.16it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 27.52it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 30.41it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 29.97it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 32.28it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.81it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  5.14it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.74it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.00it/s]Train:  20%|██        | 5/25 [00:00<00:00, 23.85it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.84it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 26.15it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 31.16it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 30.21it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.04it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.62it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.64it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.27it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.41it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.97it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 31.69it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 30.85it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.13it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 58.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.46it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.40it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.89it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.27it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.17it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 25.93it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.58it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 32.67it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.90it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 10.63it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.29it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.80it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.65it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.19it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.01it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.65it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 27.94it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.99it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.49it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.48it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 14.16it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.91it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.33it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 27.74it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 33.58it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 28.75it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 25.94it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 32.03it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  4.97it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.33it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.57it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.23it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.47it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 26.16it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 25.49it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.65it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 31.44it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  4.80it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 13.55it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.68it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.22it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 23.12it/s]Train:  40%|████      | 10/25 [00:00<00:00, 19.32it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 21.09it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 19.17it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 20.40it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 24.45it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.08it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.63it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.89it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.96it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 28.86it/s]Train:  40%|████      | 10/25 [00:00<00:00, 26.03it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 22.73it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 29.04it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.84it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  8.55it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 20.65it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.16it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.66it/s]
Epoch 16: Loss:            : Train 0.0267, Val 0.0271, Test 0.0269
          R2_Score         : Train 0.2171, Val 0.2198, Test 0.2169
          RMSE             : Train 161.8405, Val 163.3188, Test 162.2912
Best:
          R2_Score         : Train 0.2171, Val 0.2198, Test 0.2169
          RMSE             : Train 161.8405, Val 163.3188, Test 162.2912
Epoch 17: Loss:            : Train 0.0266, Val 0.0277, Test 0.0271
          R2_Score         : Train 0.2214, Val 0.2157, Test 0.2122
          RMSE             : Train 161.3986, Val 163.7395, Test 162.7753
Best:
          R2_Score         : Train 0.2171, Val 0.2198, Test 0.2169
          RMSE             : Train 161.8405, Val 163.3188, Test 162.2912
Epoch 18: Loss:            : Train 0.0266, Val 0.0273, Test 0.0267
          R2_Score         : Train 0.2237, Val 0.2254, Test 0.2221
          RMSE             : Train 161.1559, Val 162.7256, Test 161.7517
Best:
          R2_Score         : Train 0.2237, Val 0.2254, Test 0.2221
          RMSE             : Train 161.1559, Val 162.7256, Test 161.7517
Epoch 19: Loss:            : Train 0.0264, Val 0.0267, Test 0.0265
          R2_Score         : Train 0.2274, Val 0.2300, Test 0.2284
          RMSE             : Train 160.7707, Val 162.2396, Test 161.0900
Best:
          R2_Score         : Train 0.2274, Val 0.2300, Test 0.2284
          RMSE             : Train 160.7707, Val 162.2396, Test 161.0900
Epoch 20: Loss:            : Train 0.0262, Val 0.0267, Test 0.0265
          R2_Score         : Train 0.2320, Val 0.2259, Test 0.2272
          RMSE             : Train 160.2980, Val 162.6797, Test 161.2231
Best:
          R2_Score         : Train 0.2274, Val 0.2300, Test 0.2284
          RMSE             : Train 160.7707, Val 162.2396, Test 161.0900
Epoch 21: Loss:            : Train 0.0262, Val 0.0267, Test 0.0263
          R2_Score         : Train 0.2339, Val 0.2358, Test 0.2341
          RMSE             : Train 160.0955, Val 161.6274, Test 160.5020
Best:
          R2_Score         : Train 0.2339, Val 0.2358, Test 0.2341
          RMSE             : Train 160.0955, Val 161.6274, Test 160.5020
Epoch 22: Loss:            : Train 0.0258, Val 0.0267, Test 0.0263
          R2_Score         : Train 0.2398, Val 0.2346, Test 0.2344
          RMSE             : Train 159.4764, Val 161.7538, Test 160.4622
Best:
          R2_Score         : Train 0.2339, Val 0.2358, Test 0.2341
          RMSE             : Train 160.0955, Val 161.6274, Test 160.5020
Epoch 23: Loss:            : Train 0.0259, Val 0.0267, Test 0.0261
          R2_Score         : Train 0.2432, Val 0.2369, Test 0.2384
          RMSE             : Train 159.1257, Val 161.5098, Test 160.0512
Best:
          R2_Score         : Train 0.2432, Val 0.2369, Test 0.2384
          RMSE             : Train 159.1257, Val 161.5098, Test 160.0512
Epoch 24: Loss:            : Train 0.0258, Val 0.0265, Test 0.0260
          R2_Score         : Train 0.2454, Val 0.2395, Test 0.2420
          RMSE             : Train 158.8859, Val 161.2348, Test 159.6712
Best:
          R2_Score         : Train 0.2454, Val 0.2395, Test 0.2420
          RMSE             : Train 158.8859, Val 161.2348, Test 159.6712
Epoch 25: Loss:            : Train 0.0256, Val 0.0265, Test 0.0260
          R2_Score         : Train 0.2489, Val 0.2444, Test 0.2438
          RMSE             : Train 158.5229, Val 160.7202, Test 159.4797
Best:
          R2_Score         : Train 0.2489, Val 0.2444, Test 0.2438
          RMSE             : Train 158.5229, Val 160.7202, Test 159.4797
Epoch 26: Loss:            : Train 0.0255, Val 0.0260, Test 0.0257
          R2_Score         : Train 0.2521, Val 0.2510, Test 0.2515
          RMSE             : Train 158.1836, Val 160.0179, Test 158.6603
Best:
          R2_Score         : Train 0.2521, Val 0.2510, Test 0.2515
          RMSE             : Train 158.1836, Val 160.0179, Test 158.6603
Epoch 27: Loss:            : Train 0.0257, Val 0.0264, Test 0.0259
          R2_Score         : Train 0.2542, Val 0.2479, Test 0.2459
          RMSE             : Train 157.9579, Val 160.3438, Test 159.2575
Best:
          R2_Score         : Train 0.2521, Val 0.2510, Test 0.2515
          RMSE             : Train 158.1836, Val 160.0179, Test 158.6603
Epoch 28: Loss:            : Train 0.0253, Val 0.0260, Test 0.0255
          R2_Score         : Train 0.2571, Val 0.2564, Test 0.2568
          RMSE             : Train 157.6578, Val 159.4359, Test 158.1053
Best:
          R2_Score         : Train 0.2571, Val 0.2564, Test 0.2568
          RMSE             : Train 157.6578, Val 159.4359, Test 158.1053
Epoch 29: Loss:            : Train 0.0252, Val 0.0259, Test 0.0255
          R2_Score         : Train 0.2618, Val 0.2535, Test 0.2574
          RMSE             : Train 157.1511, Val 159.7511, Test 158.0338
Best:
          R2_Score         : Train 0.2571, Val 0.2564, Test 0.2568
          RMSE             : Train 157.6578, Val 159.4359, Test 158.1053
Epoch 30: Loss:            : Train 0.0253, Val 0.0259, Test 0.0255
          R2_Score         : Train 0.2603, Val 0.2615, Test 0.2581
          RMSE             : Train 157.3096, Val 158.8852, Test 157.9587
Best:
          R2_Score         : Train 0.2603, Val 0.2615, Test 0.2581
          RMSE             : Train 157.3096, Val 158.8852, Test 157.9587
Epoch 31: Loss:            : Train 0.0251, Val 0.0260, Test 0.0254
          R2_Score         : Train 0.2624, Val 0.2645, Test 0.2610
          RMSE             : Train 157.0894, Val 158.5635, Test 157.6540
Best:
          R2_Score         : Train 0.2624, Val 0.2645, Test 0.2610
          RMSE             : Train 157.0894, Val 158.5635, Test 157.6540
Epoch 32: Loss:            : Train 0.0250, Val 0.0256, Test 0.0253
          R2_Score         : Train 0.2646, Val 0.2590, Test 0.2619
          RMSE             : Train 156.8515, Val 159.1614, Test 157.5540
Best:
          R2_Score         : Train 0.2624, Val 0.2645, Test 0.2610
          RMSE             : Train 157.0894, Val 158.5635, Test 157.6540
Epoch 33: Loss:            : Train 0.0250, Val 0.0258, Test 0.0254
          R2_Score         : Train 0.2681, Val 0.2596, Test 0.2597
          RMSE             : Train 156.4846, Val 159.0949, Test 157.7903
Best:
          R2_Score         : Train 0.2624, Val 0.2645, Test 0.2610
          RMSE             : Train 157.0894, Val 158.5635, Test 157.6540
Epoch 34: Loss:            : Train 0.0251, Val 0.0254, Test 0.0250
          R2_Score         : Train 0.2695, Val 0.2721, Test 0.2729
          RMSE             : Train 156.3366, Val 157.7439, Test 156.3784
Best:
          R2_Score         : Train 0.2695, Val 0.2721, Test 0.2729
          RMSE             : Train 156.3366, Val 157.7439, Test 156.3784
Epoch 35: Loss:            : Train 0.0249, Val 0.0254, Test 0.0249
          R2_Score         : Train 0.2704, Val 0.2702, Test 0.2729
          RMSE             : Train 156.2325, Val 157.9563, Test 156.3833
Best:
          R2_Score         : Train 0.2695, Val 0.2721, Test 0.2729
          RMSE             : Train 156.3366, Val 157.7439, Test 156.3784
Epoch 36: Loss:            : Train 0.0248, Val 0.0259, Test 0.0253
          R2_Score         : Train 0.2737, Val 0.2629, Test 0.2642
          RMSE             : Train 155.8850, Val 158.7373, Test 157.3112
Best:
          R2_Score         : Train 0.2695, Val 0.2721, Test 0.2729
          RMSE             : Train 156.3366, Val 157.7439, Test 156.3784
Epoch 37: Loss:            : Train 0.0247, Val 0.0256, Test 0.0251
          R2_Score         : Train 0.2764, Val 0.2692, Test 0.2698
          RMSE             : Train 155.5946, Val 158.0609, Test 156.7139
Best:
          R2_Score         : Train 0.2695, Val 0.2721, Test 0.2729
          RMSE             : Train 156.3366, Val 157.7439, Test 156.3784
Epoch 38: Loss:            : Train 0.0247, Val 0.0253, Test 0.0250
          R2_Score         : Train 0.2755, Val 0.2683, Test 0.2714
          RMSE             : Train 155.6887, Val 158.1568, Test 156.5425
Best:
          R2_Score         : Train 0.2695, Val 0.2721, Test 0.2729
          RMSE             : Train 156.3366, Val 157.7439, Test 156.3784
Epoch 39: Loss:            : Train 0.0247, Val 0.0252, Test 0.0247
          R2_Score         : Train 0.2766, Val 0.2793, Test 0.2802
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.47it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 13.53it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.62it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 26.66it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 32.61it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 32.99it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  8.30it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.70it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.97it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.30it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.46it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 19.00it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 28.34it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.84it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 31.96it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 31.25it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.36it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 29.93it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.48it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 11.41it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 21.42it/s]Train:  40%|████      | 10/25 [00:00<00:00, 20.25it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.91it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 29.16it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 16.20it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 35.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.26it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.21it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 15.34it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 23.60it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.73it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 25.02it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.23it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 22.83it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.53it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 24.34it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.27it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.46it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.59it/s]Train:  40%|████      | 10/25 [00:00<00:00, 22.59it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.68it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.59it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 24.18it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.51it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 32.98it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.51it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 25.94it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 22.45it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 25.64it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 26.55it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.52it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.92it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 24.85it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.69it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 43.66it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.58it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 28.89it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.70it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 27.12it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 32.57it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 22.97it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 22.96it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.71it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  7.66it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.24it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.30it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.93it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.81it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.46it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.84it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 25.23it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.96it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 26.65it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.34it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 10.34it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.24it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.17it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 36.13it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 30.39it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 23.72it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.30it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 22.75it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 28.61it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 57.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.52it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.22it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.62it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.95it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.62it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.39it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.62it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 22.47it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 22.73it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 11.93it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.53it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.68it/s]Train:  20%|██        | 5/25 [00:00<00:00, 25.11it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.94it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 25.87it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 26.91it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 25.70it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 23.99it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.15it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.04it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.89it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.64it/s]Train:  20%|██        | 5/25 [00:00<00:00, 26.42it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.66it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 25.71it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.92it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 33.75it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 14.04it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.35it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 13.87it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.19it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.91it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 21.72it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 28.67it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 31.53it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 30.31it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.96it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 13.84it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.17it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 28.87it/s]Train:  40%|████      | 10/25 [00:00<00:00, 29.60it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 31.17it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 30.27it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 33.45it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.01it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 16.90it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.43it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 26.89it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.40it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 26.67it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.77it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 28.43it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.09it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.38it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 15.87it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.84it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 14.07it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.01it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.84it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.93it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 26.42it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  9.05it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.54it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 22.68it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.93it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 33.14it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 28.74it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 25.84it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 28.92it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.47it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.72it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 20.00it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.62it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.63it/s]Train:  12%|█▏        | 3/25 [00:00<00:02, 10.74it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.33it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.87it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.52it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.18it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 27.04it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  8.02it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 14.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.13it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.41it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.16it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.60it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 15.33it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 20.43it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.79it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 29.43it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 26.26it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.19it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.57it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 14.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.29it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 17.47it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.02it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.88it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 13.71it/s]Train:  20%|██        | 5/25 [00:00<00:01, 15.41it/s]Train:  40%|████      | 10/25 [00:00<00:00, 22.44it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 27.28it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.51it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 25.56it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 13.27it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 33.50it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.11it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.87it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 19.73it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.40it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 25.10it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.83it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 30.78it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 29.09it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.65it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 40.71it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.40it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.34it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 15.20it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.32it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.93it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 23.76it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.90it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.03it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.07it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 35.66it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 35.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  6.55it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 20.98it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.93it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 19.10it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.14it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 19.57it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.73it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 21.93it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.15it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 26.78it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.58it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  5.97it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.67it/s]
          RMSE             : Train 155.5733, Val 156.9642, Test 155.5904
Best:
          R2_Score         : Train 0.2766, Val 0.2793, Test 0.2802
          RMSE             : Train 155.5733, Val 156.9642, Test 155.5904
Epoch 40: Loss:            : Train 0.0245, Val 0.0258, Test 0.0249
          R2_Score         : Train 0.2816, Val 0.2711, Test 0.2749
          RMSE             : Train 155.0280, Val 157.8542, Test 156.1602
Best:
          R2_Score         : Train 0.2766, Val 0.2793, Test 0.2802
          RMSE             : Train 155.5733, Val 156.9642, Test 155.5904
Epoch 41: Loss:            : Train 0.0244, Val 0.0252, Test 0.0249
          R2_Score         : Train 0.2827, Val 0.2728, Test 0.2755
          RMSE             : Train 154.9083, Val 157.6671, Test 156.1044
Best:
          R2_Score         : Train 0.2766, Val 0.2793, Test 0.2802
          RMSE             : Train 155.5733, Val 156.9642, Test 155.5904
Epoch 42: Loss:            : Train 0.0243, Val 0.0249, Test 0.0247
          R2_Score         : Train 0.2842, Val 0.2770, Test 0.2789
          RMSE             : Train 154.7489, Val 157.2108, Test 155.7347
Best:
          R2_Score         : Train 0.2766, Val 0.2793, Test 0.2802
          RMSE             : Train 155.5733, Val 156.9642, Test 155.5904
Epoch 43: Loss:            : Train 0.0244, Val 0.0255, Test 0.0248
          R2_Score         : Train 0.2861, Val 0.2772, Test 0.2774
          RMSE             : Train 154.5428, Val 157.1934, Test 155.8988
Best:
          R2_Score         : Train 0.2766, Val 0.2793, Test 0.2802
          RMSE             : Train 155.5733, Val 156.9642, Test 155.5904
Epoch 44: Loss:            : Train 0.0243, Val 0.0254, Test 0.0248
          R2_Score         : Train 0.2871, Val 0.2721, Test 0.2770
          RMSE             : Train 154.4410, Val 157.7493, Test 155.9427
Best:
          R2_Score         : Train 0.2766, Val 0.2793, Test 0.2802
          RMSE             : Train 155.5733, Val 156.9642, Test 155.5904
Epoch 45: Loss:            : Train 0.0243, Val 0.0254, Test 0.0246
          R2_Score         : Train 0.2874, Val 0.2840, Test 0.2836
          RMSE             : Train 154.4048, Val 156.4528, Test 155.2283
Best:
          R2_Score         : Train 0.2874, Val 0.2840, Test 0.2836
          RMSE             : Train 154.4048, Val 156.4528, Test 155.2283
Epoch 46: Loss:            : Train 0.0242, Val 0.0247, Test 0.0245
          R2_Score         : Train 0.2901, Val 0.2810, Test 0.2855
          RMSE             : Train 154.1080, Val 156.7816, Test 155.0129
Best:
          R2_Score         : Train 0.2874, Val 0.2840, Test 0.2836
          RMSE             : Train 154.4048, Val 156.4528, Test 155.2283
Epoch 47: Loss:            : Train 0.0241, Val 0.0252, Test 0.0246
          R2_Score         : Train 0.2933, Val 0.2828, Test 0.2842
          RMSE             : Train 153.7658, Val 156.5859, Test 155.1628
Best:
          R2_Score         : Train 0.2874, Val 0.2840, Test 0.2836
          RMSE             : Train 154.4048, Val 156.4528, Test 155.2283
Epoch 48: Loss:            : Train 0.0242, Val 0.0251, Test 0.0243
          R2_Score         : Train 0.2918, Val 0.2857, Test 0.2910
          RMSE             : Train 153.9289, Val 156.2597, Test 154.4206
Best:
          R2_Score         : Train 0.2918, Val 0.2857, Test 0.2910
          RMSE             : Train 153.9289, Val 156.2597, Test 154.4206
Epoch 49: Loss:            : Train 0.0242, Val 0.0248, Test 0.0243
          R2_Score         : Train 0.2928, Val 0.2877, Test 0.2907
          RMSE             : Train 153.8217, Val 156.0485, Test 154.4553
Best:
          R2_Score         : Train 0.2928, Val 0.2877, Test 0.2907
          RMSE             : Train 153.8217, Val 156.0485, Test 154.4553
Epoch 50: Loss:            : Train 0.0240, Val 0.0248, Test 0.0246
          R2_Score         : Train 0.2942, Val 0.2811, Test 0.2834
          RMSE             : Train 153.6664, Val 156.7681, Test 155.2448
Best:
          R2_Score         : Train 0.2928, Val 0.2877, Test 0.2907
          RMSE             : Train 153.8217, Val 156.0485, Test 154.4553
Epoch 51: Loss:            : Train 0.0240, Val 0.0249, Test 0.0245
          R2_Score         : Train 0.2957, Val 0.2852, Test 0.2870
          RMSE             : Train 153.5013, Val 156.3150, Test 154.8554
Best:
          R2_Score         : Train 0.2928, Val 0.2877, Test 0.2907
          RMSE             : Train 153.8217, Val 156.0485, Test 154.4553
Epoch 52: Loss:            : Train 0.0240, Val 0.0255, Test 0.0248
          R2_Score         : Train 0.2987, Val 0.2790, Test 0.2779
          RMSE             : Train 153.1771, Val 156.9936, Test 155.8432
Best:
          R2_Score         : Train 0.2928, Val 0.2877, Test 0.2907
          RMSE             : Train 153.8217, Val 156.0485, Test 154.4553
Epoch 53: Loss:            : Train 0.0240, Val 0.0252, Test 0.0244
          R2_Score         : Train 0.2974, Val 0.2863, Test 0.2904
          RMSE             : Train 153.3153, Val 156.1975, Test 154.4878
Best:
          R2_Score         : Train 0.2928, Val 0.2877, Test 0.2907
          RMSE             : Train 153.8217, Val 156.0485, Test 154.4553
Epoch 54: Loss:            : Train 0.0239, Val 0.0246, Test 0.0242
          R2_Score         : Train 0.2998, Val 0.2924, Test 0.2957
          RMSE             : Train 153.0520, Val 155.5311, Test 153.9061
Best:
          R2_Score         : Train 0.2998, Val 0.2924, Test 0.2957
          RMSE             : Train 153.0520, Val 155.5311, Test 153.9061
Epoch 55: Loss:            : Train 0.0239, Val 0.0252, Test 0.0243
          R2_Score         : Train 0.2987, Val 0.2909, Test 0.2933
          RMSE             : Train 153.1721, Val 155.6983, Test 154.1646
Best:
          R2_Score         : Train 0.2998, Val 0.2924, Test 0.2957
          RMSE             : Train 153.0520, Val 155.5311, Test 153.9061
Epoch 56: Loss:            : Train 0.0238, Val 0.0245, Test 0.0241
          R2_Score         : Train 0.3015, Val 0.2961, Test 0.2963
          RMSE             : Train 152.8643, Val 155.1286, Test 153.8448
Best:
          R2_Score         : Train 0.3015, Val 0.2961, Test 0.2963
          RMSE             : Train 152.8643, Val 155.1286, Test 153.8448
Epoch 57: Loss:            : Train 0.0238, Val 0.0247, Test 0.0242
          R2_Score         : Train 0.3043, Val 0.2921, Test 0.2951
          RMSE             : Train 152.5650, Val 155.5686, Test 153.9719
Best:
          R2_Score         : Train 0.3015, Val 0.2961, Test 0.2963
          RMSE             : Train 152.8643, Val 155.1286, Test 153.8448
Epoch 58: Loss:            : Train 0.0239, Val 0.0253, Test 0.0245
          R2_Score         : Train 0.3016, Val 0.2908, Test 0.2875
          RMSE             : Train 152.8537, Val 155.7064, Test 154.7976
Best:
          R2_Score         : Train 0.3015, Val 0.2961, Test 0.2963
          RMSE             : Train 152.8643, Val 155.1286, Test 153.8448
Epoch 59: Loss:            : Train 0.0239, Val 0.0251, Test 0.0242
          R2_Score         : Train 0.3013, Val 0.2920, Test 0.2966
          RMSE             : Train 152.8961, Val 155.5746, Test 153.8082
Best:
          R2_Score         : Train 0.3015, Val 0.2961, Test 0.2963
          RMSE             : Train 152.8643, Val 155.1286, Test 153.8448
Epoch 60: Loss:            : Train 0.0236, Val 0.0245, Test 0.0240
          R2_Score         : Train 0.3067, Val 0.2986, Test 0.2995
          RMSE             : Train 152.2940, Val 154.8510, Test 153.4939
Best:
          R2_Score         : Train 0.3067, Val 0.2986, Test 0.2995
          RMSE             : Train 152.2940, Val 154.8510, Test 153.4939
Epoch 61: Loss:            : Train 0.0236, Val 0.0243, Test 0.0238
          R2_Score         : Train 0.3084, Val 0.3045, Test 0.3056
          RMSE             : Train 152.1136, Val 154.1926, Test 152.8212
Best:
          R2_Score         : Train 0.3084, Val 0.3045, Test 0.3056
          RMSE             : Train 152.1136, Val 154.1926, Test 152.8212
Epoch 62: Loss:            : Train 0.0237, Val 0.0256, Test 0.0246
          R2_Score         : Train 0.3098, Val 0.2858, Test 0.2850
          RMSE             : Train 151.9587, Val 156.2503, Test 155.0755

Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.67it/s]Train:  20%|██        | 5/25 [00:00<00:00, 21.63it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.23it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 25.50it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 31.10it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 36.01it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 48.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  7.04it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 28.01it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.40it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.68it/s]Train:  20%|██        | 5/25 [00:00<00:00, 20.46it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.08it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.95it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 26.75it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 30.78it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 11.99it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  4.82it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.30it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.29it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.13it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.61it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 28.91it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 27.40it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 27.27it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 31.50it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.53it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  9.50it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.97it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.09it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 13.95it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 13.48it/s]Train:  40%|████      | 10/25 [00:00<00:00, 21.15it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.34it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 24.82it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 30.16it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 16.68it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.54it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.60it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.54it/s]Train:  20%|██        | 5/25 [00:00<00:01, 18.32it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.95it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 25.78it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 25.86it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 23.92it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 28.06it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.72it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  9.07it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.28it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:06,  3.96it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.76it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 17.88it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 21.32it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.68it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 28.46it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 13.40it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 13.51it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.34it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.60it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.34it/s]Train:   8%|▊         | 2/25 [00:00<00:03,  7.26it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 18.62it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.31it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 27.31it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.08it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 31.43it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.22it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 10.20it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.36it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 10.05it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 26.05it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.65it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 32.83it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 29.64it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.30it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.56it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 13.59it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.25it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.24it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 23.08it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 25.38it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 25.20it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 30.23it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.75it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 29.34it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.77it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.70it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 14.47it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.83it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.88it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 19.11it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.24it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 29.07it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  9.94it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 29.79it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.94it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.76it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 31.35it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 28.60it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.84it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 27.13it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 30.33it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  9.92it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.74it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 20.87it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.82it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 13.79it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 26.61it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.27it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.83it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.67it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.09it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.13it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 22.53it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.39it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.27it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 13.97it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 26.40it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.39it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 22.94it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 23.62it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 22.60it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 13.50it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.35it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.74it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 18.60it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.75it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 11.78it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 10.83it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.35it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 17.34it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 20.25it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.29it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 23.38it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 12.95it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.98it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.39it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.55it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.28it/s]Train:  20%|██        | 5/25 [00:00<00:01, 14.40it/s]Train:  40%|████      | 10/25 [00:00<00:00, 19.42it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 23.83it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 23.39it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.21it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 24.23it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 16.09it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.27it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.74it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.37it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.98it/s]Train:  20%|██        | 5/25 [00:00<00:01, 13.47it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.01it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 24.29it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 29.64it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.20it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.94it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 19.95it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 20.38it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.65it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.32it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 14.42it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.51it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.92it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 23.99it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 26.13it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 29.86it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.40it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  5.07it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.96it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.65it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.91it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 17.78it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.12it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 30.03it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.35it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 26.67it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 41.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.21it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 25.96it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.61it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.13it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 12.69it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 13.73it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 20.81it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.74it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 22.09it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 17.91it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 18.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.04it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  5.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 15.60it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:06,  3.94it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.31it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.66it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 23.41it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 27.54it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 31.63it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 15.03it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  7.92it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.44it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.68it/s]Train:  20%|██        | 5/25 [00:00<00:00, 21.16it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.55it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.98it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 27.24it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 31.97it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.88it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.90it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 15.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.65it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:06,  3.83it/s]Train:  20%|██        | 5/25 [00:00<00:01, 15.93it/s]Train:  32%|███▏      | 8/25 [00:00<00:01, 16.64it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 20.94it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 26.07it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 21.88it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.76it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 13.60it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.21it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 14.50it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.83it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.51it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  7.73it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.98it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 28.65it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 33.82it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 30.12it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.68it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 17.34it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.00it/s]Best:
          R2_Score         : Train 0.3084, Val 0.3045, Test 0.3056
          RMSE             : Train 152.1136, Val 154.1926, Test 152.8212
Epoch 63: Loss:            : Train 0.0237, Val 0.0245, Test 0.0239
          R2_Score         : Train 0.3081, Val 0.2966, Test 0.3028
          RMSE             : Train 152.1433, Val 155.0716, Test 153.1304
Best:
          R2_Score         : Train 0.3084, Val 0.3045, Test 0.3056
          RMSE             : Train 152.1136, Val 154.1926, Test 152.8212
Epoch 64: Loss:            : Train 0.0236, Val 0.0243, Test 0.0238
          R2_Score         : Train 0.3106, Val 0.3045, Test 0.3075
          RMSE             : Train 151.8716, Val 154.1960, Test 152.6124
Best:
          R2_Score         : Train 0.3084, Val 0.3045, Test 0.3056
          RMSE             : Train 152.1136, Val 154.1926, Test 152.8212
Epoch 65: Loss:            : Train 0.0237, Val 0.0252, Test 0.0245
          R2_Score         : Train 0.3114, Val 0.2924, Test 0.2884
          RMSE             : Train 151.7795, Val 155.5318, Test 154.7070
Best:
          R2_Score         : Train 0.3084, Val 0.3045, Test 0.3056
          RMSE             : Train 152.1136, Val 154.1926, Test 152.8212
Epoch 66: Loss:            : Train 0.0236, Val 0.0245, Test 0.0239
          R2_Score         : Train 0.3075, Val 0.3029, Test 0.3052
          RMSE             : Train 152.2073, Val 154.3757, Test 152.8609
Best:
          R2_Score         : Train 0.3084, Val 0.3045, Test 0.3056
          RMSE             : Train 152.1136, Val 154.1926, Test 152.8212
Epoch 67: Loss:            : Train 0.0234, Val 0.0244, Test 0.0241
          R2_Score         : Train 0.3118, Val 0.2929, Test 0.2954
          RMSE             : Train 151.7360, Val 155.4742, Test 153.9415
Best:
          R2_Score         : Train 0.3084, Val 0.3045, Test 0.3056
          RMSE             : Train 152.1136, Val 154.1926, Test 152.8212
Epoch 68: Loss:            : Train 0.0235, Val 0.0245, Test 0.0240
          R2_Score         : Train 0.3117, Val 0.2934, Test 0.3011
          RMSE             : Train 151.7458, Val 155.4251, Test 153.3206
Best:
          R2_Score         : Train 0.3084, Val 0.3045, Test 0.3056
          RMSE             : Train 152.1136, Val 154.1926, Test 152.8212
Epoch 69: Loss:            : Train 0.0235, Val 0.0245, Test 0.0238
          R2_Score         : Train 0.3129, Val 0.3055, Test 0.3069
          RMSE             : Train 151.6181, Val 154.0849, Test 152.6752
Best:
          R2_Score         : Train 0.3129, Val 0.3055, Test 0.3069
          RMSE             : Train 151.6181, Val 154.0849, Test 152.6752
Epoch 70: Loss:            : Train 0.0233, Val 0.0246, Test 0.0237
          R2_Score         : Train 0.3137, Val 0.3028, Test 0.3088
          RMSE             : Train 151.5324, Val 154.3850, Test 152.4664
Best:
          R2_Score         : Train 0.3129, Val 0.3055, Test 0.3069
          RMSE             : Train 151.6181, Val 154.0849, Test 152.6752
Epoch 71: Loss:            : Train 0.0234, Val 0.0245, Test 0.0238
          R2_Score         : Train 0.3142, Val 0.3040, Test 0.3068
          RMSE             : Train 151.4758, Val 154.2456, Test 152.6867
Best:
          R2_Score         : Train 0.3129, Val 0.3055, Test 0.3069
          RMSE             : Train 151.6181, Val 154.0849, Test 152.6752
Epoch 72: Loss:            : Train 0.0234, Val 0.0244, Test 0.0241
          R2_Score         : Train 0.3131, Val 0.2907, Test 0.2969
          RMSE             : Train 151.5999, Val 155.7121, Test 153.7819
Best:
          R2_Score         : Train 0.3129, Val 0.3055, Test 0.3069
          RMSE             : Train 151.6181, Val 154.0849, Test 152.6752
Epoch 73: Loss:            : Train 0.0234, Val 0.0243, Test 0.0237
          R2_Score         : Train 0.3159, Val 0.3056, Test 0.3083
          RMSE             : Train 151.2817, Val 154.0712, Test 152.5264
Best:
          R2_Score         : Train 0.3159, Val 0.3056, Test 0.3083
          RMSE             : Train 151.2817, Val 154.0712, Test 152.5264
Epoch 74: Loss:            : Train 0.0234, Val 0.0243, Test 0.0237
          R2_Score         : Train 0.3173, Val 0.3080, Test 0.3105
          RMSE             : Train 151.1356, Val 153.8112, Test 152.2800
Best:
          R2_Score         : Train 0.3173, Val 0.3080, Test 0.3105
          RMSE             : Train 151.1356, Val 153.8112, Test 152.2800
Epoch 75: Loss:            : Train 0.0233, Val 0.0243, Test 0.0237
          R2_Score         : Train 0.3178, Val 0.3054, Test 0.3110
          RMSE             : Train 151.0777, Val 154.0983, Test 152.2252
Best:
          R2_Score         : Train 0.3173, Val 0.3080, Test 0.3105
          RMSE             : Train 151.1356, Val 153.8112, Test 152.2800
Epoch 76: Loss:            : Train 0.0233, Val 0.0241, Test 0.0233
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Epoch 77: Loss:            : Train 0.0231, Val 0.0248, Test 0.0239
          R2_Score         : Train 0.3224, Val 0.3006, Test 0.3035
          RMSE             : Train 150.5630, Val 154.6262, Test 153.0507
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Epoch 78: Loss:            : Train 0.0234, Val 0.0243, Test 0.0236
          R2_Score         : Train 0.3175, Val 0.3066, Test 0.3120
          RMSE             : Train 151.1090, Val 153.9618, Test 152.1125
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Epoch 79: Loss:            : Train 0.0232, Val 0.0247, Test 0.0239
          R2_Score         : Train 0.3249, Val 0.3041, Test 0.3043
          RMSE             : Train 150.2862, Val 154.2353, Test 152.9601
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Epoch 80: Loss:            : Train 0.0233, Val 0.0245, Test 0.0239
          R2_Score         : Train 0.3197, Val 0.3083, Test 0.3059
          RMSE             : Train 150.8689, Val 153.7786, Test 152.7879
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Epoch 81: Loss:            : Train 0.0231, Val 0.0239, Test 0.0233
          R2_Score         : Train 0.3211, Val 0.3143, Test 0.3198
          RMSE             : Train 150.7057, Val 153.1058, Test 151.2480
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Epoch 82: Loss:            : Train 0.0232, Val 0.0239, Test 0.0233
          R2_Score         : Train 0.3213, Val 0.3162, Test 0.3202
          RMSE             : Train 150.6840, Val 152.8884, Test 151.2061
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Epoch 83: Loss:            : Train 0.0230, Val 0.0241, Test 0.0236
          R2_Score         : Train 0.3251, Val 0.3044, Test 0.3111
          RMSE             : Train 150.2594, Val 154.2051, Test 152.2180
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Epoch 84: Loss:            : Train 0.0230, Val 0.0239, Test 0.0235
          R2_Score         : Train 0.3246, Val 0.3044, Test 0.3153
          RMSE             : Train 150.3231, Val 154.2082, Test 151.7520
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Epoch 85: Loss:            : Train 0.0231, Val 0.0244, Test 0.0239
          R2_Score         : Train 0.3266, Val 0.3060, Test 0.3041
          RMSE             : Train 150.0925, Val 154.0252, Test 152.9926
Best:
          R2_Score         : Train 0.3205, Val 0.3175, Test 0.3211
          RMSE             : Train 150.7709, Val 152.7481, Test 151.1110
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 11.48it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.32it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 30.28it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 29.82it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.14it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 16.54it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.58it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 11.11it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 26.33it/s]Train:  40%|████      | 10/25 [00:00<00:00, 23.15it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 26.03it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 30.62it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 32.81it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  6.39it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.32it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 24.80it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.29it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 29.24it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 30.39it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.64it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 25.22it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  8.87it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 27.20it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.22it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.42it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 12.92it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 20.27it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 27.34it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.13it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.62it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 24.50it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 13.14it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.89it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 17.82it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.14it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 23.40it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 17.15it/s]Train:  40%|████      | 10/25 [00:00<00:00, 19.34it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 22.16it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.15it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.29it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 15.02it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.67it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.95it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.73it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.05it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 14.00it/s]Train:  20%|██        | 5/25 [00:00<00:01, 15.63it/s]Train:  40%|████      | 10/25 [00:00<00:00, 22.83it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.86it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 29.09it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 13.31it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.87it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 17.57it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.93it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 25.56it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 36.29it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 34.09it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 31.11it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 30.30it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 21.35it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 48.17it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.17it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.68it/s]Train:  20%|██        | 5/25 [00:00<00:01, 18.86it/s]Train:  40%|████      | 10/25 [00:00<00:00, 29.58it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 27.55it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 26.76it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.45it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 25.75it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 13.88it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  4.55it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.57it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.66it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 27.54it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.01it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.55it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 18.44it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 22.01it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 27.70it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.33it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.70it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.09it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.59it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 37.43it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 29.76it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.74it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 31.48it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 28.27it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 26.35it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.20it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.64it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.28it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.81it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.32it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 18.97it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 21.98it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.55it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.39it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 28.75it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.02it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.91it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.45it/s]Train:  20%|██        | 5/25 [00:00<00:00, 24.50it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.87it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.63it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 28.91it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.10it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 23.49it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 14.77it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.73it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.81it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.65it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.56it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.83it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.27it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 24.55it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 28.94it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 50.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  9.91it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.58it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  7.12it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 27.78it/s]Train:  40%|████      | 10/25 [00:00<00:00, 28.61it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 30.34it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 30.40it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 32.47it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.46it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 13.75it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.63it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.00it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 20.06it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 20.90it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.04it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.89it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 27.00it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  4.63it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.45it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.11it/s]

Epoch 86: Loss:            : Train 0.0231, Val 0.0239, Test 0.0233
          R2_Score         : Train 0.3251, Val 0.3203, Test 0.3217
          RMSE             : Train 150.2624, Val 152.4381, Test 151.0426
Best:
          R2_Score         : Train 0.3251, Val 0.3203, Test 0.3217
          RMSE             : Train 150.2624, Val 152.4381, Test 151.0426
Epoch 87: Loss:            : Train 0.0230, Val 0.0244, Test 0.0236
          R2_Score         : Train 0.3277, Val 0.3110, Test 0.3122
          RMSE             : Train 149.9793, Val 153.4757, Test 152.0971
Best:
          R2_Score         : Train 0.3251, Val 0.3203, Test 0.3217
          RMSE             : Train 150.2624, Val 152.4381, Test 151.0426
Epoch 88: Loss:            : Train 0.0228, Val 0.0240, Test 0.0234
          R2_Score         : Train 0.3302, Val 0.3186, Test 0.3202
          RMSE             : Train 149.6927, Val 152.6266, Test 151.2032
Best:
          R2_Score         : Train 0.3251, Val 0.3203, Test 0.3217
          RMSE             : Train 150.2624, Val 152.4381, Test 151.0426
Epoch 89: Loss:            : Train 0.0230, Val 0.0239, Test 0.0232
          R2_Score         : Train 0.3238, Val 0.3213, Test 0.3234
          RMSE             : Train 150.4109, Val 152.3247, Test 150.8528
Best:
          R2_Score         : Train 0.3238, Val 0.3213, Test 0.3234
          RMSE             : Train 150.4109, Val 152.3247, Test 150.8528
Epoch 90: Loss:            : Train 0.0231, Val 0.0238, Test 0.0233
          R2_Score         : Train 0.3247, Val 0.3173, Test 0.3212
          RMSE             : Train 150.3051, Val 152.7680, Test 151.1005
Best:
          R2_Score         : Train 0.3238, Val 0.3213, Test 0.3234
          RMSE             : Train 150.4109, Val 152.3247, Test 150.8528
Epoch 91: Loss:            : Train 0.0229, Val 0.0237, Test 0.0233
          R2_Score         : Train 0.3287, Val 0.3183, Test 0.3201
          RMSE             : Train 149.8674, Val 152.6595, Test 151.2164
Best:
          R2_Score         : Train 0.3238, Val 0.3213, Test 0.3234
          RMSE             : Train 150.4109, Val 152.3247, Test 150.8528
Epoch 92: Loss:            : Train 0.0228, Val 0.0240, Test 0.0232
          R2_Score         : Train 0.3277, Val 0.3186, Test 0.3235
          RMSE             : Train 149.9707, Val 152.6187, Test 150.8402
Best:
          R2_Score         : Train 0.3238, Val 0.3213, Test 0.3234
          RMSE             : Train 150.4109, Val 152.3247, Test 150.8528
Epoch 93: Loss:            : Train 0.0229, Val 0.0243, Test 0.0235
          R2_Score         : Train 0.3292, Val 0.3168, Test 0.3173
          RMSE             : Train 149.8067, Val 152.8291, Test 151.5323
Best:
          R2_Score         : Train 0.3238, Val 0.3213, Test 0.3234
          RMSE             : Train 150.4109, Val 152.3247, Test 150.8528
Epoch 94: Loss:            : Train 0.0228, Val 0.0241, Test 0.0233
          R2_Score         : Train 0.3319, Val 0.3191, Test 0.3224
          RMSE             : Train 149.5029, Val 152.5681, Test 150.9620
Best:
          R2_Score         : Train 0.3238, Val 0.3213, Test 0.3234
          RMSE             : Train 150.4109, Val 152.3247, Test 150.8528
Epoch 95: Loss:            : Train 0.0228, Val 0.0238, Test 0.0232
          R2_Score         : Train 0.3317, Val 0.3216, Test 0.3253
          RMSE             : Train 149.5313, Val 152.2916, Test 150.6415
Best:
          R2_Score         : Train 0.3317, Val 0.3216, Test 0.3253
          RMSE             : Train 149.5313, Val 152.2916, Test 150.6415
Epoch 96: Loss:            : Train 0.0228, Val 0.0238, Test 0.0232
          R2_Score         : Train 0.3304, Val 0.3203, Test 0.3245
          RMSE             : Train 149.6680, Val 152.4321, Test 150.7328
Best:
          R2_Score         : Train 0.3317, Val 0.3216, Test 0.3253
          RMSE             : Train 149.5313, Val 152.2916, Test 150.6415
Epoch 97: Loss:            : Train 0.0227, Val 0.0238, Test 0.0233
          R2_Score         : Train 0.3328, Val 0.3208, Test 0.3215
          RMSE             : Train 149.4083, Val 152.3776, Test 151.0594
Best:
          R2_Score         : Train 0.3317, Val 0.3216, Test 0.3253
          RMSE             : Train 149.5313, Val 152.2916, Test 150.6415
Epoch 98: Loss:            : Train 0.0229, Val 0.0237, Test 0.0230
          R2_Score         : Train 0.3290, Val 0.3248, Test 0.3286
          RMSE             : Train 149.8350, Val 151.9311, Test 150.2752
Best:
          R2_Score         : Train 0.3290, Val 0.3248, Test 0.3286
          RMSE             : Train 149.8350, Val 151.9311, Test 150.2752
Epoch 99: Loss:            : Train 0.0227, Val 0.0242, Test 0.0237
          R2_Score         : Train 0.3339, Val 0.2995, Test 0.3080
          RMSE             : Train 149.2790, Val 154.7495, Test 152.5539
Best:
          R2_Score         : Train 0.3290, Val 0.3248, Test 0.3286
          RMSE             : Train 149.8350, Val 151.9311, Test 150.2752
Epoch 100: Loss:            : Train 0.0228, Val 0.0240, Test 0.0234
          R2_Score         : Train 0.3330, Val 0.3120, Test 0.3180
          RMSE             : Train 149.3846, Val 153.3595, Test 151.4483
Best:
          R2_Score         : Train 0.3290, Val 0.3248, Test 0.3286
          RMSE             : Train 149.8350, Val 151.9311, Test 150.2752
