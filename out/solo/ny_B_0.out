Loading bike from data/nytaxi/bike_201606_clean_sample_2e5.pkl
Loaded.
Loading taxi from data/nytaxi/taxi_201606_clean_sample_1e5.pkl
Loaded.
Current bike columns: ['age', 'gender_1', 'gender_2', 'sid_79', 'sid_82', 'sid_83', 'sid_116', 'sid_119', 'sid_120', 'sid_127', 'sid_128', 'sid_137', 'sid_143', 'sid_144', 'sid_146', 'sid_147', 'sid_150', 'sid_151', 'sid_152', 'sid_153', 'sid_157', 'sid_161', 'sid_164', 'sid_167', 'sid_168', 'sid_173', 'sid_174', 'sid_195', 'sid_212', 'sid_216', 'sid_217', 'sid_223', 'sid_224', 'sid_225', 'sid_228', 'sid_229', 'sid_232', 'sid_233', 'sid_236', 'sid_237', 'sid_238', 'sid_239', 'sid_241', 'sid_242', 'sid_243', 'sid_244', 'sid_245', 'sid_247', 'sid_248', 'sid_249', 'sid_250', 'sid_251', 'sid_252', 'sid_253', 'sid_254', 'sid_257', 'sid_258', 'sid_259', 'sid_260', 'sid_261', 'sid_262', 'sid_263', 'sid_264', 'sid_265', 'sid_266', 'sid_267', 'sid_268', 'sid_270', 'sid_274', 'sid_275', 'sid_276', 'sid_278', 'sid_279', 'sid_280', 'sid_281', 'sid_282', 'sid_284', 'sid_285', 'sid_289', 'sid_291', 'sid_293', 'sid_295', 'sid_296', 'sid_297', 'sid_298', 'sid_300', 'sid_301', 'sid_302', 'sid_303', 'sid_304', 'sid_305', 'sid_306', 'sid_307', 'sid_308', 'sid_309', 'sid_310', 'sid_311', 'sid_312', 'sid_313', 'sid_315', 'sid_316', 'sid_317', 'sid_319', 'sid_320', 'sid_321', 'sid_322', 'sid_323', 'sid_324', 'sid_325', 'sid_326', 'sid_327', 'sid_328', 'sid_329', 'sid_330', 'sid_331', 'sid_332', 'sid_334', 'sid_335', 'sid_336', 'sid_337', 'sid_339', 'sid_340', 'sid_341', 'sid_342', 'sid_343', 'sid_344', 'sid_345', 'sid_346', 'sid_347', 'sid_348', 'sid_349', 'sid_350', 'sid_351', 'sid_352', 'sid_353', 'sid_354', 'sid_355', 'sid_356', 'sid_357', 'sid_358', 'sid_359', 'sid_360', 'sid_361', 'sid_362', 'sid_363', 'sid_364', 'sid_365', 'sid_366', 'sid_367', 'sid_368', 'sid_369', 'sid_372', 'sid_373', 'sid_375', 'sid_376', 'sid_377', 'sid_379', 'sid_380', 'sid_382', 'sid_383', 'sid_384', 'sid_385', 'sid_386', 'sid_387', 'sid_388', 'sid_389', 'sid_390', 'sid_391', 'sid_392', 'sid_393', 'sid_394', 'sid_395', 'sid_396', 'sid_397', 'sid_398', 'sid_399', 'sid_400', 'sid_401', 'sid_402', 'sid_405', 'sid_406', 'sid_407', 'sid_408', 'sid_409', 'sid_410', 'sid_411', 'sid_412', 'sid_414', 'sid_415', 'sid_416', 'sid_417', 'sid_418', 'sid_419', 'sid_420', 'sid_421', 'sid_422', 'sid_423', 'sid_426', 'sid_427', 'sid_428', 'sid_430', 'sid_432', 'sid_433', 'sid_434', 'sid_435', 'sid_436', 'sid_437', 'sid_438', 'sid_439', 'sid_440', 'sid_441', 'sid_442', 'sid_443', 'sid_444', 'sid_445', 'sid_446', 'sid_447', 'sid_448', 'sid_449', 'sid_450', 'sid_453', 'sid_454', 'sid_455', 'sid_456', 'sid_457', 'sid_458', 'sid_459', 'sid_460', 'sid_461', 'sid_462', 'sid_465', 'sid_466', 'sid_467', 'sid_468', 'sid_469', 'sid_470', 'sid_471', 'sid_472', 'sid_473', 'sid_474', 'sid_475', 'sid_476', 'sid_477', 'sid_478', 'sid_479', 'sid_480', 'sid_481', 'sid_482', 'sid_483', 'sid_484', 'sid_485', 'sid_486', 'sid_487', 'sid_488', 'sid_490', 'sid_491', 'sid_492', 'sid_493', 'sid_494', 'sid_495', 'sid_496', 'sid_497', 'sid_498', 'sid_499', 'sid_500', 'sid_501', 'sid_502', 'sid_503', 'sid_504', 'sid_505', 'sid_507', 'sid_508', 'sid_509', 'sid_510', 'sid_511', 'sid_513', 'sid_514', 'sid_515', 'sid_516', 'sid_517', 'sid_518', 'sid_519', 'sid_520', 'sid_522', 'sid_523', 'sid_524', 'sid_525', 'sid_526', 'sid_527', 'sid_528', 'sid_529', 'sid_530', 'sid_531', 'sid_532', 'sid_533', 'sid_534', 'sid_536', 'sid_537', 'sid_539', 'sid_540', 'sid_545', 'sid_546', 'sid_2000', 'sid_2001', 'sid_2002', 'sid_2003', 'sid_2004', 'sid_2005', 'sid_2006', 'sid_2008', 'sid_2009', 'sid_2010', 'sid_2012', 'sid_2017', 'sid_2021', 'sid_2022', 'sid_2023', 'sid_3002', 'sid_3016', 'sid_3041', 'sid_3042', 'sid_3043', 'sid_3044', 'sid_3046', 'sid_3047', 'sid_3048', 'sid_3049', 'sid_3050', 'sid_3052', 'sid_3053', 'sid_3054', 'sid_3055', 'sid_3056', 'sid_3057', 'sid_3058', 'sid_3059', 'sid_3060', 'sid_3061', 'sid_3062', 'sid_3063', 'sid_3064', 'sid_3065', 'sid_3066', 'sid_3067', 'sid_3068', 'sid_3069', 'sid_3070', 'sid_3071', 'sid_3072', 'sid_3073', 'sid_3074', 'sid_3075', 'sid_3076', 'sid_3077', 'sid_3078', 'sid_3079', 'sid_3080', 'sid_3081', 'sid_3082', 'sid_3083', 'sid_3084', 'sid_3085', 'sid_3086', 'sid_3087', 'sid_3088', 'sid_3089', 'sid_3090', 'sid_3091', 'sid_3092', 'sid_3093', 'sid_3094', 'sid_3095', 'sid_3096', 'sid_3098', 'sid_3099', 'sid_3100', 'sid_3101', 'sid_3102', 'sid_3103', 'sid_3105', 'sid_3106', 'sid_3107', 'sid_3108', 'sid_3109', 'sid_3110', 'sid_3111', 'sid_3112', 'sid_3113', 'sid_3114', 'sid_3115', 'sid_3116', 'sid_3117', 'sid_3118', 'sid_3119', 'sid_3120', 'sid_3121', 'sid_3122', 'sid_3123', 'sid_3124', 'sid_3125', 'sid_3126', 'sid_3127', 'sid_3128', 'sid_3129', 'sid_3131', 'sid_3132', 'sid_3134', 'sid_3135', 'sid_3136', 'sid_3137', 'sid_3138', 'sid_3139', 'sid_3140', 'sid_3141', 'sid_3142', 'sid_3143', 'sid_3144', 'sid_3145', 'sid_3146', 'sid_3147', 'sid_3148', 'sid_3150', 'sid_3151', 'sid_3152', 'sid_3153', 'sid_3154', 'sid_3155', 'sid_3156', 'sid_3157', 'sid_3158', 'sid_3159', 'sid_3160', 'sid_3161', 'sid_3162', 'sid_3163', 'sid_3164', 'sid_3165', 'sid_3166', 'sid_3167', 'sid_3168', 'sid_3169', 'sid_3170', 'sid_3171', 'sid_3172', 'sid_3173', 'sid_3175', 'sid_3176', 'sid_3177', 'sid_3178', 'sid_3179', 'sid_3180', 'sid_3182', 'sid_3221', 'sid_3222', 'sid_3223', 'sid_3224', 'sid_3226', 'sid_3230', 'sid_3231', 'sid_3232', 'sid_3233', 'sid_3235', 'sid_3236', 'sid_3237', 'sid_3238', 'sid_3241', 'sid_3242', 'sid_3243', 'sid_3244', 'sid_3246', 'sid_3249', 'sid_3254', 'sid_3255', 'sid_3256', 'sid_3257', 'sid_3259', 'sid_3260', 'eid_79', 'eid_82', 'eid_83', 'eid_116', 'eid_119', 'eid_120', 'eid_127', 'eid_128', 'eid_137', 'eid_143', 'eid_144', 'eid_146', 'eid_147', 'eid_150', 'eid_151', 'eid_152', 'eid_153', 'eid_157', 'eid_161', 'eid_164', 'eid_167', 'eid_168', 'eid_173', 'eid_174', 'eid_195', 'eid_212', 'eid_216', 'eid_217', 'eid_223', 'eid_224', 'eid_225', 'eid_228', 'eid_229', 'eid_232', 'eid_233', 'eid_236', 'eid_237', 'eid_238', 'eid_239', 'eid_241', 'eid_242', 'eid_243', 'eid_244', 'eid_245', 'eid_247', 'eid_248', 'eid_249', 'eid_250', 'eid_251', 'eid_252', 'eid_253', 'eid_254', 'eid_255', 'eid_257', 'eid_258', 'eid_259', 'eid_260', 'eid_261', 'eid_262', 'eid_263', 'eid_264', 'eid_265', 'eid_266', 'eid_267', 'eid_268', 'eid_270', 'eid_274', 'eid_275', 'eid_276', 'eid_278', 'eid_279', 'eid_280', 'eid_281', 'eid_282', 'eid_284', 'eid_285', 'eid_289', 'eid_291', 'eid_293', 'eid_295', 'eid_296', 'eid_297', 'eid_298', 'eid_300', 'eid_301', 'eid_302', 'eid_303', 'eid_304', 'eid_305', 'eid_306', 'eid_307', 'eid_308', 'eid_309', 'eid_310', 'eid_311', 'eid_312', 'eid_313', 'eid_315', 'eid_316', 'eid_317', 'eid_319', 'eid_320', 'eid_321', 'eid_322', 'eid_323', 'eid_324', 'eid_325', 'eid_326', 'eid_327', 'eid_328', 'eid_329', 'eid_330', 'eid_331', 'eid_332', 'eid_334', 'eid_335', 'eid_336', 'eid_337', 'eid_339', 'eid_340', 'eid_341', 'eid_342', 'eid_343', 'eid_344', 'eid_345', 'eid_346', 'eid_347', 'eid_348', 'eid_349', 'eid_350', 'eid_351', 'eid_352', 'eid_353', 'eid_354', 'eid_355', 'eid_356', 'eid_357', 'eid_358', 'eid_359', 'eid_360', 'eid_361', 'eid_362', 'eid_363', 'eid_364', 'eid_365', 'eid_366', 'eid_367', 'eid_368', 'eid_369', 'eid_372', 'eid_373', 'eid_375', 'eid_376', 'eid_377', 'eid_379', 'eid_380', 'eid_382', 'eid_383', 'eid_384', 'eid_385', 'eid_386', 'eid_387', 'eid_388', 'eid_389', 'eid_390', 'eid_391', 'eid_392', 'eid_393', 'eid_394', 'eid_395', 'eid_396', 'eid_397', 'eid_398', 'eid_399', 'eid_400', 'eid_401', 'eid_402', 'eid_405', 'eid_406', 'eid_407', 'eid_408', 'eid_409', 'eid_410', 'eid_411', 'eid_412', 'eid_414', 'eid_415', 'eid_416', 'eid_417', 'eid_418', 'eid_419', 'eid_420', 'eid_421', 'eid_422', 'eid_423', 'eid_426', 'eid_427', 'eid_428', 'eid_430', 'eid_432', 'eid_433', 'eid_434', 'eid_435', 'eid_436', 'eid_437', 'eid_438', 'eid_439', 'eid_440', 'eid_441', 'eid_442', 'eid_443', 'eid_444', 'eid_445', 'eid_446', 'eid_447', 'eid_448', 'eid_449', 'eid_450', 'eid_453', 'eid_454', 'eid_455', 'eid_456', 'eid_457', 'eid_458', 'eid_459', 'eid_460', 'eid_461', 'eid_462', 'eid_465', 'eid_466', 'eid_467', 'eid_468', 'eid_469', 'eid_470', 'eid_471', 'eid_472', 'eid_473', 'eid_474', 'eid_475', 'eid_476', 'eid_477', 'eid_478', 'eid_479', 'eid_480', 'eid_481', 'eid_482', 'eid_483', 'eid_484', 'eid_485', 'eid_486', 'eid_487', 'eid_488', 'eid_490', 'eid_491', 'eid_492', 'eid_493', 'eid_494', 'eid_495', 'eid_496', 'eid_497', 'eid_498', 'eid_499', 'eid_500', 'eid_501', 'eid_502', 'eid_503', 'eid_504', 'eid_505', 'eid_507', 'eid_508', 'eid_509', 'eid_510', 'eid_511', 'eid_513', 'eid_514', 'eid_515', 'eid_516', 'eid_517', 'eid_518', 'eid_519', 'eid_520', 'eid_522', 'eid_523', 'eid_524', 'eid_525', 'eid_526', 'eid_527', 'eid_528', 'eid_529', 'eid_530', 'eid_531', 'eid_532', 'eid_533', 'eid_534', 'eid_536', 'eid_537', 'eid_539', 'eid_540', 'eid_545', 'eid_546', 'eid_2000', 'eid_2001', 'eid_2002', 'eid_2003', 'eid_2004', 'eid_2005', 'eid_2006', 'eid_2008', 'eid_2009', 'eid_2010', 'eid_2012', 'eid_2017', 'eid_2021', 'eid_2022', 'eid_2023', 'eid_3002', 'eid_3016', 'eid_3017', 'eid_3041', 'eid_3042', 'eid_3043', 'eid_3044', 'eid_3046', 'eid_3047', 'eid_3048', 'eid_3049', 'eid_3050', 'eid_3052', 'eid_3053', 'eid_3054', 'eid_3055', 'eid_3056', 'eid_3057', 'eid_3058', 'eid_3059', 'eid_3060', 'eid_3061', 'eid_3062', 'eid_3063', 'eid_3064', 'eid_3065', 'eid_3066', 'eid_3067', 'eid_3068', 'eid_3069', 'eid_3070', 'eid_3071', 'eid_3072', 'eid_3073', 'eid_3074', 'eid_3075', 'eid_3076', 'eid_3077', 'eid_3078', 'eid_3079', 'eid_3080', 'eid_3081', 'eid_3082', 'eid_3083', 'eid_3084', 'eid_3085', 'eid_3086', 'eid_3087', 'eid_3088', 'eid_3089', 'eid_3090', 'eid_3091', 'eid_3092', 'eid_3093', 'eid_3094', 'eid_3095', 'eid_3096', 'eid_3098', 'eid_3099', 'eid_3100', 'eid_3101', 'eid_3102', 'eid_3103', 'eid_3105', 'eid_3106', 'eid_3107', 'eid_3108', 'eid_3109', 'eid_3110', 'eid_3111', 'eid_3112', 'eid_3113', 'eid_3114', 'eid_3115', 'eid_3116', 'eid_3117', 'eid_3118', 'eid_3119', 'eid_3120', 'eid_3121', 'eid_3122', 'eid_3123', 'eid_3124', 'eid_3125', 'eid_3126', 'eid_3127', 'eid_3128', 'eid_3129', 'eid_3131', 'eid_3132', 'eid_3134', 'eid_3135', 'eid_3136', 'eid_3137', 'eid_3138', 'eid_3139', 'eid_3140', 'eid_3141', 'eid_3142', 'eid_3143', 'eid_3144', 'eid_3145', 'eid_3146', 'eid_3147', 'eid_3148', 'eid_3150', 'eid_3151', 'eid_3152', 'eid_3153', 'eid_3154', 'eid_3155', 'eid_3156', 'eid_3157', 'eid_3158', 'eid_3159', 'eid_3160', 'eid_3161', 'eid_3162', 'eid_3163', 'eid_3164', 'eid_3165', 'eid_3166', 'eid_3167', 'eid_3168', 'eid_3169', 'eid_3170', 'eid_3171', 'eid_3172', 'eid_3173', 'eid_3175', 'eid_3176', 'eid_3177', 'eid_3178', 'eid_3179', 'eid_3180', 'eid_3182', 'eid_3183', 'eid_3184', 'eid_3192', 'eid_3219', 'eid_3221', 'eid_3222', 'eid_3223', 'eid_3224', 'eid_3226', 'eid_3230', 'eid_3231', 'eid_3232', 'eid_3233', 'eid_3235', 'eid_3236', 'eid_3237', 'eid_3238', 'eid_3240', 'eid_3241', 'eid_3242', 'eid_3243', 'eid_3244', 'eid_3246', 'eid_3249', 'eid_3250', 'eid_3252', 'eid_3254', 'eid_3255', 'eid_3256', 'eid_3257', 'eid_3259', 'eid_3260', 'start_lon', 'start_lat', 'end_lon', 'end_lat']  0%|          | 0/140000 [00:00<?, ?it/s]  0%|          | 500/140000 [00:00<00:27, 4992.70it/s]  1%|          | 1000/140000 [00:00<00:29, 4739.85it/s]  1%|          | 1475/140000 [00:00<00:29, 4684.64it/s]  2%|▏         | 2229/140000 [00:00<00:23, 5782.96it/s]  2%|▏         | 3022/140000 [00:00<00:20, 6542.01it/s]  3%|▎         | 3815/140000 [00:00<00:19, 7008.52it/s]  3%|▎         | 4592/140000 [00:00<00:18, 7252.70it/s]  4%|▍         | 5385/140000 [00:00<00:18, 7466.88it/s]  4%|▍         | 6169/140000 [00:00<00:17, 7580.29it/s]  5%|▍         | 6965/140000 [00:01<00:17, 7694.62it/s]  6%|▌         | 7759/140000 [00:01<00:17, 7769.28it/s]  6%|▌         | 8551/140000 [00:01<00:16, 7814.85it/s]  7%|▋         | 9333/140000 [00:01<00:16, 7804.78it/s]  7%|▋         | 10134/140000 [00:01<00:16, 7864.10it/s]  8%|▊         | 10933/140000 [00:01<00:16, 7898.95it/s]  8%|▊         | 11731/140000 [00:01<00:16, 7920.63it/s]  9%|▉         | 12524/140000 [00:01<00:16, 7892.45it/s] 10%|▉         | 13327/140000 [00:01<00:15, 7933.32it/s] 10%|█         | 14121/140000 [00:01<00:15, 7920.79it/s] 11%|█         | 14915/140000 [00:02<00:15, 7925.39it/s] 11%|█         | 15708/140000 [00:02<00:15, 7899.02it/s] 12%|█▏        | 16502/140000 [00:02<00:15, 7910.94it/s] 12%|█▏        | 17294/140000 [00:02<00:15, 7891.52it/s] 13%|█▎        | 18089/140000 [00:02<00:15, 7906.03it/s] 13%|█▎        | 18880/140000 [00:02<00:15, 7895.07it/s] 14%|█▍        | 19676/140000 [00:02<00:15, 7911.87it/s] 15%|█▍        | 20468/140000 [00:02<00:15, 7895.46it/s] 15%|█▌        | 21258/140000 [00:02<00:15, 7893.75it/s] 16%|█▌        | 22048/140000 [00:02<00:14, 7878.45it/s] 16%|█▋        | 22841/140000 [00:03<00:14, 7891.02it/s] 17%|█▋        | 23631/140000 [00:03<00:14, 7881.45it/s] 17%|█▋        | 24423/140000 [00:03<00:14, 7891.88it/s] 18%|█▊        | 25213/140000 [00:03<00:14, 7862.60it/s] 19%|█▊        | 26003/140000 [00:03<00:14, 7873.52it/s] 19%|█▉        | 26795/140000 [00:03<00:14, 7885.53it/s] 20%|█▉        | 27584/140000 [00:03<00:14, 7879.09it/s] 20%|██        | 28372/140000 [00:03<00:14, 7874.64it/s] 21%|██        | 29160/140000 [00:03<00:14, 7852.91it/s] 21%|██▏       | 29948/140000 [00:03<00:14, 7859.99it/s] 22%|██▏       | 30735/140000 [00:04<00:13, 7855.63it/s] 23%|██▎       | 31533/140000 [00:04<00:13, 7890.51it/s] 23%|██▎       | 32323/140000 [00:04<00:13, 7884.11it/s] 24%|██▎       | 33117/140000 [00:04<00:13, 7900.64it/s] 24%|██▍       | 33908/140000 [00:04<00:13, 7883.72it/s] 25%|██▍       | 34700/140000 [00:04<00:13, 7892.49it/s] 25%|██▌       | 35490/140000 [00:04<00:13, 7874.08it/s] 26%|██▌       | 36278/140000 [00:04<00:13, 7872.12it/s] 26%|██▋       | 37066/140000 [00:04<00:13, 7862.00it/s] 27%|██▋       | 37856/140000 [00:04<00:12, 7872.66it/s] 28%|██▊       | 38644/140000 [00:05<00:12, 7874.54it/s] 28%|██▊       | 39438/140000 [00:05<00:12, 7893.86it/s] 29%|██▊       | 40228/140000 [00:05<00:12, 7886.11it/s] 29%|██▉       | 41021/140000 [00:05<00:12, 7897.50it/s] 30%|██▉       | 41811/140000 [00:05<00:12, 7887.32it/s] 30%|███       | 42607/140000 [00:05<00:12, 7907.75it/s] 31%|███       | 43398/140000 [00:05<00:12, 7885.82it/s] 32%|███▏      | 44188/140000 [00:05<00:12, 7888.51it/s] 32%|███▏      | 44977/140000 [00:05<00:12, 7873.62it/s] 33%|███▎      | 45770/140000 [00:05<00:11, 7889.46it/s] 33%|███▎      | 46559/140000 [00:06<00:11, 7878.50it/s] 34%|███▍      | 47350/140000 [00:06<00:11, 7885.51it/s] 34%|███▍      | 48139/140000 [00:06<00:11, 7880.15it/s] 35%|███▍      | 48933/140000 [00:06<00:11, 7897.44it/s] 36%|███▌      | 49723/140000 [00:06<00:11, 7733.85it/s] 36%|███▌      | 50541/140000 [00:06<00:11, 7865.13it/s] 37%|███▋      | 51352/140000 [00:06<00:11, 7935.56it/s] 37%|███▋      | 52169/140000 [00:06<00:10, 8002.45it/s] 38%|███▊      | 52977/140000 [00:06<00:10, 8022.82it/s] 38%|███▊      | 53790/140000 [00:06<00:10, 8051.95it/s] 39%|███▉      | 54596/140000 [00:07<00:10, 8009.61it/s] 40%|███▉      | 55426/140000 [00:07<00:10, 8094.99it/s] 40%|████      | 56255/140000 [00:07<00:10, 8153.05it/s] 41%|████      | 57093/140000 [00:07<00:10, 8219.53it/s] 41%|████▏     | 57934/140000 [00:07<00:09, 8275.40it/s] 42%|████▏     | 58781/140000 [00:07<00:09, 8332.60it/s] 43%|████▎     | 59630/140000 [00:07<00:09, 8377.91it/s] 43%|████▎     | 60473/140000 [00:07<00:09, 8391.61it/s] 44%|████▍     | 61323/140000 [00:07<00:09, 8422.79it/s] 44%|████▍     | 62166/140000 [00:07<00:09, 8392.97it/s] 45%|████▌     | 63007/140000 [00:08<00:09, 8396.94it/s] 46%|████▌     | 63852/140000 [00:08<00:09, 8412.51it/s] 46%|████▌     | 64702/140000 [00:08<00:08, 8437.16it/s] 47%|████▋     | 65548/140000 [00:08<00:08, 8442.10it/s] 47%|████▋     | 66410/140000 [00:08<00:08, 8494.38it/s] 51%|█████     | 71435/140000 [00:08<00:03, 21009.55it/s] 55%|█████▍    | 76614/140000 [00:08<00:02, 30235.88it/s] 58%|█████▊    | 81764/140000 [00:08<00:01, 36610.44it/s] 62%|██████▏   | 86948/140000 [00:08<00:01, 41176.05it/s] 66%|██████▌   | 92117/140000 [00:08<00:01, 44326.21it/s] 70%|██████▉   | 97314/140000 [00:09<00:00, 46616.59it/s] 73%|███████▎  | 102458/140000 [00:09<00:00, 48061.30it/s] 77%|███████▋  | 107636/140000 [00:09<00:00, 49173.57it/s] 80%|████████  | 112554/140000 [00:09<00:01, 18950.52it/s] 83%|████████▎ | 116230/140000 [00:10<00:01, 20500.96it/s] 85%|████████▌ | 119630/140000 [00:10<00:00, 20681.20it/s] 88%|████████▊ | 123709/140000 [00:10<00:00, 24183.43it/s] 92%|█████████▏| 128674/140000 [00:10<00:00, 29256.32it/s] 95%|█████████▌| 133647/140000 [00:10<00:00, 33791.33it/s] 98%|█████████▊| 137816/140000 [00:10<00:00, 31154.23it/s]100%|██████████| 140000/140000 [00:10<00:00, 13056.94it/s]
  0%|          | 0/20000 [00:00<?, ?it/s] 30%|██▉       | 5934/20000 [00:00<00:00, 59331.43it/s] 64%|██████▍   | 12886/20000 [00:00<00:00, 65319.62it/s] 99%|█████████▉| 19768/20000 [00:00<00:00, 66911.98it/s]100%|██████████| 20000/20000 [00:00<00:00, 65793.57it/s]
  0%|          | 0/40000 [00:00<?, ?it/s]  2%|▏         | 922/40000 [00:00<00:04, 9210.87it/s]  5%|▍         | 1868/40000 [00:00<00:04, 9352.01it/s]  7%|▋         | 2823/40000 [00:00<00:03, 9439.48it/s]  9%|▉         | 3772/40000 [00:00<00:03, 9458.10it/s] 12%|█▏        | 4729/40000 [00:00<00:03, 9496.78it/s] 14%|█▍        | 5690/40000 [00:00<00:03, 9532.79it/s] 17%|█▋        | 6651/40000 [00:00<00:03, 9556.69it/s] 19%|█▉        | 7613/40000 [00:00<00:03, 9576.52it/s] 21%|██▏       | 8587/40000 [00:00<00:03, 9625.77it/s] 24%|██▍       | 9583/40000 [00:01<00:03, 9728.14it/s] 26%|██▋       | 10574/40000 [00:01<00:03, 9783.61it/s] 29%|██▉       | 11566/40000 [00:01<00:02, 9823.69it/s] 31%|███▏      | 12557/40000 [00:01<00:02, 9849.36it/s] 34%|███▍      | 13542/40000 [00:01<00:02, 9743.05it/s] 36%|███▋      | 14538/40000 [00:01<00:02, 9805.90it/s] 39%|███▉      | 15519/40000 [00:01<00:02, 9695.13it/s] 41%|████▏     | 16522/40000 [00:01<00:02, 9792.80it/s] 44%|████▍     | 17502/40000 [00:01<00:02, 9696.83it/s] 46%|████▋     | 18509/40000 [00:01<00:02, 9806.02it/s] 49%|████▉     | 19511/40000 [00:02<00:02, 9867.63it/s] 51%|█████     | 20499/40000 [00:02<00:02, 9748.46it/s] 54%|█████▍    | 21501/40000 [00:02<00:01, 9827.56it/s] 56%|█████▌    | 22487/40000 [00:02<00:01, 9834.36it/s] 59%|█████▊    | 23485/40000 [00:02<00:01, 9875.21it/s] 61%|██████    | 24481/40000 [00:02<00:01, 9899.01it/s] 64%|██████▎   | 25472/40000 [00:02<00:01, 9894.76it/s] 66%|██████▌   | 26462/40000 [00:02<00:01, 9890.56it/s] 69%|██████▊   | 27454/40000 [00:02<00:01, 9899.15it/s] 71%|███████   | 28444/40000 [00:02<00:01, 9898.42it/s] 74%|███████▎  | 29434/40000 [00:03<00:01, 9861.06it/s] 76%|███████▌  | 30424/40000 [00:03<00:00, 9872.36it/s] 79%|███████▊  | 31412/40000 [00:03<00:00, 9868.68it/s] 81%|████████  | 32404/40000 [00:03<00:00, 9881.92it/s] 83%|████████▎ | 33396/40000 [00:03<00:00, 9892.21it/s] 86%|████████▌ | 34387/40000 [00:03<00:00, 9894.61it/s] 88%|████████▊ | 35383/40000 [00:03<00:00, 9911.43it/s] 91%|█████████ | 36375/40000 [00:03<00:00, 9912.54it/s] 93%|█████████▎| 37377/40000 [00:03<00:00, 9944.26it/s] 96%|█████████▌| 38379/40000 [00:03<00:00, 9964.91it/s] 98%|█████████▊| 39385/40000 [00:04<00:00, 9991.21it/s]100%|██████████| 40000/40000 [00:04<00:00, 9804.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 38.24it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 40.96it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 41.73it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 42.34it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 41.44it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 44.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.48it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 38.68it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 43.18it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.17it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 34.35it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 38.65it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 40.76it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 41.44it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 40.92it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 40.76it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 41.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 46.37it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 56.66it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 27.81it/s]Train:  20%|██        | 7/35 [00:00<00:00, 33.02it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 33.33it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.26it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.88it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 37.32it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 39.08it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.64it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 44.57it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.96it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.70it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 39.43it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 41.43it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 40.73it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 39.50it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 39.97it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.20it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.04it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.43it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.33it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 29.51it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 38.87it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 41.18it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 42.25it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 42.89it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 41.46it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 39.08it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.01it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 59.44it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 27.05it/s]Train:  20%|██        | 7/35 [00:00<00:00, 32.92it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 36.66it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 39.72it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 41.02it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 42.08it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 45.48it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.51it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.31it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 32.31it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 39.13it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 41.47it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 42.27it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.57it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 35.60it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.76it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.21it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.73it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 16.05it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.72it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.32it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.98it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 37.32it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 38.39it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.82it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.40it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.05it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.07it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 43.95it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 37.98it/s]Train:  40%|████      | 14/35 [00:00<00:00, 37.40it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.88it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 37.78it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 39.27it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.84it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.11it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.94it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.77it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 28.23it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 37.26it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 38.95it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 40.16it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 40.44it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 39.86it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 41.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 36.55it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.10it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 59.49it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 29.85it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.52it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 36.98it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 39.57it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 40.71it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 41.54it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.54it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 44.56it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.71it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.33it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 34.27it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 40.34it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 41.75it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 42.34it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 41.62it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 41.94it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 48.02it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 58.17it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 28.81it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 36.60it/s]Train:  40%|████      | 14/35 [00:00<00:00, 40.10it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 38.23it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 37.79it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 39.16it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.39it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.92it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.86it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 44.01it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 37.95it/s]Train:  40%|████      | 14/35 [00:00<00:00, 37.16it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.93it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 37.94it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 39.91it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.83it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.21it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.60it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.39it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 22.08it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 32.11it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 36.99it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 39.06it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 40.65it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 40.22it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 31.10it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 44.77it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 58.28it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 29.55it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.54it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 37.40it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 40.20it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 41.34it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 42.09it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.77it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 45.50it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.72it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.49it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 33.90it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 39.42it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 41.07it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 41.96it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 41.35it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 41.69it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.97it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 48.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 58.59it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 29.36it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 36.89it/s]Train:  40%|████      | 14/35 [00:00<00:00, 40.30it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 41.79it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 41.29it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 42.03it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.48it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.41it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.53it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.46it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 40.67it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 42.63it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 43.16it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 42.16it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 42.75it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 46.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 39.38it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 44.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.21it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.78it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.65it/s]
Current taxi columns: ['start_lon', 'start_lat', 'end_lon', 'end_lat', 'trip_distance', 'taxi_duration']
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 2 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [2, 200]  [4096, 200]     600        400
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           20801
Trainable params       20801
Non-trainable params       0
Mult-Adds              20500
=================================================================
n_classes=2
task=regression
model_name=ny_B_2022-05-21-20-59-59
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:0
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/ny_B_2022-05-21-20-59-59.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f150c1cc8e0>, <metric.rmse.RMSE object at 0x7f150c1cc940>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=2, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f150c1cc850>
Epoch 1: Loss:            : Train 0.0600, Val 0.0295, Test 0.0298
          R2_Score         : Train -0.2264, Val 0.3894, Test 0.3981
          RMSE             : Train 477.7960, Val 332.9955, Test 334.4842
Best:
          R2_Score         : Train -0.2264, Val 0.3894, Test 0.3981
          RMSE             : Train 477.7960, Val 332.9955, Test 334.4842
Epoch 2: Loss:            : Train 0.0226, Val 0.0196, Test 0.0201
          R2_Score         : Train 0.5432, Val 0.5950, Test 0.5943
          RMSE             : Train 291.5865, Val 271.1929, Test 274.6115
Best:
          R2_Score         : Train 0.5432, Val 0.5950, Test 0.5943
          RMSE             : Train 291.5865, Val 271.1929, Test 274.6115
Epoch 3: Loss:            : Train 0.0195, Val 0.0188, Test 0.0192
          R2_Score         : Train 0.6046, Val 0.6100, Test 0.6116
          RMSE             : Train 271.2983, Val 266.1343, Test 268.6920
Best:
          R2_Score         : Train 0.6046, Val 0.6100, Test 0.6116
          RMSE             : Train 271.2983, Val 266.1343, Test 268.6920
Epoch 4: Loss:            : Train 0.0191, Val 0.0188, Test 0.0191
          R2_Score         : Train 0.6131, Val 0.6111, Test 0.6135
          RMSE             : Train 268.3585, Val 265.7405, Test 268.0241
Best:
          R2_Score         : Train 0.6131, Val 0.6111, Test 0.6135
          RMSE             : Train 268.3585, Val 265.7405, Test 268.0241
Epoch 5: Loss:            : Train 0.0190, Val 0.0187, Test 0.0191
          R2_Score         : Train 0.6151, Val 0.6126, Test 0.6152
          RMSE             : Train 267.6713, Val 265.2536, Test 267.4568
Best:
          R2_Score         : Train 0.6151, Val 0.6126, Test 0.6152
          RMSE             : Train 267.6713, Val 265.2536, Test 267.4568
Epoch 6: Loss:            : Train 0.0191, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6160, Val 0.6144, Test 0.6160
          RMSE             : Train 267.3393, Val 264.6433, Test 267.1488
Best:
          R2_Score         : Train 0.6160, Val 0.6144, Test 0.6160
          RMSE             : Train 267.3393, Val 264.6433, Test 267.1488
Epoch 7: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6168, Val 0.6150, Test 0.6168
          RMSE             : Train 267.0669, Val 264.4116, Test 266.8997
Best:
          R2_Score         : Train 0.6168, Val 0.6150, Test 0.6168
          RMSE             : Train 267.0669, Val 264.4116, Test 266.8997
Epoch 8: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6168, Val 0.6150, Test 0.6172
          RMSE             : Train 267.0835, Val 264.4160, Test 266.7326
Best:
          R2_Score         : Train 0.6168, Val 0.6150, Test 0.6168
          RMSE             : Train 267.0669, Val 264.4116, Test 266.8997
Epoch 9: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6177, Val 0.6161, Test 0.6179
          RMSE             : Train 266.7761, Val 264.0453, Test 266.5087
Best:
          R2_Score         : Train 0.6177, Val 0.6161, Test 0.6179
          RMSE             : Train 266.7761, Val 264.0453, Test 266.5087
Epoch 10: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6179, Val 0.6163, Test 0.6177
          RMSE             : Train 266.7005, Val 263.9882, Test 266.5669
Best:
          R2_Score         : Train 0.6179, Val 0.6163, Test 0.6177
          RMSE             : Train 266.7005, Val 263.9882, Test 266.5669
Epoch 11: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6174, Val 0.6158, Test 0.6179
          RMSE             : Train 266.8714, Val 264.1373, Test 266.4947
Best:
          R2_Score         : Train 0.6179, Val 0.6163, Test 0.6177
          RMSE             : Train 266.7005, Val 263.9882, Test 266.5669
Epoch 12: Loss:            : Train 0.0190, Val 0.0187, Test 0.0191
          R2_Score         : Train 0.6178, Val 0.6125, Test 0.6149
          RMSE             : Train 266.7337, Val 265.2747, Test 267.5373
Best:
          R2_Score         : Train 0.6179, Val 0.6163, Test 0.6177
          RMSE             : Train 266.7005, Val 263.9882, Test 266.5669
Epoch 13: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6181, Val 0.6168, Test 0.6185
          RMSE             : Train 266.6304, Val 263.8103, Test 266.2955
Best:
          R2_Score         : Train 0.6181, Val 0.6168, Test 0.6185
          RMSE             : Train 266.6304, Val 263.8103, Test 266.2955
Epoch 14: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6181, Val 0.6155, Test 0.6172
          RMSE             : Train 266.6258, Val 264.2476, Test 266.7369
Best:
          R2_Score         : Train 0.6181, Val 0.6168, Test 0.6185
          RMSE             : Train 266.6304, Val 263.8103, Test 266.2955
Epoch 15: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6178, Val 0.6156, Test 0.6170
          RMSE             : Train 266.7213, Val 264.2151, Test 266.8005
Best:
          R2_Score         : Train 0.6181, Val 0.6168, Test 0.6185
          RMSE             : Train 266.6304, Val 263.8103, Test 266.2955
Epoch 16: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6183, Val 0.6158, Test 0.6176
          RMSE             : Train 266.5518, Val 264.1535, Test 266.6082
Best:
          R2_Score         : Train 0.6181, Val 0.6168, Test 0.6185
          RMSE             : Train 266.6304, Val 263.8103, Test 266.2955
Epoch 17: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6184, Val 0.6161, Test 0.6174
          RMSE             : Train 266.5311, Val 264.0415, Test 266.6818
Best:
          R2_Score         : Train 0.6181, Val 0.6168, Test 0.6185
          RMSE             : Train 266.6304, Val 263.8103, Test 266.2955
Epoch 18: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6185, Val 0.6167, Test 0.6180
          RMSE             : Train 266.4889, Val 263.8376, Test 266.4677
Best:
          R2_Score         : Train 0.6181, Val 0.6168, Test 0.6185
          RMSE             : Train 266.6304, Val 263.8103, Test 266.2955
Epoch 19: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 22.09it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 33.32it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 37.83it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 39.45it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 40.60it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 40.49it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.88it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 44.92it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 58.60it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 35.07it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 36.92it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 36.00it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 39.13it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 40.87it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 41.75it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 37.90it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 45.94it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 47.11it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.88it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 34.06it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 39.98it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 42.15it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 42.85it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 42.17it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 42.89it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 49.98it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 60.02it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 29.15it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 36.91it/s]Train:  40%|████      | 14/35 [00:00<00:00, 40.47it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 41.99it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 41.63it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 42.37it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 39.03it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 44.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.74it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 47.37it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 47.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 41.66it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 43.42it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 43.87it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 42.79it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 43.03it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 46.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.36it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 47.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 47.00it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 29.42it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 39.19it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 41.26it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 42.19it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 42.44it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 41.92it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 39.26it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 44.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 45.91it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 59.61it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 29.93it/s]Train:  20%|██        | 7/35 [00:00<00:00, 35.01it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 37.86it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 40.74it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 41.82it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 42.63it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.63it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.07it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 47.44it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 47.19it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 33.91it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 40.53it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 42.00it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 42.83it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 42.11it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 42.36it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.67it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 49.58it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 59.61it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 30.00it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 37.46it/s]Train:  40%|████      | 14/35 [00:00<00:00, 41.08it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 42.41it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 42.03it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 42.83it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 44.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 38.84it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 46.28it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 47.10it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 41.18it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 43.37it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 43.70it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 42.80it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 43.15it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 46.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 39.84it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 44.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 45.20it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.08it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 28.47it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 38.84it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 41.19it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 42.63it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 43.40it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 39.59it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 41.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 26.97it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 30.68it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.76it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 28.20it/s]Train:  20%|██        | 7/35 [00:00<00:00, 32.99it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 36.38it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 39.05it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 40.39it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 39.09it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.11it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.40it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.69it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.47it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.84it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 23.27it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 25.37it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 25.22it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 24.12it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 24.31it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.58it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 31.45it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.06it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 12.37it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 21.17it/s]Train:  40%|████      | 14/35 [00:00<00:00, 25.10it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 26.96it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 26.59it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 27.48it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 18.03it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 26.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 24.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.13it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.29it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 27.77it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.25it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 29.56it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.00it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 29.65it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 15.58it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 24.55it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.76it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 16.74it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 24.53it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 26.57it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 28.34it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 28.81it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 27.81it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 18.05it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 28.86it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.86it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  6.98it/s]Train:  20%|██        | 7/35 [00:00<00:01, 22.07it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 24.24it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 26.60it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 27.69it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 28.74it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  6.94it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 15.60it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 29.84it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 24.89it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.34it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.20it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 32.47it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 30.70it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 30.42it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.69it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 37.11it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 47.81it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.20it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 31.55it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.59it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.57it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 34.84it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.14it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.43it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 35.78it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.44it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.63it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 36.74it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 38.02it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 38.17it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.79it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 37.21it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.85it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 35.84it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 36.25it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.96it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 24.50it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 33.13it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.74it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.68it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.59it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 33.98it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 25.55it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 30.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.72it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.97it/s]Train:  20%|██        | 7/35 [00:00<00:00, 29.97it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.83it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.88it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.22it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.43it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 28.81it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 36.87it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 37.63it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.43it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 31.07it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.96it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.65it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.40it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.91it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 35.64it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.17it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 38.51it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 48.59it/s]
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 20: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6185, Val 0.6167, Test 0.6179
          RMSE             : Train 266.4774, Val 263.8317, Test 266.5190
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 21: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6183, Val 0.6169, Test 0.6184
          RMSE             : Train 266.5629, Val 263.7716, Test 266.3125
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 22: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6165, Test 0.6181
          RMSE             : Train 266.4393, Val 263.9145, Test 266.4319
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 23: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6185, Val 0.6161, Test 0.6182
          RMSE             : Train 266.4861, Val 264.0544, Test 266.4021
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 24: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6163, Test 0.6184
          RMSE             : Train 266.3181, Val 263.9736, Test 266.3300
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 25: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6181, Val 0.6142, Test 0.6163
          RMSE             : Train 266.6366, Val 264.6861, Test 267.0743
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 26: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6184, Val 0.6160, Test 0.6177
          RMSE             : Train 266.5265, Val 264.0839, Test 266.5706
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 27: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6185, Val 0.6169, Test 0.6188
          RMSE             : Train 266.4978, Val 263.7668, Test 266.2010
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 28: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6159, Test 0.6180
          RMSE             : Train 266.3127, Val 264.1002, Test 266.4840
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 29: Loss:            : Train 0.0189, Val 0.0187, Test 0.0190
          R2_Score         : Train 0.6189, Val 0.6129, Test 0.6158
          RMSE             : Train 266.3436, Val 265.1340, Test 267.2393
Best:
          R2_Score         : Train 0.6187, Val 0.6170, Test 0.6187
          RMSE             : Train 266.4290, Val 263.7323, Test 266.2102
Epoch 30: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6172, Test 0.6192
          RMSE             : Train 266.4637, Val 263.6790, Test 266.0563
Best:
          R2_Score         : Train 0.6186, Val 0.6172, Test 0.6192
          RMSE             : Train 266.4637, Val 263.6790, Test 266.0563
Epoch 31: Loss:            : Train 0.0188, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6192, Val 0.6146, Test 0.6167
          RMSE             : Train 266.2537, Val 264.5585, Test 266.9263
Best:
          R2_Score         : Train 0.6186, Val 0.6172, Test 0.6192
          RMSE             : Train 266.4637, Val 263.6790, Test 266.0563
Epoch 32: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 33: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6169, Test 0.6186
          RMSE             : Train 266.2911, Val 263.7805, Test 266.2673
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 34: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6168, Test 0.6186
          RMSE             : Train 266.2483, Val 263.7946, Test 266.2645
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 35: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6164, Test 0.6185
          RMSE             : Train 266.1305, Val 263.9423, Test 266.2918
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 36: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6193, Val 0.6144, Test 0.6166
          RMSE             : Train 266.2155, Val 264.6228, Test 266.9501
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 37: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6169, Test 0.6176
          RMSE             : Train 266.2984, Val 263.7787, Test 266.6041
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 38: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6158, Test 0.6178
          RMSE             : Train 266.3918, Val 264.1354, Test 266.5333
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 39: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6165, Test 0.6183
          RMSE             : Train 266.4127, Val 263.8890, Test 266.3719
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 40: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6168, Test 0.6185
          RMSE             : Train 266.2801, Val 263.7941, Test 266.2878
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 41: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6175, Test 0.6190
          RMSE             : Train 266.2008, Val 263.5471, Test 266.1158
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 42: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6156, Test 0.6181
          RMSE             : Train 266.3133, Val 264.2190, Test 266.4460
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.25it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.26it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.64it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 32.75it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 33.13it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.68it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.20it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 33.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.33it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.90it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 34.59it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 35.46it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.21it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.40it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.02it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 28.44it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 38.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 29.73it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 26.22it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.19it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 17.22it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 27.16it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.36it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.10it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.19it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 33.89it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 34.01it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 38.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 42.57it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 55.60it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 26.50it/s]Train:  20%|██        | 7/35 [00:00<00:00, 31.46it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 33.17it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.56it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 37.25it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.98it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 28.79it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 38.85it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 38.93it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.86it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 32.32it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 38.10it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 38.85it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 39.60it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.79it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 39.06it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.97it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 47.42it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 57.61it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 28.05it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 35.08it/s]Train:  40%|████      | 14/35 [00:00<00:00, 37.66it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 38.73it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 38.45it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 39.06it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 28.34it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 38.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 36.58it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.81it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.06it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 36.49it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 39.65it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 40.07it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 38.80it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 39.58it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 28.88it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 44.67it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.59it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.12it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 27.30it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 33.86it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 37.46it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 38.97it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.74it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 37.96it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 37.25it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 44.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 57.98it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.94it/s]Train:  20%|██        | 7/35 [00:00<00:00, 30.70it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.01it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.18it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 38.02it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 39.20it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 36.60it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 39.51it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 42.94it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.03it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 32.96it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 39.12it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 38.97it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 37.96it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.81it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 41.01it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.96it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 46.21it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 50.13it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.75it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 33.17it/s]Train:  40%|████      | 14/35 [00:00<00:00, 35.89it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.44it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 37.27it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 38.17it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 36.32it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 38.83it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.51it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 39.23it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 36.96it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.50it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.58it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 32.79it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  4.06it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 16.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.92it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 33.33it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.14it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 26.17it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 34.75it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 35.07it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.31it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.57it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 34.93it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 26.53it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 29.95it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.16it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  8.29it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 28.16it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.31it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 26.18it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.12it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.49it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 33.90it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.43it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.17it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 29.71it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.38it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 23.08it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.94it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.93it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 35.20it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.58it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 33.61it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.15it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 40.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 51.27it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.89it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.88it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.25it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 33.82it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 34.57it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.24it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 23.65it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 27.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.82it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.95it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 46.88it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 36.84it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.63it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.45it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.52it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.33it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.61it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.49it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 27.57it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.24it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.96it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.25it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.90it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.77it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.64it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 33.80it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 25.87it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 30.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.72it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.01it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.26it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 24.19it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 20.89it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 24.90it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 27.88it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 30.18it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.23it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.89it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.20it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 26.94it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.48it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 31.41it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 32.16it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.89it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 34.53it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.57it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.64it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.70it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.99it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 30.13it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.26it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.73it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 34.39it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.20it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.79it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 27.55it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.49it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.28it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 36.41it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 35.89it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.94it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.75it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.09it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.09it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.23it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 27.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.62it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 24.78it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 30.35it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.09it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.01it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 31.64it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 29.65it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.77it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 37.55it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 50.85it/s]
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 43: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6168, Test 0.6186
          RMSE             : Train 266.3832, Val 263.7999, Test 266.2617
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 44: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6166, Test 0.6185
          RMSE             : Train 266.3654, Val 263.8594, Test 266.2894
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 45: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6189, Val 0.6153, Test 0.6172
          RMSE             : Train 266.3312, Val 264.3024, Test 266.7544
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 46: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6170, Test 0.6183
          RMSE             : Train 266.2188, Val 263.7411, Test 266.3593
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 47: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6167, Test 0.6182
          RMSE             : Train 266.2792, Val 263.8362, Test 266.3817
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 48: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6176, Test 0.6190
          RMSE             : Train 266.1446, Val 263.5363, Test 266.1278
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 49: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6170, Test 0.6190
          RMSE             : Train 266.1510, Val 263.7318, Test 266.1179
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 50: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6171, Test 0.6188
          RMSE             : Train 266.1315, Val 263.7088, Test 266.1752
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 51: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6173, Test 0.6187
          RMSE             : Train 266.1184, Val 263.6341, Test 266.2160
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 52: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6166, Test 0.6184
          RMSE             : Train 266.0693, Val 263.8641, Test 266.3444
Best:
          R2_Score         : Train 0.6189, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3610, Val 263.4956, Test 266.0429
Epoch 53: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3868, Val 263.4919, Test 266.0597
Best:
          R2_Score         : Train 0.6188, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3868, Val 263.4919, Test 266.0597
Epoch 54: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6172, Test 0.6188
          RMSE             : Train 266.2022, Val 263.6671, Test 266.1872
Best:
          R2_Score         : Train 0.6188, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3868, Val 263.4919, Test 266.0597
Epoch 55: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6170, Test 0.6192
          RMSE             : Train 266.0815, Val 263.7228, Test 266.0440
Best:
          R2_Score         : Train 0.6188, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3868, Val 263.4919, Test 266.0597
Epoch 56: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6170, Test 0.6185
          RMSE             : Train 266.1958, Val 263.7420, Test 266.3015
Best:
          R2_Score         : Train 0.6188, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3868, Val 263.4919, Test 266.0597
Epoch 57: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6174, Test 0.6190
          RMSE             : Train 266.0583, Val 263.5860, Test 266.1136
Best:
          R2_Score         : Train 0.6188, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3868, Val 263.4919, Test 266.0597
Epoch 58: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6173, Test 0.6191
          RMSE             : Train 266.0497, Val 263.6225, Test 266.0743
Best:
          R2_Score         : Train 0.6188, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3868, Val 263.4919, Test 266.0597
Epoch 59: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6169, Test 0.6191
          RMSE             : Train 266.1991, Val 263.7528, Test 266.0888
Best:
          R2_Score         : Train 0.6188, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3868, Val 263.4919, Test 266.0597
Epoch 60: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6167, Test 0.6187
          RMSE             : Train 266.1057, Val 263.8430, Test 266.2164
Best:
          R2_Score         : Train 0.6188, Val 0.6177, Test 0.6192
          RMSE             : Train 266.3868, Val 263.4919, Test 266.0597
Epoch 61: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 62: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6164, Test 0.6184
          RMSE             : Train 266.1941, Val 263.9305, Test 266.3124
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 63: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6194, Val 0.6175, Test 0.6195
          RMSE             : Train 266.1718, Val 263.5744, Test 265.9365
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 64: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6164, Test 0.6184
          RMSE             : Train 266.1479, Val 263.9290, Test 266.3270
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 65: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6176, Test 0.6183
          RMSE             : Train 265.9827, Val 263.5376, Test 266.3744
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198

Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.91it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 27.84it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 24.52it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 24.99it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 28.85it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 31.36it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 33.63it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.63it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.17it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 26.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.20it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 25.75it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.40it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 36.25it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.89it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.34it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.11it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 38.61it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 38.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 44.01it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 54.49it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 25.67it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 32.70it/s]Train:  40%|████      | 14/35 [00:00<00:00, 35.30it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.69it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 34.65it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.74it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.32it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 25.94it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.73it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 44.57it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 38.23it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.61it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.32it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 30.49it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 31.76it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 29.28it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 29.01it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 31.40it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.39it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 24.83it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 32.58it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.57it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.79it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.40it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 34.70it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 34.50it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 40.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 54.32it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.99it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.24it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.25it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.15it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.92it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 34.22it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 37.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 29.06it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 31.36it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.65it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 22.81it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.01it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.11it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 35.85it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.65it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 35.70it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.10it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.13it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.81it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 16.09it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.51it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.85it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.34it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 33.43it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.51it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.00it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 27.49it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.33it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.31it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 38.05it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.30it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.70it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.79it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 34.03it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.85it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.27it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.73it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.38it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.22it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 17.49it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.79it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.31it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.22it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.78it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.68it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 22.80it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 26.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 29.15it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.38it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.09it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 31.36it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.91it/s]Train:  40%|████      | 14/35 [00:00<00:00, 30.63it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.09it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 33.31it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 34.38it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.11it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 29.98it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.05it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 20.72it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.21it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.84it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 35.39it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.95it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.76it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.18it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 44.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 54.32it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 19.43it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 31.13it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.75it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.83it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.83it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.17it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 35.69it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 33.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.38it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.86it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 35.49it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 35.68it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.23it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 34.19it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.12it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 28.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.51it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 32.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 24.42it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 32.67it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.83it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.51it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.43it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.48it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 35.00it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 39.78it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 53.75it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 19.45it/s]Train:  20%|██        | 7/35 [00:00<00:00, 30.50it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 33.36it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.30it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 35.16it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.52it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 35.70it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 36.42it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 36.51it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.86it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 30.50it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 39.57it/s]Train:  40%|████      | 14/35 [00:00<00:00, 36.78it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.56it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.84it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.08it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.21it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.76it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 44.80it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 55.32it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.34it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 27.12it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.91it/s]Train:  40%|████      | 14/35 [00:00<00:00, 27.44it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 30.80it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 31.79it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 30.87it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.35it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.59it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.49it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.47it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 36.38it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 36.76it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.57it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.79it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 38.78it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.61it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 29.85it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 36.59it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 35.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.71it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 25.91it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 33.20it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 35.61it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.78it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.83it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.22it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 32.37it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 37.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 41.13it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 55.17it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.12it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 32.15it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.81it/s]Train:  40%|████      | 14/35 [00:00<00:00, 28.94it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 29.89it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 33.50it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.66it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.92it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.10it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.48it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.52it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 22.16it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.01it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 31.03it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 33.28it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.61it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 33.01it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.17it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 41.56it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 52.33it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 26.25it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 29.46it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.07it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.51it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 33.40it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.79it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.30it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 33.77it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.32it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.52it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 34.79it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 36.23it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.96it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 34.87it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.03it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.49it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.88it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.45it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.27it/s]          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 66: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6197, Val 0.6151, Test 0.6163
          RMSE             : Train 266.0797, Val 264.3842, Test 267.0426
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 67: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6168, Test 0.6186
          RMSE             : Train 266.3153, Val 263.8127, Test 266.2578
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 68: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6164, Test 0.6177
          RMSE             : Train 266.1549, Val 263.9279, Test 266.5592
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 69: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6193, Val 0.6180, Test 0.6195
          RMSE             : Train 266.2096, Val 263.3727, Test 265.9579
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 70: Loss:            : Train 0.0189, Val 0.0187, Test 0.0191
          R2_Score         : Train 0.6196, Val 0.6121, Test 0.6145
          RMSE             : Train 266.0939, Val 265.4127, Test 267.6865
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 71: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6160, Test 0.6174
          RMSE             : Train 266.2663, Val 264.0920, Test 266.6684
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 72: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6165, Test 0.6186
          RMSE             : Train 266.0949, Val 263.9063, Test 266.2604
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0652, Val 263.3531, Test 265.8475
Epoch 73: Loss:            : Train 0.0189, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 74: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6174, Test 0.6193
          RMSE             : Train 266.1997, Val 263.5899, Test 266.0288
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 75: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6154, Test 0.6173
          RMSE             : Train 266.1837, Val 264.2855, Test 266.7122
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 76: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6190, Val 0.6180, Test 0.6198
          RMSE             : Train 266.2937, Val 263.3781, Test 265.8395
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 77: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6164, Test 0.6182
          RMSE             : Train 266.0776, Val 263.9416, Test 266.3887
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 78: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6163, Test 0.6185
          RMSE             : Train 266.0560, Val 263.9637, Test 266.2888
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 79: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6198, Val 0.6175, Test 0.6197
          RMSE             : Train 266.0170, Val 263.5707, Test 265.8811
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 80: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6160, Test 0.6174
          RMSE             : Train 265.9888, Val 264.0845, Test 266.6644
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 81: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6179, Test 0.6198
          RMSE             : Train 265.9277, Val 263.4307, Test 265.8242
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 82: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6200, Val 0.6176, Test 0.6195
          RMSE             : Train 265.9632, Val 263.5425, Test 265.9434
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 83: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6199, Val 0.6171, Test 0.6193
          RMSE             : Train 265.9951, Val 263.7108, Test 266.0072
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 84: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6160, Test 0.6187
          RMSE             : Train 266.0168, Val 264.0655, Test 266.2326
Best:
          R2_Score         : Train 0.6193, Val 0.6182, Test 0.6199
          RMSE             : Train 266.1884, Val 263.3181, Test 265.8165
Epoch 85: Loss:            : Train 0.0189, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 86: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6172, Test 0.6187
          RMSE             : Train 265.9023, Val 263.6632, Test 266.2088
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 87: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6200, Val 0.6172, Test 0.6192
          RMSE             : Train 265.9612, Val 263.6819, Test 266.0593
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 88: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6201, Val 0.6168, Test 0.6189
          RMSE             : Train 265.9200, Val 263.7910, Test 266.1671
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 89: Loss:            : Train 0.0187, Val 0.0185, Test 0.0188
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.46it/s]Train:  20%|██        | 7/35 [00:00<00:00, 29.06it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 29.77it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.11it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.87it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.15it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 34.80it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.58it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 30.16it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.35it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  8.33it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.11it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.10it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.15it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 34.90it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 35.32it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 32.29it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 16.92it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.73it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.79it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 27.36it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 24.52it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 25.58it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 31.27it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.07it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.67it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.09it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.48it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 32.63it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.62it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.38it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.93it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.07it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.35it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.37it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 29.15it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 38.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 27.42it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.68it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.76it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.33it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 29.30it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 26.88it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.98it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.91it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.64it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.01it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.82it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.97it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.66it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.26it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.93it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.05it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.31it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 36.40it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 41.01it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 54.26it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 19.94it/s]Train:  20%|██        | 7/35 [00:00<00:00, 29.48it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.96it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.78it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.52it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.51it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 33.42it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.87it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.98it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.83it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.69it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 28.34it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.37it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.23it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.98it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.23it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.02it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.95it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 44.03it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 54.69it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 26.51it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 33.07it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.19it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.81it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.15it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.47it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 36.20it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 36.60it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.98it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.22it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 35.03it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 34.95it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.86it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 34.29it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.63it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 29.72it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 29.92it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 33.05it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.87it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 24.75it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 37.68it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.31it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 30.11it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.10it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.12it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 34.64it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.35it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 30.61it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.68it/s]

          R2_Score         : Train 0.6201, Val 0.6180, Test 0.6199
          RMSE             : Train 265.9424, Val 263.3873, Test 265.8086
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 90: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6174, Test 0.6194
          RMSE             : Train 266.1029, Val 263.5898, Test 265.9646
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 91: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6201, Val 0.6162, Test 0.6180
          RMSE             : Train 265.9232, Val 263.9981, Test 266.4845
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 92: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6200, Val 0.6166, Test 0.6183
          RMSE             : Train 265.9730, Val 263.8644, Test 266.3481
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 93: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6198, Val 0.6174, Test 0.6197
          RMSE             : Train 266.0396, Val 263.5976, Test 265.8685
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 94: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6168, Test 0.6183
          RMSE             : Train 265.8977, Val 263.8047, Test 266.3487
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 95: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6194, Val 0.6179, Test 0.6201
          RMSE             : Train 266.1570, Val 263.4385, Test 265.7270
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 96: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6204, Val 0.6162, Test 0.6185
          RMSE             : Train 265.8289, Val 264.0253, Test 266.2988
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 97: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6174, Test 0.6199
          RMSE             : Train 265.9261, Val 263.5898, Test 265.7887
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 98: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6176, Test 0.6195
          RMSE             : Train 265.9082, Val 263.5434, Test 265.9328
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 99: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6175, Test 0.6195
          RMSE             : Train 265.9322, Val 263.5682, Test 265.9611
Best:
          R2_Score         : Train 0.6196, Val 0.6185, Test 0.6200
          RMSE             : Train 266.1026, Val 263.2282, Test 265.7530
Epoch 100: Loss:            : Train 0.0188, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6204, Val 0.6187, Test 0.6197
          RMSE             : Train 265.8215, Val 263.1350, Test 265.8771
Best:
          R2_Score         : Train 0.6204, Val 0.6187, Test 0.6197
          RMSE             : Train 265.8215, Val 263.1350, Test 265.8771
