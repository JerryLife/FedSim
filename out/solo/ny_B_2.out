Loading bike from data/nytaxi/bike_201606_clean_sample_2e5.pkl
Loaded.
Loading taxi from data/nytaxi/taxi_201606_clean_sample_1e5.pkl
Loaded.
Current bike columns: ['age', 'gender_1', 'gender_2', 'sid_79', 'sid_82', 'sid_83', 'sid_116', 'sid_119', 'sid_120', 'sid_127', 'sid_128', 'sid_137', 'sid_143', 'sid_144', 'sid_146', 'sid_147', 'sid_150', 'sid_151', 'sid_152', 'sid_153', 'sid_157', 'sid_161', 'sid_164', 'sid_167', 'sid_168', 'sid_173', 'sid_174', 'sid_195', 'sid_212', 'sid_216', 'sid_217', 'sid_223', 'sid_224', 'sid_225', 'sid_228', 'sid_229', 'sid_232', 'sid_233', 'sid_236', 'sid_237', 'sid_238', 'sid_239', 'sid_241', 'sid_242', 'sid_243', 'sid_244', 'sid_245', 'sid_247', 'sid_248', 'sid_249', 'sid_250', 'sid_251', 'sid_252', 'sid_253', 'sid_254', 'sid_257', 'sid_258', 'sid_259', 'sid_260', 'sid_261', 'sid_262', 'sid_263', 'sid_264', 'sid_265', 'sid_266', 'sid_267', 'sid_268', 'sid_270', 'sid_274', 'sid_275', 'sid_276', 'sid_278', 'sid_279', 'sid_280', 'sid_281', 'sid_282', 'sid_284', 'sid_285', 'sid_289', 'sid_291', 'sid_293', 'sid_295', 'sid_296', 'sid_297', 'sid_298', 'sid_300', 'sid_301', 'sid_302', 'sid_303', 'sid_304', 'sid_305', 'sid_306', 'sid_307', 'sid_308', 'sid_309', 'sid_310', 'sid_311', 'sid_312', 'sid_313', 'sid_315', 'sid_316', 'sid_317', 'sid_319', 'sid_320', 'sid_321', 'sid_322', 'sid_323', 'sid_324', 'sid_325', 'sid_326', 'sid_327', 'sid_328', 'sid_329', 'sid_330', 'sid_331', 'sid_332', 'sid_334', 'sid_335', 'sid_336', 'sid_337', 'sid_339', 'sid_340', 'sid_341', 'sid_342', 'sid_343', 'sid_344', 'sid_345', 'sid_346', 'sid_347', 'sid_348', 'sid_349', 'sid_350', 'sid_351', 'sid_352', 'sid_353', 'sid_354', 'sid_355', 'sid_356', 'sid_357', 'sid_358', 'sid_359', 'sid_360', 'sid_361', 'sid_362', 'sid_363', 'sid_364', 'sid_365', 'sid_366', 'sid_367', 'sid_368', 'sid_369', 'sid_372', 'sid_373', 'sid_375', 'sid_376', 'sid_377', 'sid_379', 'sid_380', 'sid_382', 'sid_383', 'sid_384', 'sid_385', 'sid_386', 'sid_387', 'sid_388', 'sid_389', 'sid_390', 'sid_391', 'sid_392', 'sid_393', 'sid_394', 'sid_395', 'sid_396', 'sid_397', 'sid_398', 'sid_399', 'sid_400', 'sid_401', 'sid_402', 'sid_405', 'sid_406', 'sid_407', 'sid_408', 'sid_409', 'sid_410', 'sid_411', 'sid_412', 'sid_414', 'sid_415', 'sid_416', 'sid_417', 'sid_418', 'sid_419', 'sid_420', 'sid_421', 'sid_422', 'sid_423', 'sid_426', 'sid_427', 'sid_428', 'sid_430', 'sid_432', 'sid_433', 'sid_434', 'sid_435', 'sid_436', 'sid_437', 'sid_438', 'sid_439', 'sid_440', 'sid_441', 'sid_442', 'sid_443', 'sid_444', 'sid_445', 'sid_446', 'sid_447', 'sid_448', 'sid_449', 'sid_450', 'sid_453', 'sid_454', 'sid_455', 'sid_456', 'sid_457', 'sid_458', 'sid_459', 'sid_460', 'sid_461', 'sid_462', 'sid_465', 'sid_466', 'sid_467', 'sid_468', 'sid_469', 'sid_470', 'sid_471', 'sid_472', 'sid_473', 'sid_474', 'sid_475', 'sid_476', 'sid_477', 'sid_478', 'sid_479', 'sid_480', 'sid_481', 'sid_482', 'sid_483', 'sid_484', 'sid_485', 'sid_486', 'sid_487', 'sid_488', 'sid_490', 'sid_491', 'sid_492', 'sid_493', 'sid_494', 'sid_495', 'sid_496', 'sid_497', 'sid_498', 'sid_499', 'sid_500', 'sid_501', 'sid_502', 'sid_503', 'sid_504', 'sid_505', 'sid_507', 'sid_508', 'sid_509', 'sid_510', 'sid_511', 'sid_513', 'sid_514', 'sid_515', 'sid_516', 'sid_517', 'sid_518', 'sid_519', 'sid_520', 'sid_522', 'sid_523', 'sid_524', 'sid_525', 'sid_526', 'sid_527', 'sid_528', 'sid_529', 'sid_530', 'sid_531', 'sid_532', 'sid_533', 'sid_534', 'sid_536', 'sid_537', 'sid_539', 'sid_540', 'sid_545', 'sid_546', 'sid_2000', 'sid_2001', 'sid_2002', 'sid_2003', 'sid_2004', 'sid_2005', 'sid_2006', 'sid_2008', 'sid_2009', 'sid_2010', 'sid_2012', 'sid_2017', 'sid_2021', 'sid_2022', 'sid_2023', 'sid_3002', 'sid_3016', 'sid_3041', 'sid_3042', 'sid_3043', 'sid_3044', 'sid_3046', 'sid_3047', 'sid_3048', 'sid_3049', 'sid_3050', 'sid_3052', 'sid_3053', 'sid_3054', 'sid_3055', 'sid_3056', 'sid_3057', 'sid_3058', 'sid_3059', 'sid_3060', 'sid_3061', 'sid_3062', 'sid_3063', 'sid_3064', 'sid_3065', 'sid_3066', 'sid_3067', 'sid_3068', 'sid_3069', 'sid_3070', 'sid_3071', 'sid_3072', 'sid_3073', 'sid_3074', 'sid_3075', 'sid_3076', 'sid_3077', 'sid_3078', 'sid_3079', 'sid_3080', 'sid_3081', 'sid_3082', 'sid_3083', 'sid_3084', 'sid_3085', 'sid_3086', 'sid_3087', 'sid_3088', 'sid_3089', 'sid_3090', 'sid_3091', 'sid_3092', 'sid_3093', 'sid_3094', 'sid_3095', 'sid_3096', 'sid_3098', 'sid_3099', 'sid_3100', 'sid_3101', 'sid_3102', 'sid_3103', 'sid_3105', 'sid_3106', 'sid_3107', 'sid_3108', 'sid_3109', 'sid_3110', 'sid_3111', 'sid_3112', 'sid_3113', 'sid_3114', 'sid_3115', 'sid_3116', 'sid_3117', 'sid_3118', 'sid_3119', 'sid_3120', 'sid_3121', 'sid_3122', 'sid_3123', 'sid_3124', 'sid_3125', 'sid_3126', 'sid_3127', 'sid_3128', 'sid_3129', 'sid_3131', 'sid_3132', 'sid_3134', 'sid_3135', 'sid_3136', 'sid_3137', 'sid_3138', 'sid_3139', 'sid_3140', 'sid_3141', 'sid_3142', 'sid_3143', 'sid_3144', 'sid_3145', 'sid_3146', 'sid_3147', 'sid_3148', 'sid_3150', 'sid_3151', 'sid_3152', 'sid_3153', 'sid_3154', 'sid_3155', 'sid_3156', 'sid_3157', 'sid_3158', 'sid_3159', 'sid_3160', 'sid_3161', 'sid_3162', 'sid_3163', 'sid_3164', 'sid_3165', 'sid_3166', 'sid_3167', 'sid_3168', 'sid_3169', 'sid_3170', 'sid_3171', 'sid_3172', 'sid_3173', 'sid_3175', 'sid_3176', 'sid_3177', 'sid_3178', 'sid_3179', 'sid_3180', 'sid_3182', 'sid_3221', 'sid_3222', 'sid_3223', 'sid_3224', 'sid_3226', 'sid_3230', 'sid_3231', 'sid_3232', 'sid_3233', 'sid_3235', 'sid_3236', 'sid_3237', 'sid_3238', 'sid_3241', 'sid_3242', 'sid_3243', 'sid_3244', 'sid_3246', 'sid_3249', 'sid_3254', 'sid_3255', 'sid_3256', 'sid_3257', 'sid_3259', 'sid_3260', 'eid_79', 'eid_82', 'eid_83', 'eid_116', 'eid_119', 'eid_120', 'eid_127', 'eid_128', 'eid_137', 'eid_143', 'eid_144', 'eid_146', 'eid_147', 'eid_150', 'eid_151', 'eid_152', 'eid_153', 'eid_157', 'eid_161', 'eid_164', 'eid_167', 'eid_168', 'eid_173', 'eid_174', 'eid_195', 'eid_212', 'eid_216', 'eid_217', 'eid_223', 'eid_224', 'eid_225', 'eid_228', 'eid_229', 'eid_232', 'eid_233', 'eid_236', 'eid_237', 'eid_238', 'eid_239', 'eid_241', 'eid_242', 'eid_243', 'eid_244', 'eid_245', 'eid_247', 'eid_248', 'eid_249', 'eid_250', 'eid_251', 'eid_252', 'eid_253', 'eid_254', 'eid_255', 'eid_257', 'eid_258', 'eid_259', 'eid_260', 'eid_261', 'eid_262', 'eid_263', 'eid_264', 'eid_265', 'eid_266', 'eid_267', 'eid_268', 'eid_270', 'eid_274', 'eid_275', 'eid_276', 'eid_278', 'eid_279', 'eid_280', 'eid_281', 'eid_282', 'eid_284', 'eid_285', 'eid_289', 'eid_291', 'eid_293', 'eid_295', 'eid_296', 'eid_297', 'eid_298', 'eid_300', 'eid_301', 'eid_302', 'eid_303', 'eid_304', 'eid_305', 'eid_306', 'eid_307', 'eid_308', 'eid_309', 'eid_310', 'eid_311', 'eid_312', 'eid_313', 'eid_315', 'eid_316', 'eid_317', 'eid_319', 'eid_320', 'eid_321', 'eid_322', 'eid_323', 'eid_324', 'eid_325', 'eid_326', 'eid_327', 'eid_328', 'eid_329', 'eid_330', 'eid_331', 'eid_332', 'eid_334', 'eid_335', 'eid_336', 'eid_337', 'eid_339', 'eid_340', 'eid_341', 'eid_342', 'eid_343', 'eid_344', 'eid_345', 'eid_346', 'eid_347', 'eid_348', 'eid_349', 'eid_350', 'eid_351', 'eid_352', 'eid_353', 'eid_354', 'eid_355', 'eid_356', 'eid_357', 'eid_358', 'eid_359', 'eid_360', 'eid_361', 'eid_362', 'eid_363', 'eid_364', 'eid_365', 'eid_366', 'eid_367', 'eid_368', 'eid_369', 'eid_372', 'eid_373', 'eid_375', 'eid_376', 'eid_377', 'eid_379', 'eid_380', 'eid_382', 'eid_383', 'eid_384', 'eid_385', 'eid_386', 'eid_387', 'eid_388', 'eid_389', 'eid_390', 'eid_391', 'eid_392', 'eid_393', 'eid_394', 'eid_395', 'eid_396', 'eid_397', 'eid_398', 'eid_399', 'eid_400', 'eid_401', 'eid_402', 'eid_405', 'eid_406', 'eid_407', 'eid_408', 'eid_409', 'eid_410', 'eid_411', 'eid_412', 'eid_414', 'eid_415', 'eid_416', 'eid_417', 'eid_418', 'eid_419', 'eid_420', 'eid_421', 'eid_422', 'eid_423', 'eid_426', 'eid_427', 'eid_428', 'eid_430', 'eid_432', 'eid_433', 'eid_434', 'eid_435', 'eid_436', 'eid_437', 'eid_438', 'eid_439', 'eid_440', 'eid_441', 'eid_442', 'eid_443', 'eid_444', 'eid_445', 'eid_446', 'eid_447', 'eid_448', 'eid_449', 'eid_450', 'eid_453', 'eid_454', 'eid_455', 'eid_456', 'eid_457', 'eid_458', 'eid_459', 'eid_460', 'eid_461', 'eid_462', 'eid_465', 'eid_466', 'eid_467', 'eid_468', 'eid_469', 'eid_470', 'eid_471', 'eid_472', 'eid_473', 'eid_474', 'eid_475', 'eid_476', 'eid_477', 'eid_478', 'eid_479', 'eid_480', 'eid_481', 'eid_482', 'eid_483', 'eid_484', 'eid_485', 'eid_486', 'eid_487', 'eid_488', 'eid_490', 'eid_491', 'eid_492', 'eid_493', 'eid_494', 'eid_495', 'eid_496', 'eid_497', 'eid_498', 'eid_499', 'eid_500', 'eid_501', 'eid_502', 'eid_503', 'eid_504', 'eid_505', 'eid_507', 'eid_508', 'eid_509', 'eid_510', 'eid_511', 'eid_513', 'eid_514', 'eid_515', 'eid_516', 'eid_517', 'eid_518', 'eid_519', 'eid_520', 'eid_522', 'eid_523', 'eid_524', 'eid_525', 'eid_526', 'eid_527', 'eid_528', 'eid_529', 'eid_530', 'eid_531', 'eid_532', 'eid_533', 'eid_534', 'eid_536', 'eid_537', 'eid_539', 'eid_540', 'eid_545', 'eid_546', 'eid_2000', 'eid_2001', 'eid_2002', 'eid_2003', 'eid_2004', 'eid_2005', 'eid_2006', 'eid_2008', 'eid_2009', 'eid_2010', 'eid_2012', 'eid_2017', 'eid_2021', 'eid_2022', 'eid_2023', 'eid_3002', 'eid_3016', 'eid_3017', 'eid_3041', 'eid_3042', 'eid_3043', 'eid_3044', 'eid_3046', 'eid_3047', 'eid_3048', 'eid_3049', 'eid_3050', 'eid_3052', 'eid_3053', 'eid_3054', 'eid_3055', 'eid_3056', 'eid_3057', 'eid_3058', 'eid_3059', 'eid_3060', 'eid_3061', 'eid_3062', 'eid_3063', 'eid_3064', 'eid_3065', 'eid_3066', 'eid_3067', 'eid_3068', 'eid_3069', 'eid_3070', 'eid_3071', 'eid_3072', 'eid_3073', 'eid_3074', 'eid_3075', 'eid_3076', 'eid_3077', 'eid_3078', 'eid_3079', 'eid_3080', 'eid_3081', 'eid_3082', 'eid_3083', 'eid_3084', 'eid_3085', 'eid_3086', 'eid_3087', 'eid_3088', 'eid_3089', 'eid_3090', 'eid_3091', 'eid_3092', 'eid_3093', 'eid_3094', 'eid_3095', 'eid_3096', 'eid_3098', 'eid_3099', 'eid_3100', 'eid_3101', 'eid_3102', 'eid_3103', 'eid_3105', 'eid_3106', 'eid_3107', 'eid_3108', 'eid_3109', 'eid_3110', 'eid_3111', 'eid_3112', 'eid_3113', 'eid_3114', 'eid_3115', 'eid_3116', 'eid_3117', 'eid_3118', 'eid_3119', 'eid_3120', 'eid_3121', 'eid_3122', 'eid_3123', 'eid_3124', 'eid_3125', 'eid_3126', 'eid_3127', 'eid_3128', 'eid_3129', 'eid_3131', 'eid_3132', 'eid_3134', 'eid_3135', 'eid_3136', 'eid_3137', 'eid_3138', 'eid_3139', 'eid_3140', 'eid_3141', 'eid_3142', 'eid_3143', 'eid_3144', 'eid_3145', 'eid_3146', 'eid_3147', 'eid_3148', 'eid_3150', 'eid_3151', 'eid_3152', 'eid_3153', 'eid_3154', 'eid_3155', 'eid_3156', 'eid_3157', 'eid_3158', 'eid_3159', 'eid_3160', 'eid_3161', 'eid_3162', 'eid_3163', 'eid_3164', 'eid_3165', 'eid_3166', 'eid_3167', 'eid_3168', 'eid_3169', 'eid_3170', 'eid_3171', 'eid_3172', 'eid_3173', 'eid_3175', 'eid_3176', 'eid_3177', 'eid_3178', 'eid_3179', 'eid_3180', 'eid_3182', 'eid_3183', 'eid_3184', 'eid_3192', 'eid_3219', 'eid_3221', 'eid_3222', 'eid_3223', 'eid_3224', 'eid_3226', 'eid_3230', 'eid_3231', 'eid_3232', 'eid_3233', 'eid_3235', 'eid_3236', 'eid_3237', 'eid_3238', 'eid_3240', 'eid_3241', 'eid_3242', 'eid_3243', 'eid_3244', 'eid_3246', 'eid_3249', 'eid_3250', 'eid_3252', 'eid_3254', 'eid_3255', 'eid_3256', 'eid_3257', 'eid_3259', 'eid_3260', 'start_lon', 'start_lat', 'end_lon', 'end_lat']  0%|          | 0/140000 [00:00<?, ?it/s]  0%|          | 134/140000 [00:00<01:44, 1332.69it/s]  0%|          | 328/140000 [00:00<01:22, 1688.59it/s]  0%|          | 649/140000 [00:00<00:58, 2380.54it/s]  1%|          | 1038/140000 [00:00<00:46, 2970.80it/s]  1%|          | 1336/140000 [00:00<00:48, 2853.39it/s]  1%|          | 1623/140000 [00:00<00:50, 2740.92it/s]  1%|▏         | 1899/140000 [00:00<00:52, 2649.99it/s]  2%|▏         | 2207/140000 [00:00<00:49, 2778.60it/s]  2%|▏         | 2602/140000 [00:00<00:45, 3042.68it/s]  2%|▏         | 2907/140000 [00:01<00:45, 3007.79it/s]  2%|▏         | 3223/140000 [00:01<00:44, 3051.55it/s]  3%|▎         | 3579/140000 [00:01<00:42, 3200.78it/s]  3%|▎         | 3900/140000 [00:01<00:43, 3164.56it/s]  3%|▎         | 4219/140000 [00:01<00:42, 3171.89it/s]  3%|▎         | 4537/140000 [00:01<00:43, 3103.95it/s]  3%|▎         | 4880/140000 [00:01<00:42, 3198.44it/s]  4%|▎         | 5201/140000 [00:01<00:44, 3030.11it/s]  4%|▍         | 5582/140000 [00:01<00:41, 3251.70it/s]  4%|▍         | 5975/140000 [00:01<00:39, 3427.03it/s]  5%|▍         | 6682/140000 [00:02<00:29, 4487.31it/s]  5%|▌         | 7517/140000 [00:02<00:24, 5379.58it/s]  6%|▌         | 8052/140000 [00:02<00:28, 4652.98it/s]  6%|▌         | 8531/140000 [00:02<00:29, 4417.56it/s]  6%|▋         | 8983/140000 [00:02<00:30, 4313.18it/s]  7%|▋         | 9421/140000 [00:02<00:31, 4185.95it/s]  7%|▋         | 9844/140000 [00:02<00:32, 4051.65it/s]  7%|▋         | 10252/140000 [00:02<00:32, 3990.17it/s]  8%|▊         | 10653/140000 [00:03<00:33, 3912.19it/s]  8%|▊         | 11045/140000 [00:03<00:33, 3900.02it/s]  8%|▊         | 11436/140000 [00:03<00:33, 3895.53it/s]  8%|▊         | 11826/140000 [00:03<00:33, 3863.89it/s]  9%|▊         | 12213/140000 [00:03<00:33, 3767.69it/s]  9%|▉         | 12591/140000 [00:03<00:34, 3669.44it/s]  9%|▉         | 12959/140000 [00:03<00:38, 3262.12it/s]  9%|▉         | 13293/140000 [00:03<00:40, 3118.60it/s] 10%|▉         | 13685/140000 [00:03<00:37, 3330.35it/s] 10%|█         | 14086/140000 [00:04<00:35, 3516.23it/s] 10%|█         | 14466/140000 [00:04<00:35, 3527.28it/s] 11%|█         | 14824/140000 [00:04<00:47, 2642.94it/s] 11%|█         | 15123/140000 [00:04<00:50, 2473.67it/s] 11%|█         | 15395/140000 [00:04<00:52, 2360.35it/s] 11%|█         | 15648/140000 [00:04<00:52, 2362.76it/s] 11%|█▏        | 15900/140000 [00:04<00:51, 2400.02it/s] 12%|█▏        | 16149/140000 [00:04<00:52, 2350.35it/s] 12%|█▏        | 16408/140000 [00:05<00:51, 2405.80it/s] 12%|█▏        | 16654/140000 [00:05<00:51, 2382.46it/s] 12%|█▏        | 17006/140000 [00:05<00:45, 2697.95it/s] 12%|█▏        | 17281/140000 [00:05<00:46, 2640.52it/s] 13%|█▎        | 17549/140000 [00:05<00:46, 2615.03it/s] 13%|█▎        | 17858/140000 [00:05<00:44, 2749.71it/s] 13%|█▎        | 18136/140000 [00:05<00:44, 2726.51it/s] 13%|█▎        | 18411/140000 [00:05<00:44, 2717.31it/s] 13%|█▎        | 18684/140000 [00:05<00:44, 2697.78it/s] 14%|█▎        | 18955/140000 [00:05<00:46, 2591.14it/s] 14%|█▎        | 19216/140000 [00:06<00:47, 2539.63it/s] 14%|█▍        | 19471/140000 [00:06<00:50, 2374.69it/s] 14%|█▍        | 19731/140000 [00:06<00:49, 2416.59it/s] 14%|█▍        | 20004/140000 [00:06<00:47, 2502.70it/s] 14%|█▍        | 20257/140000 [00:06<00:49, 2410.62it/s] 15%|█▍        | 20500/140000 [00:06<00:53, 2233.37it/s] 15%|█▍        | 20753/140000 [00:06<00:51, 2313.61it/s] 15%|█▌        | 21057/140000 [00:06<00:47, 2515.48it/s] 15%|█▌        | 21313/140000 [00:06<00:46, 2525.29it/s] 15%|█▌        | 21569/140000 [00:07<00:48, 2439.64it/s] 16%|█▌        | 21816/140000 [00:07<00:50, 2340.57it/s] 16%|█▌        | 22061/140000 [00:07<00:49, 2369.16it/s] 16%|█▌        | 22349/140000 [00:07<00:46, 2514.85it/s] 16%|█▌        | 22603/140000 [00:07<00:47, 2475.70it/s] 16%|█▋        | 22903/140000 [00:07<00:44, 2624.86it/s] 17%|█▋        | 23180/140000 [00:07<00:43, 2667.07it/s] 17%|█▋        | 23454/140000 [00:07<00:43, 2686.44it/s] 17%|█▋        | 23749/140000 [00:07<00:42, 2762.71it/s] 17%|█▋        | 24085/140000 [00:08<00:39, 2938.13it/s] 17%|█▋        | 24393/140000 [00:08<00:38, 2978.73it/s] 18%|█▊        | 24711/140000 [00:08<00:37, 3036.83it/s] 18%|█▊        | 25030/140000 [00:08<00:37, 3081.73it/s] 18%|█▊        | 25339/140000 [00:08<00:38, 2986.63it/s] 18%|█▊        | 25639/140000 [00:08<00:38, 2937.52it/s] 19%|█▊        | 25934/140000 [00:08<00:40, 2833.10it/s] 19%|█▊        | 26242/140000 [00:08<00:39, 2902.60it/s] 19%|█▉        | 26554/140000 [00:08<00:38, 2965.51it/s] 19%|█▉        | 26863/140000 [00:08<00:37, 3000.86it/s] 19%|█▉        | 27164/140000 [00:09<00:38, 2939.04it/s] 20%|█▉        | 27459/140000 [00:09<00:42, 2664.64it/s] 20%|█▉        | 27731/140000 [00:09<00:43, 2555.05it/s] 20%|█▉        | 27991/140000 [00:09<00:44, 2499.06it/s] 20%|██        | 28244/140000 [00:09<00:44, 2492.52it/s] 20%|██        | 28495/140000 [00:09<00:44, 2481.03it/s] 21%|██        | 28769/140000 [00:09<00:43, 2538.21it/s] 21%|██        | 29029/140000 [00:09<00:44, 2503.85it/s] 21%|██        | 29316/140000 [00:09<00:42, 2606.35it/s] 21%|██        | 29578/140000 [00:10<00:42, 2589.04it/s] 21%|██▏       | 29880/140000 [00:10<00:40, 2714.63it/s] 22%|██▏       | 30164/140000 [00:10<00:39, 2749.65it/s] 22%|██▏       | 30452/140000 [00:10<00:39, 2786.81it/s] 22%|██▏       | 30732/140000 [00:10<00:43, 2539.40it/s] 22%|██▏       | 30991/140000 [00:10<00:43, 2529.30it/s] 22%|██▏       | 31256/140000 [00:10<00:42, 2562.52it/s] 23%|██▎       | 31515/140000 [00:10<00:42, 2533.18it/s] 23%|██▎       | 31825/140000 [00:10<00:40, 2695.45it/s] 23%|██▎       | 32108/140000 [00:10<00:39, 2734.20it/s] 23%|██▎       | 32393/140000 [00:11<00:39, 2737.55it/s] 23%|██▎       | 32668/140000 [00:11<00:39, 2700.75it/s] 24%|██▎       | 32947/140000 [00:11<00:39, 2702.15it/s] 24%|██▍       | 33263/140000 [00:11<00:37, 2835.42it/s] 24%|██▍       | 33548/140000 [00:11<00:37, 2829.72it/s] 24%|██▍       | 34073/140000 [00:11<00:29, 3542.31it/s] 25%|██▍       | 34429/140000 [00:11<00:35, 2958.06it/s] 25%|██▌       | 35091/140000 [00:11<00:26, 3913.22it/s] 25%|██▌       | 35592/140000 [00:11<00:24, 4210.22it/s] 26%|██▌       | 36037/140000 [00:12<00:24, 4275.09it/s] 26%|██▌       | 36578/140000 [00:12<00:22, 4553.96it/s] 26%|██▋       | 37056/140000 [00:12<00:22, 4618.20it/s] 27%|██▋       | 37527/140000 [00:12<00:26, 3821.70it/s] 27%|██▋       | 37938/140000 [00:12<00:31, 3229.39it/s] 27%|██▋       | 38294/140000 [00:12<00:33, 3043.64it/s] 28%|██▊       | 38621/140000 [00:12<00:34, 2928.17it/s] 28%|██▊       | 38929/140000 [00:12<00:36, 2803.92it/s] 28%|██▊       | 39219/140000 [00:13<00:36, 2779.70it/s] 28%|██▊       | 39504/140000 [00:13<00:37, 2649.24it/s] 28%|██▊       | 39774/140000 [00:13<00:38, 2586.66it/s] 29%|██▊       | 40036/140000 [00:13<00:39, 2561.82it/s] 29%|██▉       | 40294/140000 [00:13<00:40, 2457.30it/s] 29%|██▉       | 40554/140000 [00:13<00:39, 2494.16it/s] 29%|██▉       | 40818/140000 [00:13<00:39, 2527.77it/s] 29%|██▉       | 41125/140000 [00:13<00:36, 2679.54it/s] 30%|██▉       | 41395/140000 [00:13<00:38, 2593.48it/s] 30%|██▉       | 41686/140000 [00:14<00:36, 2681.58it/s] 30%|██▉       | 41972/140000 [00:14<00:36, 2717.30it/s] 30%|███       | 42266/140000 [00:14<00:35, 2781.70it/s] 30%|███       | 42575/140000 [00:14<00:33, 2871.16it/s] 31%|███       | 42868/140000 [00:14<00:33, 2887.79it/s] 31%|███       | 43158/140000 [00:14<00:33, 2873.98it/s] 31%|███       | 43446/140000 [00:14<00:33, 2864.46it/s] 31%|███       | 43737/140000 [00:14<00:33, 2876.88it/s] 31%|███▏      | 44034/140000 [00:14<00:33, 2904.48it/s] 32%|███▏      | 44392/140000 [00:14<00:30, 3104.41it/s] 32%|███▏      | 44703/140000 [00:15<00:32, 2923.48it/s] 32%|███▏      | 44998/140000 [00:15<00:34, 2778.27it/s] 32%|███▏      | 45298/140000 [00:15<00:34, 2716.85it/s] 33%|███▎      | 45572/140000 [00:15<00:37, 2519.86it/s] 33%|███▎      | 45828/140000 [00:15<00:37, 2529.90it/s] 33%|███▎      | 46084/140000 [00:15<00:41, 2262.61it/s] 33%|███▎      | 46317/140000 [00:15<00:42, 2229.52it/s] 33%|███▎      | 46544/140000 [00:15<00:44, 2111.73it/s] 33%|███▎      | 46771/140000 [00:16<00:43, 2152.96it/s] 34%|███▎      | 46989/140000 [00:16<00:43, 2150.90it/s] 34%|███▎      | 47244/140000 [00:16<00:41, 2248.18it/s] 34%|███▍      | 47502/140000 [00:16<00:39, 2341.52it/s] 34%|███▍      | 47738/140000 [00:16<00:40, 2304.45it/s] 34%|███▍      | 47970/140000 [00:16<00:41, 2205.40it/s] 34%|███▍      | 48193/140000 [00:16<00:41, 2201.26it/s] 35%|███▍      | 48450/140000 [00:16<00:39, 2306.31it/s] 35%|███▍      | 48693/140000 [00:16<00:39, 2332.04it/s] 35%|███▍      | 48948/140000 [00:16<00:38, 2394.10it/s] 35%|███▌      | 49205/140000 [00:17<00:37, 2444.83it/s] 35%|███▌      | 49451/140000 [00:17<00:37, 2446.63it/s] 35%|███▌      | 49697/140000 [00:17<00:37, 2412.65it/s] 36%|███▌      | 49951/140000 [00:17<00:36, 2449.97it/s] 36%|███▌      | 50204/140000 [00:17<00:36, 2445.86it/s] 36%|███▌      | 50449/140000 [00:17<00:36, 2444.86it/s] 36%|███▌      | 50694/140000 [00:17<00:37, 2376.97it/s] 36%|███▋      | 50943/140000 [00:17<00:36, 2408.08it/s] 37%|███▋      | 51198/140000 [00:17<00:36, 2448.33it/s] 37%|███▋      | 51444/140000 [00:18<00:38, 2318.28it/s] 37%|███▋      | 51682/140000 [00:18<00:38, 2321.34it/s] 37%|███▋      | 51954/140000 [00:18<00:37, 2363.41it/s] 37%|███▋      | 52205/140000 [00:18<00:36, 2403.89it/s] 37%|███▋      | 52460/140000 [00:18<00:35, 2444.50it/s] 38%|███▊      | 52706/140000 [00:18<00:35, 2441.84it/s] 38%|███▊      | 52986/140000 [00:18<00:34, 2545.44it/s] 38%|███▊      | 53270/140000 [00:18<00:32, 2630.62it/s] 38%|███▊      | 53557/140000 [00:18<00:32, 2637.22it/s] 38%|███▊      | 53822/140000 [00:18<00:33, 2598.81it/s] 39%|███▊      | 54083/140000 [00:19<00:33, 2534.03it/s] 39%|███▉      | 54337/140000 [00:19<00:34, 2491.90it/s] 39%|███▉      | 54587/140000 [00:19<00:34, 2450.38it/s] 39%|███▉      | 54857/140000 [00:19<00:35, 2402.83it/s] 39%|███▉      | 55098/140000 [00:19<00:37, 2269.82it/s] 40%|███▉      | 55330/140000 [00:19<00:37, 2280.86it/s] 40%|███▉      | 55668/140000 [00:19<00:33, 2498.05it/s] 40%|███▉      | 55927/140000 [00:19<00:33, 2495.67it/s] 40%|████      | 56209/140000 [00:19<00:32, 2585.79it/s] 40%|████      | 56487/140000 [00:20<00:31, 2640.09it/s] 41%|████      | 56752/140000 [00:20<00:31, 2613.24it/s] 41%|████      | 57045/140000 [00:20<00:30, 2703.90it/s] 41%|████      | 57316/140000 [00:20<00:32, 2513.20it/s] 41%|████      | 57571/140000 [00:20<00:33, 2487.95it/s] 41%|████▏     | 57822/140000 [00:20<00:33, 2418.81it/s] 42%|████▏     | 58149/140000 [00:20<00:30, 2656.91it/s] 42%|████▏     | 58477/140000 [00:20<00:28, 2834.85it/s] 42%|████▏     | 58789/140000 [00:20<00:27, 2916.00it/s] 42%|████▏     | 59083/140000 [00:20<00:28, 2854.55it/s] 42%|████▏     | 59376/140000 [00:21<00:28, 2876.31it/s] 43%|████▎     | 59677/140000 [00:21<00:27, 2913.62it/s] 43%|████▎     | 59981/140000 [00:21<00:27, 2950.03it/s] 43%|████▎     | 60277/140000 [00:21<00:27, 2866.06it/s] 43%|████▎     | 60572/140000 [00:21<00:27, 2887.87it/s] 43%|████▎     | 60864/140000 [00:21<00:27, 2896.91it/s] 44%|████▎     | 61166/140000 [00:21<00:26, 2932.24it/s] 44%|████▍     | 61477/140000 [00:21<00:26, 2983.68it/s] 44%|████▍     | 61791/140000 [00:21<00:25, 3028.00it/s] 44%|████▍     | 62095/140000 [00:22<00:27, 2807.25it/s] 45%|████▍     | 62416/140000 [00:22<00:26, 2918.97it/s] 45%|████▍     | 62711/140000 [00:22<00:27, 2816.41it/s] 45%|████▍     | 62999/140000 [00:22<00:27, 2834.03it/s] 45%|████▌     | 63297/140000 [00:22<00:26, 2874.23it/s] 45%|████▌     | 63603/140000 [00:22<00:26, 2926.85it/s] 46%|████▌     | 63909/140000 [00:22<00:25, 2964.18it/s] 46%|████▌     | 64207/140000 [00:22<00:26, 2911.00it/s] 46%|████▌     | 64514/140000 [00:22<00:25, 2954.86it/s] 46%|████▋     | 64812/140000 [00:22<00:25, 2961.03it/s] 47%|████▋     | 65384/140000 [00:23<00:19, 3778.11it/s] 47%|████▋     | 65965/140000 [00:23<00:16, 4380.30it/s] 47%|████▋     | 66405/140000 [00:23<00:16, 4348.51it/s] 48%|████▊     | 66841/140000 [00:23<00:17, 4221.12it/s] 48%|████▊     | 67274/140000 [00:23<00:17, 4252.08it/s] 48%|████▊     | 67701/140000 [00:23<00:17, 4229.41it/s] 49%|████▊     | 68154/140000 [00:23<00:16, 4315.77it/s] 49%|████▉     | 68589/140000 [00:23<00:16, 4325.51it/s] 49%|████▉     | 69036/140000 [00:23<00:16, 4367.82it/s] 50%|████▉     | 69474/140000 [00:23<00:16, 4314.19it/s] 50%|████▉     | 69906/140000 [00:24<00:16, 4269.67it/s] 50%|█████     | 70334/140000 [00:24<00:16, 4249.67it/s] 51%|█████     | 70776/140000 [00:24<00:16, 4298.02it/s] 51%|█████     | 71207/140000 [00:24<00:16, 4286.72it/s] 51%|█████     | 71636/140000 [00:24<00:17, 4018.21it/s] 51%|█████▏    | 72042/140000 [00:24<00:18, 3587.52it/s] 52%|█████▏    | 72411/140000 [00:24<00:19, 3400.38it/s] 52%|█████▏    | 72759/140000 [00:24<00:21, 3189.81it/s] 52%|█████▏    | 73085/140000 [00:24<00:22, 2985.25it/s] 52%|█████▏    | 73389/140000 [00:25<00:24, 2665.10it/s] 53%|█████▎    | 73746/140000 [00:25<00:22, 2885.90it/s] 53%|█████▎    | 74045/140000 [00:25<00:25, 2582.77it/s] 53%|█████▎    | 74315/140000 [00:25<00:25, 2596.07it/s] 53%|█████▎    | 74583/140000 [00:25<00:25, 2600.30it/s] 54%|█████▎    | 74927/140000 [00:25<00:23, 2826.59it/s] 54%|█████▍    | 75336/140000 [00:25<00:20, 3175.89it/s] 54%|█████▍    | 75743/140000 [00:25<00:18, 3429.41it/s] 54%|█████▍    | 76145/140000 [00:26<00:17, 3598.48it/s] 55%|█████▍    | 76582/140000 [00:26<00:16, 3821.89it/s] 55%|█████▍    | 76969/140000 [00:26<00:17, 3561.20it/s] 55%|█████▌    | 77332/140000 [00:26<00:17, 3554.09it/s] 55%|█████▌    | 77699/140000 [00:26<00:17, 3585.92it/s] 56%|█████▌    | 78061/140000 [00:26<00:18, 3347.70it/s] 56%|█████▌    | 78418/140000 [00:26<00:18, 3407.89it/s] 56%|█████▋    | 78793/140000 [00:26<00:17, 3503.28it/s] 57%|█████▋    | 79160/140000 [00:26<00:17, 3549.53it/s] 57%|█████▋    | 79518/140000 [00:26<00:18, 3308.12it/s] 57%|█████▋    | 79925/140000 [00:27<00:17, 3520.39it/s] 57%|█████▋    | 80282/140000 [00:27<00:17, 3369.36it/s] 58%|█████▊    | 80626/140000 [00:27<00:18, 3217.16it/s] 58%|█████▊    | 80952/140000 [00:27<00:19, 3068.46it/s] 58%|█████▊    | 81263/140000 [00:27<00:20, 2836.73it/s] 58%|█████▊    | 81551/140000 [00:27<00:20, 2789.90it/s] 58%|█████▊    | 81871/140000 [00:27<00:20, 2900.14it/s] 59%|█████▉    | 82313/140000 [00:27<00:17, 3322.24it/s] 59%|█████▉    | 82748/140000 [00:27<00:15, 3613.59it/s] 59%|█████▉    | 83149/140000 [00:28<00:15, 3726.03it/s] 60%|█████▉    | 83781/140000 [00:28<00:12, 4479.90it/s] 61%|██████    | 85138/140000 [00:28<00:07, 7153.07it/s] 62%|██████▏   | 86784/140000 [00:28<00:05, 9905.02it/s] 63%|██████▎   | 88092/140000 [00:28<00:04, 10848.03it/s] 64%|██████▍   | 89425/140000 [00:28<00:04, 11585.58it/s] 65%|██████▌   | 91059/140000 [00:28<00:03, 13004.34it/s] 66%|██████▋   | 92905/140000 [00:28<00:03, 14634.43it/s] 68%|██████▊   | 94860/140000 [00:28<00:02, 16103.25it/s] 69%|██████▉   | 96538/140000 [00:28<00:02, 16300.68it/s] 70%|███████   | 98171/140000 [00:29<00:02, 14970.32it/s] 71%|███████▏  | 99764/140000 [00:29<00:02, 15239.06it/s] 72%|███████▏  | 101417/140000 [00:29<00:02, 15608.21it/s] 74%|███████▎  | 103021/140000 [00:29<00:02, 15731.79it/s] 75%|███████▍  | 104605/140000 [00:29<00:02, 15612.68it/s] 76%|███████▌  | 106214/140000 [00:29<00:02, 15751.91it/s] 77%|███████▋  | 107795/140000 [00:29<00:02, 15589.84it/s] 78%|███████▊  | 109358/140000 [00:29<00:01, 15539.89it/s] 79%|███████▉  | 110929/140000 [00:29<00:01, 15582.39it/s] 80%|████████  | 112490/140000 [00:30<00:01, 15512.72it/s] 81%|████████▏ | 114043/140000 [00:30<00:01, 15314.23it/s] 83%|████████▎ | 115576/140000 [00:30<00:01, 15207.58it/s] 84%|████████▎ | 117177/140000 [00:30<00:01, 15442.29it/s] 85%|████████▍ | 118762/140000 [00:30<00:01, 15561.02it/s] 86%|████████▌ | 120364/140000 [00:30<00:01, 15695.19it/s] 87%|████████▋ | 121935/140000 [00:30<00:01, 15604.07it/s] 88%|████████▊ | 123566/140000 [00:30<00:01, 15813.34it/s] 89%|████████▉ | 125148/140000 [00:30<00:00, 15717.18it/s] 91%|█████████ | 126745/140000 [00:30<00:00, 15790.06it/s] 92%|█████████▏| 128325/140000 [00:31<00:00, 14878.48it/s] 93%|█████████▎| 129824/140000 [00:31<00:00, 13974.96it/s] 94%|█████████▍| 131256/140000 [00:31<00:00, 14070.14it/s] 95%|█████████▍| 132720/140000 [00:31<00:00, 14227.32it/s] 96%|█████████▌| 134153/140000 [00:31<00:00, 13613.31it/s] 97%|█████████▋| 135525/140000 [00:31<00:00, 13280.00it/s] 98%|█████████▊| 137166/140000 [00:31<00:00, 14161.76it/s] 99%|█████████▉| 138812/140000 [00:31<00:00, 14819.78it/s]100%|██████████| 140000/140000 [00:31<00:00, 4391.41it/s] 
  0%|          | 0/20000 [00:00<?, ?it/s] 23%|██▎       | 4617/20000 [00:00<00:00, 46158.38it/s] 46%|████▌     | 9233/20000 [00:00<00:00, 44077.99it/s] 73%|███████▎  | 14556/20000 [00:00<00:00, 48151.57it/s]100%|██████████| 20000/20000 [00:00<00:00, 50685.20it/s]
  0%|          | 0/40000 [00:00<?, ?it/s]  4%|▍         | 1622/40000 [00:00<00:02, 16212.32it/s]  8%|▊         | 3244/40000 [00:00<00:02, 15652.89it/s] 12%|█▏        | 4820/40000 [00:00<00:02, 15697.21it/s] 16%|█▌        | 6419/40000 [00:00<00:02, 15809.22it/s] 20%|██        | 8001/40000 [00:00<00:02, 15586.69it/s] 24%|██▍       | 9626/40000 [00:00<00:01, 15806.78it/s] 28%|██▊       | 11208/40000 [00:00<00:01, 15540.09it/s] 32%|███▏      | 12844/40000 [00:00<00:01, 15794.26it/s] 36%|███▌      | 14425/40000 [00:00<00:01, 15755.49it/s] 40%|████      | 16002/40000 [00:01<00:01, 15681.59it/s] 44%|████▍     | 17571/40000 [00:01<00:01, 15575.17it/s] 48%|████▊     | 19129/40000 [00:01<00:01, 15484.49it/s] 52%|█████▏    | 20714/40000 [00:01<00:01, 15593.14it/s] 56%|█████▌    | 22274/40000 [00:01<00:01, 15564.29it/s] 60%|█████▉    | 23874/40000 [00:01<00:01, 15691.77it/s] 64%|██████▍   | 25523/40000 [00:01<00:00, 15930.08it/s] 68%|██████▊   | 27117/40000 [00:01<00:00, 15834.25it/s] 72%|███████▏  | 28763/40000 [00:01<00:00, 16019.26it/s] 76%|███████▌  | 30366/40000 [00:01<00:00, 15963.04it/s] 80%|███████▉  | 31963/40000 [00:02<00:00, 15946.01it/s] 84%|████████▍ | 33558/40000 [00:02<00:00, 15540.28it/s] 88%|████████▊ | 35115/40000 [00:02<00:00, 13884.99it/s] 91%|█████████▏| 36537/40000 [00:02<00:00, 13694.93it/s] 95%|█████████▍| 37929/40000 [00:02<00:00, 13560.72it/s] 98%|█████████▊| 39378/40000 [00:02<00:00, 13820.19it/s]100%|██████████| 40000/40000 [00:02<00:00, 15191.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 33.58it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 22.15it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 23.87it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 26.43it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 28.16it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 28.28it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 31.29it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.84it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 35.41it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.48it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 16.02it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 27.78it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 23.52it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 20.34it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 24.39it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 26.03it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 26.62it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 29.32it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.62it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 11.62it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 24.53it/s]Train:  40%|████      | 14/35 [00:00<00:00, 28.49it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 30.14it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 29.61it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 29.91it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 17.14it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 23.40it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.42it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.69it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.23it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 17.83it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 23.42it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 30.13it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 27.10it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 24.10it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 24.83it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  7.00it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 14.51it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 24.66it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.67it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 15.09it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 25.27it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 28.43it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 30.43it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 31.16it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 31.03it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 21.84it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 29.07it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.48it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:05,  6.31it/s]Train:  20%|██        | 7/35 [00:00<00:01, 22.75it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 25.08it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 31.46it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 29.54it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 26.90it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 26.89it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  7.54it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 13.58it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 27.21it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.53it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.15it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 27.30it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 30.81it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 31.12it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 28.24it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 30.67it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.34it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 31.98it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 25.13it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.06it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:03, 10.23it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 20.96it/s]Train:  40%|████      | 14/35 [00:00<00:00, 25.52it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 27.62it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 26.78it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 27.08it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 15.84it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 22.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 19.35it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.48it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 43.66it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 24.81it/s]Train:  37%|███▋      | 13/35 [00:00<00:01, 21.15it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 19.39it/s]Train:  66%|██████▌   | 23/35 [00:01<00:00, 21.39it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 24.68it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.02it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 26.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  4.35it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 14.77it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 24.64it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.82it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 15.08it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 25.81it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 28.99it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 29.53it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 30.86it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 30.39it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 19.75it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 25.11it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.57it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  6.88it/s]Train:  20%|██        | 7/35 [00:00<00:01, 21.70it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 23.92it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 30.10it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 26.26it/s]Train:  69%|██████▊   | 24/35 [00:01<00:00, 23.28it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 25.53it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 26.02it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  5.69it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 13.21it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 27.05it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.13it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 26.20it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 30.15it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 31.90it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 30.73it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 29.08it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 19.97it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 19.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 25.91it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.18it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 12.02it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 21.70it/s]Train:  40%|████      | 14/35 [00:00<00:00, 25.90it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 26.87it/s]Train:  71%|███████▏  | 25/35 [00:01<00:00, 25.96it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 28.15it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 13.94it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 23.12it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.67it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.49it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 42.95it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.16it/s]Train:  40%|████      | 14/35 [00:00<00:00, 28.40it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 27.89it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.32it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 27.94it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 32.43it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  7.34it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 12.79it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 24.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.90it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 15.90it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 29.93it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.47it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 27.71it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 28.19it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 29.64it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 30.01it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 25.56it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 37.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.17it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  6.81it/s]Train:  20%|██        | 7/35 [00:00<00:01, 23.24it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 25.68it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 26.32it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 27.55it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 29.57it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  7.41it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 14.48it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 24.31it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.73it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 19.95it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 26.52it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 29.04it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 29.95it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 29.59it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 30.95it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.26it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.57it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.92it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:03, 10.69it/s]Train:  20%|██        | 7/35 [00:00<00:01, 27.03it/s]Train:  31%|███▏      | 11/35 [00:00<00:01, 22.50it/s]Train:  40%|████      | 14/35 [00:00<00:01, 18.82it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 23.46it/s]Train:  60%|██████    | 21/35 [00:01<00:00, 19.91it/s]Train:  71%|███████▏  | 25/35 [00:01<00:00, 20.01it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 25.46it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 20.36it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 21.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 14.45it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 19.00it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 23.55it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 22.88it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 38.60it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 22.00it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 21.00it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 22.63it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 22.93it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 22.91it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 25.67it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  6.24it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 12.91it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 20.84it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 24.74it/s]
Current taxi columns: ['start_lon', 'start_lat', 'end_lon', 'end_lat', 'trip_distance', 'taxi_duration']
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 2 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [2, 200]  [4096, 200]     600        400
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           20801
Trainable params       20801
Non-trainable params       0
Mult-Adds              20500
=================================================================
n_classes=2
task=regression
model_name=ny_B_2022-05-21-21-28-04
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/ny_B_2022-05-21-21-28-04.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f204cdb07f0>, <metric.rmse.RMSE object at 0x7f204cdb0850>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=2, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f204cdb0760>
Epoch 1: Loss:            : Train 0.0465, Val 0.0220, Test 0.0224
          R2_Score         : Train 0.0508, Val 0.5449, Test 0.5473
          RMSE             : Train 420.3416, Val 287.4924, Test 290.0685
Best:
          R2_Score         : Train 0.0508, Val 0.5449, Test 0.5473
          RMSE             : Train 420.3416, Val 287.4924, Test 290.0685
Epoch 2: Loss:            : Train 0.0203, Val 0.0190, Test 0.0194
          R2_Score         : Train 0.5888, Val 0.6062, Test 0.6073
          RMSE             : Train 276.6688, Val 267.4120, Test 270.1867
Best:
          R2_Score         : Train 0.5888, Val 0.6062, Test 0.6073
          RMSE             : Train 276.6688, Val 267.4120, Test 270.1867
Epoch 3: Loss:            : Train 0.0193, Val 0.0188, Test 0.0192
          R2_Score         : Train 0.6099, Val 0.6103, Test 0.6124
          RMSE             : Train 269.4725, Val 266.0285, Test 268.4285
Best:
          R2_Score         : Train 0.6099, Val 0.6103, Test 0.6124
          RMSE             : Train 269.4725, Val 266.0285, Test 268.4285
Epoch 4: Loss:            : Train 0.0191, Val 0.0188, Test 0.0191
          R2_Score         : Train 0.6137, Val 0.6111, Test 0.6137
          RMSE             : Train 268.1561, Val 265.7636, Test 267.9509
Best:
          R2_Score         : Train 0.6137, Val 0.6111, Test 0.6137
          RMSE             : Train 268.1561, Val 265.7636, Test 267.9509
Epoch 5: Loss:            : Train 0.0191, Val 0.0187, Test 0.0191
          R2_Score         : Train 0.6148, Val 0.6121, Test 0.6148
          RMSE             : Train 267.7830, Val 265.4091, Test 267.5690
Best:
          R2_Score         : Train 0.6148, Val 0.6121, Test 0.6148
          RMSE             : Train 267.7830, Val 265.4091, Test 267.5690
Epoch 6: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6158, Val 0.6143, Test 0.6167
          RMSE             : Train 267.4292, Val 264.6477, Test 266.9335
Best:
          R2_Score         : Train 0.6158, Val 0.6143, Test 0.6167
          RMSE             : Train 267.4292, Val 264.6477, Test 266.9335
Epoch 7: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6163, Val 0.6146, Test 0.6167
          RMSE             : Train 267.2548, Val 264.5483, Test 266.9263
Best:
          R2_Score         : Train 0.6163, Val 0.6146, Test 0.6167
          RMSE             : Train 267.2548, Val 264.5483, Test 266.9263
Epoch 8: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6172, Val 0.6149, Test 0.6169
          RMSE             : Train 266.9371, Val 264.4541, Test 266.8465
Best:
          R2_Score         : Train 0.6172, Val 0.6149, Test 0.6169
          RMSE             : Train 266.9371, Val 264.4541, Test 266.8465
Epoch 9: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6176, Val 0.6144, Test 0.6163
          RMSE             : Train 266.7818, Val 264.6118, Test 267.0663
Best:
          R2_Score         : Train 0.6172, Val 0.6149, Test 0.6169
          RMSE             : Train 266.9371, Val 264.4541, Test 266.8465
Epoch 10: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6169, Val 0.6146, Test 0.6169
          RMSE             : Train 267.0288, Val 264.5425, Test 266.8650
Best:
          R2_Score         : Train 0.6172, Val 0.6149, Test 0.6169
          RMSE             : Train 266.9371, Val 264.4541, Test 266.8465
Epoch 11: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6180, Val 0.6159, Test 0.6172
          RMSE             : Train 266.6519, Val 264.0974, Test 266.7565
Best:
          R2_Score         : Train 0.6180, Val 0.6159, Test 0.6172
          RMSE             : Train 266.6519, Val 264.0974, Test 266.7565
Epoch 12: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6180, Val 0.6154, Test 0.6176
          RMSE             : Train 266.6755, Val 264.2672, Test 266.6229
Best:
          R2_Score         : Train 0.6180, Val 0.6159, Test 0.6172
          RMSE             : Train 266.6519, Val 264.0974, Test 266.7565
Epoch 13: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6158, Test 0.6178
          RMSE             : Train 266.4642, Val 264.1306, Test 266.5309
Best:
          R2_Score         : Train 0.6180, Val 0.6159, Test 0.6172
          RMSE             : Train 266.6519, Val 264.0974, Test 266.7565
Epoch 14: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6185, Val 0.6160, Test 0.6176
          RMSE             : Train 266.4944, Val 264.0939, Test 266.6065
Best:
          R2_Score         : Train 0.6185, Val 0.6160, Test 0.6176
          RMSE             : Train 266.4944, Val 264.0939, Test 266.6065
Epoch 15: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6183, Val 0.6167, Test 0.6183
          RMSE             : Train 266.5494, Val 263.8369, Test 266.3767
Best:
          R2_Score         : Train 0.6183, Val 0.6167, Test 0.6183
          RMSE             : Train 266.5494, Val 263.8369, Test 266.3767
Epoch 16: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6189, Val 0.6149, Test 0.6173
          RMSE             : Train 266.3343, Val 264.4448, Test 266.7159
Best:
          R2_Score         : Train 0.6183, Val 0.6167, Test 0.6183
          RMSE             : Train 266.5494, Val 263.8369, Test 266.3767
Epoch 17: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6189, Val 0.6150, Test 0.6171
          RMSE             : Train 266.3335, Val 264.4184, Test 266.7851
Best:
          R2_Score         : Train 0.6183, Val 0.6167, Test 0.6183
          RMSE             : Train 266.5494, Val 263.8369, Test 266.3767
Epoch 18: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6185, Val 0.6167, Test 0.6186
          RMSE             : Train 266.4716, Val 263.8258, Test 266.2569
Best:
          R2_Score         : Train 0.6185, Val 0.6167, Test 0.6186
          RMSE             : Train 266.4716, Val 263.8258, Test 266.2569
Epoch 19: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6169, Test 0.6184
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 13.03it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 25.61it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 23.32it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 21.61it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 23.50it/s]Train:  74%|███████▍  | 26/35 [00:01<00:00, 28.25it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 25.51it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 23.18it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 24.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 20.55it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 26.09it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.03it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  7.49it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 23.98it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 17.03it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 19.12it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 26.45it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 23.70it/s]Train:  69%|██████▊   | 24/35 [00:01<00:00, 22.73it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 28.06it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 25.16it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 24.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  7.70it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00,  9.73it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 23.11it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 24.41it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 24.92it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 27.36it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 29.03it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 30.03it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 26.02it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 27.26it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 21.73it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.85it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 37.03it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.35it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.55it/s]Train:  20%|██        | 7/35 [00:00<00:00, 30.73it/s]Train:  31%|███▏      | 11/35 [00:00<00:01, 20.03it/s]Train:  40%|████      | 14/35 [00:00<00:01, 17.76it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 24.88it/s]Train:  66%|██████▌   | 23/35 [00:01<00:00, 20.98it/s]Train:  74%|███████▍  | 26/35 [00:01<00:00, 21.09it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 23.99it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 24.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.82it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 32.38it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.58it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.64it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 25.77it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 18.50it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 23.00it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 26.81it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 23.63it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 23.04it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 26.60it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 23.17it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.69it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.58it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.72it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 20.52it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 24.17it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 16.71it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 29.99it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.57it/s]Train:  43%|████▎     | 15/35 [00:00<00:01, 18.73it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 23.27it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 21.80it/s]Train:  74%|███████▍  | 26/35 [00:01<00:00, 23.92it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 19.45it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 18.03it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 21.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 21.20it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 25.98it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:05,  6.63it/s]Train:  20%|██        | 7/35 [00:00<00:01, 20.57it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 23.78it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 25.91it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 27.59it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 27.49it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  5.24it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.21it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 31.49it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.46it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 17.41it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 28.21it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 22.79it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 20.12it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 23.92it/s]Train:  66%|██████▌   | 23/35 [00:01<00:00, 21.53it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 21.64it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 23.62it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 23.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.48it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.87it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 16.42it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.13it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 34.51it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 29.81it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 28.53it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 26.24it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 27.26it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 15.56it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 20.32it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 24.59it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 23.96it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.24it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 16.24it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 25.11it/s]Train:  40%|████      | 14/35 [00:00<00:00, 22.99it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 24.51it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 26.42it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 29.76it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.92it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.54it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 25.58it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.69it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 14.09it/s]Train:  20%|██        | 7/35 [00:00<00:01, 24.17it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 21.37it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 22.13it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 25.90it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 22.50it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 24.03it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 24.83it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 24.82it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 29.10it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  7.89it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 24.75it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 22.60it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 25.77it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.07it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 30.48it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 31.80it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.04it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.67it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.20it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.09it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 20.82it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.03it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 31.88it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 29.67it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 25.26it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 25.86it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.65it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 31.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.57it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 11.94it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 22.89it/s]Train:  31%|███▏      | 11/35 [00:00<00:01, 22.81it/s]Train:  40%|████      | 14/35 [00:00<00:01, 15.91it/s]Train:  49%|████▊     | 17/35 [00:00<00:01, 17.04it/s]Train:  57%|█████▋    | 20/35 [00:01<00:00, 17.47it/s]Train:  71%|███████▏  | 25/35 [00:01<00:00, 19.59it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 25.36it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 22.75it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 21.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 10.63it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 15.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 12.38it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 19.01it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 17.85it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 37.36it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 21.14it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 18.57it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 21.80it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 17.19it/s]Train:  66%|██████▌   | 23/35 [00:01<00:00, 17.07it/s]Train:  80%|████████  | 28/35 [00:01<00:00, 22.54it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 18.93it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 20.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  5.64it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 10.74it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 17.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 21.36it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 12.64it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 22.17it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 25.77it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 28.87it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 29.22it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 30.16it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.27it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.78it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  8.81it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 19.47it/s]Train:  20%|██        | 7/35 [00:00<00:01, 17.99it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 23.05it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 26.77it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 30.99it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 29.00it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 26.81it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.67it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 37.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.67it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 36.04it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.66it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 23.94it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.56it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.31it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 33.99it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.09it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 34.08it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.17it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 32.32it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.26it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.79it/s]Train:  20%|██        | 7/35 [00:00<00:00, 32.23it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 26.40it/s]Train:  40%|████      | 14/35 [00:00<00:00, 26.12it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 31.01it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 33.14it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 30.50it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 30.88it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.96it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 35.38it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.19it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.50it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 30.65it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.18it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 29.56it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 25.10it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 21.15it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 21.87it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 26.87it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 26.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  7.13it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00,  8.45it/s]Test:  40%|████      | 4/10 [00:00<00:00, 12.54it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 13.83it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 17.27it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 10.84it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 21.63it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 24.48it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 27.16it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 29.40it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 28.53it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 14.31it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 17.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 19.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.82it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  7.12it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 28.32it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 27.72it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 24.18it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 26.78it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 29.05it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 28.82it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.58it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 26.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.68it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 24.54it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.68it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.24it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 22.68it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 25.29it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 27.92it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 27.91it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 28.32it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 24.15it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 26.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.98it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 32.00it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.11it/s]
          RMSE             : Train 266.3405, Val 263.7630, Test 266.3168
Best:
          R2_Score         : Train 0.6189, Val 0.6169, Test 0.6184
          RMSE             : Train 266.3405, Val 263.7630, Test 266.3168
Epoch 20: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6170, Test 0.6190
          RMSE             : Train 266.4618, Val 263.7438, Test 266.1299
Best:
          R2_Score         : Train 0.6186, Val 0.6170, Test 0.6190
          RMSE             : Train 266.4618, Val 263.7438, Test 266.1299
Epoch 21: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6160, Test 0.6179
          RMSE             : Train 266.3454, Val 264.0852, Test 266.5000
Best:
          R2_Score         : Train 0.6186, Val 0.6170, Test 0.6190
          RMSE             : Train 266.4618, Val 263.7438, Test 266.1299
Epoch 22: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6163, Test 0.6181
          RMSE             : Train 266.4043, Val 263.9626, Test 266.4326
Best:
          R2_Score         : Train 0.6186, Val 0.6170, Test 0.6190
          RMSE             : Train 266.4618, Val 263.7438, Test 266.1299
Epoch 23: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6170, Test 0.6183
          RMSE             : Train 266.3010, Val 263.7360, Test 266.3457
Best:
          R2_Score         : Train 0.6190, Val 0.6170, Test 0.6183
          RMSE             : Train 266.3010, Val 263.7360, Test 266.3457
Epoch 24: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6171, Test 0.6188
          RMSE             : Train 266.4297, Val 263.6846, Test 266.2029
Best:
          R2_Score         : Train 0.6187, Val 0.6171, Test 0.6188
          RMSE             : Train 266.4297, Val 263.6846, Test 266.2029
Epoch 25: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6189, Val 0.6151, Test 0.6171
          RMSE             : Train 266.3418, Val 264.3742, Test 266.7802
Best:
          R2_Score         : Train 0.6187, Val 0.6171, Test 0.6188
          RMSE             : Train 266.4297, Val 263.6846, Test 266.2029
Epoch 26: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6189, Val 0.6156, Test 0.6171
          RMSE             : Train 266.3410, Val 264.2009, Test 266.7923
Best:
          R2_Score         : Train 0.6187, Val 0.6171, Test 0.6188
          RMSE             : Train 266.4297, Val 263.6846, Test 266.2029
Epoch 27: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 28: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6177, Test 0.6193
          RMSE             : Train 266.2312, Val 263.5092, Test 266.0273
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 29: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6172, Test 0.6192
          RMSE             : Train 266.2490, Val 263.6765, Test 266.0636
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 30: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6171, Test 0.6189
          RMSE             : Train 266.3369, Val 263.7163, Test 266.1519
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 31: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6169, Test 0.6188
          RMSE             : Train 266.3536, Val 263.7743, Test 266.1841
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 32: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6194, Val 0.6174, Test 0.6193
          RMSE             : Train 266.1773, Val 263.5829, Test 266.0167
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 33: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6194
          RMSE             : Train 266.3775, Val 263.5737, Test 265.9753
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 34: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6190, Val 0.6176, Test 0.6193
          RMSE             : Train 266.3008, Val 263.5439, Test 266.0047
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 35: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6169, Test 0.6192
          RMSE             : Train 266.2444, Val 263.7691, Test 266.0643
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 36: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6192, Val 0.6151, Test 0.6165
          RMSE             : Train 266.2256, Val 264.3814, Test 266.9846
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 37: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6172, Test 0.6184
          RMSE             : Train 266.1694, Val 263.6695, Test 266.3371
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 38: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6190, Val 0.6153, Test 0.6171
          RMSE             : Train 266.3203, Val 264.3189, Test 266.7781
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 39: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6169, Test 0.6183
          RMSE             : Train 266.2716, Val 263.7771, Test 266.3526
Best:
          R2_Score         : Train 0.6191, Val 0.6177, Test 0.6190
          RMSE             : Train 266.2837, Val 263.5053, Test 266.1032
Epoch 40: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 41: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6195
          RMSE             : Train 266.2311, Val 263.4618, Test 265.9362
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 42: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6168, Test 0.6185
          RMSE             : Train 266.2241, Val 263.8193, Test 266.3033

Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 13.89it/s]Train:  20%|██        | 7/35 [00:00<00:00, 31.41it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 24.73it/s]Train:  40%|████      | 14/35 [00:00<00:00, 22.84it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 27.51it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 27.40it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 28.22it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.27it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 27.01it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.42it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.47it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 28.45it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.80it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.30it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 32.28it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 29.79it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 25.50it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.01it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.51it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 20.22it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.64it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 17.05it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 25.98it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 29.67it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 30.04it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 31.16it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 30.87it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 34.02it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 48.26it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.69it/s]Train:  20%|██        | 7/35 [00:00<00:01, 24.01it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 18.58it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 25.24it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 23.66it/s]Train:  69%|██████▊   | 24/35 [00:01<00:00, 21.50it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 22.76it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 24.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.06it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.61it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.28it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.98it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 25.70it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.00it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.23it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.05it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.98it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 31.24it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 29.61it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.91it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 23.97it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.02it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 12.15it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 24.35it/s]Train:  40%|████      | 14/35 [00:00<00:00, 29.69it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 30.84it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.17it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 30.10it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 23.23it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 26.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 16.14it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 24.80it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.61it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.91it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 43.25it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 26.95it/s]Train:  40%|████      | 14/35 [00:00<00:00, 26.69it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 26.80it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 23.74it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 26.55it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 23.71it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  7.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.13it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.23it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.00it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 16.75it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.10it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.22it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 28.67it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 23.94it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 24.25it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 25.55it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 30.90it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 37.71it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 50.51it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  7.74it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.53it/s]Train:  20%|██        | 7/35 [00:00<00:01, 19.17it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 21.83it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 27.87it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 26.62it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 26.89it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 29.53it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.11it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.23it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 21.92it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 23.39it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.68it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 27.49it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 29.33it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 28.38it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 25.93it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 26.58it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.59it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 24.09it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.92it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:03,  9.43it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 17.25it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 17.92it/s]Train:  40%|████      | 14/35 [00:00<00:00, 22.22it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 25.12it/s]Train:  71%|███████▏  | 25/35 [00:01<00:00, 23.67it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 27.63it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 23.20it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 23.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 13.10it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 19.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 16.44it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 28.84it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 20.11it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.89it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 15.79it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 25.26it/s]Train:  40%|████      | 14/35 [00:00<00:00, 21.75it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 22.23it/s]Train:  66%|██████▌   | 23/35 [00:01<00:00, 20.36it/s]Train:  80%|████████  | 28/35 [00:01<00:00, 25.47it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 24.13it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 24.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 29.08it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 32.32it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 16.33it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.31it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 22.03it/s]Train:  40%|████      | 14/35 [00:00<00:00, 24.71it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 22.41it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 23.38it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 27.17it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 27.57it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 26.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 25.92it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 31.92it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.74it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.76it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.66it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 21.31it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 22.26it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 27.78it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.12it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 29.01it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 27.32it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.52it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.36it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 25.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.55it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.22it/s]Train:  11%|█▏        | 4/35 [00:00<00:02, 13.13it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 23.07it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.30it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 30.14it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.16it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 24.61it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 26.52it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 26.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.96it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 35.26it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 24.41it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.33it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:03,  8.29it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 18.50it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 23.98it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 22.72it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 23.44it/s]Train:  69%|██████▊   | 24/35 [00:01<00:00, 27.12it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 23.89it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 23.95it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 24.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 16.29it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 21.60it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.06it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.28it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 31.40it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.35it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.04it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 31.51it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.70it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 28.37it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.58it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.82it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 24.63it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.02it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 12.00it/s]Train:  20%|██        | 7/35 [00:00<00:01, 21.83it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 19.55it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 21.97it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 27.32it/s]Train:  69%|██████▊   | 24/35 [00:01<00:00, 26.00it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 26.27it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 26.94it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 33.81it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 38.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 40.92it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 50.87it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.48it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 31.86it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 27.64it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 23.36it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 24.51it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.63it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 27.25it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 24.73it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.82it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.45it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.71it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 24.33it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 33.19it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 30.68it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 30.50it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.50it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 29.98it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 26.99it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 26.64it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.95it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 34.67it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.52it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.39it/s]Train:  20%|██        | 7/35 [00:00<00:00, 33.29it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 27.65it/s]Train:  40%|████      | 14/35 [00:00<00:00, 24.37it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 28.18it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 25.63it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 23.83it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 25.68it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.11it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.87it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.56it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.90it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 34.54it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 40.70it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.38it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 29.67it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 28.93it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 28.17it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 29.36it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.32it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.70it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 32.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.58it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.46it/s]Train:  20%|██        | 7/35 [00:00<00:00, 28.08it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 23.55it/s]Train:  40%|████      | 14/35 [00:00<00:00, 26.97it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 24.47it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 25.14it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 30.31it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 27.69it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 26.76it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 33.64it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 37.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 40.60it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 53.84it/s]Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 43: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6163, Test 0.6184
          RMSE             : Train 266.4032, Val 263.9741, Test 266.3390
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 44: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6193, Val 0.6173, Test 0.6194
          RMSE             : Train 266.2032, Val 263.6379, Test 265.9683
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 45: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6170, Test 0.6192
          RMSE             : Train 266.1991, Val 263.7392, Test 266.0343
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 46: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6168, Test 0.6186
          RMSE             : Train 266.0569, Val 263.8050, Test 266.2648
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 47: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6172, Test 0.6191
          RMSE             : Train 266.2383, Val 263.6688, Test 266.0860
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 48: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6158, Test 0.6180
          RMSE             : Train 266.0857, Val 264.1535, Test 266.4552
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 49: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6163, Test 0.6184
          RMSE             : Train 266.1168, Val 263.9676, Test 266.3357
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 50: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6172, Test 0.6191
          RMSE             : Train 266.1517, Val 263.6687, Test 266.0721
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 51: Loss:            : Train 0.0188, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6192, Val 0.6145, Test 0.6169
          RMSE             : Train 266.2357, Val 264.5893, Test 266.8497
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 52: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6176, Test 0.6192
          RMSE             : Train 266.0958, Val 263.5272, Test 266.0342
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 53: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6200, Val 0.6170, Test 0.6181
          RMSE             : Train 265.9733, Val 263.7397, Test 266.4279
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 54: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6195, Val 0.6176, Test 0.6196
          RMSE             : Train 266.1409, Val 263.5273, Test 265.9206
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 55: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6176, Test 0.6193
          RMSE             : Train 266.0878, Val 263.5192, Test 265.9983
Best:
          R2_Score         : Train 0.6192, Val 0.6178, Test 0.6197
          RMSE             : Train 266.2427, Val 263.4562, Test 265.8792
Epoch 56: Loss:            : Train 0.0188, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 57: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6197, Val 0.6145, Test 0.6165
          RMSE             : Train 266.0656, Val 264.5928, Test 266.9976
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 58: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6160, Test 0.6177
          RMSE             : Train 266.4139, Val 264.0636, Test 266.5555
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 59: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6195, Val 0.6179, Test 0.6197
          RMSE             : Train 266.1526, Val 263.4239, Test 265.8633
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 60: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6179, Test 0.6191
          RMSE             : Train 266.1063, Val 263.4348, Test 266.0731
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 61: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6175, Test 0.6192
          RMSE             : Train 266.1109, Val 263.5525, Test 266.0624
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 62: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6170, Test 0.6187
          RMSE             : Train 266.2656, Val 263.7500, Test 266.2221
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 63: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6174, Test 0.6192
          RMSE             : Train 265.9909, Val 263.6002, Test 266.0643
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 64: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6167, Test 0.6190
          RMSE             : Train 266.0883, Val 263.8397, Test 266.1267
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 65: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6200, Val 0.6178, Test 0.6193
          RMSE             : Train 265.9526, Val 263.4409, Test 266.0012
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.43it/s]Train:  20%|██        | 7/35 [00:00<00:01, 23.77it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 28.54it/s]Train:  40%|████      | 14/35 [00:00<00:00, 24.50it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 24.81it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 30.45it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 28.85it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 28.57it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.82it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.00it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.36it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.17it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  7.49it/s]Train:  11%|█▏        | 4/35 [00:00<00:02, 13.14it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 25.51it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 25.63it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 26.84it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 28.79it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 24.09it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 23.25it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 27.62it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.46it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 24.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 19.29it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 19.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.99it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.59it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 13.31it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.18it/s]Train:  40%|████      | 14/35 [00:00<00:00, 27.72it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 27.26it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 27.65it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 31.15it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 23.27it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 21.76it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 20.54it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 31.97it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 23.58it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 47.62it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.68it/s]Train:  40%|████      | 14/35 [00:00<00:00, 25.88it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 23.93it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 25.30it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 30.02it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 27.20it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  6.89it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.63it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 20.85it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 19.97it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 22.66it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 14.36it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 25.10it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 28.22it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 28.68it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 30.19it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 26.58it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 24.33it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 26.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 20.31it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 26.82it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.48it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.49it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.71it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 24.42it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 24.27it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 31.79it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 27.18it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 23.80it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 28.81it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 28.69it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.18it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 34.41it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.06it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 23.39it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.88it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.96it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.19it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 30.78it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 28.73it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 26.89it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.45it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 41.45it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 50.82it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 19.10it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.00it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.61it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 37.48it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.84it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.55it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 30.42it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 20.68it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 25.83it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.07it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.79it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 32.88it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 27.11it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.10it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.91it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 30.30it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 31.33it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.27it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.16it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.99it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.46it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 33.48it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.82it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.83it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 31.57it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.43it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 33.83it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 25.68it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.64it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.02it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.75it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.86it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.66it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.46it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 35.30it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 36.66it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.96it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.54it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.26it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.97it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 19.36it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 24.95it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 27.29it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.32it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 30.09it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 28.49it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 27.13it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.29it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 31.04it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.29it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 13.25it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.02it/s]Train:  40%|████      | 14/35 [00:00<00:00, 29.91it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 31.57it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 30.17it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 32.13it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 20.67it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 27.26it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.90it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.38it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.88it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.79it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 26.93it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 33.39it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 30.98it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 30.80it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 29.40it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 37.03it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.94it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.14it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 25.66it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.45it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 15.52it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 24.89it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 29.79it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.47it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.74it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 31.52it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 26.85it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 29.96it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.24it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  8.34it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.39it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.10it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 26.39it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 28.38it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.65it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 31.18it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 30.44it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.77it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.38it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 29.36it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.54it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 21.00it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.82it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 30.74it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 32.06it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 30.90it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 33.25it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.79it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.32it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.02it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 25.71it/s]Train:  40%|████      | 14/35 [00:00<00:00, 27.83it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 30.80it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 29.74it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 31.01it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 15.42it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 22.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 33.88it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.08it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.33it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 35.16it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 35.07it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.28it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.83it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.54it/s]Train:  97%|█████████▋| 34/35 [00:00<00:00, 37.30it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.19it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 29.29it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 31.30it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.10it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.11it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.73it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.21it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.09it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.22it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.96it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 26.16it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 29.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.97it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  8.45it/s]Train:  20%|██        | 7/35 [00:00<00:01, 25.51it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.94it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.79it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 33.30it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.44it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.88it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.77it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 35.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.73it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 23.99it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.65it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.08it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 35.33it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.61it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 33.85it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.70it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 34.88it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.00it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 13.77it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.02it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.88it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.77it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.18it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.73it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 17.73it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 28.59it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.87it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.60it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 40.28it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 36.94it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.56it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.38it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.61it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 36.30it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.94it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.32it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 29.72it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.77it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.21it/s]
Epoch 66: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6200, Val 0.6175, Test 0.6186
          RMSE             : Train 265.9456, Val 263.5711, Test 266.2441
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 67: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6199
          RMSE             : Train 266.0947, Val 263.3931, Test 265.7919
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 68: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6201, Val 0.6166, Test 0.6189
          RMSE             : Train 265.9419, Val 263.8636, Test 266.1410
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 69: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6192, Val 0.6176, Test 0.6196
          RMSE             : Train 266.2398, Val 263.5252, Test 265.9188
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 70: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6168, Test 0.6189
          RMSE             : Train 266.0480, Val 263.7948, Test 266.1534
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 71: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6171, Test 0.6192
          RMSE             : Train 266.0867, Val 263.6950, Test 266.0556
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 72: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6200, Val 0.6176, Test 0.6197
          RMSE             : Train 265.9647, Val 263.5151, Test 265.8704
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 73: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6168, Test 0.6191
          RMSE             : Train 266.0157, Val 263.8029, Test 266.0881
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 74: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6157, Test 0.6182
          RMSE             : Train 266.0944, Val 264.1768, Test 266.4041
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 75: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6175, Test 0.6187
          RMSE             : Train 266.0716, Val 263.5778, Test 266.2116
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 76: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6170, Test 0.6191
          RMSE             : Train 266.0056, Val 263.7464, Test 266.0880
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 77: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6204, Val 0.6181, Test 0.6201
          RMSE             : Train 265.8212, Val 263.3388, Test 265.7215
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 78: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6167, Test 0.6187
          RMSE             : Train 265.9912, Val 263.8209, Test 266.2102
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 79: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6179, Test 0.6199
          RMSE             : Train 265.9406, Val 263.4287, Test 265.7959
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 80: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6200, Val 0.6172, Test 0.6190
          RMSE             : Train 265.9669, Val 263.6804, Test 266.1289
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 81: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6197, Val 0.6176, Test 0.6196
          RMSE             : Train 266.0751, Val 263.5198, Test 265.8986
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 82: Loss:            : Train 0.0189, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6182, Test 0.6199
          RMSE             : Train 265.9168, Val 263.3260, Test 265.8193
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 83: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6170, Test 0.6191
          RMSE             : Train 265.9039, Val 263.7316, Test 266.0703
Best:
          R2_Score         : Train 0.6196, Val 0.6182, Test 0.6199
          RMSE             : Train 266.0996, Val 263.3229, Test 265.8146
Epoch 84: Loss:            : Train 0.0188, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 85: Loss:            : Train 0.0187, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6203, Val 0.6183, Test 0.6201
          RMSE             : Train 265.8450, Val 263.2931, Test 265.7330
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 86: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6165, Test 0.6186
          RMSE             : Train 266.0196, Val 263.8965, Test 266.2693
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 87: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6164, Test 0.6187
          RMSE             : Train 265.9993, Val 263.9492, Test 266.2067
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 88: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6203, Val 0.6175, Test 0.6198
          RMSE             : Train 265.8475, Val 263.5507, Test 265.8264
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 89: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6167, Test 0.6192
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.72it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.33it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 35.11it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.85it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.25it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.84it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.72it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 33.35it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.96it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 31.50it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.86it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.77it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.98it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.13it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 32.69it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.66it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 37.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.70it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.05it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.68it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 26.97it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.50it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 36.08it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.91it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.31it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 35.88it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.31it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 44.79it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 54.69it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 19.07it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 31.65it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.57it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.10it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 36.49it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 37.52it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 35.50it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 39.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 36.39it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.91it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.27it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 48.53it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 41.21it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 38.11it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 35.69it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.55it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 36.90it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.35it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.64it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.50it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.14it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.93it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.74it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.56it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.90it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 40.30it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 37.76it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.42it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.09it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.36it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.85it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.73it/s]Train:  20%|██        | 7/35 [00:00<00:00, 29.03it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.40it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.41it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 34.60it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 32.80it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.74it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 29.24it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.57it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.53it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 21.77it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 32.42it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 26.38it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 25.25it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 28.26it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 28.38it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 29.55it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.84it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.08it/s]Train:  20%|██        | 7/35 [00:00<00:00, 32.06it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 30.56it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 29.95it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 30.15it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 31.71it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 32.06it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 23.41it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 29.63it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.71it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.98it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 41.72it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 36.05it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.53it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.36it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.75it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.85it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.67it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.16it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.58it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.98it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 18.08it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.02it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.95it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.78it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 30.80it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 31.55it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 31.46it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.87it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 33.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.59it/s]

          RMSE             : Train 265.8936, Val 263.8370, Test 266.0505
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 90: Loss:            : Train 0.0189, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6203, Val 0.6183, Test 0.6203
          RMSE             : Train 265.8641, Val 263.3019, Test 265.6490
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 91: Loss:            : Train 0.0188, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6203, Val 0.6183, Test 0.6202
          RMSE             : Train 265.8633, Val 263.2837, Test 265.6830
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 92: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6203, Val 0.6181, Test 0.6200
          RMSE             : Train 265.8562, Val 263.3631, Test 265.7527
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 93: Loss:            : Train 0.0188, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6202, Val 0.6182, Test 0.6202
          RMSE             : Train 265.8966, Val 263.3169, Test 265.6837
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 94: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6150, Test 0.6174
          RMSE             : Train 266.2902, Val 264.4250, Test 266.6723
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 95: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6193, Val 0.6174, Test 0.6197
          RMSE             : Train 266.1901, Val 263.6035, Test 265.8639
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 96: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6200, Val 0.6173, Test 0.6200
          RMSE             : Train 265.9664, Val 263.6213, Test 265.7651
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 97: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6203, Val 0.6182, Test 0.6199
          RMSE             : Train 265.8499, Val 263.3355, Test 265.8031
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 98: Loss:            : Train 0.0188, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6206, Val 0.6182, Test 0.6205
          RMSE             : Train 265.7618, Val 263.3097, Test 265.6006
Best:
          R2_Score         : Train 0.6201, Val 0.6188, Test 0.6203
          RMSE             : Train 265.9316, Val 263.1295, Test 265.6560
Epoch 99: Loss:            : Train 0.0188, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6203, Val 0.6188, Test 0.6202
          RMSE             : Train 265.8666, Val 263.1088, Test 265.6962
Best:
          R2_Score         : Train 0.6203, Val 0.6188, Test 0.6202
          RMSE             : Train 265.8666, Val 263.1088, Test 265.6962
Epoch 100: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6204, Val 0.6180, Test 0.6196
          RMSE             : Train 265.8285, Val 263.3816, Test 265.9050
Best:
          R2_Score         : Train 0.6203, Val 0.6188, Test 0.6202
          RMSE             : Train 265.8666, Val 263.1088, Test 265.6962
