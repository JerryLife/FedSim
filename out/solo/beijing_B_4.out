  0%|          | 0/98735 [00:00<?, ?it/s]  7%|▋         | 6433/98735 [00:00<00:01, 64322.70it/s] 15%|█▍        | 14539/98735 [00:00<00:01, 74166.50it/s] 23%|██▎       | 22591/98735 [00:00<00:00, 77062.21it/s] 31%|███       | 30667/98735 [00:00<00:00, 78519.48it/s] 39%|███▉      | 38701/98735 [00:00<00:00, 79161.87it/s] 47%|████▋     | 46618/98735 [00:00<00:00, 73306.05it/s] 55%|█████▍    | 54023/98735 [00:00<00:00, 69771.87it/s] 63%|██████▎   | 62016/98735 [00:00<00:00, 72777.33it/s] 71%|███████   | 70106/98735 [00:00<00:00, 75190.54it/s] 79%|███████▉  | 78203/98735 [00:01<00:00, 76909.86it/s] 87%|████████▋ | 86215/98735 [00:01<00:00, 77865.28it/s] 95%|█████████▌| 94038/98735 [00:01<00:00, 77602.15it/s]100%|██████████| 98735/98735 [00:01<00:00, 75821.75it/s]
  0%|          | 0/14105 [00:00<?, ?it/s] 57%|█████▋    | 8088/14105 [00:00<00:00, 80874.68it/s]100%|██████████| 14105/14105 [00:00<00:00, 80659.80it/s]
  0%|          | 0/28210 [00:00<?, ?it/s] 19%|█▉        | 5321/28210 [00:00<00:00, 53202.57it/s] 38%|███▊      | 10642/28210 [00:00<00:00, 53057.34it/s] 57%|█████▋    | 15964/28210 [00:00<00:00, 53129.67it/s] 75%|███████▌  | 21277/28210 [00:00<00:00, 52930.23it/s] 94%|█████████▍| 26571/28210 [00:00<00:00, 52684.53it/s]100%|██████████| 28210/28210 [00:00<00:00, 53331.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 11.71it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 18.11it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 27.37it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.04it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.33it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 27.22it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 73.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.75it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.86it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.57it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.16it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.34it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.89it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 31.79it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 40.33it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.64it/s]Train:  20%|██        | 5/25 [00:00<00:00, 21.54it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 17.21it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 20.79it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 21.13it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 23.50it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.95it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.27it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  7.24it/s]Train:  20%|██        | 5/25 [00:00<00:00, 23.49it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.99it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 24.77it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.11it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 30.05it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 14.80it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.26it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.49it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 21.02it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 29.53it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 33.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 33.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.81it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.40it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.50it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.72it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 25.68it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 26.09it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 29.62it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.89it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.42it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.34it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.52it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 31.85it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 28.98it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 30.03it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 31.42it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 33.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 39.98it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 39.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 45.01it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 51.88it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 27.92it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 34.80it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 38.26it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 39.35it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 41.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 37.60it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 37.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 31.19it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.37it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 22.41it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 36.37it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 35.36it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 30.52it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 28.11it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 33.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.49it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 30.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.68it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 23.08it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.89it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 37.57it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 31.55it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 28.45it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.37it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 31.54it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.09it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 23.59it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 30.91it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 30.18it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 28.11it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.05it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 23.56it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 16.09it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 33.12it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.47it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 23.70it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 34.43it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 35.19it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 31.02it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 29.90it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 15.51it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 35.04it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.20it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 29.34it/s]Train:  40%|████      | 10/25 [00:00<00:00, 33.66it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 33.78it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 36.80it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.92it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.48it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 33.35it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.55it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 25.15it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.26it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 30.62it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 31.45it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.84it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.78it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.42it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 34.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.87it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 39.05it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 31.94it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 31.70it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 33.65it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 38.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 54.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.88it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.45it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.56it/s]Loading house from data/beijing/house_clean.csv
Loading airbnb from data/beijing/airbnb_clean.csv
Current house columns Index(['cid', 'DOM', 'followers', 'square', 'livingRoom', 'drawingRoom',
       'kitchen', 'bathRoom', 'floor', 'constructionTime', 'ladderRatio',
       'elevator', 'fiveYearsProperty', 'subway', 'did_2', 'did_3', 'did_4',
       'did_5', 'did_6', 'did_7', 'did_8', 'did_9', 'did_10', 'did_11',
       'did_12', 'did_13', 'bt_2', 'bt_3', 'bt_4', 'rc_2', 'rc_3', 'rc_4',
       'bs_2', 'bs_3', 'bs_4', 'bs_5', 'bs_6', 'ty_2014', 'ty_2015', 'ty_2016',
       'ty_2017', 'ty_2018', 'tm_2', 'tm_3', 'tm_4', 'tm_5', 'tm_6', 'tm_7',
       'tm_8', 'tm_9', 'tm_10', 'tm_11', 'tm_12', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'price', 'minimum_nights', 'number_of_reviews',
       'reviews_per_month', 'calculated_host_listings_count',
       'availability_365', 'nbr_丰台区 ', 'nbr_大兴区 ', 'nbr_密云县 ', 'nbr_平谷区 ',
       'nbr_延庆县 ', 'nbr_怀柔区 ', 'nbr_房山区', 'nbr_昌平区', 'nbr_朝阳区 ', 'nbr_海淀区',
       'nbr_石景山区', 'nbr_西城区', 'nbr_通州区 ', 'nbr_门头沟区 ', 'nbr_顺义区 ',
       'rt_Private room', 'rt_Shared room'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 25 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0    [23, 400]  [4096, 400]    9600       9200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           90001
Trainable params       90001
Non-trainable params       0
Mult-Adds              89400
=================================================================
n_classes=2
task=regression
model_name=beijing_B_2022-05-21-21-23-22
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/beijing_B_2022-05-21-21-23-22.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7fb0a58f9250>, <metric.rmse.RMSE object at 0x7fb0a58f9340>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=23, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fb0a58f92e0>
Epoch 1: Loss:            : Train 0.0373, Val 0.0315, Test 0.0321
          R2_Score         : Train -0.1010, Val 0.0593, Test 0.0592
          RMSE             : Train 191.9216, Val 179.3286, Test 177.8789
Best:
          R2_Score         : Train -0.1010, Val 0.0593, Test 0.0592
          RMSE             : Train 191.9216, Val 179.3286, Test 177.8789
Epoch 2: Loss:            : Train 0.0305, Val 0.0301, Test 0.0300
          R2_Score         : Train 0.1066, Val 0.1221, Test 0.1241
          RMSE             : Train 172.8850, Val 173.2362, Test 171.6400
Best:
          R2_Score         : Train 0.1066, Val 0.1221, Test 0.1241
          RMSE             : Train 172.8850, Val 173.2362, Test 171.6400
Epoch 3: Loss:            : Train 0.0297, Val 0.0298, Test 0.0295
          R2_Score         : Train 0.1320, Val 0.1398, Test 0.1392
          RMSE             : Train 170.4104, Val 171.4799, Test 170.1526
Best:
          R2_Score         : Train 0.1320, Val 0.1398, Test 0.1392
          RMSE             : Train 170.4104, Val 171.4799, Test 170.1526
Epoch 4: Loss:            : Train 0.0291, Val 0.0293, Test 0.0292
          R2_Score         : Train 0.1455, Val 0.1488, Test 0.1484
          RMSE             : Train 169.0774, Val 170.5801, Test 169.2373
Best:
          R2_Score         : Train 0.1455, Val 0.1488, Test 0.1484
          RMSE             : Train 169.0774, Val 170.5801, Test 169.2373
Epoch 5: Loss:            : Train 0.0289, Val 0.0291, Test 0.0290
          R2_Score         : Train 0.1540, Val 0.1561, Test 0.1548
          RMSE             : Train 168.2375, Val 169.8506, Test 168.6065
Best:
          R2_Score         : Train 0.1540, Val 0.1561, Test 0.1548
          RMSE             : Train 168.2375, Val 169.8506, Test 168.6065
Epoch 6: Loss:            : Train 0.0287, Val 0.0290, Test 0.0288
          R2_Score         : Train 0.1613, Val 0.1632, Test 0.1602
          RMSE             : Train 167.5113, Val 169.1341, Test 168.0652
Best:
          R2_Score         : Train 0.1613, Val 0.1632, Test 0.1602
          RMSE             : Train 167.5113, Val 169.1341, Test 168.0652
Epoch 7: Loss:            : Train 0.0284, Val 0.0286, Test 0.0285
          R2_Score         : Train 0.1673, Val 0.1684, Test 0.1683
          RMSE             : Train 166.9137, Val 168.6130, Test 167.2455
Best:
          R2_Score         : Train 0.1673, Val 0.1684, Test 0.1683
          RMSE             : Train 166.9137, Val 168.6130, Test 167.2455
Epoch 8: Loss:            : Train 0.0285, Val 0.0284, Test 0.0283
          R2_Score         : Train 0.1730, Val 0.1753, Test 0.1743
          RMSE             : Train 166.3360, Val 167.9030, Test 166.6443
Best:
          R2_Score         : Train 0.1730, Val 0.1753, Test 0.1743
          RMSE             : Train 166.3360, Val 167.9030, Test 166.6443
Epoch 9: Loss:            : Train 0.0280, Val 0.0283, Test 0.0281
          R2_Score         : Train 0.1789, Val 0.1807, Test 0.1800
          RMSE             : Train 165.7433, Val 167.3616, Test 166.0686
Best:
          R2_Score         : Train 0.1789, Val 0.1807, Test 0.1800
          RMSE             : Train 165.7433, Val 167.3616, Test 166.0686
Epoch 10: Loss:            : Train 0.0279, Val 0.0282, Test 0.0279
          R2_Score         : Train 0.1857, Val 0.1862, Test 0.1854
          RMSE             : Train 165.0516, Val 166.7934, Test 165.5165
Best:
          R2_Score         : Train 0.1857, Val 0.1862, Test 0.1854
          RMSE             : Train 165.0516, Val 166.7934, Test 165.5165
Epoch 11: Loss:            : Train 0.0275, Val 0.0281, Test 0.0278
          R2_Score         : Train 0.1916, Val 0.1926, Test 0.1904
          RMSE             : Train 164.4561, Val 166.1376, Test 165.0133
Best:
          R2_Score         : Train 0.1916, Val 0.1926, Test 0.1904
          RMSE             : Train 164.4561, Val 166.1376, Test 165.0133
Epoch 12: Loss:            : Train 0.0274, Val 0.0276, Test 0.0276
          R2_Score         : Train 0.1968, Val 0.1953, Test 0.1946
          RMSE             : Train 163.9260, Val 165.8554, Test 164.5881
Best:
          R2_Score         : Train 0.1968, Val 0.1953, Test 0.1946
          RMSE             : Train 163.9260, Val 165.8554, Test 164.5881
Epoch 13: Loss:            : Train 0.0273, Val 0.0276, Test 0.0274
          R2_Score         : Train 0.2020, Val 0.2037, Test 0.2021
          RMSE             : Train 163.3992, Val 164.9948, Test 163.8194
Best:
          R2_Score         : Train 0.2020, Val 0.2037, Test 0.2021
          RMSE             : Train 163.3992, Val 164.9948, Test 163.8194
Epoch 14: Loss:            : Train 0.0271, Val 0.0275, Test 0.0273
          R2_Score         : Train 0.2068, Val 0.2081, Test 0.2044
          RMSE             : Train 162.9002, Val 164.5322, Test 163.5769
Best:
          R2_Score         : Train 0.2068, Val 0.2081, Test 0.2044
          RMSE             : Train 162.9002, Val 164.5322, Test 163.5769
Epoch 15: Loss:            : Train 0.0270, Val 0.0273, Test 0.0270
          R2_Score         : Train 0.2118, Val 0.2135, Test 0.2125
          RMSE             : Train 162.3832, Val 163.9714, Test 162.7482
Best:
          R2_Score         : Train 0.2118, Val 0.2135, Test 0.2125
          RMSE             : Train 162.3832, Val 163.9714, Test 162.7482
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 33.72it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.97it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 31.30it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 33.14it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 33.38it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.11it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 30.78it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.22it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  7.39it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.14it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.87it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 33.40it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 31.50it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.81it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 59.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  9.18it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.66it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.26it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 19.54it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.65it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 30.95it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 31.33it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.21it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 58.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.87it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 31.39it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.99it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.86it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 28.49it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 27.53it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.18it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 30.15it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 32.54it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.65it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.91it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.76it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 25.17it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 33.94it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 32.49it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 29.49it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.15it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 58.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.60it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.78it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.36it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 28.50it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 25.26it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 25.84it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 32.38it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 31.93it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  7.65it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.02it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.03it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.82it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 36.30it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 34.72it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 30.76it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 29.61it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 33.26it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 33.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.60it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 17.55it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.45it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 10.06it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.17it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.36it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.40it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 22.38it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 23.89it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 21.76it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.83it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 33.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 32.05it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.86it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.44it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.07it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 29.13it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.57it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 27.65it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.25it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 28.88it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.68it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.50it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 30.72it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.40it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.56it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 21.22it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 30.57it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.06it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 24.03it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 33.46it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 28.12it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 24.79it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.42it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.74it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 30.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.05it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 24.21it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 34.59it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 29.71it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.05it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.39it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 13.10it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 22.35it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.95it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 19.24it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 31.28it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.11it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 26.70it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.74it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 26.40it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 15.13it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 28.95it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.95it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 23.21it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.44it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.98it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 28.27it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 30.40it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.89it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  9.25it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 24.53it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 36.47it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.24it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 20.91it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 25.81it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 19.84it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 22.83it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 16.83it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  4.96it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.36it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.42it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.82it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.57it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 18.61it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 20.71it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 25.03it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 30.46it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 57.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.59it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 27.10it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.45it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.51it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.23it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 30.51it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 29.58it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 29.21it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 30.54it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.83it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 10.72it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.81it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.99it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.87it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 29.87it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 32.41it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 23.28it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 22.95it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 21.31it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 10.51it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.68it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.90it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 27.93it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 23.59it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.12it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 22.56it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 22.58it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 22.88it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 21.89it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 22.32it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.95it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.53it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.33it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 21.48it/s]Train:  40%|████      | 10/25 [00:00<00:00, 23.49it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.43it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 27.68it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 28.47it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.65it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.01it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.34it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.72it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 18.71it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.70it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.85it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 25.81it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.00it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.93it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 14.77it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.87it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.33it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 22.55it/s]Train:  40%|████      | 10/25 [00:00<00:00, 18.08it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 20.03it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 25.13it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.93it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.47it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 12.57it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.29it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 23.52it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 21.14it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 19.30it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.81it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 22.74it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  3.96it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 13.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.60it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 14.04it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.29it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.44it/s]Train:  20%|██        | 5/25 [00:00<00:00, 21.54it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.25it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 31.47it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 25.23it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.57it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.70it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  9.77it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 21.86it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.12it/s]
Epoch 16: Loss:            : Train 0.0267, Val 0.0273, Test 0.0270
          R2_Score         : Train 0.2174, Val 0.2159, Test 0.2140
          RMSE             : Train 161.8056, Val 163.7230, Test 162.5880
Best:
          R2_Score         : Train 0.2174, Val 0.2159, Test 0.2140
          RMSE             : Train 161.8056, Val 163.7230, Test 162.5880
Epoch 17: Loss:            : Train 0.0265, Val 0.0270, Test 0.0267
          R2_Score         : Train 0.2222, Val 0.2235, Test 0.2212
          RMSE             : Train 161.3108, Val 162.9272, Test 161.8448
Best:
          R2_Score         : Train 0.2222, Val 0.2235, Test 0.2212
          RMSE             : Train 161.3108, Val 162.9272, Test 161.8448
Epoch 18: Loss:            : Train 0.0264, Val 0.0271, Test 0.0267
          R2_Score         : Train 0.2260, Val 0.2262, Test 0.2231
          RMSE             : Train 160.9154, Val 162.6451, Test 161.6483
Best:
          R2_Score         : Train 0.2260, Val 0.2262, Test 0.2231
          RMSE             : Train 160.9154, Val 162.6451, Test 161.6483
Epoch 19: Loss:            : Train 0.0263, Val 0.0267, Test 0.0265
          R2_Score         : Train 0.2296, Val 0.2275, Test 0.2282
          RMSE             : Train 160.5453, Val 162.5017, Test 161.1171
Best:
          R2_Score         : Train 0.2296, Val 0.2275, Test 0.2282
          RMSE             : Train 160.5453, Val 162.5017, Test 161.1171
Epoch 20: Loss:            : Train 0.0263, Val 0.0269, Test 0.0264
          R2_Score         : Train 0.2321, Val 0.2319, Test 0.2310
          RMSE             : Train 160.2790, Val 162.0454, Test 160.8186
Best:
          R2_Score         : Train 0.2321, Val 0.2319, Test 0.2310
          RMSE             : Train 160.2790, Val 162.0454, Test 160.8186
Epoch 21: Loss:            : Train 0.0261, Val 0.0266, Test 0.0261
          R2_Score         : Train 0.2374, Val 0.2381, Test 0.2385
          RMSE             : Train 159.7291, Val 161.3831, Test 160.0374
Best:
          R2_Score         : Train 0.2374, Val 0.2381, Test 0.2385
          RMSE             : Train 159.7291, Val 161.3831, Test 160.0374
Epoch 22: Loss:            : Train 0.0259, Val 0.0264, Test 0.0260
          R2_Score         : Train 0.2411, Val 0.2406, Test 0.2418
          RMSE             : Train 159.3419, Val 161.1260, Test 159.6925
Best:
          R2_Score         : Train 0.2411, Val 0.2406, Test 0.2418
          RMSE             : Train 159.3419, Val 161.1260, Test 159.6925
Epoch 23: Loss:            : Train 0.0259, Val 0.0269, Test 0.0263
          R2_Score         : Train 0.2446, Val 0.2360, Test 0.2348
          RMSE             : Train 158.9745, Val 161.6099, Test 160.4259
Best:
          R2_Score         : Train 0.2411, Val 0.2406, Test 0.2418
          RMSE             : Train 159.3419, Val 161.1260, Test 159.6925
Epoch 24: Loss:            : Train 0.0257, Val 0.0261, Test 0.0259
          R2_Score         : Train 0.2466, Val 0.2439, Test 0.2451
          RMSE             : Train 158.7615, Val 160.7673, Test 159.3419
Best:
          R2_Score         : Train 0.2466, Val 0.2439, Test 0.2451
          RMSE             : Train 158.7615, Val 160.7673, Test 159.3419
Epoch 25: Loss:            : Train 0.0256, Val 0.0260, Test 0.0257
          R2_Score         : Train 0.2494, Val 0.2491, Test 0.2502
          RMSE             : Train 158.4657, Val 160.2141, Test 158.7997
Best:
          R2_Score         : Train 0.2494, Val 0.2491, Test 0.2502
          RMSE             : Train 158.4657, Val 160.2141, Test 158.7997
Epoch 26: Loss:            : Train 0.0255, Val 0.0262, Test 0.0258
          R2_Score         : Train 0.2533, Val 0.2499, Test 0.2469
          RMSE             : Train 158.0585, Val 160.1350, Test 159.1525
Best:
          R2_Score         : Train 0.2533, Val 0.2499, Test 0.2469
          RMSE             : Train 158.0585, Val 160.1350, Test 159.1525
Epoch 27: Loss:            : Train 0.0254, Val 0.0264, Test 0.0258
          R2_Score         : Train 0.2531, Val 0.2493, Test 0.2478
          RMSE             : Train 158.0776, Val 160.1998, Test 159.0518
Best:
          R2_Score         : Train 0.2533, Val 0.2499, Test 0.2469
          RMSE             : Train 158.0585, Val 160.1350, Test 159.1525
Epoch 28: Loss:            : Train 0.0253, Val 0.0258, Test 0.0254
          R2_Score         : Train 0.2571, Val 0.2544, Test 0.2581
          RMSE             : Train 157.6568, Val 159.6477, Test 157.9634
Best:
          R2_Score         : Train 0.2571, Val 0.2544, Test 0.2581
          RMSE             : Train 157.6568, Val 159.6477, Test 157.9634
Epoch 29: Loss:            : Train 0.0252, Val 0.0259, Test 0.0254
          R2_Score         : Train 0.2611, Val 0.2575, Test 0.2585
          RMSE             : Train 157.2296, Val 159.3189, Test 157.9203
Best:
          R2_Score         : Train 0.2611, Val 0.2575, Test 0.2585
          RMSE             : Train 157.2296, Val 159.3189, Test 157.9203
Epoch 30: Loss:            : Train 0.0252, Val 0.0260, Test 0.0255
          R2_Score         : Train 0.2638, Val 0.2553, Test 0.2563
          RMSE             : Train 156.9426, Val 159.5585, Test 158.1543
Best:
          R2_Score         : Train 0.2611, Val 0.2575, Test 0.2585
          RMSE             : Train 157.2296, Val 159.3189, Test 157.9203
Epoch 31: Loss:            : Train 0.0250, Val 0.0255, Test 0.0252
          R2_Score         : Train 0.2653, Val 0.2634, Test 0.2645
          RMSE             : Train 156.7815, Val 158.6838, Test 157.2805
Best:
          R2_Score         : Train 0.2653, Val 0.2634, Test 0.2645
          RMSE             : Train 156.7815, Val 158.6838, Test 157.2805
Epoch 32: Loss:            : Train 0.0249, Val 0.0256, Test 0.0254
          R2_Score         : Train 0.2677, Val 0.2583, Test 0.2602
          RMSE             : Train 156.5210, Val 159.2313, Test 157.7437
Best:
          R2_Score         : Train 0.2653, Val 0.2634, Test 0.2645
          RMSE             : Train 156.7815, Val 158.6838, Test 157.2805
Epoch 33: Loss:            : Train 0.0249, Val 0.0254, Test 0.0250
          R2_Score         : Train 0.2698, Val 0.2680, Test 0.2703
          RMSE             : Train 156.3008, Val 158.1846, Test 156.6549
Best:
          R2_Score         : Train 0.2698, Val 0.2680, Test 0.2703
          RMSE             : Train 156.3008, Val 158.1846, Test 156.6549
Epoch 34: Loss:            : Train 0.0249, Val 0.0256, Test 0.0251
          R2_Score         : Train 0.2730, Val 0.2677, Test 0.2695
          RMSE             : Train 155.9584, Val 158.2240, Test 156.7478
Best:
          R2_Score         : Train 0.2698, Val 0.2680, Test 0.2703
          RMSE             : Train 156.3008, Val 158.1846, Test 156.6549
Epoch 35: Loss:            : Train 0.0249, Val 0.0254, Test 0.0250
          R2_Score         : Train 0.2739, Val 0.2723, Test 0.2708
          RMSE             : Train 155.8641, Val 157.7223, Test 156.6032
Best:
          R2_Score         : Train 0.2739, Val 0.2723, Test 0.2708
          RMSE             : Train 155.8641, Val 157.7223, Test 156.6032
Epoch 36: Loss:            : Train 0.0247, Val 0.0252, Test 0.0249
          R2_Score         : Train 0.2762, Val 0.2712, Test 0.2731
          RMSE             : Train 155.6146, Val 157.8454, Test 156.3536
Best:
          R2_Score         : Train 0.2739, Val 0.2723, Test 0.2708
          RMSE             : Train 155.8641, Val 157.7223, Test 156.6032
Epoch 37: Loss:            : Train 0.0247, Val 0.0255, Test 0.0248
          R2_Score         : Train 0.2772, Val 0.2746, Test 0.2771
          RMSE             : Train 155.5089, Val 157.4768, Test 155.9320
Best:
          R2_Score         : Train 0.2772, Val 0.2746, Test 0.2771
          RMSE             : Train 155.5089, Val 157.4768, Test 155.9320
Epoch 38: Loss:            : Train 0.0245, Val 0.0254, Test 0.0250
          R2_Score         : Train 0.2802, Val 0.2656, Test 0.2704
          RMSE             : Train 155.1857, Val 158.4522, Test 156.6467
Best:
          R2_Score         : Train 0.2772, Val 0.2746, Test 0.2771
          RMSE             : Train 155.5089, Val 157.4768, Test 155.9320
Epoch 39: Loss:            : Train 0.0246, Val 0.0251, Test 0.0246
          R2_Score         : Train 0.2797, Val 0.2801, Test 0.2827
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.56it/s]Train:  12%|█▏        | 3/25 [00:00<00:02, 10.17it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 20.24it/s]Train:  40%|████      | 10/25 [00:00<00:00, 19.19it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 20.20it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 25.95it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 24.85it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  8.43it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.30it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 19.45it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.38it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 11.22it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 14.08it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 20.84it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.61it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 26.75it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  9.01it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.75it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.82it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.65it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.35it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 16.62it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 23.85it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 30.67it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 27.96it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 25.55it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  9.67it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.02it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 17.18it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.72it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 20.00it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 14.46it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 23.18it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 30.66it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.02it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 27.24it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.21it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.18it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.06it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.26it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.34it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.57it/s]Train:  20%|██        | 5/25 [00:00<00:01, 17.10it/s]Train:  40%|████      | 10/25 [00:00<00:00, 22.45it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.89it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 20.05it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.22it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 22.12it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.33it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 22.80it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 20.23it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.71it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 22.83it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.52it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 24.09it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 27.16it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 24.77it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.43it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.35it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 34.52it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.55it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.13it/s]Train:  20%|██        | 5/25 [00:00<00:01, 18.17it/s]Train:  40%|████      | 10/25 [00:00<00:00, 28.63it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 23.17it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 23.47it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 23.88it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 16.31it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.48it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 25.49it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.81it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.94it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 13.86it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 16.33it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 17.19it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 18.83it/s]Train:  72%|███████▏  | 18/25 [00:01<00:00, 19.46it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 24.21it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.77it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 43.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.87it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 16.04it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 15.73it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 14.80it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 24.37it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.54it/s]Train:  40%|████      | 10/25 [00:00<00:00, 26.06it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 26.02it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.47it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 32.80it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 20.89it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.26it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.22it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.52it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 21.07it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.26it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.28it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 29.02it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.04it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 25.23it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 49.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  9.53it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.51it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:06,  3.95it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.16it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 21.20it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.45it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.08it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 29.63it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.13it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.00it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.10it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 13.23it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 16.41it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.39it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 22.55it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 24.82it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 29.83it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.92it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.10it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.40it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 26.17it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 30.89it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 35.85it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 31.18it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  6.22it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 19.10it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.88it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.34it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.48it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 27.87it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.65it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 30.81it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  7.08it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 21.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 17.85it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.56it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.11it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.10it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.69it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 32.37it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.34it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.75it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.59it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 30.37it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.66it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.34it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 27.08it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 33.11it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 30.72it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.77it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  8.83it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.58it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 25.06it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.01it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.40it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 30.21it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 28.43it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 19.58it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 23.13it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 18.43it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  8.28it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 20.71it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.23it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.32it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 13.95it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 26.99it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 26.47it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.96it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 30.21it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 28.57it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.88it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 26.60it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.46it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 23.33it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 26.62it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 33.68it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 31.19it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 29.31it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 15.40it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.85it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.39it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 16.65it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.19it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 16.78it/s]Train:  40%|████      | 10/25 [00:00<00:00, 25.28it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 27.50it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 31.12it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 25.95it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 11.18it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 14.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.43it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 20.34it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.10it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.41it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 14.36it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.16it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 21.71it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.37it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.62it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 24.84it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 24.90it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 19.06it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 48.56it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.28it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 27.27it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 21.47it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 19.57it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 21.17it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 19.38it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 23.46it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 19.51it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 51.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  9.35it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 23.54it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.06it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 39.38it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 29.17it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.39it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 30.05it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 33.67it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.64it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  5.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.26it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.66it/s]
          RMSE             : Train 155.2380, Val 156.8819, Test 155.3269
Best:
          R2_Score         : Train 0.2797, Val 0.2801, Test 0.2827
          RMSE             : Train 155.2380, Val 156.8819, Test 155.3269
Epoch 40: Loss:            : Train 0.0243, Val 0.0250, Test 0.0247
          R2_Score         : Train 0.2847, Val 0.2781, Test 0.2811
          RMSE             : Train 154.6920, Val 157.0895, Test 155.4971
Best:
          R2_Score         : Train 0.2797, Val 0.2801, Test 0.2827
          RMSE             : Train 155.2380, Val 156.8819, Test 155.3269
Epoch 41: Loss:            : Train 0.0245, Val 0.0257, Test 0.0248
          R2_Score         : Train 0.2851, Val 0.2770, Test 0.2776
          RMSE             : Train 154.6560, Val 157.2185, Test 155.8732
Best:
          R2_Score         : Train 0.2797, Val 0.2801, Test 0.2827
          RMSE             : Train 155.2380, Val 156.8819, Test 155.3269
Epoch 42: Loss:            : Train 0.0243, Val 0.0250, Test 0.0245
          R2_Score         : Train 0.2866, Val 0.2876, Test 0.2878
          RMSE             : Train 154.4932, Val 156.0626, Test 154.7668
Best:
          R2_Score         : Train 0.2866, Val 0.2876, Test 0.2878
          RMSE             : Train 154.4932, Val 156.0626, Test 154.7668
Epoch 43: Loss:            : Train 0.0243, Val 0.0250, Test 0.0245
          R2_Score         : Train 0.2888, Val 0.2866, Test 0.2876
          RMSE             : Train 154.2499, Val 156.1634, Test 154.7869
Best:
          R2_Score         : Train 0.2866, Val 0.2876, Test 0.2878
          RMSE             : Train 154.4932, Val 156.0626, Test 154.7668
Epoch 44: Loss:            : Train 0.0242, Val 0.0249, Test 0.0243
          R2_Score         : Train 0.2898, Val 0.2885, Test 0.2907
          RMSE             : Train 154.1481, Val 155.9540, Test 154.4576
Best:
          R2_Score         : Train 0.2898, Val 0.2885, Test 0.2907
          RMSE             : Train 154.1481, Val 155.9540, Test 154.4576
Epoch 45: Loss:            : Train 0.0243, Val 0.0249, Test 0.0244
          R2_Score         : Train 0.2913, Val 0.2837, Test 0.2887
          RMSE             : Train 153.9815, Val 156.4853, Test 154.6746
Best:
          R2_Score         : Train 0.2898, Val 0.2885, Test 0.2907
          RMSE             : Train 154.1481, Val 155.9540, Test 154.4576
Epoch 46: Loss:            : Train 0.0241, Val 0.0249, Test 0.0244
          R2_Score         : Train 0.2923, Val 0.2838, Test 0.2876
          RMSE             : Train 153.8762, Val 156.4747, Test 154.7931
Best:
          R2_Score         : Train 0.2898, Val 0.2885, Test 0.2907
          RMSE             : Train 154.1481, Val 155.9540, Test 154.4576
Epoch 47: Loss:            : Train 0.0241, Val 0.0254, Test 0.0245
          R2_Score         : Train 0.2935, Val 0.2843, Test 0.2867
          RMSE             : Train 153.7420, Val 156.4230, Test 154.8855
Best:
          R2_Score         : Train 0.2898, Val 0.2885, Test 0.2907
          RMSE             : Train 154.1481, Val 155.9540, Test 154.4576
Epoch 48: Loss:            : Train 0.0240, Val 0.0247, Test 0.0244
          R2_Score         : Train 0.2976, Val 0.2816, Test 0.2872
          RMSE             : Train 153.2967, Val 156.7150, Test 154.8290
Best:
          R2_Score         : Train 0.2898, Val 0.2885, Test 0.2907
          RMSE             : Train 154.1481, Val 155.9540, Test 154.4576
Epoch 49: Loss:            : Train 0.0239, Val 0.0249, Test 0.0248
          R2_Score         : Train 0.2945, Val 0.2698, Test 0.2765
          RMSE             : Train 153.6303, Val 157.9972, Test 155.9866
Best:
          R2_Score         : Train 0.2898, Val 0.2885, Test 0.2907
          RMSE             : Train 154.1481, Val 155.9540, Test 154.4576
Epoch 50: Loss:            : Train 0.0238, Val 0.0248, Test 0.0243
          R2_Score         : Train 0.2967, Val 0.2881, Test 0.2926
          RMSE             : Train 153.3948, Val 156.0012, Test 154.2509
Best:
          R2_Score         : Train 0.2898, Val 0.2885, Test 0.2907
          RMSE             : Train 154.1481, Val 155.9540, Test 154.4576
Epoch 51: Loss:            : Train 0.0239, Val 0.0245, Test 0.0243
          R2_Score         : Train 0.3006, Val 0.2882, Test 0.2920
          RMSE             : Train 152.9628, Val 155.9879, Test 154.3118
Best:
          R2_Score         : Train 0.2898, Val 0.2885, Test 0.2907
          RMSE             : Train 154.1481, Val 155.9540, Test 154.4576
Epoch 52: Loss:            : Train 0.0240, Val 0.0251, Test 0.0244
          R2_Score         : Train 0.2990, Val 0.2888, Test 0.2897
          RMSE             : Train 153.1467, Val 155.9273, Test 154.5651
Best:
          R2_Score         : Train 0.2990, Val 0.2888, Test 0.2897
          RMSE             : Train 153.1467, Val 155.9273, Test 154.5651
Epoch 53: Loss:            : Train 0.0238, Val 0.0246, Test 0.0242
          R2_Score         : Train 0.3019, Val 0.2893, Test 0.2953
          RMSE             : Train 152.8250, Val 155.8705, Test 153.9461
Best:
          R2_Score         : Train 0.3019, Val 0.2893, Test 0.2953
          RMSE             : Train 152.8250, Val 155.8705, Test 153.9461
Epoch 54: Loss:            : Train 0.0237, Val 0.0248, Test 0.0241
          R2_Score         : Train 0.3025, Val 0.2931, Test 0.2973
          RMSE             : Train 152.7563, Val 155.4515, Test 153.7286
Best:
          R2_Score         : Train 0.3025, Val 0.2931, Test 0.2973
          RMSE             : Train 152.7563, Val 155.4515, Test 153.7286
Epoch 55: Loss:            : Train 0.0238, Val 0.0246, Test 0.0240
          R2_Score         : Train 0.3044, Val 0.2983, Test 0.2996
          RMSE             : Train 152.5483, Val 154.8770, Test 153.4779
Best:
          R2_Score         : Train 0.3044, Val 0.2983, Test 0.2996
          RMSE             : Train 152.5483, Val 154.8770, Test 153.4779
Epoch 56: Loss:            : Train 0.0237, Val 0.0247, Test 0.0242
          R2_Score         : Train 0.3049, Val 0.2976, Test 0.2965
          RMSE             : Train 152.5003, Val 154.9567, Test 153.8185
Best:
          R2_Score         : Train 0.3044, Val 0.2983, Test 0.2996
          RMSE             : Train 152.5483, Val 154.8770, Test 153.4779
Epoch 57: Loss:            : Train 0.0237, Val 0.0254, Test 0.0245
          R2_Score         : Train 0.3052, Val 0.2849, Test 0.2873
          RMSE             : Train 152.4674, Val 156.3546, Test 154.8274
Best:
          R2_Score         : Train 0.3044, Val 0.2983, Test 0.2996
          RMSE             : Train 152.5483, Val 154.8770, Test 153.4779
Epoch 58: Loss:            : Train 0.0238, Val 0.0245, Test 0.0241
          R2_Score         : Train 0.3041, Val 0.3002, Test 0.2990
          RMSE             : Train 152.5843, Val 154.6742, Test 153.5448
Best:
          R2_Score         : Train 0.3041, Val 0.3002, Test 0.2990
          RMSE             : Train 152.5843, Val 154.6742, Test 153.5448
Epoch 59: Loss:            : Train 0.0236, Val 0.0243, Test 0.0238
          R2_Score         : Train 0.3075, Val 0.3055, Test 0.3064
          RMSE             : Train 152.2113, Val 154.0786, Test 152.7329
Best:
          R2_Score         : Train 0.3075, Val 0.3055, Test 0.3064
          RMSE             : Train 152.2113, Val 154.0786, Test 152.7329
Epoch 60: Loss:            : Train 0.0237, Val 0.0251, Test 0.0245
          R2_Score         : Train 0.3094, Val 0.2878, Test 0.2877
          RMSE             : Train 152.0045, Val 156.0322, Test 154.7800
Best:
          R2_Score         : Train 0.3075, Val 0.3055, Test 0.3064
          RMSE             : Train 152.2113, Val 154.0786, Test 152.7329
Epoch 61: Loss:            : Train 0.0236, Val 0.0244, Test 0.0238
          R2_Score         : Train 0.3085, Val 0.3037, Test 0.3062
          RMSE             : Train 152.1066, Val 154.2787, Test 152.7530
Best:
          R2_Score         : Train 0.3075, Val 0.3055, Test 0.3064
          RMSE             : Train 152.2113, Val 154.0786, Test 152.7329
Epoch 62: Loss:            : Train 0.0236, Val 0.0242, Test 0.0238
          R2_Score         : Train 0.3111, Val 0.2988, Test 0.3051
          RMSE             : Train 151.8147, Val 154.8202, Test 152.8739

Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.30it/s]Train:  20%|██        | 5/25 [00:00<00:00, 24.00it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.88it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 23.40it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 31.01it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 28.80it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 26.75it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 28.10it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 34.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  7.87it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 28.35it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.32it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 19.07it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.28it/s]Train:  40%|████      | 10/25 [00:00<00:00, 25.80it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 24.58it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 25.41it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 31.99it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.93it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  4.68it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.31it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 20.59it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 35.80it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.82it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.73it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 32.01it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.06it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 27.32it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.33it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  7.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.01it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.36it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.55it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 28.89it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 21.85it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 19.98it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 24.44it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 64.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 29.23it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 42.33it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.68it/s]Train:  20%|██        | 5/25 [00:00<00:00, 27.27it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 26.09it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.20it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.27it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 24.35it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 26.41it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.61it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.71it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.38it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.10it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.61it/s]Train:  20%|██        | 5/25 [00:00<00:01, 17.67it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.60it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.04it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.49it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 28.34it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.34it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.84it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 15.56it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.19it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.46it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 19.59it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.17it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 30.72it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 32.36it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  4.67it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 10.67it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 11.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 18.92it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.86it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.27it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.91it/s]Train:  40%|████      | 10/25 [00:00<00:00, 29.84it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 28.40it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.21it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 33.18it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  4.60it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 13.83it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.08it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:03,  7.48it/s]Train:  20%|██        | 5/25 [00:00<00:01, 14.44it/s]Train:  32%|███▏      | 8/25 [00:00<00:01, 16.21it/s]Train:  40%|████      | 10/25 [00:00<00:00, 17.24it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 20.45it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.91it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 25.46it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  6.66it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.54it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 15.78it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.80it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.48it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 13.83it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.94it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.56it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.28it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 27.49it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 25.26it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  9.63it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.25it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 27.26it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.25it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.79it/s]Train:  16%|█▌        | 4/25 [00:00<00:02,  8.51it/s]Train:  36%|███▌      | 9/25 [00:00<00:01, 15.71it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 19.62it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.23it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.29it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 17.28it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.08it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 19.59it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 33.14it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 29.87it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.10it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 25.52it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 12.77it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 16.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.31it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.16it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.99it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.62it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 16.97it/s]Train:  40%|████      | 10/25 [00:00<00:00, 26.29it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.63it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.17it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 20.79it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 13.94it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 38.70it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.08it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.03it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 15.81it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 26.05it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 20.63it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 21.78it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 25.47it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 22.71it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.66it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 24.25it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.22it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 18.94it/s]Train:  40%|████      | 10/25 [00:00<00:00, 21.96it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 28.54it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.20it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 24.98it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.78it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 28.26it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 20.72it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.76it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.64it/s]Train:  20%|██        | 5/25 [00:00<00:00, 20.65it/s]Train:  40%|████      | 10/25 [00:00<00:00, 31.30it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 22.54it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 19.05it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 21.03it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 19.88it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.09it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 36.71it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.72it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 29.12it/s]Train:  40%|████      | 10/25 [00:00<00:00, 37.41it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 27.24it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.36it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 25.32it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.07it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  4.68it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.22it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 18.42it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.05it/s]Train:  20%|██        | 5/25 [00:00<00:00, 23.48it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.09it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 23.57it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.74it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.92it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 25.14it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.49it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  9.49it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.25it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.05it/s]Train:  20%|██        | 5/25 [00:00<00:01, 17.98it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.75it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 21.23it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 25.38it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 24.30it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.95it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.79it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 12.84it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.13it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.00it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.81it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.44it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 23.55it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.21it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 30.16it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 29.67it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.96it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.73it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  7.06it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 18.57it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.96it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.24it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.62it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.88it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 22.07it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 22.09it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.86it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.23it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 13.51it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.87it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  4.98it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.00it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 23.60it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 26.12it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 29.70it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 31.04it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.59it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 16.17it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.70it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 10.60it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.61it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.53it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.01it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 22.30it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 21.95it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 23.77it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.13it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.23it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.22it/s]Best:
          R2_Score         : Train 0.3075, Val 0.3055, Test 0.3064
          RMSE             : Train 152.2113, Val 154.0786, Test 152.7329
Epoch 63: Loss:            : Train 0.0236, Val 0.0246, Test 0.0240
          R2_Score         : Train 0.3090, Val 0.3028, Test 0.3016
          RMSE             : Train 152.0516, Val 154.3851, Test 153.2582
Best:
          R2_Score         : Train 0.3075, Val 0.3055, Test 0.3064
          RMSE             : Train 152.2113, Val 154.0786, Test 152.7329
Epoch 64: Loss:            : Train 0.0235, Val 0.0242, Test 0.0238
          R2_Score         : Train 0.3112, Val 0.2967, Test 0.3062
          RMSE             : Train 151.8014, Val 155.0590, Test 152.7597
Best:
          R2_Score         : Train 0.3075, Val 0.3055, Test 0.3064
          RMSE             : Train 152.2113, Val 154.0786, Test 152.7329
Epoch 65: Loss:            : Train 0.0236, Val 0.0246, Test 0.0239
          R2_Score         : Train 0.3091, Val 0.3033, Test 0.3044
          RMSE             : Train 152.0303, Val 154.3249, Test 152.9491
Best:
          R2_Score         : Train 0.3075, Val 0.3055, Test 0.3064
          RMSE             : Train 152.2113, Val 154.0786, Test 152.7329
Epoch 66: Loss:            : Train 0.0232, Val 0.0243, Test 0.0236
          R2_Score         : Train 0.3162, Val 0.3078, Test 0.3129
          RMSE             : Train 151.2504, Val 153.8284, Test 152.0193
Best:
          R2_Score         : Train 0.3162, Val 0.3078, Test 0.3129
          RMSE             : Train 151.2504, Val 153.8284, Test 152.0193
Epoch 67: Loss:            : Train 0.0233, Val 0.0243, Test 0.0239
          R2_Score         : Train 0.3172, Val 0.3034, Test 0.3030
          RMSE             : Train 151.1381, Val 154.3195, Test 153.1103
Best:
          R2_Score         : Train 0.3162, Val 0.3078, Test 0.3129
          RMSE             : Train 151.2504, Val 153.8284, Test 152.0193
Epoch 68: Loss:            : Train 0.0234, Val 0.0244, Test 0.0238
          R2_Score         : Train 0.3149, Val 0.2974, Test 0.3067
          RMSE             : Train 151.3951, Val 154.9785, Test 152.6997
Best:
          R2_Score         : Train 0.3162, Val 0.3078, Test 0.3129
          RMSE             : Train 151.2504, Val 153.8284, Test 152.0193
Epoch 69: Loss:            : Train 0.0234, Val 0.0243, Test 0.0236
          R2_Score         : Train 0.3140, Val 0.3071, Test 0.3113
          RMSE             : Train 151.4969, Val 153.9069, Test 152.1931
Best:
          R2_Score         : Train 0.3162, Val 0.3078, Test 0.3129
          RMSE             : Train 151.2504, Val 153.8284, Test 152.0193
Epoch 70: Loss:            : Train 0.0233, Val 0.0242, Test 0.0235
          R2_Score         : Train 0.3173, Val 0.3115, Test 0.3161
          RMSE             : Train 151.1285, Val 153.4133, Test 151.6653
Best:
          R2_Score         : Train 0.3173, Val 0.3115, Test 0.3161
          RMSE             : Train 151.1285, Val 153.4133, Test 151.6653
Epoch 71: Loss:            : Train 0.0233, Val 0.0242, Test 0.0235
          R2_Score         : Train 0.3166, Val 0.3114, Test 0.3151
          RMSE             : Train 151.2083, Val 153.4315, Test 151.7722
Best:
          R2_Score         : Train 0.3173, Val 0.3115, Test 0.3161
          RMSE             : Train 151.1285, Val 153.4133, Test 151.6653
Epoch 72: Loss:            : Train 0.0232, Val 0.0244, Test 0.0236
          R2_Score         : Train 0.3184, Val 0.3090, Test 0.3120
          RMSE             : Train 151.0104, Val 153.6914, Test 152.1109
Best:
          R2_Score         : Train 0.3173, Val 0.3115, Test 0.3161
          RMSE             : Train 151.1285, Val 153.4133, Test 151.6653
Epoch 73: Loss:            : Train 0.0232, Val 0.0241, Test 0.0235
          R2_Score         : Train 0.3216, Val 0.3111, Test 0.3149
          RMSE             : Train 150.6535, Val 153.4652, Test 151.7986
Best:
          R2_Score         : Train 0.3173, Val 0.3115, Test 0.3161
          RMSE             : Train 151.1285, Val 153.4133, Test 151.6653
Epoch 74: Loss:            : Train 0.0232, Val 0.0242, Test 0.0238
          R2_Score         : Train 0.3192, Val 0.3034, Test 0.3068
          RMSE             : Train 150.9250, Val 154.3189, Test 152.6890
Best:
          R2_Score         : Train 0.3173, Val 0.3115, Test 0.3161
          RMSE             : Train 151.1285, Val 153.4133, Test 151.6653
Epoch 75: Loss:            : Train 0.0233, Val 0.0247, Test 0.0238
          R2_Score         : Train 0.3209, Val 0.3061, Test 0.3079
          RMSE             : Train 150.7263, Val 154.0226, Test 152.5730
Best:
          R2_Score         : Train 0.3173, Val 0.3115, Test 0.3161
          RMSE             : Train 151.1285, Val 153.4133, Test 151.6653
Epoch 76: Loss:            : Train 0.0232, Val 0.0240, Test 0.0234
          R2_Score         : Train 0.3193, Val 0.3177, Test 0.3194
          RMSE             : Train 150.9057, Val 152.7290, Test 151.2920
Best:
          R2_Score         : Train 0.3193, Val 0.3177, Test 0.3194
          RMSE             : Train 150.9057, Val 152.7290, Test 151.2920
Epoch 77: Loss:            : Train 0.0231, Val 0.0246, Test 0.0240
          R2_Score         : Train 0.3217, Val 0.2974, Test 0.3018
          RMSE             : Train 150.6372, Val 154.9836, Test 153.2416
Best:
          R2_Score         : Train 0.3193, Val 0.3177, Test 0.3194
          RMSE             : Train 150.9057, Val 152.7290, Test 151.2920
Epoch 78: Loss:            : Train 0.0232, Val 0.0239, Test 0.0235
          R2_Score         : Train 0.3210, Val 0.3114, Test 0.3144
          RMSE             : Train 150.7174, Val 153.4269, Test 151.8475
Best:
          R2_Score         : Train 0.3193, Val 0.3177, Test 0.3194
          RMSE             : Train 150.9057, Val 152.7290, Test 151.2920
Epoch 79: Loss:            : Train 0.0231, Val 0.0241, Test 0.0236
          R2_Score         : Train 0.3230, Val 0.3111, Test 0.3134
          RMSE             : Train 150.4990, Val 153.4621, Test 151.9639
Best:
          R2_Score         : Train 0.3193, Val 0.3177, Test 0.3194
          RMSE             : Train 150.9057, Val 152.7290, Test 151.2920
Epoch 80: Loss:            : Train 0.0233, Val 0.0240, Test 0.0235
          R2_Score         : Train 0.3209, Val 0.3140, Test 0.3154
          RMSE             : Train 150.7282, Val 153.1399, Test 151.7406
Best:
          R2_Score         : Train 0.3193, Val 0.3177, Test 0.3194
          RMSE             : Train 150.9057, Val 152.7290, Test 151.2920
Epoch 81: Loss:            : Train 0.0231, Val 0.0240, Test 0.0234
          R2_Score         : Train 0.3245, Val 0.3143, Test 0.3194
          RMSE             : Train 150.3295, Val 153.1100, Test 151.3016
Best:
          R2_Score         : Train 0.3193, Val 0.3177, Test 0.3194
          RMSE             : Train 150.9057, Val 152.7290, Test 151.2920
Epoch 82: Loss:            : Train 0.0230, Val 0.0242, Test 0.0234
          R2_Score         : Train 0.3248, Val 0.3178, Test 0.3208
          RMSE             : Train 150.2942, Val 152.7084, Test 151.1430
Best:
          R2_Score         : Train 0.3248, Val 0.3178, Test 0.3208
          RMSE             : Train 150.2942, Val 152.7084, Test 151.1430
Epoch 83: Loss:            : Train 0.0231, Val 0.0241, Test 0.0234
          R2_Score         : Train 0.3250, Val 0.3155, Test 0.3199
          RMSE             : Train 150.2733, Val 152.9759, Test 151.2460
Best:
          R2_Score         : Train 0.3248, Val 0.3178, Test 0.3208
          RMSE             : Train 150.2942, Val 152.7084, Test 151.1430
Epoch 84: Loss:            : Train 0.0230, Val 0.0237, Test 0.0231
          R2_Score         : Train 0.3242, Val 0.3201, Test 0.3253
          RMSE             : Train 150.3653, Val 152.4523, Test 150.6342
Best:
          R2_Score         : Train 0.3242, Val 0.3201, Test 0.3253
          RMSE             : Train 150.3653, Val 152.4523, Test 150.6342
Epoch 85: Loss:            : Train 0.0228, Val 0.0244, Test 0.0234
          R2_Score         : Train 0.3294, Val 0.3143, Test 0.3183
          RMSE             : Train 149.7835, Val 153.1016, Test 151.4221
Best:
          R2_Score         : Train 0.3242, Val 0.3201, Test 0.3253
          RMSE             : Train 150.3653, Val 152.4523, Test 150.6342
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.64it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 23.20it/s]Train:  40%|████      | 10/25 [00:00<00:00, 23.17it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 23.55it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 25.29it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 29.96it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  6.63it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.45it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 15.23it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.83it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.41it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  7.88it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 20.48it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 20.38it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 22.96it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 29.22it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.96it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  4.73it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.65it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 19.60it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.79it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.34it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 13.61it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.09it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.47it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 21.72it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.92it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 29.59it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  7.52it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 13.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 33.75it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.94it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 29.03it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 27.88it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 27.65it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 25.45it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 25.13it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 24.73it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 20.83it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.42it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 22.12it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 29.56it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 26.85it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.29it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 32.67it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 29.22it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 13.33it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 14.74it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 14.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 13.02it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 20.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.53it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 23.10it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 33.19it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.74it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 25.19it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.28it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.87it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00,  9.18it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 11.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.64it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 21.06it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.79it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.10it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 18.76it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 18.94it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 15.64it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 20.43it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.67it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 25.10it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.89it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 14.12it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 13.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 48.08it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.98it/s]Train:  20%|██        | 5/25 [00:00<00:01, 17.16it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.05it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.65it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.84it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.91it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 24.09it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  5.96it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 24.73it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.76it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.93it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 17.94it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 17.18it/s]Train:  40%|████      | 10/25 [00:00<00:00, 25.04it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 24.54it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.61it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 29.81it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.52it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  4.49it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.90it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.46it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.14it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 17.61it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 16.48it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 27.61it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 25.81it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 23.89it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.51it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 25.87it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 13.74it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  9.55it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 30.21it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 17.02it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 11.62it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.18it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 28.98it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 27.88it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 27.28it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 28.35it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 13.97it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 10.09it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.08it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.59it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 17.74it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 26.94it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.77it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 26.88it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 31.37it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 24.84it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 25.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  9.51it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.72it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.26it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 20.53it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.97it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.46it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 26.18it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 25.91it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 22.62it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.15it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.54it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.16it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:05,  4.35it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 15.97it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 16.99it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 20.24it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 27.34it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 28.77it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.59it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 24.67it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.89it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.72it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.58it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 26.25it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 34.40it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 29.94it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 28.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 33.20it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  6.31it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 18.26it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.00it/s]

Epoch 86: Loss:            : Train 0.0230, Val 0.0236, Test 0.0233
          R2_Score         : Train 0.3271, Val 0.3187, Test 0.3218
          RMSE             : Train 150.0384, Val 152.6132, Test 151.0239
Best:
          R2_Score         : Train 0.3242, Val 0.3201, Test 0.3253
          RMSE             : Train 150.3653, Val 152.4523, Test 150.6342
Epoch 87: Loss:            : Train 0.0229, Val 0.0239, Test 0.0234
          R2_Score         : Train 0.3281, Val 0.3104, Test 0.3175
          RMSE             : Train 149.9265, Val 153.5341, Test 151.5078
Best:
          R2_Score         : Train 0.3242, Val 0.3201, Test 0.3253
          RMSE             : Train 150.3653, Val 152.4523, Test 150.6342
Epoch 88: Loss:            : Train 0.0229, Val 0.0235, Test 0.0230
          R2_Score         : Train 0.3291, Val 0.3231, Test 0.3281
          RMSE             : Train 149.8207, Val 152.1186, Test 150.3246
Best:
          R2_Score         : Train 0.3291, Val 0.3231, Test 0.3281
          RMSE             : Train 149.8207, Val 152.1186, Test 150.3246
Epoch 89: Loss:            : Train 0.0229, Val 0.0241, Test 0.0234
          R2_Score         : Train 0.3281, Val 0.3145, Test 0.3183
          RMSE             : Train 149.9301, Val 153.0854, Test 151.4163
Best:
          R2_Score         : Train 0.3291, Val 0.3231, Test 0.3281
          RMSE             : Train 149.8207, Val 152.1186, Test 150.3246
Epoch 90: Loss:            : Train 0.0229, Val 0.0238, Test 0.0230
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 91: Loss:            : Train 0.0227, Val 0.0238, Test 0.0233
          R2_Score         : Train 0.3336, Val 0.3207, Test 0.3224
          RMSE             : Train 149.3178, Val 152.3832, Test 150.9591
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 92: Loss:            : Train 0.0227, Val 0.0237, Test 0.0231
          R2_Score         : Train 0.3330, Val 0.3242, Test 0.3280
          RMSE             : Train 149.3836, Val 151.9951, Test 150.3362
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 93: Loss:            : Train 0.0227, Val 0.0236, Test 0.0231
          R2_Score         : Train 0.3342, Val 0.3217, Test 0.3255
          RMSE             : Train 149.2485, Val 152.2789, Test 150.6156
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 94: Loss:            : Train 0.0228, Val 0.0239, Test 0.0232
          R2_Score         : Train 0.3335, Val 0.3165, Test 0.3240
          RMSE             : Train 149.3251, Val 152.8573, Test 150.7834
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 95: Loss:            : Train 0.0229, Val 0.0246, Test 0.0236
          R2_Score         : Train 0.3339, Val 0.3154, Test 0.3152
          RMSE             : Train 149.2797, Val 152.9806, Test 151.7651
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 96: Loss:            : Train 0.0227, Val 0.0239, Test 0.0233
          R2_Score         : Train 0.3317, Val 0.3149, Test 0.3206
          RMSE             : Train 149.5258, Val 153.0344, Test 151.1628
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 97: Loss:            : Train 0.0227, Val 0.0234, Test 0.0232
          R2_Score         : Train 0.3358, Val 0.3203, Test 0.3235
          RMSE             : Train 149.0735, Val 152.4357, Test 150.8421
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 98: Loss:            : Train 0.0226, Val 0.0238, Test 0.0231
          R2_Score         : Train 0.3360, Val 0.3222, Test 0.3272
          RMSE             : Train 149.0434, Val 152.2243, Test 150.4219
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 99: Loss:            : Train 0.0225, Val 0.0237, Test 0.0232
          R2_Score         : Train 0.3383, Val 0.3204, Test 0.3239
          RMSE             : Train 148.7909, Val 152.4192, Test 150.7947
Best:
          R2_Score         : Train 0.3285, Val 0.3243, Test 0.3290
          RMSE             : Train 149.8822, Val 151.9871, Test 150.2277
Epoch 100: Loss:            : Train 0.0227, Val 0.0236, Test 0.0230
          R2_Score         : Train 0.3342, Val 0.3262, Test 0.3306
          RMSE             : Train 149.2441, Val 151.7753, Test 150.0425
Best:
          R2_Score         : Train 0.3342, Val 0.3262, Test 0.3306
          RMSE             : Train 149.2441, Val 151.7753, Test 150.0425
