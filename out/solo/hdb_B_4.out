  0%|          | 0/64445 [00:00<?, ?it/s]  7%|▋         | 4314/64445 [00:00<00:01, 43128.52it/s] 15%|█▌        | 9852/64445 [00:00<00:01, 50332.68it/s] 26%|██▌       | 16656/64445 [00:00<00:00, 56965.83it/s] 35%|███▍      | 22334/64445 [00:00<00:01, 40123.99it/s] 42%|████▏     | 26851/64445 [00:00<00:01, 35443.54it/s] 53%|█████▎    | 34339/64445 [00:00<00:00, 45514.98it/s] 66%|██████▌   | 42256/64445 [00:00<00:00, 54509.82it/s] 75%|███████▍  | 48290/64445 [00:00<00:00, 54349.00it/s] 84%|████████▍ | 54121/64445 [00:01<00:00, 44841.12it/s] 92%|█████████▏| 59112/64445 [00:01<00:00, 36504.88it/s]100%|██████████| 64445/64445 [00:01<00:00, 43560.04it/s]
  0%|          | 0/9207 [00:00<?, ?it/s] 34%|███▎      | 3102/9207 [00:00<00:00, 31014.78it/s]100%|██████████| 9207/9207 [00:00<00:00, 48403.94it/s]
  0%|          | 0/18413 [00:00<?, ?it/s] 45%|████▍     | 8226/18413 [00:00<00:00, 82251.84it/s] 90%|█████████ | 16572/18413 [00:00<00:00, 82955.79it/s]100%|██████████| 18413/18413 [00:00<00:00, 82899.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.64it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.17it/s]Train:  38%|███▊      | 6/16 [00:00<00:01,  9.12it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 16.39it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.82it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 30.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.58it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 27.39it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.67it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.15it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.35it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.87it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.42it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 26.27it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.69it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 21.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.07it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.27it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 25.91it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.73it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.97it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.29it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.97it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.97it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.69it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 11.48it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.25it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.22it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.41it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.79it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.41it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 34.39it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 30.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 56.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.96it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.73it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 11.47it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 12.84it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 13.81it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.97it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.83it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.09it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 12.38it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.82it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.41it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.81it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 11.20it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.83it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 10.73it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 12.49it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 14.00it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  4.62it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  6.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 37.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 43.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.86it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.84it/s]Train:  38%|███▊      | 6/16 [00:00<00:01,  8.73it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 11.07it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.05it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 13.88it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 16.97it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.89it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 47.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 47.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.56it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.66it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 12.12it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 13.57it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 11.28it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 37.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.73it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  5.27it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  7.51it/s]Train:  38%|███▊      | 6/16 [00:00<00:01,  9.59it/s]Train:  50%|█████     | 8/16 [00:00<00:00,  8.38it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 15.48it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 16.50it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 12.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.12it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.52it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.42it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.14it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  8.93it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 14.03it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.81it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.23it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.81it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  7.92it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.26it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.39it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.55it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.88it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 42.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  7.84it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.13it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.19it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 11.50it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.36it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.32it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.26it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.49it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.38it/s]Loading house from data/hdb/hdb_clean.csv
Loading airbnb from data/hdb/school_clean.csv
Current hdb columns Index(['floor_area_sqm', 'lease_commence_year_before_2020', 'tn_BEDOK',
       'tn_BISHAN', 'tn_BUKIT BATOK', 'tn_BUKIT MERAH', 'tn_BUKIT PANJANG',
       'tn_BUKIT TIMAH', 'tn_CENTRAL AREA', 'tn_CHOA CHU KANG', 'tn_CLEMENTI',
       'tn_GEYLANG', 'tn_HOUGANG', 'tn_JURONG EAST', 'tn_JURONG WEST',
       'tn_KALLANG/WHAMPOA', 'tn_MARINE PARADE', 'tn_PASIR RIS', 'tn_PUNGGOL',
       'tn_QUEENSTOWN', 'tn_SEMBAWANG', 'tn_SENGKANG', 'tn_SERANGOON',
       'tn_TAMPINES', 'tn_TOA PAYOH', 'tn_WOODLANDS', 'tn_YISHUN', 'ft_2 ROOM',
       'ft_3 ROOM', 'ft_4 ROOM', 'ft_5 ROOM', 'ft_EXECUTIVE',
       'ft_MULTI-GENERATION', 'sr_04 TO 06', 'sr_07 TO 09', 'sr_10 TO 12',
       'sr_13 TO 15', 'sr_16 TO 18', 'sr_19 TO 21', 'sr_22 TO 24',
       'sr_25 TO 27', 'sr_28 TO 30', 'sr_31 TO 33', 'sr_34 TO 36',
       'sr_37 TO 39', 'sr_40 TO 42', 'sr_43 TO 45', 'sr_46 TO 48',
       'sr_49 TO 51', 'fm_Adjoined flat', 'fm_Apartment', 'fm_DBSS',
       'fm_Improved', 'fm_Improved-Maisonette', 'fm_Maisonette', 'fm_Model A',
       'fm_Model A-Maisonette', 'fm_Model A2', 'fm_Multi Generation',
       'fm_New Generation', 'fm_Premium Apartment',
       'fm_Premium Apartment Loft', 'fm_Premium Maisonette', 'fm_Simplified',
       'fm_Standard', 'fm_Terrace', 'fm_Type S1', 'fm_Type S2', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'n_places_0', 'vacancy_rate_0', 'n_places_1',
       'vacancy_rate_1', 'n_places_2', 'vacancy_rate_2', 'n_places_3',
       'vacancy_rate_3'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 8 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [8, 400]  [4096, 400]    3600       3200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           84001
Trainable params       84001
Non-trainable params       0
Mult-Adds              83400
=================================================================
n_classes=2
task=regression
model_name=hdb_B_2022-05-21-21-23-57
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:2
test_batch_size=4096
train_batch_size=4096
learning_rate=0.01
weight_decay=1e-05
num_epochs=200
model_save_path=ckp/hdb_B_2022-05-21-21-23-57.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7fc2da5e5700>, <metric.rmse.RMSE object at 0x7fc2da5e5760>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=8, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fc2da5e5670>
Epoch 1: Loss:            : Train 0.0355, Val 0.0283, Test 0.0278
          R2_Score         : Train -0.8323, Val -0.3541, Test -0.3768
          RMSE             : Train 209.2928, Val 180.4373, Test 182.6074
Best:
          R2_Score         : Train -0.8323, Val -0.3541, Test -0.3768
          RMSE             : Train 209.2928, Val 180.4373, Test 182.6074
Epoch 2: Loss:            : Train 0.0216, Val 0.0208, Test 0.0200
          R2_Score         : Train -0.1120, Val -0.0148, Test -0.0035
          RMSE             : Train 163.0432, Val 156.2042, Test 155.8967
Best:
          R2_Score         : Train -0.1120, Val -0.0148, Test -0.0035
          RMSE             : Train 163.0432, Val 156.2042, Test 155.8967
Epoch 3: Loss:            : Train 0.0192, Val 0.0197, Test 0.0191
          R2_Score         : Train 0.0143, Val 0.0296, Test 0.0420
          RMSE             : Train 153.5049, Val 152.7501, Test 152.3261
Best:
          R2_Score         : Train 0.0143, Val 0.0296, Test 0.0420
          RMSE             : Train 153.5049, Val 152.7501, Test 152.3261
Epoch 4: Loss:            : Train 0.0184, Val 0.0190, Test 0.0185
          R2_Score         : Train 0.0563, Val 0.0585, Test 0.0718
          RMSE             : Train 150.2034, Val 150.4579, Test 149.9330
Best:
          R2_Score         : Train 0.0563, Val 0.0585, Test 0.0718
          RMSE             : Train 150.2034, Val 150.4579, Test 149.9330
Epoch 5: Loss:            : Train 0.0178, Val 0.0186, Test 0.0181
          R2_Score         : Train 0.0855, Val 0.0734, Test 0.0879
          RMSE             : Train 147.8621, Val 149.2640, Test 148.6254
Best:
          R2_Score         : Train 0.0855, Val 0.0734, Test 0.0879
          RMSE             : Train 147.8621, Val 149.2640, Test 148.6254
Epoch 6: Loss:            : Train 0.0175, Val 0.0181, Test 0.0177
          R2_Score         : Train 0.1012, Val 0.0994, Test 0.1123
          RMSE             : Train 146.5889, Val 147.1547, Test 146.6277
Best:
          R2_Score         : Train 0.1012, Val 0.0994, Test 0.1123
          RMSE             : Train 146.5889, Val 147.1547, Test 146.6277
Epoch 7: Loss:            : Train 0.0172, Val 0.0180, Test 0.0177
          R2_Score         : Train 0.1163, Val 0.1109, Test 0.1153
          RMSE             : Train 145.3455, Val 146.2157, Test 146.3774
Best:
          R2_Score         : Train 0.1163, Val 0.1109, Test 0.1153
          RMSE             : Train 145.3455, Val 146.2157, Test 146.3774
Epoch 8: Loss:            : Train 0.0172, Val 0.0177, Test 0.0173
          R2_Score         : Train 0.1178, Val 0.1205, Test 0.1319
          RMSE             : Train 145.2256, Val 145.4213, Test 144.9992
Best:
          R2_Score         : Train 0.1178, Val 0.1205, Test 0.1319
          RMSE             : Train 145.2256, Val 145.4213, Test 144.9992
Epoch 9: Loss:            : Train 0.0169, Val 0.0176, Test 0.0174
          R2_Score         : Train 0.1332, Val 0.1145, Test 0.1259
          RMSE             : Train 143.9505, Val 145.9119, Test 145.5029
Best:
          R2_Score         : Train 0.1178, Val 0.1205, Test 0.1319
          RMSE             : Train 145.2256, Val 145.4213, Test 144.9992
Epoch 10: Loss:            : Train 0.0167, Val 0.0173, Test 0.0171
          R2_Score         : Train 0.1437, Val 0.1366, Test 0.1408
          RMSE             : Train 143.0782, Val 144.0840, Test 144.2551
Best:
          R2_Score         : Train 0.1437, Val 0.1366, Test 0.1408
          RMSE             : Train 143.0782, Val 144.0840, Test 144.2551
Epoch 11: Loss:            : Train 0.0167, Val 0.0173, Test 0.0170
          R2_Score         : Train 0.1411, Val 0.1423, Test 0.1510
          RMSE             : Train 143.2913, Val 143.6072, Test 143.3927
Best:
          R2_Score         : Train 0.1411, Val 0.1423, Test 0.1510
          RMSE             : Train 143.2913, Val 143.6072, Test 143.3927
Epoch 12: Loss:            : Train 0.0164, Val 0.0170, Test 0.0167
          R2_Score         : Train 0.1566, Val 0.1575, Test 0.1645
          RMSE             : Train 141.9996, Val 142.3301, Test 142.2524
Best:
          R2_Score         : Train 0.1566, Val 0.1575, Test 0.1645
          RMSE             : Train 141.9996, Val 142.3301, Test 142.2524
Epoch 13: Loss:            : Train 0.0162, Val 0.0168, Test 0.0167
          R2_Score         : Train 0.1672, Val 0.1613, Test 0.1622
          RMSE             : Train 141.1039, Val 142.0049, Test 142.4469
Best:
          R2_Score         : Train 0.1672, Val 0.1613, Test 0.1622
          RMSE             : Train 141.1039, Val 142.0049, Test 142.4469
Epoch 14: Loss:            : Train 0.0161, Val 0.0167, Test 0.0164
          R2_Score         : Train 0.1727, Val 0.1702, Test 0.1767
          RMSE             : Train 140.6371, Val 141.2559, Test 141.2086
Best:
          R2_Score         : Train 0.1727, Val 0.1702, Test 0.1767
          RMSE             : Train 140.6371, Val 141.2559, Test 141.2086
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.46it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.42it/s]Train:  31%|███▏      | 5/16 [00:00<00:01,  9.45it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.29it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.61it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.94it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.73it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.34it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.77it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.44it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.54it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.02it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.98it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.17it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.87it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.44it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.09it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.93it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 43.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.95it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.79it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.14it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.38it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.67it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.18it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.10it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.91it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.51it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 26.06it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 49.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.14it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.38it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.87it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.04it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.14it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.79it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.95it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.83it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 21.41it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 17.76it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.58it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 14.49it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 12.83it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.65it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.64it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.15it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.75it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.88it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.15it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.84it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.14it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.12it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.92it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.77it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.43it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.02it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.28it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.35it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.74it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.52it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.35it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 12.45it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.26it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.15it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.98it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.24it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.48it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  8.26it/s]Test:  40%|████      | 2/5 [00:00<00:00,  5.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.77it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  9.77it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.94it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.84it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 11.59it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.13it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.75it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.71it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  8.06it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.55it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 12.87it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.60it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.84it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.21it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.48it/s]Test:  80%|████████  | 4/5 [00:00<00:00,  8.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.77it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.28it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.99it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.97it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.59it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 12.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.00it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.81it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 20.39it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.92it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.47it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  6.08it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  8.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 53.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:04,  3.44it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.12it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.69it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  7.69it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.30it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.10it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.35it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  3.77it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.51it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.81it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.35it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 44.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  3.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.96it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.57it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 24.86it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.51it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.84it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.10it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  7.00it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.88it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.80it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.28it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.96it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  6.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.17it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.48it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.34it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.49it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 15.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.23it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.48it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.80it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 20.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 30.33it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 15.86it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.20it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.98it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.39it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.35it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.16it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.96it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.36it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.86it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 10.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.15it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.07it/s]
Epoch 15: Loss:            : Train 0.0160, Val 0.0167, Test 0.0165
          R2_Score         : Train 0.1805, Val 0.1661, Test 0.1700
          RMSE             : Train 139.9659, Val 141.6013, Test 141.7792
Best:
          R2_Score         : Train 0.1727, Val 0.1702, Test 0.1767
          RMSE             : Train 140.6371, Val 141.2559, Test 141.2086
Epoch 16: Loss:            : Train 0.0160, Val 0.0165, Test 0.0162
          R2_Score         : Train 0.1804, Val 0.1821, Test 0.1859
          RMSE             : Train 139.9768, Val 140.2348, Test 140.4168
Best:
          R2_Score         : Train 0.1804, Val 0.1821, Test 0.1859
          RMSE             : Train 139.9768, Val 140.2348, Test 140.4168
Epoch 17: Loss:            : Train 0.0158, Val 0.0169, Test 0.0166
          R2_Score         : Train 0.1864, Val 0.1676, Test 0.1710
          RMSE             : Train 139.4629, Val 141.4763, Test 141.6940
Best:
          R2_Score         : Train 0.1804, Val 0.1821, Test 0.1859
          RMSE             : Train 139.9768, Val 140.2348, Test 140.4168
Epoch 18: Loss:            : Train 0.0160, Val 0.0166, Test 0.0162
          R2_Score         : Train 0.1798, Val 0.1834, Test 0.1876
          RMSE             : Train 140.0266, Val 140.1208, Test 140.2671
Best:
          R2_Score         : Train 0.1798, Val 0.1834, Test 0.1876
          RMSE             : Train 140.0266, Val 140.1208, Test 140.2671
Epoch 19: Loss:            : Train 0.0157, Val 0.0167, Test 0.0164
          R2_Score         : Train 0.1916, Val 0.1872, Test 0.1830
          RMSE             : Train 139.0200, Val 139.7975, Test 140.6650
Best:
          R2_Score         : Train 0.1916, Val 0.1872, Test 0.1830
          RMSE             : Train 139.0200, Val 139.7975, Test 140.6650
Epoch 20: Loss:            : Train 0.0155, Val 0.0167, Test 0.0163
          R2_Score         : Train 0.2033, Val 0.1870, Test 0.1904
          RMSE             : Train 138.0091, Val 139.8126, Test 140.0265
Best:
          R2_Score         : Train 0.1916, Val 0.1872, Test 0.1830
          RMSE             : Train 139.0200, Val 139.7975, Test 140.6650
Epoch 21: Loss:            : Train 0.0155, Val 0.0164, Test 0.0160
          R2_Score         : Train 0.2054, Val 0.1919, Test 0.1990
          RMSE             : Train 137.8297, Val 139.3957, Test 139.2819
Best:
          R2_Score         : Train 0.2054, Val 0.1919, Test 0.1990
          RMSE             : Train 137.8297, Val 139.3957, Test 139.2819
Epoch 22: Loss:            : Train 0.0155, Val 0.0163, Test 0.0159
          R2_Score         : Train 0.2061, Val 0.1961, Test 0.2057
          RMSE             : Train 137.7615, Val 139.0276, Test 138.6977
Best:
          R2_Score         : Train 0.2061, Val 0.1961, Test 0.2057
          RMSE             : Train 137.7615, Val 139.0276, Test 138.6977
Epoch 23: Loss:            : Train 0.0156, Val 0.0162, Test 0.0159
          R2_Score         : Train 0.1985, Val 0.1971, Test 0.2019
          RMSE             : Train 138.4220, Val 138.9400, Test 139.0268
Best:
          R2_Score         : Train 0.1985, Val 0.1971, Test 0.2019
          RMSE             : Train 138.4220, Val 138.9400, Test 139.0268
Epoch 24: Loss:            : Train 0.0154, Val 0.0162, Test 0.0158
          R2_Score         : Train 0.2069, Val 0.2094, Test 0.2099
          RMSE             : Train 137.6971, Val 137.8763, Test 138.3343
Best:
          R2_Score         : Train 0.2069, Val 0.2094, Test 0.2099
          RMSE             : Train 137.6971, Val 137.8763, Test 138.3343
Epoch 25: Loss:            : Train 0.0155, Val 0.0160, Test 0.0157
          R2_Score         : Train 0.2022, Val 0.2130, Test 0.2133
          RMSE             : Train 138.1066, Val 137.5603, Test 138.0335
Best:
          R2_Score         : Train 0.2022, Val 0.2130, Test 0.2133
          RMSE             : Train 138.1066, Val 137.5603, Test 138.0335
Epoch 26: Loss:            : Train 0.0155, Val 0.0163, Test 0.0158
          R2_Score         : Train 0.2052, Val 0.2055, Test 0.2095
          RMSE             : Train 137.8447, Val 138.2130, Test 138.3691
Best:
          R2_Score         : Train 0.2022, Val 0.2130, Test 0.2133
          RMSE             : Train 138.1066, Val 137.5603, Test 138.0335
Epoch 27: Loss:            : Train 0.0152, Val 0.0159, Test 0.0156
          R2_Score         : Train 0.2170, Val 0.2131, Test 0.2169
          RMSE             : Train 136.8124, Val 137.5558, Test 137.7205
Best:
          R2_Score         : Train 0.2170, Val 0.2131, Test 0.2169
          RMSE             : Train 136.8124, Val 137.5558, Test 137.7205
Epoch 28: Loss:            : Train 0.0152, Val 0.0161, Test 0.0156
          R2_Score         : Train 0.2185, Val 0.2129, Test 0.2198
          RMSE             : Train 136.6833, Val 137.5732, Test 137.4588
Best:
          R2_Score         : Train 0.2170, Val 0.2131, Test 0.2169
          RMSE             : Train 136.8124, Val 137.5558, Test 137.7205
Epoch 29: Loss:            : Train 0.0151, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2249, Val 0.2208, Test 0.2221
          RMSE             : Train 136.1268, Val 136.8760, Test 137.2609
Best:
          R2_Score         : Train 0.2249, Val 0.2208, Test 0.2221
          RMSE             : Train 136.1268, Val 136.8760, Test 137.2609
Epoch 30: Loss:            : Train 0.0151, Val 0.0160, Test 0.0156
          R2_Score         : Train 0.2231, Val 0.2151, Test 0.2208
          RMSE             : Train 136.2836, Val 137.3760, Test 137.3709
Best:
          R2_Score         : Train 0.2249, Val 0.2208, Test 0.2221
          RMSE             : Train 136.1268, Val 136.8760, Test 137.2609
Epoch 31: Loss:            : Train 0.0152, Val 0.0160, Test 0.0156
          R2_Score         : Train 0.2210, Val 0.2202, Test 0.2204
          RMSE             : Train 136.4633, Val 136.9315, Test 137.4131
Best:
          R2_Score         : Train 0.2249, Val 0.2208, Test 0.2221
          RMSE             : Train 136.1268, Val 136.8760, Test 137.2609
Epoch 32: Loss:            : Train 0.0152, Val 0.0159, Test 0.0156
          R2_Score         : Train 0.2181, Val 0.2193, Test 0.2186
          RMSE             : Train 136.7183, Val 137.0079, Test 137.5699
Best:
          R2_Score         : Train 0.2249, Val 0.2208, Test 0.2221
          RMSE             : Train 136.1268, Val 136.8760, Test 137.2609
Epoch 33: Loss:            : Train 0.0152, Val 0.0161, Test 0.0156
          R2_Score         : Train 0.2195, Val 0.2167, Test 0.2212
          RMSE             : Train 136.5989, Val 137.2342, Test 137.3367
Best:
          R2_Score         : Train 0.2249, Val 0.2208, Test 0.2221
          RMSE             : Train 136.1268, Val 136.8760, Test 137.2609
Epoch 34: Loss:            : Train 0.0151, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2244, Val 0.2204, Test 0.2225
          RMSE             : Train 136.1729, Val 136.9148, Test 137.2210
Best:
          R2_Score         : Train 0.2249, Val 0.2208, Test 0.2221
          RMSE             : Train 136.1268, Val 136.8760, Test 137.2609
Epoch 35: Loss:            : Train 0.0150, Val 0.0156, Test 0.0154
          R2_Score         : Train 0.2276, Val 0.2287, Test 0.2257
          RMSE             : Train 135.8879, Val 136.1802, Test 136.9394
Best:
          R2_Score         : Train 0.2276, Val 0.2287, Test 0.2257
          RMSE             : Train 135.8879, Val 136.1802, Test 136.9394
Epoch 36: Loss:            : Train 0.0151, Val 0.0159, Test 0.0156
          R2_Score         : Train 0.2268, Val 0.2241, Test 0.2215
          RMSE             : Train 135.9598, Val 136.5878, Test 137.3138
Best:
          R2_Score         : Train 0.2276, Val 0.2287, Test 0.2257
          RMSE             : Train 135.8879, Val 136.1802, Test 136.9394
Epoch 37: Loss:            : Train 0.0151, Val 0.0161, Test 0.0155
          R2_Score         : Train 0.2244, Val 0.2200, Test 0.2274
          RMSE             : Train 136.1711, Val 136.9502, Test 136.7916
Best:
          R2_Score         : Train 0.2276, Val 0.2287, Test 0.2257
          RMSE             : Train 135.8879, Val 136.1802, Test 136.9394
Epoch 38: Loss:            : Train 0.0150, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2275, Val 0.2236, Test 0.2265
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.34it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.11it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.03it/s]Train:  44%|████▍     | 7/16 [00:00<00:00,  9.41it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.96it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 17.48it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.46it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.13it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.52it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.75it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.80it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.26it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.47it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.63it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.31it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  6.71it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.16it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  7.43it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.49it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.68it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.01it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.48it/s]Test:  80%|████████  | 4/5 [00:00<00:00,  9.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.79it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.30it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 13.90it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 15.80it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.23it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.85it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.75it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 12.23it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.57it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 13.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.08it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.98it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.00it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.76it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.66it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 13.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.55it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.59it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 29.88it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 14.36it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 13.67it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 15.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.62it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.94it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.67it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.88it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.88it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.52it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  7.05it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.08it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.78it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.12it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.95it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.10it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.56it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  7.54it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.26it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 15.58it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 19.15it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 14.64it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 14.68it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.17it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.60it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.13it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.94it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  8.62it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.86it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 10.25it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 16.27it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 13.74it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.62it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.92it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.75it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.32it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 11.23it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.04it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 11.57it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 12.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.30it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.80it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.47it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.57it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.92it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.32it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.97it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  9.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.62it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.35it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.30it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.93it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.37it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.16it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.10it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.41it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.22it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.83it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.03it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.95it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.14it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.28it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 12.33it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.49it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.27it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 17.83it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.54it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.52it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.00it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:06,  2.32it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  8.80it/s]Train:  44%|████▍     | 7/16 [00:00<00:00,  9.19it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.70it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 15.05it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 12.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.37it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.76it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.22it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.78it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 13.01it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 13.62it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.32it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.53it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.90it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.90it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.60it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.14it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 61.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.05it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.57it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  9.05it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 18.28it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 19.00it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.01it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.38it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 12.16it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.80it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.85it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.26it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 14.11it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.67it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.95it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.63it/s]Test:  80%|████████  | 4/5 [00:00<00:00,  9.07it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.14it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.82it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.00it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.23it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.86it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.33it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.08it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 23.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.98it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.00it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.23it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.46it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.93it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.91it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.72it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.82it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.87it/s]
          RMSE             : Train 135.8999, Val 136.6323, Test 136.8748
Best:
          R2_Score         : Train 0.2276, Val 0.2287, Test 0.2257
          RMSE             : Train 135.8879, Val 136.1802, Test 136.9394
Epoch 39: Loss:            : Train 0.0150, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2268, Val 0.2224, Test 0.2300
          RMSE             : Train 135.9560, Val 136.7410, Test 136.5631
Best:
          R2_Score         : Train 0.2276, Val 0.2287, Test 0.2257
          RMSE             : Train 135.8879, Val 136.1802, Test 136.9394
Epoch 40: Loss:            : Train 0.0150, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2309, Val 0.2284, Test 0.2356
          RMSE             : Train 135.5957, Val 136.2110, Test 136.0610
Best:
          R2_Score         : Train 0.2276, Val 0.2287, Test 0.2257
          RMSE             : Train 135.8879, Val 136.1802, Test 136.9394
Epoch 41: Loss:            : Train 0.0151, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2240, Val 0.2203, Test 0.2218
          RMSE             : Train 136.2004, Val 136.9216, Test 137.2912
Best:
          R2_Score         : Train 0.2276, Val 0.2287, Test 0.2257
          RMSE             : Train 135.8879, Val 136.1802, Test 136.9394
Epoch 42: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2323, Val 0.2340, Test 0.2371
          RMSE             : Train 135.4767, Val 135.7090, Test 135.9307
Best:
          R2_Score         : Train 0.2323, Val 0.2340, Test 0.2371
          RMSE             : Train 135.4767, Val 135.7090, Test 135.9307
Epoch 43: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2358, Val 0.2329, Test 0.2351
          RMSE             : Train 135.1673, Val 135.8122, Test 136.1113
Best:
          R2_Score         : Train 0.2323, Val 0.2340, Test 0.2371
          RMSE             : Train 135.4767, Val 135.7090, Test 135.9307
Epoch 44: Loss:            : Train 0.0149, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2357, Val 0.2319, Test 0.2328
          RMSE             : Train 135.1756, Val 135.8967, Test 136.3113
Best:
          R2_Score         : Train 0.2323, Val 0.2340, Test 0.2371
          RMSE             : Train 135.4767, Val 135.7090, Test 135.9307
Epoch 45: Loss:            : Train 0.0150, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2319, Val 0.2319, Test 0.2315
          RMSE             : Train 135.5080, Val 135.8992, Test 136.4276
Best:
          R2_Score         : Train 0.2323, Val 0.2340, Test 0.2371
          RMSE             : Train 135.4767, Val 135.7090, Test 135.9307
Epoch 46: Loss:            : Train 0.0150, Val 0.0162, Test 0.0155
          R2_Score         : Train 0.2317, Val 0.2165, Test 0.2263
          RMSE             : Train 135.5228, Val 137.2506, Test 136.8896
Best:
          R2_Score         : Train 0.2323, Val 0.2340, Test 0.2371
          RMSE             : Train 135.4767, Val 135.7090, Test 135.9307
Epoch 47: Loss:            : Train 0.0149, Val 0.0162, Test 0.0157
          R2_Score         : Train 0.2332, Val 0.2112, Test 0.2133
          RMSE             : Train 135.3896, Val 137.7147, Test 138.0365
Best:
          R2_Score         : Train 0.2323, Val 0.2340, Test 0.2371
          RMSE             : Train 135.4767, Val 135.7090, Test 135.9307
Epoch 48: Loss:            : Train 0.0150, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2286, Val 0.2345, Test 0.2348
          RMSE             : Train 135.8025, Val 135.6697, Test 136.1337
Best:
          R2_Score         : Train 0.2286, Val 0.2345, Test 0.2348
          RMSE             : Train 135.8025, Val 135.6697, Test 136.1337
Epoch 49: Loss:            : Train 0.0150, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 50: Loss:            : Train 0.0149, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2342, Val 0.2230, Test 0.2243
          RMSE             : Train 135.3017, Val 136.6874, Test 137.0633
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 51: Loss:            : Train 0.0150, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2311, Val 0.2317, Test 0.2318
          RMSE             : Train 135.5818, Val 135.9132, Test 136.4055
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 52: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2334, Val 0.2254, Test 0.2316
          RMSE             : Train 135.3798, Val 136.4686, Test 136.4207
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 53: Loss:            : Train 0.0149, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2346, Val 0.2349, Test 0.2384
          RMSE             : Train 135.2717, Val 135.6364, Test 135.8168
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 54: Loss:            : Train 0.0149, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2333, Val 0.2185, Test 0.2236
          RMSE             : Train 135.3811, Val 137.0760, Test 137.1247
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 55: Loss:            : Train 0.0149, Val 0.0161, Test 0.0156
          R2_Score         : Train 0.2342, Val 0.2224, Test 0.2234
          RMSE             : Train 135.3064, Val 136.7351, Test 137.1483
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 56: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2327, Val 0.2318, Test 0.2362
          RMSE             : Train 135.4411, Val 135.9045, Test 136.0095
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 57: Loss:            : Train 0.0150, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2323, Val 0.2287, Test 0.2343
          RMSE             : Train 135.4725, Val 136.1775, Test 136.1761
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 58: Loss:            : Train 0.0149, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2342, Val 0.2343, Test 0.2366
          RMSE             : Train 135.3061, Val 135.6830, Test 135.9780
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 59: Loss:            : Train 0.0149, Val 0.0161, Test 0.0156
          R2_Score         : Train 0.2333, Val 0.2212, Test 0.2241
          RMSE             : Train 135.3818, Val 136.8430, Test 137.0815
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 60: Loss:            : Train 0.0150, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2304, Val 0.2372, Test 0.2351
          RMSE             : Train 135.6386, Val 135.4286, Test 136.1116
Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 61: Loss:            : Train 0.0149, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2330, Val 0.2299, Test 0.2318
          RMSE             : Train 135.4072, Val 136.0778, Test 136.4001

Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:05,  2.72it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.78it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 11.22it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 13.21it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  7.31it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.59it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.48it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.15it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.78it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.92it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.53it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.30it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.10it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.91it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.42it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.44it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  6.86it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 10.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.15it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.24it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 20.25it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.52it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.18it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.20it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.91it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.12it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.03it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.10it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.93it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 11.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.21it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.66it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.14it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.77it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.34it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.92it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 26.09it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.53it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.18it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 12.56it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.76it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.24it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.35it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.42it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.72it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.16it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.28it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.70it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.20it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.68it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.10it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.11it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 43.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 39.14it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:03,  3.69it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.72it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 12.79it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 15.81it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 17.86it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.01it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.51it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.72it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 16.12it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 14.20it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.55it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.17it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 10.68it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.71it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.38it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.43it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.36it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 11.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.13it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.50it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.27it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 19.29it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 13.82it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.62it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.90it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.55it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.35it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.84it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.35it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.69it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.29it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 10.60it/s]Train:  31%|███▏      | 5/16 [00:00<00:01, 10.15it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.34it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.12it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.93it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 10.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 10.78it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.70it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.63it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.37it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.58it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.59it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.18it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:06,  2.47it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.78it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.76it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.43it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 17.43it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.75it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 60.00it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.08it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.57it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 17.63it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.50it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.97it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.34it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.05it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 11.88it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 11.73it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 13.49it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 15.87it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.78it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.26it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 29.93it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.08it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 94.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.34it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.08it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.73it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 47.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  8.73it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 26.71it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.03it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.52it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.93it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 26.98it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.86it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.07it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.56it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.61it/s]Best:
          R2_Score         : Train 0.2307, Val 0.2409, Test 0.2369
          RMSE             : Train 135.6176, Val 135.1043, Test 135.9455
Epoch 62: Loss:            : Train 0.0149, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2375, Val 0.2410, Test 0.2412
          RMSE             : Train 135.0132, Val 135.0912, Test 135.5618
Best:
          R2_Score         : Train 0.2375, Val 0.2410, Test 0.2412
          RMSE             : Train 135.0132, Val 135.0912, Test 135.5618
Epoch 63: Loss:            : Train 0.0149, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2360, Val 0.2411, Test 0.2405
          RMSE             : Train 135.1486, Val 135.0840, Test 135.6245
Best:
          R2_Score         : Train 0.2360, Val 0.2411, Test 0.2405
          RMSE             : Train 135.1486, Val 135.0840, Test 135.6245
Epoch 64: Loss:            : Train 0.0148, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2403, Val 0.2337, Test 0.2294
          RMSE             : Train 134.7623, Val 135.7377, Test 136.6158
Best:
          R2_Score         : Train 0.2360, Val 0.2411, Test 0.2405
          RMSE             : Train 135.1486, Val 135.0840, Test 135.6245
Epoch 65: Loss:            : Train 0.0149, Val 0.0162, Test 0.0155
          R2_Score         : Train 0.2374, Val 0.2187, Test 0.2294
          RMSE             : Train 135.0246, Val 137.0623, Test 136.6117
Best:
          R2_Score         : Train 0.2360, Val 0.2411, Test 0.2405
          RMSE             : Train 135.1486, Val 135.0840, Test 135.6245
Epoch 66: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2337, Val 0.2347, Test 0.2368
          RMSE             : Train 135.3476, Val 135.6483, Test 135.9544
Best:
          R2_Score         : Train 0.2360, Val 0.2411, Test 0.2405
          RMSE             : Train 135.1486, Val 135.0840, Test 135.6245
Epoch 67: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2355, Val 0.2344, Test 0.2342
          RMSE             : Train 135.1882, Val 135.6786, Test 136.1901
Best:
          R2_Score         : Train 0.2360, Val 0.2411, Test 0.2405
          RMSE             : Train 135.1486, Val 135.0840, Test 135.6245
Epoch 68: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2375, Val 0.2367, Test 0.2398
          RMSE             : Train 135.0106, Val 135.4724, Test 135.6931
Best:
          R2_Score         : Train 0.2360, Val 0.2411, Test 0.2405
          RMSE             : Train 135.1486, Val 135.0840, Test 135.6245
Epoch 69: Loss:            : Train 0.0149, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2353, Val 0.2354, Test 0.2369
          RMSE             : Train 135.2073, Val 135.5913, Test 135.9444
Best:
          R2_Score         : Train 0.2360, Val 0.2411, Test 0.2405
          RMSE             : Train 135.1486, Val 135.0840, Test 135.6245
Epoch 70: Loss:            : Train 0.0149, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 71: Loss:            : Train 0.0149, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2340, Val 0.2365, Test 0.2387
          RMSE             : Train 135.3200, Val 135.4881, Test 135.7855
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 72: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2396, Val 0.2380, Test 0.2430
          RMSE             : Train 134.8294, Val 135.3613, Test 135.4082
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 73: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2418, Val 0.2413, Test 0.2419
          RMSE             : Train 134.6282, Val 135.0643, Test 135.5007
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 74: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2401, Val 0.2379, Test 0.2355
          RMSE             : Train 134.7873, Val 135.3699, Test 136.0733
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 75: Loss:            : Train 0.0148, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2412, Val 0.2373, Test 0.2316
          RMSE             : Train 134.6847, Val 135.4238, Test 136.4164
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 76: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2378, Val 0.2370, Test 0.2329
          RMSE             : Train 134.9849, Val 135.4438, Test 136.3022
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 77: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2398, Val 0.2402, Test 0.2445
          RMSE             : Train 134.8111, Val 135.1667, Test 135.2724
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 78: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2387, Val 0.2385, Test 0.2403
          RMSE             : Train 134.9039, Val 135.3109, Test 135.6449
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 79: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2386, Val 0.2332, Test 0.2348
          RMSE             : Train 134.9154, Val 135.7835, Test 136.1389
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 80: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2395, Val 0.2293, Test 0.2296
          RMSE             : Train 134.8401, Val 136.1283, Test 136.5982
Best:
          R2_Score         : Train 0.2342, Val 0.2430, Test 0.2436
          RMSE             : Train 135.3078, Val 134.9113, Test 135.3520
Epoch 81: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2405, Val 0.2442, Test 0.2394
          RMSE             : Train 134.7454, Val 134.8045, Test 135.7248
Best:
          R2_Score         : Train 0.2405, Val 0.2442, Test 0.2394
          RMSE             : Train 134.7454, Val 134.8045, Test 135.7248
Epoch 82: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2403, Val 0.2412, Test 0.2377
          RMSE             : Train 134.7648, Val 135.0692, Test 135.8733
Best:
          R2_Score         : Train 0.2405, Val 0.2442, Test 0.2394
          RMSE             : Train 134.7454, Val 134.8045, Test 135.7248
Epoch 83: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 84: Loss:            : Train 0.0148, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2389, Val 0.2271, Test 0.2358
          RMSE             : Train 134.8872, Val 136.3208, Test 136.0498
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.28it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.62it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 11.89it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.75it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.06it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.84it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.39it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  3.87it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  8.99it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.67it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.94it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.45it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.33it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.65it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.03it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 26.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.10it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.56it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 10.82it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.01it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 15.34it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.16it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 14.28it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 43.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  6.10it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 10.10it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.70it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.30it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.78it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.48it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.77it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.42it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.30it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.18it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 98.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.54it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.99it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.19it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 13.84it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 13.31it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.67it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.13it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.89it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 12.07it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.90it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.95it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.41it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.41it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  6.93it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 77.37it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.83it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 25.67it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.89it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  7.07it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.37it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:04,  3.40it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.37it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.15it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 14.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 43.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.37it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  5.00it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  8.02it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 11.43it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 16.34it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 13.78it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 38.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.84it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.59it/s]Train:  19%|█▉        | 3/16 [00:00<00:02,  5.26it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.19it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 11.68it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.05it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 12.42it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 11.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 60.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.44it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.54it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.60it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.16it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.80it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.21it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.31it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.60it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.84it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.45it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.23it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.42it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.43it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.26it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.26it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.50it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.41it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.06it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.54it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.91it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 28.28it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 18.57it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.74it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 26.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.18it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.53it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 20.34it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.57it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.39it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.24it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.80it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.34it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.67it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.62it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.67it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.96it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.03it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  3.44it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 12.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.51it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.82it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 24.46it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.67it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 14.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 80.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.26it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.41it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 32.23it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 23.80it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.08it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.59it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.66it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.78it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.70it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 24.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.72it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.34it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 26.84it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 23.63it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.64it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 21.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.79it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.69it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.51it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.97it/s]Train:  31%|███▏      | 5/16 [00:00<00:01,  8.72it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.67it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.95it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.23it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.64it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.93it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.29it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 23.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.77it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 60.65it/s]
Epoch 85: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2397, Val 0.2390, Test 0.2396
          RMSE             : Train 134.8199, Val 135.2724, Test 135.7063
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 86: Loss:            : Train 0.0148, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2414, Val 0.2286, Test 0.2276
          RMSE             : Train 134.6664, Val 136.1935, Test 136.7760
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 87: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2402, Val 0.2354, Test 0.2386
          RMSE             : Train 134.7705, Val 135.5882, Test 135.7943
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 88: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2381, Val 0.2368, Test 0.2387
          RMSE             : Train 134.9615, Val 135.4679, Test 135.7862
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 89: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2393, Val 0.2327, Test 0.2359
          RMSE             : Train 134.8504, Val 135.8243, Test 136.0401
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 90: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2402, Val 0.2386, Test 0.2390
          RMSE             : Train 134.7758, Val 135.3045, Test 135.7652
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 91: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2424, Val 0.2383, Test 0.2371
          RMSE             : Train 134.5781, Val 135.3280, Test 135.9340
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 92: Loss:            : Train 0.0148, Val 0.0157, Test 0.0155
          R2_Score         : Train 0.2403, Val 0.2398, Test 0.2278
          RMSE             : Train 134.7651, Val 135.1957, Test 136.7573
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 93: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2393, Val 0.2432, Test 0.2410
          RMSE             : Train 134.8563, Val 134.8978, Test 135.5853
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 94: Loss:            : Train 0.0148, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2396, Val 0.2377, Test 0.2328
          RMSE             : Train 134.8281, Val 135.3854, Test 136.3092
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 95: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2406, Val 0.2446, Test 0.2433
          RMSE             : Train 134.7388, Val 134.7717, Test 135.3770
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 96: Loss:            : Train 0.0147, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2435, Val 0.2303, Test 0.2310
          RMSE             : Train 134.4809, Val 136.0393, Test 136.4690
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 97: Loss:            : Train 0.0149, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2364, Val 0.2322, Test 0.2310
          RMSE             : Train 135.1128, Val 135.8709, Test 136.4751
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 98: Loss:            : Train 0.0148, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2409, Val 0.2371, Test 0.2302
          RMSE             : Train 134.7090, Val 135.4380, Test 136.5402
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 99: Loss:            : Train 0.0149, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2377, Val 0.2456, Test 0.2468
          RMSE             : Train 134.9929, Val 134.6829, Test 135.0621
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 100: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2415, Val 0.2372, Test 0.2377
          RMSE             : Train 134.6607, Val 135.4305, Test 135.8749
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 101: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2398, Val 0.2390, Test 0.2413
          RMSE             : Train 134.8108, Val 135.2700, Test 135.5571
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 102: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2424, Val 0.2352, Test 0.2331
          RMSE             : Train 134.5768, Val 135.6035, Test 136.2872
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 103: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2413, Val 0.2343, Test 0.2344
          RMSE             : Train 134.6757, Val 135.6887, Test 136.1698
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 104: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2390, Val 0.2410, Test 0.2401
          RMSE             : Train 134.8815, Val 135.0906, Test 135.6607
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 105: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2419, Val 0.2414, Test 0.2441
          RMSE             : Train 134.6211, Val 135.0587, Test 135.3024
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 106: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2421, Val 0.2436, Test 0.2447
          RMSE             : Train 134.6026, Val 134.8581, Test 135.2523
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 107: Loss:            : Train 0.0148, Val 0.0158, Test 0.0152
          R2_Score         : Train 0.2418, Val 0.2374, Test 0.2426
          RMSE             : Train 134.6347, Val 135.4113, Test 135.4369
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 108: Loss:            : Train 0.0147, Val 0.0157, Test 0.0153
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.84it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 30.24it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.70it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.12it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.59it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.01it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.60it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 32.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 39.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  3.04it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.56it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.07it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.51it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.82it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.52it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.14it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 25.90it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.04it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 15.80it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.64it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.57it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.51it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.59it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.06it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.78it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.67it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.10it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.18it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  8.14it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.14it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.06it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.39it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 17.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.95it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.27it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 32.45it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.03it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.61it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  7.75it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.68it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.77it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.28it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.06it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.14it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.55it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.87it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.32it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.80it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.20it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.80it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.19it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 10.63it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.49it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.84it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.61it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.05it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.22it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.82it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.24it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.47it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 24.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 72.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.34it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 34.59it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 34.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.98it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.96it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 62.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.88it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.63it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.67it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 60.36it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.00it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.83it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.38it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.48it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.15it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:05,  2.78it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.37it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 11.36it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 17.16it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.61it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.67it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  9.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.99it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 29.62it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.36it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 100.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.64it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.95it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.95it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 31.61it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.01it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 89.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.09it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.95it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.10it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00,  9.76it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 15.13it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.64it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.38it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.55it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 29.03it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.60it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  8.61it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 20.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 29.20it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.88it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.60it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.58it/s]
          R2_Score         : Train 0.2432, Val 0.2401, Test 0.2367
          RMSE             : Train 134.5081, Val 135.1695, Test 135.9646
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 109: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2432, Val 0.2362, Test 0.2387
          RMSE             : Train 134.5070, Val 135.5168, Test 135.7877
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 110: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2410, Val 0.2327, Test 0.2331
          RMSE             : Train 134.7019, Val 135.8289, Test 136.2849
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 111: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2409, Val 0.2395, Test 0.2398
          RMSE             : Train 134.7159, Val 135.2290, Test 135.6881
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 112: Loss:            : Train 0.0147, Val 0.0154, Test 0.0152
          R2_Score         : Train 0.2444, Val 0.2437, Test 0.2380
          RMSE             : Train 134.4044, Val 134.8514, Test 135.8490
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 113: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2414, Val 0.2468, Test 0.2455
          RMSE             : Train 134.6701, Val 134.5735, Test 135.1803
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 114: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2422, Val 0.2451, Test 0.2415
          RMSE             : Train 134.5941, Val 134.7234, Test 135.5397
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 115: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2408, Val 0.2389, Test 0.2427
          RMSE             : Train 134.7202, Val 135.2822, Test 135.4273
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 116: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2411, Val 0.2465, Test 0.2471
          RMSE             : Train 134.6989, Val 134.6004, Test 135.0338
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 117: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2427, Val 0.2427, Test 0.2435
          RMSE             : Train 134.5512, Val 134.9364, Test 135.3563
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 118: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2441, Val 0.2401, Test 0.2417
          RMSE             : Train 134.4289, Val 135.1743, Test 135.5203
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 119: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2438, Val 0.2387, Test 0.2430
          RMSE             : Train 134.4567, Val 135.2982, Test 135.4068
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 120: Loss:            : Train 0.0148, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2426, Val 0.2309, Test 0.2390
          RMSE             : Train 134.5657, Val 135.9844, Test 135.7607
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 121: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2437, Val 0.2384, Test 0.2392
          RMSE             : Train 134.4649, Val 135.3245, Test 135.7432
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 122: Loss:            : Train 0.0147, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2429, Val 0.2325, Test 0.2333
          RMSE             : Train 134.5377, Val 135.8458, Test 136.2709
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 123: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2444, Val 0.2450, Test 0.2428
          RMSE             : Train 134.3977, Val 134.7351, Test 135.4252
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 124: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2419, Val 0.2418, Test 0.2459
          RMSE             : Train 134.6219, Val 135.0192, Test 135.1417
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 125: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2456, Val 0.2388, Test 0.2414
          RMSE             : Train 134.2963, Val 135.2838, Test 135.5497
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 126: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2434, Val 0.2452, Test 0.2457
          RMSE             : Train 134.4912, Val 134.7193, Test 135.1612
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 127: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2432, Val 0.2440, Test 0.2430
          RMSE             : Train 134.5103, Val 134.8243, Test 135.4012
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 128: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2446, Val 0.2467, Test 0.2454
          RMSE             : Train 134.3878, Val 134.5821, Test 135.1892
Best:
          R2_Score         : Train 0.2418, Val 0.2471, Test 0.2443
          RMSE             : Train 134.6325, Val 134.5474, Test 135.2892
Epoch 129: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 130: Loss:            : Train 0.0147, Val 0.0158, Test 0.0152
          R2_Score         : Train 0.2437, Val 0.2337, Test 0.2401
          RMSE             : Train 134.4657, Val 135.7431, Test 135.6675
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 131: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2441, Val 0.2406, Test 0.2412
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.83it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.43it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.83it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 26.18it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.46it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.43it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.84it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.56it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.18it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.89it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.81it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 30.75it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.51it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 27.82it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.01it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 14.36it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.91it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.93it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.51it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 47.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.84it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.25it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.63it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.21it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.05it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 16.27it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.70it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.32it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.60it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.26it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.32it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.17it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.90it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 27.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.78it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  5.00it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.25it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.93it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.28it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.15it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 22.66it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.97it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 43.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.22it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.37it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.58it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 20.90it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.22it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.18it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 14.30it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.33it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.46it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.12it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.05it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.46it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.80it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.62it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 59.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.51it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.26it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.72it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.04it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.58it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.58it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 45.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.29it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.41it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.05it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.91it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00,  9.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.09it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.68it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.76it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 10.56it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 15.25it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.34it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  9.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.76it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 11.61it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.19it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.28it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  5.60it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  8.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 49.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 49.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.71it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.75it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.76it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.96it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.23it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.38it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.85it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  5.25it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 17.89it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.96it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.01it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  3.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.13it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.88it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.01it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.35it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.61it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.33it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  7.99it/s]Train:  38%|███▊      | 6/16 [00:00<00:01,  9.60it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 12.97it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.95it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 20.22it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 72.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.86it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.75it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.10it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.42it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.77it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 11.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.38it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.95it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 16.89it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.03it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 14.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.22it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.25it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.74it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.78it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.74it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.97it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 50.66it/s]
          RMSE             : Train 134.4296, Val 135.1292, Test 135.5688
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 132: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2436, Val 0.2462, Test 0.2486
          RMSE             : Train 134.4699, Val 134.6297, Test 134.9058
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 133: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2431, Val 0.2464, Test 0.2461
          RMSE             : Train 134.5147, Val 134.6124, Test 135.1274
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 134: Loss:            : Train 0.0147, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2458, Val 0.2373, Test 0.2385
          RMSE             : Train 134.2807, Val 135.4182, Test 135.8014
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 135: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2445, Val 0.2432, Test 0.2442
          RMSE             : Train 134.3934, Val 134.8992, Test 135.3003
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 136: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2451, Val 0.2459, Test 0.2470
          RMSE             : Train 134.3401, Val 134.6573, Test 135.0415
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 137: Loss:            : Train 0.0147, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2451, Val 0.2240, Test 0.2366
          RMSE             : Train 134.3393, Val 136.5929, Test 135.9717
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 138: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2448, Val 0.2477, Test 0.2482
          RMSE             : Train 134.3649, Val 134.4918, Test 134.9352
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 139: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2466, Val 0.2481, Test 0.2488
          RMSE             : Train 134.2015, Val 134.4568, Test 134.8809
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 140: Loss:            : Train 0.0146, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2492, Val 0.2439, Test 0.2481
          RMSE             : Train 133.9778, Val 134.8287, Test 134.9509
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 141: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2459, Val 0.2397, Test 0.2444
          RMSE             : Train 134.2699, Val 135.2087, Test 135.2749
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 142: Loss:            : Train 0.0147, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2450, Val 0.2355, Test 0.2390
          RMSE             : Train 134.3498, Val 135.5805, Test 135.7641
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 143: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2434, Val 0.2401, Test 0.2412
          RMSE             : Train 134.4944, Val 135.1736, Test 135.5618
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 144: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2443, Val 0.2430, Test 0.2476
          RMSE             : Train 134.4098, Val 134.9154, Test 134.9924
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 145: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2460, Val 0.2450, Test 0.2449
          RMSE             : Train 134.2588, Val 134.7321, Test 135.2343
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 146: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2462, Val 0.2441, Test 0.2442
          RMSE             : Train 134.2420, Val 134.8145, Test 135.2933
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 147: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2444, Val 0.2403, Test 0.2432
          RMSE             : Train 134.4050, Val 135.1523, Test 135.3839
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 148: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2466, Val 0.2407, Test 0.2445
          RMSE             : Train 134.2096, Val 135.1222, Test 135.2702
Best:
          R2_Score         : Train 0.2463, Val 0.2482, Test 0.2470
          RMSE             : Train 134.2356, Val 134.4485, Test 135.0500
Epoch 149: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 150: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2463, Val 0.2477, Test 0.2496
          RMSE             : Train 134.2342, Val 134.4916, Test 134.8162
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 151: Loss:            : Train 0.0147, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2449, Val 0.2357, Test 0.2370
          RMSE             : Train 134.3560, Val 135.5604, Test 135.9403
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 152: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2442, Val 0.2424, Test 0.2470
          RMSE             : Train 134.4213, Val 134.9690, Test 135.0466
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 153: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2468, Val 0.2454, Test 0.2459
          RMSE             : Train 134.1836, Val 134.6995, Test 135.1429
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 154: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2449, Val 0.2429, Test 0.2426
          RMSE             : Train 134.3551, Val 134.9239, Test 135.4427
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.66it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  9.39it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.51it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.94it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.64it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 57.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.70it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 26.80it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 25.04it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.24it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.19it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.66it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.61it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 18.98it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 15.38it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.21it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.11it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.89it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.13it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.98it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.24it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.55it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.11it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.22it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.22it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.08it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.16it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 13.23it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.41it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 13.56it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.69it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.34it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.31it/s]Train:  31%|███▏      | 5/16 [00:00<00:01,  8.36it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 13.92it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 13.08it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 19.23it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.41it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.38it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.38it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.78it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.63it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.33it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.85it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.08it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.02it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.94it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.48it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:04,  3.75it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 15.54it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 13.59it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.51it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.33it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.85it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.21it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.69it/s]Train:  12%|█▎        | 2/16 [00:00<00:03,  4.51it/s]Train:  31%|███▏      | 5/16 [00:00<00:01,  9.88it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 13.06it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.48it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.72it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.78it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.88it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.76it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.81it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.08it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.68it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.00it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.84it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.61it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.63it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.48it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.18it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 13.77it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.35it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 25.84it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.59it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.87it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 40.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.50it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 10.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.88it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.44it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.29it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.37it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 26.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 39.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.89it/s]Test:  80%|████████  | 4/5 [00:00<00:00,  9.94it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.27it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 15.44it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.82it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 26.14it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.06it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 27.67it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.06it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.40it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 60.26it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.50it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 22.38it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.11it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.05it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.67it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 28.80it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.95it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 19.42it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.53it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.75it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.82it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.30it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.28it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.24it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.23it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.17it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 29.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.17it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.38it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.66it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.09it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.24it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 17.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.56it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.90it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.58it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.59it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.09it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 17.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 37.36it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.78it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.77it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.55it/s]
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 155: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2452, Val 0.2438, Test 0.2448
          RMSE             : Train 134.3283, Val 134.8407, Test 135.2457
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 156: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2450, Val 0.2439, Test 0.2425
          RMSE             : Train 134.3452, Val 134.8328, Test 135.4528
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 157: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2444, Val 0.2462, Test 0.2500
          RMSE             : Train 134.4019, Val 134.6323, Test 134.7806
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 158: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2454, Val 0.2437, Test 0.2448
          RMSE             : Train 134.3155, Val 134.8475, Test 135.2456
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 159: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2452, Val 0.2469, Test 0.2480
          RMSE             : Train 134.3314, Val 134.5642, Test 134.9575
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 160: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2443, Val 0.2401, Test 0.2437
          RMSE             : Train 134.4077, Val 135.1737, Test 135.3377
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 161: Loss:            : Train 0.0147, Val 0.0156, Test 0.0150
          R2_Score         : Train 0.2450, Val 0.2460, Test 0.2499
          RMSE             : Train 134.3471, Val 134.6443, Test 134.7844
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 162: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2452, Val 0.2433, Test 0.2441
          RMSE             : Train 134.3344, Val 134.8840, Test 135.3071
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 163: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2439, Val 0.2454, Test 0.2423
          RMSE             : Train 134.4467, Val 134.6956, Test 135.4642
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 164: Loss:            : Train 0.0147, Val 0.0160, Test 0.0154
          R2_Score         : Train 0.2432, Val 0.2284, Test 0.2333
          RMSE             : Train 134.5048, Val 136.2079, Test 136.2696
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 165: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2426, Val 0.2418, Test 0.2477
          RMSE             : Train 134.5618, Val 135.0213, Test 134.9822
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 166: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2452, Val 0.2369, Test 0.2421
          RMSE             : Train 134.3264, Val 135.4597, Test 135.4870
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 167: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2453, Val 0.2490, Test 0.2469
          RMSE             : Train 134.3205, Val 134.3786, Test 135.0577
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 168: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2464, Val 0.2384, Test 0.2447
          RMSE             : Train 134.2258, Val 135.3202, Test 135.2474
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 169: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2474, Val 0.2432, Test 0.2430
          RMSE             : Train 134.1302, Val 134.8980, Test 135.4010
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 170: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2473, Val 0.2429, Test 0.2453
          RMSE             : Train 134.1397, Val 134.9231, Test 135.2025
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 171: Loss:            : Train 0.0146, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2476, Val 0.2490, Test 0.2476
          RMSE             : Train 134.1191, Val 134.3760, Test 134.9944
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 172: Loss:            : Train 0.0146, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2479, Val 0.2399, Test 0.2400
          RMSE             : Train 134.0901, Val 135.1877, Test 135.6708
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 173: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2452, Val 0.2462, Test 0.2491
          RMSE             : Train 134.3289, Val 134.6318, Test 134.8604
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 174: Loss:            : Train 0.0147, Val 0.0153, Test 0.0151
          R2_Score         : Train 0.2464, Val 0.2468, Test 0.2427
          RMSE             : Train 134.2218, Val 134.5747, Test 135.4282
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 175: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2425, Val 0.2402, Test 0.2406
          RMSE             : Train 134.5662, Val 135.1604, Test 135.6150
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 176: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2455, Val 0.2353, Test 0.2443
          RMSE             : Train 134.3006, Val 135.5951, Test 135.2855
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 177: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2471, Val 0.2468, Test 0.2457
          RMSE             : Train 134.1639, Val 134.5737, Test 135.1595
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.65it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.23it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.17it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.05it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.28it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 60.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.14it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 23.18it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.73it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.29it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.24it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.80it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.32it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.86it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.38it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 61.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.81it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.04it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.12it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 27.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.29it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.39it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.23it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 28.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.62it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.93it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.53it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.43it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.90it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 29.54it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 29.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.66it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.80it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.58it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 25.35it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.36it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.53it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 22.12it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.59it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.60it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.93it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 29.88it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:06,  2.39it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.16it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.63it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 13.81it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.34it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.48it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.95it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.75it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.35it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 37.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  8.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.03it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.74it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.82it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.31it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.18it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.81it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.21it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.53it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 56.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.26it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 19.07it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.05it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 26.82it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 60.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 13.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.22it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.16it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.50it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.34it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.86it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.41it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.15it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 17.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.48it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.22it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.44it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.80it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.88it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.04it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.22it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.25it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.01it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 35.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 41.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.23it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.74it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.76it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.08it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 32.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.72it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.73it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 33.61it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 34.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.51it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.54it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 28.38it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.11it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.02it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.02it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.50it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 28.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 17.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 22.39it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 31.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.20it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.15it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.10it/s]
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 178: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2476, Val 0.2461, Test 0.2450
          RMSE             : Train 134.1210, Val 134.6375, Test 135.2213
Best:
          R2_Score         : Train 0.2459, Val 0.2501, Test 0.2496
          RMSE             : Train 134.2699, Val 134.2751, Test 134.8088
Epoch 179: Loss:            : Train 0.0147, Val 0.0153, Test 0.0150
          R2_Score         : Train 0.2457, Val 0.2503, Test 0.2460
          RMSE             : Train 134.2843, Val 134.2637, Test 135.1396
Best:
          R2_Score         : Train 0.2457, Val 0.2503, Test 0.2460
          RMSE             : Train 134.2843, Val 134.2637, Test 135.1396
Epoch 180: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2457, Val 0.2448, Test 0.2474
          RMSE             : Train 134.2859, Val 134.7566, Test 135.0062
Best:
          R2_Score         : Train 0.2457, Val 0.2503, Test 0.2460
          RMSE             : Train 134.2843, Val 134.2637, Test 135.1396
Epoch 181: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 182: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2458, Val 0.2438, Test 0.2455
          RMSE             : Train 134.2766, Val 134.8430, Test 135.1800
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 183: Loss:            : Train 0.0146, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2473, Val 0.2487, Test 0.2473
          RMSE             : Train 134.1476, Val 134.4045, Test 135.0206
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 184: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2478, Val 0.2500, Test 0.2521
          RMSE             : Train 134.0995, Val 134.2871, Test 134.5883
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 185: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2469, Val 0.2402, Test 0.2435
          RMSE             : Train 134.1818, Val 135.1619, Test 135.3588
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 186: Loss:            : Train 0.0146, Val 0.0153, Test 0.0150
          R2_Score         : Train 0.2482, Val 0.2504, Test 0.2505
          RMSE             : Train 134.0632, Val 134.2478, Test 134.7326
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 187: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2479, Val 0.2404, Test 0.2451
          RMSE             : Train 134.0865, Val 135.1481, Test 135.2128
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 188: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2474, Val 0.2424, Test 0.2431
          RMSE             : Train 134.1322, Val 134.9697, Test 135.3974
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 189: Loss:            : Train 0.0146, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2481, Val 0.2398, Test 0.2404
          RMSE             : Train 134.0684, Val 135.1970, Test 135.6344
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 190: Loss:            : Train 0.0147, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2460, Val 0.2374, Test 0.2388
          RMSE             : Train 134.2596, Val 135.4100, Test 135.7818
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 191: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2463, Val 0.2472, Test 0.2480
          RMSE             : Train 134.2353, Val 134.5357, Test 134.9590
Best:
          R2_Score         : Train 0.2457, Val 0.2509, Test 0.2481
          RMSE             : Train 134.2820, Val 134.2052, Test 134.9458
Epoch 192: Loss:            : Train 0.0146, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325
Best:
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325
Epoch 193: Loss:            : Train 0.0146, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2478, Val 0.2398, Test 0.2439
          RMSE             : Train 134.0995, Val 135.1941, Test 135.3244
Best:
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325
Epoch 194: Loss:            : Train 0.0146, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2477, Val 0.2426, Test 0.2432
          RMSE             : Train 134.1095, Val 134.9524, Test 135.3904
Best:
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325
Epoch 195: Loss:            : Train 0.0147, Val 0.0156, Test 0.0150
          R2_Score         : Train 0.2460, Val 0.2447, Test 0.2486
          RMSE             : Train 134.2571, Val 134.7588, Test 134.8996
Best:
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325
Epoch 196: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2472, Val 0.2447, Test 0.2464
          RMSE             : Train 134.1566, Val 134.7648, Test 135.1034
Best:
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325
Epoch 197: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2464, Val 0.2509, Test 0.2472
          RMSE             : Train 134.2239, Val 134.2093, Test 135.0265
Best:
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325
Epoch 198: Loss:            : Train 0.0147, Val 0.0153, Test 0.0150
          R2_Score         : Train 0.2471, Val 0.2490, Test 0.2491
          RMSE             : Train 134.1653, Val 134.3746, Test 134.8535
Best:
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325
Epoch 199: Loss:            : Train 0.0146, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2487, Val 0.2457, Test 0.2489
          RMSE             : Train 134.0216, Val 134.6763, Test 134.8734
Best:
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325
Epoch 200: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2467, Val 0.2486, Test 0.2477
          RMSE             : Train 134.1993, Val 134.4132, Test 134.9789
Best:
          R2_Score         : Train 0.2482, Val 0.2512, Test 0.2494
          RMSE             : Train 134.0658, Val 134.1835, Test 134.8325

