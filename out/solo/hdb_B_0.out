  0%|          | 0/64445 [00:00<?, ?it/s]  6%|▌         | 3865/64445 [00:00<00:01, 38635.30it/s] 18%|█▊        | 11476/64445 [00:00<00:00, 60674.72it/s] 29%|██▉       | 18560/64445 [00:00<00:00, 65310.58it/s] 42%|████▏     | 26792/64445 [00:00<00:00, 72023.32it/s] 54%|█████▍    | 35103/64445 [00:00<00:00, 76018.40it/s] 67%|██████▋   | 43407/64445 [00:00<00:00, 78403.12it/s] 80%|████████  | 51689/64445 [00:00<00:00, 79843.53it/s] 93%|█████████▎| 60011/64445 [00:00<00:00, 80917.40it/s]100%|██████████| 64445/64445 [00:00<00:00, 75450.54it/s]
  0%|          | 0/9207 [00:00<?, ?it/s] 89%|████████▉ | 8188/9207 [00:00<00:00, 81872.27it/s]100%|██████████| 9207/9207 [00:00<00:00, 81743.37it/s]
  0%|          | 0/18413 [00:00<?, ?it/s] 44%|████▍     | 8176/18413 [00:00<00:00, 81757.54it/s] 89%|████████▉ | 16446/18413 [00:00<00:00, 82307.47it/s]100%|██████████| 18413/18413 [00:00<00:00, 82126.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.45it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.20it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 31.39it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.82it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.59it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.31it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 25.69it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.28it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.78it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 41.56it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 41.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.98it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.11it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.66it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 51.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.27it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.34it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.79it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 29.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.36it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 33.83it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 33.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.45it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.55it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 25.61it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.84it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.28it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 34.52it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.35it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.82it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 42.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 34.98it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 36.67it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 41.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 39.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 30.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 71.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.90it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.66it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 28.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.06it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.03it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.92it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 29.20it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.93it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 30.62it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.88it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.87it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.23it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.11it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.45it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.35it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.91it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 36.18it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 34.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 62.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.25it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 20.12it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 28.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 88.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.46it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.70it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.70it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.26it/s]Loading house from data/hdb/hdb_clean.csv
Loading airbnb from data/hdb/school_clean.csv
Current hdb columns Index(['floor_area_sqm', 'lease_commence_year_before_2020', 'tn_BEDOK',
       'tn_BISHAN', 'tn_BUKIT BATOK', 'tn_BUKIT MERAH', 'tn_BUKIT PANJANG',
       'tn_BUKIT TIMAH', 'tn_CENTRAL AREA', 'tn_CHOA CHU KANG', 'tn_CLEMENTI',
       'tn_GEYLANG', 'tn_HOUGANG', 'tn_JURONG EAST', 'tn_JURONG WEST',
       'tn_KALLANG/WHAMPOA', 'tn_MARINE PARADE', 'tn_PASIR RIS', 'tn_PUNGGOL',
       'tn_QUEENSTOWN', 'tn_SEMBAWANG', 'tn_SENGKANG', 'tn_SERANGOON',
       'tn_TAMPINES', 'tn_TOA PAYOH', 'tn_WOODLANDS', 'tn_YISHUN', 'ft_2 ROOM',
       'ft_3 ROOM', 'ft_4 ROOM', 'ft_5 ROOM', 'ft_EXECUTIVE',
       'ft_MULTI-GENERATION', 'sr_04 TO 06', 'sr_07 TO 09', 'sr_10 TO 12',
       'sr_13 TO 15', 'sr_16 TO 18', 'sr_19 TO 21', 'sr_22 TO 24',
       'sr_25 TO 27', 'sr_28 TO 30', 'sr_31 TO 33', 'sr_34 TO 36',
       'sr_37 TO 39', 'sr_40 TO 42', 'sr_43 TO 45', 'sr_46 TO 48',
       'sr_49 TO 51', 'fm_Adjoined flat', 'fm_Apartment', 'fm_DBSS',
       'fm_Improved', 'fm_Improved-Maisonette', 'fm_Maisonette', 'fm_Model A',
       'fm_Model A-Maisonette', 'fm_Model A2', 'fm_Multi Generation',
       'fm_New Generation', 'fm_Premium Apartment',
       'fm_Premium Apartment Loft', 'fm_Premium Maisonette', 'fm_Simplified',
       'fm_Standard', 'fm_Terrace', 'fm_Type S1', 'fm_Type S2', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'n_places_0', 'vacancy_rate_0', 'n_places_1',
       'vacancy_rate_1', 'n_places_2', 'vacancy_rate_2', 'n_places_3',
       'vacancy_rate_3'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 8 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [8, 400]  [4096, 400]    3600       3200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           84001
Trainable params       84001
Non-trainable params       0
Mult-Adds              83400
=================================================================
n_classes=2
task=regression
model_name=hdb_B_2022-05-21-21-04-14
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:0
test_batch_size=4096
train_batch_size=4096
learning_rate=0.01
weight_decay=1e-05
num_epochs=200
model_save_path=ckp/hdb_B_2022-05-21-21-04-14.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f891c01d4c0>, <metric.rmse.RMSE object at 0x7f891c01d520>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=8, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f891c01d430>
Epoch 1: Loss:            : Train 0.0359, Val 0.0287, Test 0.0282
          R2_Score         : Train -0.8505, Val -0.3726, Test -0.3913
          RMSE             : Train 210.3280, Val 181.6676, Test 183.5656
Best:
          R2_Score         : Train -0.8505, Val -0.3726, Test -0.3913
          RMSE             : Train 210.3280, Val 181.6676, Test 183.5656
Epoch 2: Loss:            : Train 0.0217, Val 0.0208, Test 0.0201
          R2_Score         : Train -0.1178, Val -0.0187, Test -0.0067
          RMSE             : Train 163.4709, Val 156.5049, Test 156.1468
Best:
          R2_Score         : Train -0.1178, Val -0.0187, Test -0.0067
          RMSE             : Train 163.4709, Val 156.5049, Test 156.1468
Epoch 3: Loss:            : Train 0.0194, Val 0.0201, Test 0.0195
          R2_Score         : Train 0.0044, Val 0.0156, Test 0.0247
          RMSE             : Train 154.2791, Val 153.8476, Test 153.6960
Best:
          R2_Score         : Train 0.0044, Val 0.0156, Test 0.0247
          RMSE             : Train 154.2791, Val 153.8476, Test 153.6960
Epoch 4: Loss:            : Train 0.0186, Val 0.0196, Test 0.0189
          R2_Score         : Train 0.0465, Val 0.0317, Test 0.0501
          RMSE             : Train 150.9798, Val 152.5867, Test 151.6765
Best:
          R2_Score         : Train 0.0465, Val 0.0317, Test 0.0501
          RMSE             : Train 150.9798, Val 152.5867, Test 151.6765
Epoch 5: Loss:            : Train 0.0179, Val 0.0184, Test 0.0180
          R2_Score         : Train 0.0787, Val 0.0855, Test 0.0923
          RMSE             : Train 148.4072, Val 148.2834, Test 148.2738
Best:
          R2_Score         : Train 0.0787, Val 0.0855, Test 0.0923
          RMSE             : Train 148.4072, Val 148.2834, Test 148.2738
Epoch 6: Loss:            : Train 0.0175, Val 0.0187, Test 0.0184
          R2_Score         : Train 0.1024, Val 0.0813, Test 0.0823
          RMSE             : Train 146.4904, Val 148.6228, Test 149.0815
Best:
          R2_Score         : Train 0.0787, Val 0.0855, Test 0.0923
          RMSE             : Train 148.4072, Val 148.2834, Test 148.2738
Epoch 7: Loss:            : Train 0.0172, Val 0.0179, Test 0.0175
          R2_Score         : Train 0.1175, Val 0.1134, Test 0.1237
          RMSE             : Train 145.2507, Val 146.0067, Test 145.6800
Best:
          R2_Score         : Train 0.1175, Val 0.1134, Test 0.1237
          RMSE             : Train 145.2507, Val 146.0067, Test 145.6800
Epoch 8: Loss:            : Train 0.0170, Val 0.0175, Test 0.0173
          R2_Score         : Train 0.1255, Val 0.1214, Test 0.1289
          RMSE             : Train 144.5940, Val 145.3454, Test 145.2509
Best:
          R2_Score         : Train 0.1255, Val 0.1214, Test 0.1289
          RMSE             : Train 144.5940, Val 145.3454, Test 145.2509
Epoch 9: Loss:            : Train 0.0169, Val 0.0174, Test 0.0172
          R2_Score         : Train 0.1321, Val 0.1333, Test 0.1339
          RMSE             : Train 144.0434, Val 144.3588, Test 144.8289
Best:
          R2_Score         : Train 0.1321, Val 0.1333, Test 0.1339
          RMSE             : Train 144.0434, Val 144.3588, Test 144.8289
Epoch 10: Loss:            : Train 0.0167, Val 0.0176, Test 0.0173
          R2_Score         : Train 0.1453, Val 0.1348, Test 0.1368
          RMSE             : Train 142.9442, Val 144.2332, Test 144.5889
Best:
          R2_Score         : Train 0.1453, Val 0.1348, Test 0.1368
          RMSE             : Train 142.9442, Val 144.2332, Test 144.5889
Epoch 11: Loss:            : Train 0.0166, Val 0.0174, Test 0.0170
          R2_Score         : Train 0.1464, Val 0.1438, Test 0.1528
          RMSE             : Train 142.8528, Val 143.4806, Test 143.2457
Best:
          R2_Score         : Train 0.1464, Val 0.1438, Test 0.1528
          RMSE             : Train 142.8528, Val 143.4806, Test 143.2457
Epoch 12: Loss:            : Train 0.0163, Val 0.0171, Test 0.0168
          R2_Score         : Train 0.1610, Val 0.1500, Test 0.1584
          RMSE             : Train 141.6223, Val 142.9634, Test 142.7717
Best:
          R2_Score         : Train 0.1610, Val 0.1500, Test 0.1584
          RMSE             : Train 141.6223, Val 142.9634, Test 142.7717
Epoch 13: Loss:            : Train 0.0162, Val 0.0176, Test 0.0170
          R2_Score         : Train 0.1683, Val 0.1475, Test 0.1527
          RMSE             : Train 141.0052, Val 143.1725, Test 143.2496
Best:
          R2_Score         : Train 0.1610, Val 0.1500, Test 0.1584
          RMSE             : Train 141.6223, Val 142.9634, Test 142.7717
Epoch 14: Loss:            : Train 0.0162, Val 0.0171, Test 0.0168
          R2_Score         : Train 0.1693, Val 0.1536, Test 0.1609
          RMSE             : Train 140.9232, Val 142.6568, Test 142.5598
Best:
          R2_Score         : Train 0.1693, Val 0.1536, Test 0.1609
          RMSE             : Train 140.9232, Val 142.6568, Test 142.5598
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.78it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 31.22it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 31.89it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.32it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.16it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.08it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 42.29it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 37.16it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 35.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 37.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.28it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 74.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.18it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 31.86it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.86it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 27.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.28it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.24it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 28.17it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.83it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 29.05it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.82it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.52it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 28.39it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.74it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 32.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.11it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 32.36it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 31.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.67it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.46it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.60it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.27it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.04it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.41it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.34it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.39it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.83it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.81it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.95it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.20it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.43it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.95it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 32.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  8.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.11it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.69it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.00it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 30.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.80it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.73it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.52it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.25it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 62.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.94it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.96it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.08it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 29.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.21it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.84it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 34.65it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 29.94it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.33it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 40.54it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 35.49it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 34.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 37.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.41it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.57it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.79it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 29.07it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.93it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.04it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 53.61it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.54it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.42it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.88it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.16it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 32.59it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.52it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.08it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 36.32it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 35.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.41it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.53it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 25.18it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 25.28it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.78it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.73it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 25.30it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 36.71it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 35.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 29.18it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.01it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 35.32it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 30.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.41it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.15it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.44it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.01it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.42it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.30it/s]
Epoch 15: Loss:            : Train 0.0160, Val 0.0167, Test 0.0163
          R2_Score         : Train 0.1809, Val 0.1800, Test 0.1844
          RMSE             : Train 139.9374, Val 140.4132, Test 140.5479
Best:
          R2_Score         : Train 0.1809, Val 0.1800, Test 0.1844
          RMSE             : Train 139.9374, Val 140.4132, Test 140.5479
Epoch 16: Loss:            : Train 0.0159, Val 0.0165, Test 0.0163
          R2_Score         : Train 0.1861, Val 0.1809, Test 0.1837
          RMSE             : Train 139.4911, Val 140.3386, Test 140.6082
Best:
          R2_Score         : Train 0.1861, Val 0.1809, Test 0.1837
          RMSE             : Train 139.4911, Val 140.3386, Test 140.6082
Epoch 17: Loss:            : Train 0.0159, Val 0.0165, Test 0.0162
          R2_Score         : Train 0.1837, Val 0.1804, Test 0.1859
          RMSE             : Train 139.6975, Val 140.3829, Test 140.4202
Best:
          R2_Score         : Train 0.1861, Val 0.1809, Test 0.1837
          RMSE             : Train 139.4911, Val 140.3386, Test 140.6082
Epoch 18: Loss:            : Train 0.0157, Val 0.0164, Test 0.0161
          R2_Score         : Train 0.1937, Val 0.1874, Test 0.1926
          RMSE             : Train 138.8370, Val 139.7811, Test 139.8419
Best:
          R2_Score         : Train 0.1937, Val 0.1874, Test 0.1926
          RMSE             : Train 138.8370, Val 139.7811, Test 139.8419
Epoch 19: Loss:            : Train 0.0158, Val 0.0167, Test 0.0163
          R2_Score         : Train 0.1889, Val 0.1849, Test 0.1890
          RMSE             : Train 139.2537, Val 139.9972, Test 140.1525
Best:
          R2_Score         : Train 0.1937, Val 0.1874, Test 0.1926
          RMSE             : Train 138.8370, Val 139.7811, Test 139.8419
Epoch 20: Loss:            : Train 0.0156, Val 0.0161, Test 0.0160
          R2_Score         : Train 0.2014, Val 0.1958, Test 0.1987
          RMSE             : Train 138.1715, Val 139.0539, Test 139.3066
Best:
          R2_Score         : Train 0.2014, Val 0.1958, Test 0.1987
          RMSE             : Train 138.1715, Val 139.0539, Test 139.3066
Epoch 21: Loss:            : Train 0.0155, Val 0.0165, Test 0.0161
          R2_Score         : Train 0.2025, Val 0.1912, Test 0.1972
          RMSE             : Train 138.0765, Val 139.4495, Test 139.4408
Best:
          R2_Score         : Train 0.2014, Val 0.1958, Test 0.1987
          RMSE             : Train 138.1715, Val 139.0539, Test 139.3066
Epoch 22: Loss:            : Train 0.0155, Val 0.0161, Test 0.0158
          R2_Score         : Train 0.2039, Val 0.2064, Test 0.2096
          RMSE             : Train 137.9577, Val 138.1404, Test 138.3612
Best:
          R2_Score         : Train 0.2039, Val 0.2064, Test 0.2096
          RMSE             : Train 137.9577, Val 138.1404, Test 138.3612
Epoch 23: Loss:            : Train 0.0155, Val 0.0161, Test 0.0158
          R2_Score         : Train 0.2055, Val 0.2061, Test 0.2092
          RMSE             : Train 137.8149, Val 138.1596, Test 138.3897
Best:
          R2_Score         : Train 0.2039, Val 0.2064, Test 0.2096
          RMSE             : Train 137.9577, Val 138.1404, Test 138.3612
Epoch 24: Loss:            : Train 0.0154, Val 0.0163, Test 0.0159
          R2_Score         : Train 0.2096, Val 0.2062, Test 0.2096
          RMSE             : Train 137.4645, Val 138.1497, Test 138.3627
Best:
          R2_Score         : Train 0.2039, Val 0.2064, Test 0.2096
          RMSE             : Train 137.9577, Val 138.1404, Test 138.3612
Epoch 25: Loss:            : Train 0.0154, Val 0.0160, Test 0.0157
          R2_Score         : Train 0.2081, Val 0.2059, Test 0.2115
          RMSE             : Train 137.5947, Val 138.1788, Test 138.1913
Best:
          R2_Score         : Train 0.2039, Val 0.2064, Test 0.2096
          RMSE             : Train 137.9577, Val 138.1404, Test 138.3612
Epoch 26: Loss:            : Train 0.0153, Val 0.0165, Test 0.0160
          R2_Score         : Train 0.2132, Val 0.1923, Test 0.2015
          RMSE             : Train 137.1472, Val 139.3541, Test 139.0656
Best:
          R2_Score         : Train 0.2039, Val 0.2064, Test 0.2096
          RMSE             : Train 137.9577, Val 138.1404, Test 138.3612
Epoch 27: Loss:            : Train 0.0153, Val 0.0162, Test 0.0158
          R2_Score         : Train 0.2147, Val 0.1983, Test 0.2063
          RMSE             : Train 137.0179, Val 138.8417, Test 138.6435
Best:
          R2_Score         : Train 0.2039, Val 0.2064, Test 0.2096
          RMSE             : Train 137.9577, Val 138.1404, Test 138.3612
Epoch 28: Loss:            : Train 0.0153, Val 0.0159, Test 0.0156
          R2_Score         : Train 0.2154, Val 0.2154, Test 0.2150
          RMSE             : Train 136.9522, Val 137.3478, Test 137.8891
Best:
          R2_Score         : Train 0.2154, Val 0.2154, Test 0.2150
          RMSE             : Train 136.9522, Val 137.3478, Test 137.8891
Epoch 29: Loss:            : Train 0.0151, Val 0.0159, Test 0.0156
          R2_Score         : Train 0.2223, Val 0.2218, Test 0.2223
          RMSE             : Train 136.3550, Val 136.7901, Test 137.2471
Best:
          R2_Score         : Train 0.2223, Val 0.2218, Test 0.2223
          RMSE             : Train 136.3550, Val 136.7901, Test 137.2471
Epoch 30: Loss:            : Train 0.0151, Val 0.0158, Test 0.0157
          R2_Score         : Train 0.2240, Val 0.2106, Test 0.2104
          RMSE             : Train 136.2035, Val 137.7731, Test 138.2902
Best:
          R2_Score         : Train 0.2223, Val 0.2218, Test 0.2223
          RMSE             : Train 136.3550, Val 136.7901, Test 137.2471
Epoch 31: Loss:            : Train 0.0151, Val 0.0159, Test 0.0156
          R2_Score         : Train 0.2226, Val 0.2213, Test 0.2190
          RMSE             : Train 136.3231, Val 136.8290, Test 137.5378
Best:
          R2_Score         : Train 0.2223, Val 0.2218, Test 0.2223
          RMSE             : Train 136.3550, Val 136.7901, Test 137.2471
Epoch 32: Loss:            : Train 0.0151, Val 0.0160, Test 0.0155
          R2_Score         : Train 0.2246, Val 0.2286, Test 0.2274
          RMSE             : Train 136.1521, Val 136.1911, Test 136.7925
Best:
          R2_Score         : Train 0.2246, Val 0.2286, Test 0.2274
          RMSE             : Train 136.1521, Val 136.1911, Test 136.7925
Epoch 33: Loss:            : Train 0.0150, Val 0.0164, Test 0.0158
          R2_Score         : Train 0.2269, Val 0.2106, Test 0.2137
          RMSE             : Train 135.9471, Val 137.7737, Test 137.9959
Best:
          R2_Score         : Train 0.2246, Val 0.2286, Test 0.2274
          RMSE             : Train 136.1521, Val 136.1911, Test 136.7925
Epoch 34: Loss:            : Train 0.0151, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2249, Val 0.2215, Test 0.2231
          RMSE             : Train 136.1286, Val 136.8197, Test 137.1709
Best:
          R2_Score         : Train 0.2246, Val 0.2286, Test 0.2274
          RMSE             : Train 136.1521, Val 136.1911, Test 136.7925
Epoch 35: Loss:            : Train 0.0151, Val 0.0167, Test 0.0161
          R2_Score         : Train 0.2227, Val 0.1990, Test 0.1996
          RMSE             : Train 136.3184, Val 138.7828, Test 139.2322
Best:
          R2_Score         : Train 0.2246, Val 0.2286, Test 0.2274
          RMSE             : Train 136.1521, Val 136.1911, Test 136.7925
Epoch 36: Loss:            : Train 0.0151, Val 0.0163, Test 0.0158
          R2_Score         : Train 0.2256, Val 0.2173, Test 0.2172
          RMSE             : Train 136.0659, Val 137.1882, Test 137.6959
Best:
          R2_Score         : Train 0.2246, Val 0.2286, Test 0.2274
          RMSE             : Train 136.1521, Val 136.1911, Test 136.7925
Epoch 37: Loss:            : Train 0.0150, Val 0.0162, Test 0.0157
          R2_Score         : Train 0.2282, Val 0.2163, Test 0.2199
          RMSE             : Train 135.8304, Val 137.2691, Test 137.4532
Best:
          R2_Score         : Train 0.2246, Val 0.2286, Test 0.2274
          RMSE             : Train 136.1521, Val 136.1911, Test 136.7925
Epoch 38: Loss:            : Train 0.0150, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.51it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 24.79it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 31.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.10it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 30.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.54it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.70it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 26.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.23it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.70it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.60it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.99it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 34.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.90it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.65it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 30.90it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.97it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.68it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 25.20it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 36.90it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 36.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 28.32it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.47it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 29.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.81it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 38.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.50it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.78it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.70it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.85it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 32.82it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 34.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 38.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.94it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.89it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.76it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 32.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.29it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.86it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.21it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.70it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 34.18it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.11it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.25it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 34.60it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 35.08it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 35.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.41it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 30.09it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 33.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.21it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 21.97it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.82it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.24it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 11.36it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.70it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 24.36it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 34.21it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 32.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.18it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.59it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.46it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.77it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.03it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.76it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 31.45it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.96it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.44it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.41it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.14it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.52it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 31.80it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.73it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.89it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.57it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.27it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 27.79it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 33.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.80it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.84it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 31.75it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.64it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.73it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 61.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.48it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.52it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.57it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.60it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.76it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.73it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 35.01it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.12it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.64it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.51it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.30it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.97it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.56it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.13it/s]
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 39: Loss:            : Train 0.0150, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2288, Val 0.2219, Test 0.2245
          RMSE             : Train 135.7804, Val 136.7810, Test 137.0453
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 40: Loss:            : Train 0.0151, Val 0.0162, Test 0.0156
          R2_Score         : Train 0.2257, Val 0.2165, Test 0.2233
          RMSE             : Train 136.0586, Val 137.2556, Test 137.1535
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 41: Loss:            : Train 0.0150, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2305, Val 0.2255, Test 0.2310
          RMSE             : Train 135.6297, Val 136.4665, Test 136.4711
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 42: Loss:            : Train 0.0149, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2355, Val 0.2310, Test 0.2283
          RMSE             : Train 135.1943, Val 135.9823, Test 136.7119
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 43: Loss:            : Train 0.0151, Val 0.0161, Test 0.0154
          R2_Score         : Train 0.2266, Val 0.2249, Test 0.2322
          RMSE             : Train 135.9768, Val 136.5175, Test 136.3659
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 44: Loss:            : Train 0.0149, Val 0.0161, Test 0.0155
          R2_Score         : Train 0.2328, Val 0.2195, Test 0.2261
          RMSE             : Train 135.4305, Val 136.9930, Test 136.9101
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 45: Loss:            : Train 0.0149, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2325, Val 0.2313, Test 0.2312
          RMSE             : Train 135.4525, Val 135.9489, Test 136.4530
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 46: Loss:            : Train 0.0150, Val 0.0160, Test 0.0155
          R2_Score         : Train 0.2287, Val 0.2272, Test 0.2285
          RMSE             : Train 135.7932, Val 136.3127, Test 136.6957
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 47: Loss:            : Train 0.0150, Val 0.0161, Test 0.0156
          R2_Score         : Train 0.2296, Val 0.2255, Test 0.2215
          RMSE             : Train 135.7082, Val 136.4671, Test 137.3102
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 48: Loss:            : Train 0.0150, Val 0.0159, Test 0.0152
          R2_Score         : Train 0.2310, Val 0.2320, Test 0.2406
          RMSE             : Train 135.5909, Val 135.8934, Test 135.6228
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 49: Loss:            : Train 0.0150, Val 0.0160, Test 0.0156
          R2_Score         : Train 0.2300, Val 0.2134, Test 0.2187
          RMSE             : Train 135.6796, Val 137.5278, Test 137.5605
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 50: Loss:            : Train 0.0151, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2266, Val 0.2275, Test 0.2300
          RMSE             : Train 135.9791, Val 136.2865, Test 136.5601
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 51: Loss:            : Train 0.0150, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2289, Val 0.2340, Test 0.2356
          RMSE             : Train 135.7699, Val 135.7086, Test 136.0675
Best:
          R2_Score         : Train 0.2290, Val 0.2366, Test 0.2323
          RMSE             : Train 135.7641, Val 135.4803, Test 136.3593
Epoch 52: Loss:            : Train 0.0149, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 53: Loss:            : Train 0.0149, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2357, Val 0.2233, Test 0.2263
          RMSE             : Train 135.1712, Val 136.6553, Test 136.8916
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 54: Loss:            : Train 0.0149, Val 0.0159, Test 0.0152
          R2_Score         : Train 0.2343, Val 0.2347, Test 0.2404
          RMSE             : Train 135.3009, Val 135.6489, Test 135.6370
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 55: Loss:            : Train 0.0149, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2362, Val 0.2244, Test 0.2234
          RMSE             : Train 135.1261, Val 136.5594, Test 137.1414
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 56: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2347, Val 0.2297, Test 0.2311
          RMSE             : Train 135.2590, Val 136.0967, Test 136.4651
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 57: Loss:            : Train 0.0149, Val 0.0163, Test 0.0156
          R2_Score         : Train 0.2340, Val 0.2140, Test 0.2240
          RMSE             : Train 135.3247, Val 137.4712, Test 137.0960
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 58: Loss:            : Train 0.0150, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2307, Val 0.2348, Test 0.2313
          RMSE             : Train 135.6159, Val 135.6413, Test 136.4489
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 59: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2370, Val 0.2350, Test 0.2390
          RMSE             : Train 135.0597, Val 135.6246, Test 135.7590
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 60: Loss:            : Train 0.0149, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2369, Val 0.2333, Test 0.2308
          RMSE             : Train 135.0630, Val 135.7727, Test 136.4912
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 61: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2378, Val 0.2340, Test 0.2353
          RMSE             : Train 134.9870, Val 135.7149, Test 136.0946

Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.91it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.21it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.12it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.20it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.71it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 25.34it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.61it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 28.38it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 61.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.24it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 30.79it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 31.65it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.88it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 58.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.70it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.31it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 34.86it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 32.97it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.68it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.38it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.44it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 29.45it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.38it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 62.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.15it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 22.18it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.17it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 36.10it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 62.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.71it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.15it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 31.57it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 32.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 37.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.83it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.22it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.80it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.64it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 32.24it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.15it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 24.16it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.35it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.28it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.73it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 31.98it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 31.60it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.26it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.17it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 32.86it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.89it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 57.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.75it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 29.56it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.81it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.63it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.31it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.08it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.86it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.60it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 28.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.51it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 37.11it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 31.28it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.61it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.35it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.07it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.14it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.44it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 42.81it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 36.60it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 35.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 38.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.61it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.86it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.92it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 31.55it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.28it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 29.64it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.29it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.87it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.53it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.18it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 32.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.24it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 34.08it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.18it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.29it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.81it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 30.58it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 33.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.26it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 25.23it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 29.72it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 17.53it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 29.77it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 37.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.26it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.90it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.22it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 28.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.49it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.55it/s]Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 62: Loss:            : Train 0.0149, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2356, Val 0.2359, Test 0.2303
          RMSE             : Train 135.1836, Val 135.5411, Test 136.5355
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 63: Loss:            : Train 0.0149, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2370, Val 0.2245, Test 0.2273
          RMSE             : Train 135.0620, Val 136.5537, Test 136.7979
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 64: Loss:            : Train 0.0149, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2364, Val 0.2272, Test 0.2271
          RMSE             : Train 135.1144, Val 136.3121, Test 136.8202
Best:
          R2_Score         : Train 0.2342, Val 0.2382, Test 0.2419
          RMSE             : Train 135.3044, Val 135.3445, Test 135.5056
Epoch 65: Loss:            : Train 0.0149, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 66: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2395, Val 0.2404, Test 0.2415
          RMSE             : Train 134.8385, Val 135.1425, Test 135.5355
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 67: Loss:            : Train 0.0149, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2351, Val 0.2356, Test 0.2332
          RMSE             : Train 135.2227, Val 135.5692, Test 136.2787
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 68: Loss:            : Train 0.0149, Val 0.0160, Test 0.0155
          R2_Score         : Train 0.2330, Val 0.2326, Test 0.2295
          RMSE             : Train 135.4156, Val 135.8342, Test 136.6031
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 69: Loss:            : Train 0.0149, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2346, Val 0.2268, Test 0.2336
          RMSE             : Train 135.2677, Val 136.3464, Test 136.2386
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 70: Loss:            : Train 0.0149, Val 0.0160, Test 0.0157
          R2_Score         : Train 0.2371, Val 0.2204, Test 0.2181
          RMSE             : Train 135.0516, Val 136.9134, Test 137.6157
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 71: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2355, Val 0.2348, Test 0.2367
          RMSE             : Train 135.1952, Val 135.6399, Test 135.9682
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 72: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2363, Val 0.2362, Test 0.2354
          RMSE             : Train 135.1171, Val 135.5137, Test 136.0809
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 73: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2394, Val 0.2257, Test 0.2334
          RMSE             : Train 134.8489, Val 136.4434, Test 136.2618
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 74: Loss:            : Train 0.0148, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2399, Val 0.2298, Test 0.2305
          RMSE             : Train 134.8041, Val 136.0845, Test 136.5210
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 75: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2368, Val 0.2336, Test 0.2372
          RMSE             : Train 135.0782, Val 135.7466, Test 135.9185
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 76: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2398, Val 0.2390, Test 0.2373
          RMSE             : Train 134.8137, Val 135.2651, Test 135.9096
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 77: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2413, Val 0.2363, Test 0.2394
          RMSE             : Train 134.6726, Val 135.5093, Test 135.7215
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 78: Loss:            : Train 0.0148, Val 0.0160, Test 0.0154
          R2_Score         : Train 0.2414, Val 0.2256, Test 0.2321
          RMSE             : Train 134.6708, Val 136.4579, Test 136.3718
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 79: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2392, Val 0.2407, Test 0.2393
          RMSE             : Train 134.8643, Val 135.1193, Test 135.7374
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 80: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2424, Val 0.2382, Test 0.2395
          RMSE             : Train 134.5779, Val 135.3447, Test 135.7168
Best:
          R2_Score         : Train 0.2359, Val 0.2438, Test 0.2418
          RMSE             : Train 135.1563, Val 134.8447, Test 135.5120
Epoch 81: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 82: Loss:            : Train 0.0147, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2432, Val 0.2347, Test 0.2387
          RMSE             : Train 134.5096, Val 135.6534, Test 135.7922
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 83: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2397, Val 0.2439, Test 0.2418
          RMSE             : Train 134.8232, Val 134.8347, Test 135.5117
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 84: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2399, Val 0.2344, Test 0.2397
          RMSE             : Train 134.8021, Val 135.6794, Test 135.6987
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 41.37it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 35.52it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 33.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 37.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 80.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.44it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 31.63it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 35.07it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 37.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 95.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 37.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 44.15it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 27.50it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.59it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.23it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 27.15it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.05it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.34it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 29.61it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.44it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.87it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.97it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.37it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.77it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.07it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.90it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 41.33it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 36.01it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 32.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.44it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 57.09it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.22it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.48it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.98it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 20.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.31it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.95it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.70it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 33.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.04it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.24it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 32.02it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 31.48it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.48it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.60it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 35.91it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 34.05it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.26it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.66it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 29.77it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 61.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.09it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.99it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 36.72it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 33.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.35it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.03it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.80it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.95it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.28it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.88it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 41.16it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 35.58it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 34.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 37.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.38it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 53.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.05it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 20.75it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.83it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.72it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 69.06it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.80it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 31.15it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.76it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.01it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.21it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.16it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.08it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.59it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 14.23it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.48it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.22it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.24it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 62.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.68it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.31it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.86it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.28it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.97it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.34it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.03it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.22it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 39.10it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.53it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.88it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.67it/s]
Epoch 85: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2377, Val 0.2375, Test 0.2398
          RMSE             : Train 134.9943, Val 135.4039, Test 135.6861
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 86: Loss:            : Train 0.0148, Val 0.0157, Test 0.0155
          R2_Score         : Train 0.2426, Val 0.2344, Test 0.2233
          RMSE             : Train 134.5633, Val 135.6799, Test 137.1514
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 87: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2416, Val 0.2421, Test 0.2443
          RMSE             : Train 134.6537, Val 134.9896, Test 135.2833
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 88: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2407, Val 0.2376, Test 0.2347
          RMSE             : Train 134.7271, Val 135.3917, Test 136.1485
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 89: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2353, Val 0.2356, Test 0.2386
          RMSE             : Train 135.2097, Val 135.5693, Test 135.8007
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 90: Loss:            : Train 0.0149, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2379, Val 0.2361, Test 0.2315
          RMSE             : Train 134.9817, Val 135.5308, Test 136.4316
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 91: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2403, Val 0.2451, Test 0.2442
          RMSE             : Train 134.7633, Val 134.7271, Test 135.2967
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 92: Loss:            : Train 0.0147, Val 0.0158, Test 0.0152
          R2_Score         : Train 0.2433, Val 0.2339, Test 0.2394
          RMSE             : Train 134.4983, Val 135.7213, Test 135.7272
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 93: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2407, Val 0.2348, Test 0.2382
          RMSE             : Train 134.7336, Val 135.6406, Test 135.8282
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 94: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2394, Val 0.2425, Test 0.2392
          RMSE             : Train 134.8417, Val 134.9614, Test 135.7476
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 95: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2407, Val 0.2400, Test 0.2404
          RMSE             : Train 134.7272, Val 135.1779, Test 135.6396
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 96: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2399, Val 0.2419, Test 0.2408
          RMSE             : Train 134.8005, Val 135.0089, Test 135.5962
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 97: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2397, Val 0.2344, Test 0.2366
          RMSE             : Train 134.8210, Val 135.6818, Test 135.9777
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 98: Loss:            : Train 0.0148, Val 0.0161, Test 0.0155
          R2_Score         : Train 0.2388, Val 0.2241, Test 0.2286
          RMSE             : Train 134.8983, Val 136.5832, Test 136.6830
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 99: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2381, Val 0.2321, Test 0.2340
          RMSE             : Train 134.9577, Val 135.8834, Test 136.2059
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 100: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2389, Val 0.2377, Test 0.2348
          RMSE             : Train 134.8882, Val 135.3824, Test 136.1318
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 101: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2386, Val 0.2419, Test 0.2399
          RMSE             : Train 134.9173, Val 135.0092, Test 135.6836
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 102: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2405, Val 0.2401, Test 0.2371
          RMSE             : Train 134.7455, Val 135.1686, Test 135.9265
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 103: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2358, Val 0.2297, Test 0.2304
          RMSE             : Train 135.1624, Val 136.0907, Test 136.5265
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 104: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2416, Val 0.2363, Test 0.2374
          RMSE             : Train 134.6510, Val 135.5118, Test 135.9059
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 105: Loss:            : Train 0.0148, Val 0.0158, Test 0.0152
          R2_Score         : Train 0.2389, Val 0.2376, Test 0.2396
          RMSE             : Train 134.8930, Val 135.3975, Test 135.7112
Best:
          R2_Score         : Train 0.2395, Val 0.2456, Test 0.2435
          RMSE             : Train 134.8373, Val 134.6806, Test 135.3636
Epoch 106: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 107: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2429, Val 0.2436, Test 0.2444
          RMSE             : Train 134.5343, Val 134.8592, Test 135.2799
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 108: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.15it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 23.88it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.99it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.17it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.54it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 18.97it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.92it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 29.42it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.23it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.64it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 17.89it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.21it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 27.89it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 20.22it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 25.97it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 29.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.40it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 24.26it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.56it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 25.10it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 42.77it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 34.79it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  8.95it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.84it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 42.55it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 33.86it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.86it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.69it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 56.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.77it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 31.43it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.74it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 30.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.40it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.82it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.36it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.04it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.37it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.31it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 35.64it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 33.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.22it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.79it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.26it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.91it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.48it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 43.19it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 35.55it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 34.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 37.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 56.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.21it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.31it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.82it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.64it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 56.17it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.16it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.29it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 32.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.80it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.49it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.44it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.32it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.05it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.79it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.48it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 27.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.73it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 20.83it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.04it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.73it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.46it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.91it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.74it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.41it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.96it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.41it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.59it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 25.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.37it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 41.60it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 34.95it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 33.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.23it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.03it/s]
          R2_Score         : Train 0.2421, Val 0.2412, Test 0.2397
          RMSE             : Train 134.6084, Val 135.0749, Test 135.7008
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 109: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2415, Val 0.2380, Test 0.2431
          RMSE             : Train 134.6565, Val 135.3568, Test 135.3968
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 110: Loss:            : Train 0.0147, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2434, Val 0.2377, Test 0.2324
          RMSE             : Train 134.4872, Val 135.3812, Test 136.3460
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 111: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2406, Val 0.2410, Test 0.2431
          RMSE             : Train 134.7388, Val 135.0914, Test 135.3971
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 112: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2427, Val 0.2411, Test 0.2422
          RMSE             : Train 134.5561, Val 135.0844, Test 135.4734
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 113: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2429, Val 0.2426, Test 0.2412
          RMSE             : Train 134.5380, Val 134.9499, Test 135.5621
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 114: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2413, Val 0.2375, Test 0.2408
          RMSE             : Train 134.6805, Val 135.4062, Test 135.5978
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 115: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2414, Val 0.2375, Test 0.2417
          RMSE             : Train 134.6657, Val 135.4015, Test 135.5238
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 116: Loss:            : Train 0.0147, Val 0.0156, Test 0.0150
          R2_Score         : Train 0.2430, Val 0.2401, Test 0.2472
          RMSE             : Train 134.5219, Val 135.1681, Test 135.0268
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 117: Loss:            : Train 0.0147, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2439, Val 0.2372, Test 0.2320
          RMSE             : Train 134.4481, Val 135.4273, Test 136.3864
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 118: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2441, Val 0.2449, Test 0.2419
          RMSE             : Train 134.4247, Val 134.7451, Test 135.4991
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 119: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2440, Val 0.2420, Test 0.2400
          RMSE             : Train 134.4361, Val 135.0045, Test 135.6721
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 120: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2424, Val 0.2402, Test 0.2409
          RMSE             : Train 134.5753, Val 135.1618, Test 135.5939
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 121: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2428, Val 0.2436, Test 0.2443
          RMSE             : Train 134.5473, Val 134.8625, Test 135.2912
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 122: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2433, Val 0.2448, Test 0.2461
          RMSE             : Train 134.4998, Val 134.7551, Test 135.1267
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 123: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2449, Val 0.2354, Test 0.2416
          RMSE             : Train 134.3564, Val 135.5909, Test 135.5292
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 124: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2406, Val 0.2368, Test 0.2417
          RMSE             : Train 134.7430, Val 135.4640, Test 135.5160
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 125: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2426, Val 0.2407, Test 0.2432
          RMSE             : Train 134.5576, Val 135.1179, Test 135.3859
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 126: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2414, Val 0.2342, Test 0.2362
          RMSE             : Train 134.6682, Val 135.6912, Test 136.0073
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 127: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2445, Val 0.2381, Test 0.2406
          RMSE             : Train 134.3942, Val 135.3508, Test 135.6185
Best:
          R2_Score         : Train 0.2418, Val 0.2464, Test 0.2440
          RMSE             : Train 134.6357, Val 134.6068, Test 135.3150
Epoch 128: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 129: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2438, Val 0.2375, Test 0.2445
          RMSE             : Train 134.4531, Val 135.4004, Test 135.2665
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 130: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2405, Val 0.2441, Test 0.2436
          RMSE             : Train 134.7516, Val 134.8127, Test 135.3504
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 131: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2404, Val 0.2363, Test 0.2315
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.39it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.02it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.97it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.95it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.44it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.76it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.20it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 32.79it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 31.23it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.05it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 17.38it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.15it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.99it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.04it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.21it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.41it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.02it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.09it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.24it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 38.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.48it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.88it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 42.88it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 36.54it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 35.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 38.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.50it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 56.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.70it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 28.70it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.86it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 28.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 57.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.33it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.32it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 88.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.98it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.84it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.40it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 32.98it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.04it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 82.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.08it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.91it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 32.78it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.08it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.94it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.42it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.17it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.85it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.00it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.74it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.26it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.84it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.21it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.02it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.83it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.28it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.25it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.23it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.33it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.06it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.05it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 28.43it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.16it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.14it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.81it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.69it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.71it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.04it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 17.04it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.29it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.85it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.92it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 27.64it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.41it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.91it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 19.26it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.26it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 55.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.36it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.80it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.59it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 26.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.61it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 24.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.38it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 40.97it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 32.21it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 30.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.65it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 56.51it/s]
          RMSE             : Train 134.7530, Val 135.5109, Test 136.4268
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 132: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2394, Val 0.2459, Test 0.2421
          RMSE             : Train 134.8429, Val 134.6525, Test 135.4855
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 133: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2423, Val 0.2441, Test 0.2450
          RMSE             : Train 134.5841, Val 134.8125, Test 135.2260
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 134: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2421, Val 0.2294, Test 0.2339
          RMSE             : Train 134.6053, Val 136.1202, Test 136.2111
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 135: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2403, Val 0.2291, Test 0.2358
          RMSE             : Train 134.7624, Val 136.1488, Test 136.0485
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 136: Loss:            : Train 0.0148, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2410, Val 0.2359, Test 0.2307
          RMSE             : Train 134.7077, Val 135.5447, Test 136.5028
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 137: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2445, Val 0.2420, Test 0.2458
          RMSE             : Train 134.3922, Val 134.9994, Test 135.1543
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 138: Loss:            : Train 0.0147, Val 0.0159, Test 0.0152
          R2_Score         : Train 0.2441, Val 0.2354, Test 0.2410
          RMSE             : Train 134.4279, Val 135.5887, Test 135.5864
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 139: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2420, Val 0.2396, Test 0.2449
          RMSE             : Train 134.6152, Val 135.2152, Test 135.2309
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 140: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2425, Val 0.2450, Test 0.2416
          RMSE             : Train 134.5694, Val 134.7335, Test 135.5288
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 141: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2465, Val 0.2436, Test 0.2482
          RMSE             : Train 134.2161, Val 134.8594, Test 134.9376
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 142: Loss:            : Train 0.0147, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2469, Val 0.2412, Test 0.2390
          RMSE             : Train 134.1831, Val 135.0742, Test 135.7574
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 143: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2451, Val 0.2457, Test 0.2447
          RMSE             : Train 134.3349, Val 134.6683, Test 135.2553
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 144: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2457, Val 0.2370, Test 0.2431
          RMSE             : Train 134.2853, Val 135.4496, Test 135.3984
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 145: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2438, Val 0.2461, Test 0.2453
          RMSE             : Train 134.4514, Val 134.6404, Test 135.1952
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 146: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2453, Val 0.2463, Test 0.2479
          RMSE             : Train 134.3240, Val 134.6231, Test 134.9669
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 147: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2461, Val 0.2476, Test 0.2483
          RMSE             : Train 134.2522, Val 134.5000, Test 134.9326
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 148: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2454, Val 0.2461, Test 0.2466
          RMSE             : Train 134.3082, Val 134.6383, Test 135.0805
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 149: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2461, Val 0.2478, Test 0.2438
          RMSE             : Train 134.2543, Val 134.4877, Test 135.3330
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 150: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2452, Val 0.2400, Test 0.2453
          RMSE             : Train 134.3339, Val 135.1762, Test 135.2021
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 151: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2433, Val 0.2423, Test 0.2465
          RMSE             : Train 134.4952, Val 134.9724, Test 135.0868
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 152: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2442, Val 0.2437, Test 0.2476
          RMSE             : Train 134.4225, Val 134.8495, Test 134.9922
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 153: Loss:            : Train 0.0147, Val 0.0158, Test 0.0152
          R2_Score         : Train 0.2428, Val 0.2373, Test 0.2425
          RMSE             : Train 134.5433, Val 135.4204, Test 135.4481
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 154: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2429, Val 0.2417, Test 0.2433
          RMSE             : Train 134.5312, Val 135.0334, Test 135.3747
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.92it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 30.67it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.17it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 26.94it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.60it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.10it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.25it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.45it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 27.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 61.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  8.23it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.37it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.41it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 29.24it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 60.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.38it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 33.85it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 31.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.61it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.68it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.65it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.35it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.04it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.98it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.25it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.63it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.15it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.07it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 31.42it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.30it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 41.72it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 34.54it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 32.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.99it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 56.15it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.41it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.73it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 56.54it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.13it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.72it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.41it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.95it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.89it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.88it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.46it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.55it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.07it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.35it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 16.71it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 19.35it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 28.33it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.12it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.79it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.18it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.62it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.04it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 25.73it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.03it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.71it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.38it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.00it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.87it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.30it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.95it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.06it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.21it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.31it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.16it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.33it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 87.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.44it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.50it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 32.14it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 27.41it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 79.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.61it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.50it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 25.91it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.44it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.07it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 21.14it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.42it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 30.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 62.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.46it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.28it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 24.72it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 33.87it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 28.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.12it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 12.88it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 43.35it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 26.90it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.97it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.03it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.53it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.50it/s]
Best:
          R2_Score         : Train 0.2444, Val 0.2490, Test 0.2458
          RMSE             : Train 134.4030, Val 134.3820, Test 135.1554
Epoch 155: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 156: Loss:            : Train 0.0147, Val 0.0159, Test 0.0152
          R2_Score         : Train 0.2446, Val 0.2312, Test 0.2415
          RMSE             : Train 134.3871, Val 135.9631, Test 135.5345
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 157: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2438, Val 0.2471, Test 0.2458
          RMSE             : Train 134.4513, Val 134.5510, Test 135.1508
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 158: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2421, Val 0.2338, Test 0.2393
          RMSE             : Train 134.6089, Val 135.7285, Test 135.7368
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 159: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2425, Val 0.2352, Test 0.2359
          RMSE             : Train 134.5669, Val 135.6035, Test 136.0407
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 160: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2439, Val 0.2387, Test 0.2408
          RMSE             : Train 134.4493, Val 135.2975, Test 135.5999
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 161: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2448, Val 0.2390, Test 0.2379
          RMSE             : Train 134.3643, Val 135.2689, Test 135.8572
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 162: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2442, Val 0.2460, Test 0.2447
          RMSE             : Train 134.4152, Val 134.6499, Test 135.2559
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 163: Loss:            : Train 0.0147, Val 0.0158, Test 0.0152
          R2_Score         : Train 0.2440, Val 0.2353, Test 0.2428
          RMSE             : Train 134.4412, Val 135.6016, Test 135.4182
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 164: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2429, Val 0.2460, Test 0.2466
          RMSE             : Train 134.5313, Val 134.6467, Test 135.0823
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 165: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2458, Val 0.2441, Test 0.2444
          RMSE             : Train 134.2757, Val 134.8160, Test 135.2782
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 166: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2438, Val 0.2419, Test 0.2455
          RMSE             : Train 134.4574, Val 135.0144, Test 135.1836
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 167: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2449, Val 0.2455, Test 0.2471
          RMSE             : Train 134.3541, Val 134.6870, Test 135.0371
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 168: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2453, Val 0.2455, Test 0.2455
          RMSE             : Train 134.3191, Val 134.6934, Test 135.1775
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 169: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2472, Val 0.2431, Test 0.2438
          RMSE             : Train 134.1520, Val 134.9068, Test 135.3300
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 170: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2466, Val 0.2407, Test 0.2406
          RMSE             : Train 134.2085, Val 135.1218, Test 135.6201
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 171: Loss:            : Train 0.0147, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2431, Val 0.2340, Test 0.2336
          RMSE             : Train 134.5195, Val 135.7142, Test 136.2456
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 172: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2416, Val 0.2405, Test 0.2406
          RMSE             : Train 134.6542, Val 135.1363, Test 135.6220
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 173: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2441, Val 0.2474, Test 0.2461
          RMSE             : Train 134.4274, Val 134.5244, Test 135.1228
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 174: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2453, Val 0.2445, Test 0.2457
          RMSE             : Train 134.3197, Val 134.7758, Test 135.1651
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 175: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2473, Val 0.2429, Test 0.2460
          RMSE             : Train 134.1420, Val 134.9213, Test 135.1352
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 176: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2445, Val 0.2481, Test 0.2474
          RMSE             : Train 134.3885, Val 134.4603, Test 135.0101
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 177: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2453, Val 0.2415, Test 0.2436
          RMSE             : Train 134.3252, Val 135.0498, Test 135.3528
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 45.04it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.29it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.05it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 38.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 44.35it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.64it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 15.67it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.73it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.10it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.80it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.44it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.88it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.31it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.29it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.76it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.47it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.22it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 11.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.84it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.84it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 91.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.26it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 16.55it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.06it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 21.16it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.54it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 44.37it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 28.49it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.41it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.24it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 29.73it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:04,  3.63it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.08it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.10it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.42it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.13it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 19.06it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.51it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.03it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.32it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.89it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.22it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.09it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.31it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.26it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.70it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.22it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.93it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.56it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 20.40it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.75it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 20.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 45.44it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.36it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 27.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.08it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 37.23it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.72it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.75it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.63it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.56it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.51it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.36it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.27it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 27.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.56it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.97it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 27.03it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.92it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.17it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 29.46it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 72.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 25.16it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 32.11it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.64it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 72.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.44it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.67it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 39.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.37it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.28it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.21it/s]
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 178: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2443, Val 0.2454, Test 0.2481
          RMSE             : Train 134.4144, Val 134.7006, Test 134.9494
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 179: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2444, Val 0.2404, Test 0.2437
          RMSE             : Train 134.3995, Val 135.1460, Test 135.3401
Best:
          R2_Score         : Train 0.2461, Val 0.2492, Test 0.2472
          RMSE             : Train 134.2458, Val 134.3556, Test 135.0285
Epoch 180: Loss:            : Train 0.0147, Val 0.0153, Test 0.0150
          R2_Score         : Train 0.2457, Val 0.2499, Test 0.2490
          RMSE             : Train 134.2846, Val 134.2946, Test 134.8634
Best:
          R2_Score         : Train 0.2457, Val 0.2499, Test 0.2490
          RMSE             : Train 134.2846, Val 134.2946, Test 134.8634
Epoch 181: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2454, Val 0.2390, Test 0.2440
          RMSE             : Train 134.3156, Val 135.2712, Test 135.3133
Best:
          R2_Score         : Train 0.2457, Val 0.2499, Test 0.2490
          RMSE             : Train 134.2846, Val 134.2946, Test 134.8634
Epoch 182: Loss:            : Train 0.0147, Val 0.0160, Test 0.0154
          R2_Score         : Train 0.2440, Val 0.2300, Test 0.2360
          RMSE             : Train 134.4354, Val 136.0659, Test 136.0298
Best:
          R2_Score         : Train 0.2457, Val 0.2499, Test 0.2490
          RMSE             : Train 134.2846, Val 134.2946, Test 134.8634
Epoch 183: Loss:            : Train 0.0147, Val 0.0153, Test 0.0150
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 184: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2455, Val 0.2445, Test 0.2474
          RMSE             : Train 134.3046, Val 134.7787, Test 135.0075
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 185: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2446, Val 0.2422, Test 0.2416
          RMSE             : Train 134.3871, Val 134.9864, Test 135.5285
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 186: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2451, Val 0.2392, Test 0.2396
          RMSE             : Train 134.3374, Val 135.2536, Test 135.7054
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 187: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2456, Val 0.2428, Test 0.2454
          RMSE             : Train 134.2947, Val 134.9280, Test 135.1920
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 188: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2448, Val 0.2342, Test 0.2375
          RMSE             : Train 134.3650, Val 135.6919, Test 135.8911
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 189: Loss:            : Train 0.0147, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2459, Val 0.2354, Test 0.2365
          RMSE             : Train 134.2688, Val 135.5877, Test 135.9868
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 190: Loss:            : Train 0.0147, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2446, Val 0.2367, Test 0.2384
          RMSE             : Train 134.3819, Val 135.4704, Test 135.8119
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 191: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2431, Val 0.2274, Test 0.2344
          RMSE             : Train 134.5174, Val 136.2994, Test 136.1696
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 192: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2439, Val 0.2436, Test 0.2438
          RMSE             : Train 134.4464, Val 134.8641, Test 135.3367
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 193: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2460, Val 0.2406, Test 0.2404
          RMSE             : Train 134.2549, Val 135.1236, Test 135.6342
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 194: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2465, Val 0.2458, Test 0.2465
          RMSE             : Train 134.2103, Val 134.6655, Test 135.0899
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 195: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2445, Val 0.2447, Test 0.2475
          RMSE             : Train 134.3905, Val 134.7653, Test 134.9976
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 196: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2438, Val 0.2454, Test 0.2475
          RMSE             : Train 134.4586, Val 134.6992, Test 135.0019
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 197: Loss:            : Train 0.0146, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2475, Val 0.2450, Test 0.2459
          RMSE             : Train 134.1290, Val 134.7344, Test 135.1485
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 198: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2448, Val 0.2345, Test 0.2392
          RMSE             : Train 134.3681, Val 135.6669, Test 135.7458
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 199: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2454, Val 0.2435, Test 0.2459
          RMSE             : Train 134.3117, Val 134.8679, Test 135.1441
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422
Epoch 200: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2470, Val 0.2509, Test 0.2474
          RMSE             : Train 134.1716, Val 134.2076, Test 135.0130
Best:
          R2_Score         : Train 0.2456, Val 0.2514, Test 0.2515
          RMSE             : Train 134.2975, Val 134.1616, Test 134.6422

