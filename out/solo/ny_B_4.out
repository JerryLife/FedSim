Loading bike from data/nytaxi/bike_201606_clean_sample_2e5.pkl
Loaded.
Loading taxi from data/nytaxi/taxi_201606_clean_sample_1e5.pkl
Loaded.
Current bike columns: ['age', 'gender_1', 'gender_2', 'sid_79', 'sid_82', 'sid_83', 'sid_116', 'sid_119', 'sid_120', 'sid_127', 'sid_128', 'sid_137', 'sid_143', 'sid_144', 'sid_146', 'sid_147', 'sid_150', 'sid_151', 'sid_152', 'sid_153', 'sid_157', 'sid_161', 'sid_164', 'sid_167', 'sid_168', 'sid_173', 'sid_174', 'sid_195', 'sid_212', 'sid_216', 'sid_217', 'sid_223', 'sid_224', 'sid_225', 'sid_228', 'sid_229', 'sid_232', 'sid_233', 'sid_236', 'sid_237', 'sid_238', 'sid_239', 'sid_241', 'sid_242', 'sid_243', 'sid_244', 'sid_245', 'sid_247', 'sid_248', 'sid_249', 'sid_250', 'sid_251', 'sid_252', 'sid_253', 'sid_254', 'sid_257', 'sid_258', 'sid_259', 'sid_260', 'sid_261', 'sid_262', 'sid_263', 'sid_264', 'sid_265', 'sid_266', 'sid_267', 'sid_268', 'sid_270', 'sid_274', 'sid_275', 'sid_276', 'sid_278', 'sid_279', 'sid_280', 'sid_281', 'sid_282', 'sid_284', 'sid_285', 'sid_289', 'sid_291', 'sid_293', 'sid_295', 'sid_296', 'sid_297', 'sid_298', 'sid_300', 'sid_301', 'sid_302', 'sid_303', 'sid_304', 'sid_305', 'sid_306', 'sid_307', 'sid_308', 'sid_309', 'sid_310', 'sid_311', 'sid_312', 'sid_313', 'sid_315', 'sid_316', 'sid_317', 'sid_319', 'sid_320', 'sid_321', 'sid_322', 'sid_323', 'sid_324', 'sid_325', 'sid_326', 'sid_327', 'sid_328', 'sid_329', 'sid_330', 'sid_331', 'sid_332', 'sid_334', 'sid_335', 'sid_336', 'sid_337', 'sid_339', 'sid_340', 'sid_341', 'sid_342', 'sid_343', 'sid_344', 'sid_345', 'sid_346', 'sid_347', 'sid_348', 'sid_349', 'sid_350', 'sid_351', 'sid_352', 'sid_353', 'sid_354', 'sid_355', 'sid_356', 'sid_357', 'sid_358', 'sid_359', 'sid_360', 'sid_361', 'sid_362', 'sid_363', 'sid_364', 'sid_365', 'sid_366', 'sid_367', 'sid_368', 'sid_369', 'sid_372', 'sid_373', 'sid_375', 'sid_376', 'sid_377', 'sid_379', 'sid_380', 'sid_382', 'sid_383', 'sid_384', 'sid_385', 'sid_386', 'sid_387', 'sid_388', 'sid_389', 'sid_390', 'sid_391', 'sid_392', 'sid_393', 'sid_394', 'sid_395', 'sid_396', 'sid_397', 'sid_398', 'sid_399', 'sid_400', 'sid_401', 'sid_402', 'sid_405', 'sid_406', 'sid_407', 'sid_408', 'sid_409', 'sid_410', 'sid_411', 'sid_412', 'sid_414', 'sid_415', 'sid_416', 'sid_417', 'sid_418', 'sid_419', 'sid_420', 'sid_421', 'sid_422', 'sid_423', 'sid_426', 'sid_427', 'sid_428', 'sid_430', 'sid_432', 'sid_433', 'sid_434', 'sid_435', 'sid_436', 'sid_437', 'sid_438', 'sid_439', 'sid_440', 'sid_441', 'sid_442', 'sid_443', 'sid_444', 'sid_445', 'sid_446', 'sid_447', 'sid_448', 'sid_449', 'sid_450', 'sid_453', 'sid_454', 'sid_455', 'sid_456', 'sid_457', 'sid_458', 'sid_459', 'sid_460', 'sid_461', 'sid_462', 'sid_465', 'sid_466', 'sid_467', 'sid_468', 'sid_469', 'sid_470', 'sid_471', 'sid_472', 'sid_473', 'sid_474', 'sid_475', 'sid_476', 'sid_477', 'sid_478', 'sid_479', 'sid_480', 'sid_481', 'sid_482', 'sid_483', 'sid_484', 'sid_485', 'sid_486', 'sid_487', 'sid_488', 'sid_490', 'sid_491', 'sid_492', 'sid_493', 'sid_494', 'sid_495', 'sid_496', 'sid_497', 'sid_498', 'sid_499', 'sid_500', 'sid_501', 'sid_502', 'sid_503', 'sid_504', 'sid_505', 'sid_507', 'sid_508', 'sid_509', 'sid_510', 'sid_511', 'sid_513', 'sid_514', 'sid_515', 'sid_516', 'sid_517', 'sid_518', 'sid_519', 'sid_520', 'sid_522', 'sid_523', 'sid_524', 'sid_525', 'sid_526', 'sid_527', 'sid_528', 'sid_529', 'sid_530', 'sid_531', 'sid_532', 'sid_533', 'sid_534', 'sid_536', 'sid_537', 'sid_539', 'sid_540', 'sid_545', 'sid_546', 'sid_2000', 'sid_2001', 'sid_2002', 'sid_2003', 'sid_2004', 'sid_2005', 'sid_2006', 'sid_2008', 'sid_2009', 'sid_2010', 'sid_2012', 'sid_2017', 'sid_2021', 'sid_2022', 'sid_2023', 'sid_3002', 'sid_3016', 'sid_3041', 'sid_3042', 'sid_3043', 'sid_3044', 'sid_3046', 'sid_3047', 'sid_3048', 'sid_3049', 'sid_3050', 'sid_3052', 'sid_3053', 'sid_3054', 'sid_3055', 'sid_3056', 'sid_3057', 'sid_3058', 'sid_3059', 'sid_3060', 'sid_3061', 'sid_3062', 'sid_3063', 'sid_3064', 'sid_3065', 'sid_3066', 'sid_3067', 'sid_3068', 'sid_3069', 'sid_3070', 'sid_3071', 'sid_3072', 'sid_3073', 'sid_3074', 'sid_3075', 'sid_3076', 'sid_3077', 'sid_3078', 'sid_3079', 'sid_3080', 'sid_3081', 'sid_3082', 'sid_3083', 'sid_3084', 'sid_3085', 'sid_3086', 'sid_3087', 'sid_3088', 'sid_3089', 'sid_3090', 'sid_3091', 'sid_3092', 'sid_3093', 'sid_3094', 'sid_3095', 'sid_3096', 'sid_3098', 'sid_3099', 'sid_3100', 'sid_3101', 'sid_3102', 'sid_3103', 'sid_3105', 'sid_3106', 'sid_3107', 'sid_3108', 'sid_3109', 'sid_3110', 'sid_3111', 'sid_3112', 'sid_3113', 'sid_3114', 'sid_3115', 'sid_3116', 'sid_3117', 'sid_3118', 'sid_3119', 'sid_3120', 'sid_3121', 'sid_3122', 'sid_3123', 'sid_3124', 'sid_3125', 'sid_3126', 'sid_3127', 'sid_3128', 'sid_3129', 'sid_3131', 'sid_3132', 'sid_3134', 'sid_3135', 'sid_3136', 'sid_3137', 'sid_3138', 'sid_3139', 'sid_3140', 'sid_3141', 'sid_3142', 'sid_3143', 'sid_3144', 'sid_3145', 'sid_3146', 'sid_3147', 'sid_3148', 'sid_3150', 'sid_3151', 'sid_3152', 'sid_3153', 'sid_3154', 'sid_3155', 'sid_3156', 'sid_3157', 'sid_3158', 'sid_3159', 'sid_3160', 'sid_3161', 'sid_3162', 'sid_3163', 'sid_3164', 'sid_3165', 'sid_3166', 'sid_3167', 'sid_3168', 'sid_3169', 'sid_3170', 'sid_3171', 'sid_3172', 'sid_3173', 'sid_3175', 'sid_3176', 'sid_3177', 'sid_3178', 'sid_3179', 'sid_3180', 'sid_3182', 'sid_3221', 'sid_3222', 'sid_3223', 'sid_3224', 'sid_3226', 'sid_3230', 'sid_3231', 'sid_3232', 'sid_3233', 'sid_3235', 'sid_3236', 'sid_3237', 'sid_3238', 'sid_3241', 'sid_3242', 'sid_3243', 'sid_3244', 'sid_3246', 'sid_3249', 'sid_3254', 'sid_3255', 'sid_3256', 'sid_3257', 'sid_3259', 'sid_3260', 'eid_79', 'eid_82', 'eid_83', 'eid_116', 'eid_119', 'eid_120', 'eid_127', 'eid_128', 'eid_137', 'eid_143', 'eid_144', 'eid_146', 'eid_147', 'eid_150', 'eid_151', 'eid_152', 'eid_153', 'eid_157', 'eid_161', 'eid_164', 'eid_167', 'eid_168', 'eid_173', 'eid_174', 'eid_195', 'eid_212', 'eid_216', 'eid_217', 'eid_223', 'eid_224', 'eid_225', 'eid_228', 'eid_229', 'eid_232', 'eid_233', 'eid_236', 'eid_237', 'eid_238', 'eid_239', 'eid_241', 'eid_242', 'eid_243', 'eid_244', 'eid_245', 'eid_247', 'eid_248', 'eid_249', 'eid_250', 'eid_251', 'eid_252', 'eid_253', 'eid_254', 'eid_255', 'eid_257', 'eid_258', 'eid_259', 'eid_260', 'eid_261', 'eid_262', 'eid_263', 'eid_264', 'eid_265', 'eid_266', 'eid_267', 'eid_268', 'eid_270', 'eid_274', 'eid_275', 'eid_276', 'eid_278', 'eid_279', 'eid_280', 'eid_281', 'eid_282', 'eid_284', 'eid_285', 'eid_289', 'eid_291', 'eid_293', 'eid_295', 'eid_296', 'eid_297', 'eid_298', 'eid_300', 'eid_301', 'eid_302', 'eid_303', 'eid_304', 'eid_305', 'eid_306', 'eid_307', 'eid_308', 'eid_309', 'eid_310', 'eid_311', 'eid_312', 'eid_313', 'eid_315', 'eid_316', 'eid_317', 'eid_319', 'eid_320', 'eid_321', 'eid_322', 'eid_323', 'eid_324', 'eid_325', 'eid_326', 'eid_327', 'eid_328', 'eid_329', 'eid_330', 'eid_331', 'eid_332', 'eid_334', 'eid_335', 'eid_336', 'eid_337', 'eid_339', 'eid_340', 'eid_341', 'eid_342', 'eid_343', 'eid_344', 'eid_345', 'eid_346', 'eid_347', 'eid_348', 'eid_349', 'eid_350', 'eid_351', 'eid_352', 'eid_353', 'eid_354', 'eid_355', 'eid_356', 'eid_357', 'eid_358', 'eid_359', 'eid_360', 'eid_361', 'eid_362', 'eid_363', 'eid_364', 'eid_365', 'eid_366', 'eid_367', 'eid_368', 'eid_369', 'eid_372', 'eid_373', 'eid_375', 'eid_376', 'eid_377', 'eid_379', 'eid_380', 'eid_382', 'eid_383', 'eid_384', 'eid_385', 'eid_386', 'eid_387', 'eid_388', 'eid_389', 'eid_390', 'eid_391', 'eid_392', 'eid_393', 'eid_394', 'eid_395', 'eid_396', 'eid_397', 'eid_398', 'eid_399', 'eid_400', 'eid_401', 'eid_402', 'eid_405', 'eid_406', 'eid_407', 'eid_408', 'eid_409', 'eid_410', 'eid_411', 'eid_412', 'eid_414', 'eid_415', 'eid_416', 'eid_417', 'eid_418', 'eid_419', 'eid_420', 'eid_421', 'eid_422', 'eid_423', 'eid_426', 'eid_427', 'eid_428', 'eid_430', 'eid_432', 'eid_433', 'eid_434', 'eid_435', 'eid_436', 'eid_437', 'eid_438', 'eid_439', 'eid_440', 'eid_441', 'eid_442', 'eid_443', 'eid_444', 'eid_445', 'eid_446', 'eid_447', 'eid_448', 'eid_449', 'eid_450', 'eid_453', 'eid_454', 'eid_455', 'eid_456', 'eid_457', 'eid_458', 'eid_459', 'eid_460', 'eid_461', 'eid_462', 'eid_465', 'eid_466', 'eid_467', 'eid_468', 'eid_469', 'eid_470', 'eid_471', 'eid_472', 'eid_473', 'eid_474', 'eid_475', 'eid_476', 'eid_477', 'eid_478', 'eid_479', 'eid_480', 'eid_481', 'eid_482', 'eid_483', 'eid_484', 'eid_485', 'eid_486', 'eid_487', 'eid_488', 'eid_490', 'eid_491', 'eid_492', 'eid_493', 'eid_494', 'eid_495', 'eid_496', 'eid_497', 'eid_498', 'eid_499', 'eid_500', 'eid_501', 'eid_502', 'eid_503', 'eid_504', 'eid_505', 'eid_507', 'eid_508', 'eid_509', 'eid_510', 'eid_511', 'eid_513', 'eid_514', 'eid_515', 'eid_516', 'eid_517', 'eid_518', 'eid_519', 'eid_520', 'eid_522', 'eid_523', 'eid_524', 'eid_525', 'eid_526', 'eid_527', 'eid_528', 'eid_529', 'eid_530', 'eid_531', 'eid_532', 'eid_533', 'eid_534', 'eid_536', 'eid_537', 'eid_539', 'eid_540', 'eid_545', 'eid_546', 'eid_2000', 'eid_2001', 'eid_2002', 'eid_2003', 'eid_2004', 'eid_2005', 'eid_2006', 'eid_2008', 'eid_2009', 'eid_2010', 'eid_2012', 'eid_2017', 'eid_2021', 'eid_2022', 'eid_2023', 'eid_3002', 'eid_3016', 'eid_3017', 'eid_3041', 'eid_3042', 'eid_3043', 'eid_3044', 'eid_3046', 'eid_3047', 'eid_3048', 'eid_3049', 'eid_3050', 'eid_3052', 'eid_3053', 'eid_3054', 'eid_3055', 'eid_3056', 'eid_3057', 'eid_3058', 'eid_3059', 'eid_3060', 'eid_3061', 'eid_3062', 'eid_3063', 'eid_3064', 'eid_3065', 'eid_3066', 'eid_3067', 'eid_3068', 'eid_3069', 'eid_3070', 'eid_3071', 'eid_3072', 'eid_3073', 'eid_3074', 'eid_3075', 'eid_3076', 'eid_3077', 'eid_3078', 'eid_3079', 'eid_3080', 'eid_3081', 'eid_3082', 'eid_3083', 'eid_3084', 'eid_3085', 'eid_3086', 'eid_3087', 'eid_3088', 'eid_3089', 'eid_3090', 'eid_3091', 'eid_3092', 'eid_3093', 'eid_3094', 'eid_3095', 'eid_3096', 'eid_3098', 'eid_3099', 'eid_3100', 'eid_3101', 'eid_3102', 'eid_3103', 'eid_3105', 'eid_3106', 'eid_3107', 'eid_3108', 'eid_3109', 'eid_3110', 'eid_3111', 'eid_3112', 'eid_3113', 'eid_3114', 'eid_3115', 'eid_3116', 'eid_3117', 'eid_3118', 'eid_3119', 'eid_3120', 'eid_3121', 'eid_3122', 'eid_3123', 'eid_3124', 'eid_3125', 'eid_3126', 'eid_3127', 'eid_3128', 'eid_3129', 'eid_3131', 'eid_3132', 'eid_3134', 'eid_3135', 'eid_3136', 'eid_3137', 'eid_3138', 'eid_3139', 'eid_3140', 'eid_3141', 'eid_3142', 'eid_3143', 'eid_3144', 'eid_3145', 'eid_3146', 'eid_3147', 'eid_3148', 'eid_3150', 'eid_3151', 'eid_3152', 'eid_3153', 'eid_3154', 'eid_3155', 'eid_3156', 'eid_3157', 'eid_3158', 'eid_3159', 'eid_3160', 'eid_3161', 'eid_3162', 'eid_3163', 'eid_3164', 'eid_3165', 'eid_3166', 'eid_3167', 'eid_3168', 'eid_3169', 'eid_3170', 'eid_3171', 'eid_3172', 'eid_3173', 'eid_3175', 'eid_3176', 'eid_3177', 'eid_3178', 'eid_3179', 'eid_3180', 'eid_3182', 'eid_3183', 'eid_3184', 'eid_3192', 'eid_3219', 'eid_3221', 'eid_3222', 'eid_3223', 'eid_3224', 'eid_3226', 'eid_3230', 'eid_3231', 'eid_3232', 'eid_3233', 'eid_3235', 'eid_3236', 'eid_3237', 'eid_3238', 'eid_3240', 'eid_3241', 'eid_3242', 'eid_3243', 'eid_3244', 'eid_3246', 'eid_3249', 'eid_3250', 'eid_3252', 'eid_3254', 'eid_3255', 'eid_3256', 'eid_3257', 'eid_3259', 'eid_3260', 'start_lon', 'start_lat', 'end_lon', 'end_lat']  0%|          | 0/140000 [00:00<?, ?it/s]  0%|          | 447/140000 [00:00<00:31, 4460.96it/s]  1%|          | 1146/140000 [00:00<00:23, 5944.90it/s]  1%|▏         | 1822/140000 [00:00<00:21, 6315.88it/s]  2%|▏         | 2454/140000 [00:00<00:23, 5823.43it/s]  2%|▏         | 3056/140000 [00:00<00:23, 5888.24it/s]  3%|▎         | 3764/140000 [00:00<00:21, 6278.08it/s]  4%|▎         | 4908/140000 [00:00<00:17, 7924.11it/s]  4%|▍         | 5708/140000 [00:00<00:19, 6763.00it/s]  5%|▍         | 6416/140000 [00:00<00:20, 6575.46it/s]  5%|▌         | 7335/140000 [00:01<00:18, 7291.64it/s]  6%|▌         | 8088/140000 [00:01<00:24, 5429.57it/s]  6%|▌         | 8713/140000 [00:01<00:27, 4770.02it/s]  7%|▋         | 9255/140000 [00:01<00:31, 4188.05it/s]  7%|▋         | 9724/140000 [00:01<00:34, 3808.82it/s]  7%|▋         | 10140/140000 [00:01<00:33, 3819.86it/s]  8%|▊         | 10576/140000 [00:02<00:32, 3941.49it/s]  8%|▊         | 10992/140000 [00:02<00:34, 3792.67it/s]  8%|▊         | 11386/140000 [00:02<00:34, 3776.11it/s]  8%|▊         | 11774/140000 [00:02<00:34, 3734.72it/s]  9%|▊         | 12154/140000 [00:02<00:34, 3711.35it/s]  9%|▉         | 12546/140000 [00:02<00:33, 3766.62it/s]  9%|▉         | 12927/140000 [00:02<00:33, 3738.12it/s] 10%|▉         | 13398/140000 [00:02<00:31, 4012.77it/s] 10%|▉         | 13803/140000 [00:02<00:32, 3885.31it/s] 10%|█         | 14257/140000 [00:03<00:30, 4069.64it/s] 11%|█         | 14714/140000 [00:03<00:29, 4213.73it/s] 11%|█         | 15138/140000 [00:03<00:30, 4137.16it/s] 11%|█         | 15554/140000 [00:03<00:31, 4013.46it/s] 11%|█▏        | 16006/140000 [00:03<00:29, 4158.58it/s] 12%|█▏        | 16424/140000 [00:03<00:33, 3683.54it/s] 12%|█▏        | 16892/140000 [00:03<00:31, 3949.14it/s] 12%|█▏        | 17298/140000 [00:03<00:33, 3668.86it/s] 13%|█▎        | 17698/140000 [00:03<00:32, 3756.02it/s] 13%|█▎        | 18082/140000 [00:04<00:32, 3721.20it/s] 13%|█▎        | 18460/140000 [00:04<00:33, 3638.10it/s] 13%|█▎        | 18837/140000 [00:04<00:32, 3673.70it/s] 14%|█▎        | 19209/140000 [00:04<00:32, 3686.33it/s] 14%|█▍        | 19580/140000 [00:04<00:33, 3570.01it/s] 14%|█▍        | 19956/140000 [00:04<00:33, 3623.19it/s] 15%|█▍        | 20336/140000 [00:04<00:32, 3670.28it/s] 15%|█▍        | 20705/140000 [00:04<00:33, 3529.35it/s] 15%|█▌        | 21069/140000 [00:04<00:33, 3560.35it/s] 16%|█▌        | 21750/140000 [00:04<00:26, 4503.27it/s] 16%|█▋        | 22791/140000 [00:05<00:18, 6233.76it/s] 17%|█▋        | 23781/140000 [00:05<00:15, 7312.81it/s] 18%|█▊        | 24519/140000 [00:05<00:19, 6053.40it/s] 18%|█▊        | 25165/140000 [00:05<00:20, 5580.96it/s] 18%|█▊        | 25756/140000 [00:05<00:22, 5140.04it/s] 19%|█▉        | 26296/140000 [00:05<00:25, 4467.34it/s] 19%|█▉        | 26771/140000 [00:05<00:27, 4170.91it/s] 19%|█▉        | 27207/140000 [00:06<00:27, 4031.00it/s] 20%|█▉        | 27626/140000 [00:06<00:27, 4069.28it/s] 20%|██        | 28042/140000 [00:06<00:27, 4086.83it/s] 20%|██        | 28458/140000 [00:06<00:27, 4035.39it/s] 21%|██        | 28866/140000 [00:06<00:28, 3966.72it/s] 21%|██        | 29283/140000 [00:06<00:27, 4022.84it/s] 21%|██        | 29700/140000 [00:06<00:27, 4063.07it/s] 22%|██▏       | 30154/140000 [00:06<00:26, 4200.11it/s] 22%|██▏       | 30576/140000 [00:06<00:27, 4015.52it/s] 22%|██▏       | 30981/140000 [00:06<00:27, 3921.44it/s] 22%|██▏       | 31376/140000 [00:07<00:30, 3608.14it/s] 23%|██▎       | 31777/140000 [00:07<00:29, 3716.14it/s] 23%|██▎       | 32154/140000 [00:07<00:29, 3660.18it/s] 23%|██▎       | 32524/140000 [00:07<00:30, 3481.26it/s] 24%|██▎       | 32910/140000 [00:07<00:29, 3584.83it/s] 24%|██▍       | 33272/140000 [00:07<00:32, 3317.73it/s] 24%|██▍       | 33617/140000 [00:07<00:31, 3352.26it/s] 24%|██▍       | 33957/140000 [00:07<00:31, 3344.60it/s] 25%|██▍       | 34309/140000 [00:07<00:31, 3393.47it/s] 25%|██▍       | 34651/140000 [00:08<00:31, 3393.82it/s] 25%|██▍       | 34997/140000 [00:08<00:30, 3411.83it/s] 25%|██▌       | 35340/140000 [00:08<00:31, 3354.70it/s] 25%|██▌       | 35691/140000 [00:08<00:30, 3398.67it/s] 26%|██▌       | 36040/140000 [00:08<00:30, 3423.25it/s] 26%|██▌       | 36383/140000 [00:08<00:30, 3416.17it/s] 26%|██▌       | 36726/140000 [00:08<00:31, 3307.99it/s] 26%|██▋       | 37058/140000 [00:08<00:32, 3180.86it/s] 27%|██▋       | 37378/140000 [00:08<00:32, 3155.52it/s] 27%|██▋       | 37710/140000 [00:08<00:31, 3201.08it/s] 27%|██▋       | 38093/140000 [00:09<00:30, 3383.49it/s] 27%|██▋       | 38495/140000 [00:09<00:28, 3570.03it/s] 28%|██▊       | 38873/140000 [00:09<00:27, 3630.91it/s] 28%|██▊       | 39327/140000 [00:09<00:25, 3898.92it/s] 28%|██▊       | 39765/140000 [00:09<00:24, 4040.71it/s] 29%|██▊       | 40171/140000 [00:09<00:24, 4045.03it/s] 29%|██▉       | 40577/140000 [00:09<00:25, 3920.16it/s] 29%|██▉       | 40974/140000 [00:09<00:25, 3934.19it/s] 30%|██▉       | 41369/140000 [00:09<00:25, 3797.90it/s] 30%|██▉       | 41751/140000 [00:10<00:26, 3722.99it/s] 30%|███       | 42125/140000 [00:10<00:26, 3648.23it/s] 30%|███       | 42491/140000 [00:10<00:26, 3650.16it/s] 31%|███       | 42857/140000 [00:10<00:26, 3643.14it/s] 31%|███       | 43222/140000 [00:10<00:26, 3637.34it/s] 31%|███       | 43587/140000 [00:10<00:28, 3408.43it/s] 31%|███▏      | 43936/140000 [00:10<00:28, 3429.46it/s] 32%|███▏      | 44342/140000 [00:10<00:26, 3610.16it/s] 32%|███▏      | 44706/140000 [00:10<00:27, 3462.16it/s] 32%|███▏      | 45069/140000 [00:10<00:27, 3508.29it/s] 32%|███▏      | 45422/140000 [00:11<00:27, 3497.74it/s] 33%|███▎      | 45774/140000 [00:11<00:27, 3456.90it/s] 33%|███▎      | 46121/140000 [00:11<00:27, 3381.38it/s] 33%|███▎      | 46461/140000 [00:11<00:27, 3384.38it/s] 33%|███▎      | 46801/140000 [00:11<00:27, 3369.81it/s] 34%|███▎      | 47140/140000 [00:11<00:27, 3374.72it/s] 34%|███▍      | 47478/140000 [00:11<00:27, 3324.35it/s] 34%|███▍      | 47811/140000 [00:11<00:27, 3294.44it/s] 34%|███▍      | 48141/140000 [00:11<00:28, 3234.33it/s] 35%|███▍      | 48499/140000 [00:11<00:27, 3334.88it/s] 35%|███▍      | 48833/140000 [00:12<00:27, 3335.68it/s] 35%|███▌      | 49167/140000 [00:12<00:28, 3234.50it/s] 35%|███▌      | 49492/140000 [00:12<00:28, 3164.35it/s] 36%|███▌      | 49812/140000 [00:12<00:28, 3174.51it/s] 36%|███▌      | 50131/140000 [00:12<00:28, 3178.80it/s] 36%|███▌      | 50468/140000 [00:12<00:27, 3233.00it/s] 36%|███▋      | 50792/140000 [00:12<00:28, 3173.00it/s] 37%|███▋      | 51110/140000 [00:12<00:28, 3157.24it/s] 37%|███▋      | 51443/140000 [00:12<00:27, 3207.47it/s] 37%|███▋      | 51765/140000 [00:13<00:27, 3195.93it/s] 37%|███▋      | 52085/140000 [00:13<00:27, 3145.00it/s] 37%|███▋      | 52400/140000 [00:13<00:28, 3106.41it/s] 38%|███▊      | 52711/140000 [00:13<00:29, 2982.94it/s] 38%|███▊      | 53011/140000 [00:13<00:29, 2969.95it/s] 38%|███▊      | 53329/140000 [00:13<00:28, 3030.25it/s] 38%|███▊      | 53633/140000 [00:13<00:28, 2998.29it/s] 39%|███▊      | 53934/140000 [00:13<00:30, 2789.99it/s] 39%|███▊      | 54245/140000 [00:13<00:29, 2878.89it/s] 39%|███▉      | 54574/140000 [00:13<00:28, 2995.70it/s] 39%|███▉      | 54882/140000 [00:14<00:28, 3017.45it/s] 39%|███▉      | 55228/140000 [00:14<00:26, 3145.41it/s] 40%|███▉      | 55565/140000 [00:14<00:26, 3210.67it/s] 40%|███▉      | 55906/140000 [00:14<00:25, 3266.52it/s] 40%|████      | 56243/140000 [00:14<00:25, 3296.83it/s] 40%|████      | 56574/140000 [00:14<00:25, 3245.09it/s] 41%|████      | 56916/140000 [00:14<00:25, 3296.50it/s] 41%|████      | 57266/140000 [00:14<00:24, 3354.86it/s] 41%|████      | 57602/140000 [00:14<00:25, 3291.31it/s] 41%|████▏     | 57932/140000 [00:14<00:25, 3268.01it/s] 42%|████▏     | 58270/140000 [00:15<00:24, 3298.88it/s] 42%|████▏     | 58625/140000 [00:15<00:24, 3370.41it/s] 42%|████▏     | 58963/140000 [00:15<00:24, 3313.66it/s] 42%|████▏     | 59309/140000 [00:15<00:24, 3354.19it/s] 43%|████▎     | 59645/140000 [00:15<00:23, 3352.61it/s] 43%|████▎     | 59981/140000 [00:15<00:23, 3351.69it/s] 43%|████▎     | 60338/140000 [00:15<00:23, 3414.74it/s] 43%|████▎     | 60692/140000 [00:15<00:22, 3451.92it/s] 44%|████▎     | 61038/140000 [00:15<00:22, 3439.19it/s] 44%|████▍     | 61393/140000 [00:16<00:22, 3469.77it/s] 44%|████▍     | 61741/140000 [00:16<00:23, 3377.27it/s] 44%|████▍     | 62080/140000 [00:16<00:24, 3173.51it/s] 45%|████▍     | 62400/140000 [00:16<00:25, 2997.81it/s] 45%|████▍     | 62720/140000 [00:16<00:25, 3050.90it/s] 45%|████▌     | 63043/140000 [00:16<00:24, 3099.62it/s] 45%|████▌     | 63368/140000 [00:16<00:24, 3140.59it/s] 46%|████▌     | 63702/140000 [00:16<00:23, 3196.66it/s] 46%|████▌     | 64024/140000 [00:16<00:24, 3119.24it/s] 46%|████▌     | 64363/140000 [00:16<00:23, 3196.38it/s] 46%|████▌     | 64708/140000 [00:17<00:23, 3270.08it/s] 46%|████▋     | 65080/140000 [00:17<00:22, 3400.34it/s] 47%|████▋     | 65473/140000 [00:17<00:20, 3555.05it/s] 47%|████▋     | 65830/140000 [00:17<00:20, 3547.72it/s] 47%|████▋     | 66186/140000 [00:17<00:21, 3448.11it/s] 48%|████▊     | 66532/140000 [00:17<00:22, 3337.55it/s] 48%|████▊     | 66867/140000 [00:17<00:21, 3329.39it/s] 48%|████▊     | 67201/140000 [00:17<00:22, 3255.96it/s] 48%|████▊     | 67561/140000 [00:17<00:21, 3353.57it/s] 48%|████▊     | 67898/140000 [00:18<00:22, 3228.33it/s] 49%|████▊     | 68223/140000 [00:18<00:22, 3150.37it/s] 49%|████▉     | 68589/140000 [00:18<00:21, 3291.72it/s] 49%|████▉     | 68961/140000 [00:18<00:20, 3413.51it/s] 50%|████▉     | 69343/140000 [00:18<00:20, 3531.15it/s] 50%|████▉     | 69737/140000 [00:18<00:19, 3649.99it/s] 50%|█████     | 70225/140000 [00:18<00:17, 4012.18it/s] 50%|█████     | 70628/140000 [00:18<00:17, 4012.53it/s] 51%|█████     | 71031/140000 [00:18<00:17, 3913.91it/s] 51%|█████     | 71424/140000 [00:18<00:18, 3702.37it/s] 51%|█████▏    | 71798/140000 [00:19<00:18, 3675.94it/s] 52%|█████▏    | 72168/140000 [00:19<00:18, 3587.46it/s] 52%|█████▏    | 72529/140000 [00:19<00:19, 3450.80it/s] 52%|█████▏    | 72876/140000 [00:19<00:19, 3398.60it/s] 52%|█████▏    | 73217/140000 [00:19<00:20, 3295.52it/s] 53%|█████▎    | 73647/140000 [00:19<00:18, 3577.18it/s] 53%|█████▎    | 74049/140000 [00:19<00:17, 3701.59it/s] 53%|█████▎    | 74453/140000 [00:19<00:17, 3799.72it/s] 53%|█████▎    | 74884/140000 [00:19<00:16, 3947.98it/s] 54%|█████▍    | 75370/140000 [00:20<00:15, 4216.08it/s] 54%|█████▍    | 75822/140000 [00:20<00:14, 4305.56it/s] 54%|█████▍    | 76264/140000 [00:20<00:14, 4339.20it/s] 55%|█████▍    | 76699/140000 [00:20<00:14, 4307.46it/s] 55%|█████▌    | 77131/140000 [00:20<00:14, 4277.02it/s] 55%|█████▌    | 77560/140000 [00:20<00:14, 4248.20it/s] 56%|█████▌    | 77996/140000 [00:20<00:14, 4267.40it/s] 56%|█████▌    | 78424/140000 [00:20<00:14, 4162.14it/s] 56%|█████▋    | 78841/140000 [00:20<00:14, 4090.31it/s] 57%|█████▋    | 79279/140000 [00:20<00:14, 4172.73it/s] 57%|█████▋    | 79697/140000 [00:21<00:14, 4157.09it/s] 57%|█████▋    | 80114/140000 [00:21<00:15, 3814.60it/s] 58%|█████▊    | 80501/140000 [00:21<00:15, 3786.91it/s] 58%|█████▊    | 80918/140000 [00:21<00:15, 3894.49it/s] 58%|█████▊    | 81311/140000 [00:22<00:51, 1146.81it/s] 58%|█████▊    | 81599/140000 [00:22<00:47, 1238.15it/s] 58%|█████▊    | 81893/140000 [00:22<00:40, 1450.11it/s] 59%|█████▉    | 82297/140000 [00:22<00:31, 1841.00it/s] 59%|█████▉    | 82640/140000 [00:22<00:27, 2122.72it/s] 59%|█████▉    | 83098/140000 [00:22<00:21, 2619.47it/s] 60%|█████▉    | 83484/140000 [00:22<00:19, 2897.49it/s] 60%|█████▉    | 83869/140000 [00:23<00:17, 3128.22it/s] 60%|██████    | 84279/140000 [00:23<00:16, 3377.09it/s] 60%|██████    | 84699/140000 [00:23<00:15, 3597.83it/s] 61%|██████    | 85135/140000 [00:23<00:14, 3809.01it/s] 61%|██████    | 85630/140000 [00:23<00:13, 4131.10it/s] 62%|██████▏   | 86110/140000 [00:23<00:12, 4321.81it/s] 62%|██████▏   | 86557/140000 [00:23<00:12, 4334.10it/s] 62%|██████▏   | 87027/140000 [00:23<00:11, 4439.58it/s] 63%|██████▎   | 87505/140000 [00:23<00:11, 4539.43it/s] 63%|██████▎   | 87997/140000 [00:23<00:11, 4650.11it/s] 63%|██████▎   | 88466/140000 [00:24<00:11, 4510.35it/s] 64%|██████▎   | 88921/140000 [00:24<00:11, 4510.99it/s] 64%|██████▍   | 89465/140000 [00:24<00:10, 4782.30it/s] 64%|██████▍   | 89980/140000 [00:24<00:10, 4889.65it/s] 65%|██████▍   | 90471/140000 [00:24<00:10, 4880.52it/s] 65%|██████▍   | 90962/140000 [00:24<00:10, 4885.47it/s] 65%|██████▌   | 91454/140000 [00:24<00:09, 4893.11it/s] 66%|██████▌   | 91946/140000 [00:24<00:09, 4898.77it/s] 66%|██████▌   | 92437/140000 [00:24<00:09, 4775.90it/s] 66%|██████▋   | 92916/140000 [00:25<00:09, 4724.85it/s] 67%|██████▋   | 93390/140000 [00:25<00:09, 4694.58it/s] 67%|██████▋   | 93862/140000 [00:25<00:09, 4700.03it/s] 67%|██████▋   | 94333/140000 [00:25<00:09, 4668.79it/s] 68%|██████▊   | 94801/140000 [00:25<00:09, 4561.02it/s] 68%|██████▊   | 95258/140000 [00:25<00:10, 4224.48it/s] 68%|██████▊   | 95686/140000 [00:25<00:11, 3877.43it/s] 69%|██████▊   | 96082/140000 [00:25<00:11, 3715.55it/s] 69%|██████▉   | 96607/140000 [00:25<00:10, 4120.76it/s] 69%|██████▉   | 97028/140000 [00:26<00:11, 3827.20it/s] 70%|██████▉   | 97420/140000 [00:26<00:11, 3696.11it/s] 70%|██████▉   | 97945/140000 [00:26<00:10, 4111.30it/s] 70%|███████   | 98366/140000 [00:26<00:10, 3862.62it/s] 71%|███████   | 98761/140000 [00:26<00:11, 3567.15it/s] 71%|███████   | 99127/140000 [00:26<00:11, 3425.51it/s] 71%|███████   | 99476/140000 [00:26<00:12, 3349.58it/s] 71%|███████▏  | 99815/140000 [00:26<00:12, 3329.57it/s] 72%|███████▏  | 100151/140000 [00:26<00:12, 3258.24it/s] 72%|███████▏  | 100479/140000 [00:27<00:12, 3219.29it/s] 72%|███████▏  | 100802/140000 [00:27<00:12, 3144.20it/s] 72%|███████▏  | 101117/140000 [00:27<00:12, 3120.30it/s] 72%|███████▏  | 101430/140000 [00:27<00:12, 3116.30it/s] 73%|███████▎  | 101742/140000 [00:27<00:12, 3096.87it/s] 73%|███████▎  | 102052/140000 [00:27<00:12, 3092.52it/s] 73%|███████▎  | 102368/140000 [00:27<00:12, 3110.18it/s] 73%|███████▎  | 102680/140000 [00:27<00:12, 2969.09it/s] 74%|███████▎  | 102981/140000 [00:27<00:12, 2980.05it/s] 74%|███████▍  | 103288/140000 [00:27<00:12, 3005.69it/s] 74%|███████▍  | 103590/140000 [00:28<00:12, 2994.77it/s] 74%|███████▍  | 103890/140000 [00:28<00:12, 2912.04it/s] 74%|███████▍  | 104182/140000 [00:28<00:12, 2872.77it/s] 75%|███████▍  | 104480/140000 [00:28<00:12, 2902.10it/s] 75%|███████▍  | 104783/140000 [00:28<00:12, 2932.87it/s] 75%|███████▌  | 105077/140000 [00:28<00:12, 2894.83it/s] 75%|███████▌  | 105367/140000 [00:28<00:12, 2879.24it/s] 75%|███████▌  | 105693/140000 [00:28<00:11, 2990.32it/s] 76%|███████▌  | 106011/140000 [00:28<00:11, 3040.65it/s] 76%|███████▌  | 106319/140000 [00:29<00:11, 3049.16it/s] 76%|███████▌  | 106643/140000 [00:29<00:10, 3105.54it/s] 76%|███████▋  | 106954/140000 [00:29<00:10, 3082.77it/s] 77%|███████▋  | 107282/140000 [00:29<00:10, 3139.57it/s] 77%|███████▋  | 107597/140000 [00:29<00:11, 2830.90it/s] 77%|███████▋  | 107930/140000 [00:29<00:10, 2968.39it/s] 77%|███████▋  | 108276/140000 [00:29<00:10, 3107.32it/s] 78%|███████▊  | 108592/140000 [00:29<00:10, 3108.40it/s] 78%|███████▊  | 108906/140000 [00:29<00:10, 3000.26it/s] 78%|███████▊  | 109271/140000 [00:29<00:09, 3185.54it/s] 78%|███████▊  | 109787/140000 [00:30<00:08, 3755.82it/s] 79%|███████▉  | 110318/140000 [00:30<00:07, 4210.47it/s] 79%|███████▉  | 110839/140000 [00:30<00:06, 4504.55it/s] 80%|███████▉  | 111364/140000 [00:30<00:06, 4724.75it/s] 80%|███████▉  | 111890/140000 [00:30<00:05, 4882.79it/s] 80%|████████  | 112423/140000 [00:30<00:05, 5015.83it/s] 81%|████████  | 112942/140000 [00:30<00:05, 4962.28it/s] 81%|████████  | 113440/140000 [00:30<00:05, 4729.71it/s] 81%|████████▏ | 113916/140000 [00:30<00:05, 4669.08it/s] 82%|████████▏ | 114436/140000 [00:30<00:05, 4819.60it/s] 82%|████████▏ | 114977/140000 [00:31<00:05, 4990.32it/s] 83%|████████▎ | 115519/140000 [00:31<00:04, 5112.35it/s] 83%|████████▎ | 116061/140000 [00:31<00:04, 5202.05it/s] 83%|████████▎ | 116609/140000 [00:31<00:04, 5282.18it/s] 84%|████████▎ | 117147/140000 [00:31<00:04, 5310.20it/s] 84%|████████▍ | 117679/140000 [00:31<00:04, 5308.42it/s] 84%|████████▍ | 118213/140000 [00:31<00:04, 5317.59it/s] 85%|████████▍ | 118746/140000 [00:31<00:04, 5048.96it/s] 85%|████████▌ | 119265/140000 [00:31<00:04, 5086.50it/s] 86%|████████▌ | 119779/140000 [00:32<00:03, 5100.36it/s] 86%|████████▌ | 120305/140000 [00:32<00:03, 5144.76it/s] 86%|████████▋ | 120821/140000 [00:32<00:03, 5147.18it/s] 87%|████████▋ | 121353/140000 [00:32<00:03, 5198.03it/s] 87%|████████▋ | 121916/140000 [00:32<00:03, 5324.74it/s] 87%|████████▋ | 122465/140000 [00:32<00:03, 5371.60it/s] 88%|████████▊ | 123003/140000 [00:32<00:03, 5151.06it/s] 88%|████████▊ | 123521/140000 [00:32<00:03, 4370.53it/s] 89%|████████▊ | 123979/140000 [00:32<00:03, 4021.19it/s] 89%|████████▉ | 124399/140000 [00:33<00:04, 3802.36it/s] 89%|████████▉ | 124792/140000 [00:33<00:04, 3561.35it/s] 89%|████████▉ | 125158/140000 [00:33<00:04, 3416.34it/s] 90%|████████▉ | 125506/140000 [00:33<00:05, 2877.57it/s] 90%|████████▉ | 125809/140000 [00:33<00:05, 2833.35it/s] 90%|█████████ | 126117/140000 [00:33<00:04, 2893.12it/s] 90%|█████████ | 126462/140000 [00:33<00:04, 3036.36it/s] 91%|█████████ | 126779/140000 [00:33<00:04, 3072.11it/s] 91%|█████████ | 127093/140000 [00:33<00:04, 3090.22it/s] 91%|█████████ | 127407/140000 [00:34<00:04, 3101.01it/s] 91%|█████████▏| 127750/140000 [00:34<00:03, 3195.70it/s] 91%|█████████▏| 128094/140000 [00:34<00:03, 3265.58it/s] 92%|█████████▏| 128424/140000 [00:34<00:03, 3274.73it/s] 92%|█████████▏| 128753/140000 [00:34<00:03, 3253.51it/s] 92%|█████████▏| 129083/140000 [00:34<00:03, 3265.65it/s] 92%|█████████▏| 129415/140000 [00:34<00:03, 3281.61it/s] 93%|█████████▎| 129744/140000 [00:34<00:03, 3234.42it/s] 93%|█████████▎| 130068/140000 [00:34<00:03, 3195.61it/s] 93%|█████████▎| 130388/140000 [00:35<00:03, 3144.81it/s] 93%|█████████▎| 130703/140000 [00:35<00:02, 3123.70it/s] 94%|█████████▎| 131029/140000 [00:35<00:02, 3161.54it/s] 94%|█████████▍| 131346/140000 [00:35<00:02, 3041.11it/s] 94%|█████████▍| 131652/140000 [00:35<00:02, 3023.12it/s] 94%|█████████▍| 131989/140000 [00:35<00:02, 3111.22it/s] 95%|█████████▍| 132301/140000 [00:35<00:02, 3088.99it/s] 95%|█████████▍| 132614/140000 [00:35<00:02, 3099.51it/s] 95%|█████████▍| 132951/140000 [00:35<00:02, 3176.36it/s] 95%|█████████▌| 133269/140000 [00:35<00:02, 3123.74it/s] 95%|█████████▌| 133582/140000 [00:36<00:02, 3007.37it/s] 96%|█████████▌| 133884/140000 [00:36<00:02, 2942.10it/s] 96%|█████████▌| 134183/140000 [00:36<00:01, 2953.70it/s] 96%|█████████▌| 134479/140000 [00:36<00:01, 2946.03it/s] 96%|█████████▋| 134775/140000 [00:36<00:01, 2902.16it/s] 96%|█████████▋| 135066/140000 [00:36<00:01, 2853.48it/s] 97%|█████████▋| 135354/140000 [00:36<00:01, 2860.45it/s] 97%|█████████▋| 135641/140000 [00:36<00:01, 2797.71it/s] 97%|█████████▋| 135922/140000 [00:36<00:01, 2724.26it/s] 97%|█████████▋| 136195/140000 [00:36<00:01, 2716.70it/s] 97%|█████████▋| 136475/140000 [00:37<00:01, 2740.25it/s] 98%|█████████▊| 136775/140000 [00:37<00:01, 2815.03it/s] 98%|█████████▊| 137063/140000 [00:37<00:01, 2833.46it/s] 98%|█████████▊| 137357/140000 [00:37<00:00, 2862.80it/s] 98%|█████████▊| 137644/140000 [00:37<00:00, 2843.40it/s] 99%|█████████▊| 137945/140000 [00:37<00:00, 2890.75it/s] 99%|█████████▊| 138235/140000 [00:37<00:00, 2633.25it/s] 99%|█████████▉| 138503/140000 [00:37<00:00, 2582.62it/s] 99%|█████████▉| 138765/140000 [00:37<00:00, 2567.26it/s] 99%|█████████▉| 139024/140000 [00:38<00:00, 2552.12it/s] 99%|█████████▉| 139288/140000 [00:38<00:00, 2576.10it/s]100%|█████████▉| 139567/140000 [00:38<00:00, 2638.02it/s]100%|█████████▉| 139864/140000 [00:38<00:00, 2734.07it/s]100%|██████████| 140000/140000 [00:38<00:00, 3646.91it/s]
  0%|          | 0/20000 [00:00<?, ?it/s]  3%|▎         | 556/20000 [00:00<00:03, 5552.31it/s]  6%|▋         | 1250/20000 [00:00<00:02, 6365.59it/s] 10%|▉         | 1949/20000 [00:00<00:02, 6649.29it/s] 13%|█▎        | 2642/20000 [00:00<00:02, 6757.35it/s] 17%|█▋        | 3330/20000 [00:00<00:02, 6800.33it/s] 20%|██        | 4012/20000 [00:00<00:02, 6804.98it/s] 24%|██▍       | 4788/20000 [00:00<00:02, 7115.08it/s] 28%|██▊       | 5580/20000 [00:00<00:01, 7370.48it/s] 32%|███▏      | 6350/20000 [00:00<00:01, 7471.76it/s] 36%|███▌      | 7122/20000 [00:01<00:01, 7545.36it/s] 39%|███▉      | 7877/20000 [00:01<00:01, 7503.63it/s] 43%|████▎     | 8687/20000 [00:01<00:01, 7683.06it/s] 47%|████▋     | 9456/20000 [00:01<00:01, 7261.00it/s] 51%|█████     | 10187/20000 [00:01<00:01, 7093.11it/s] 55%|█████▍    | 10920/20000 [00:01<00:01, 7160.78it/s] 58%|█████▊    | 11695/20000 [00:01<00:01, 7329.80it/s] 62%|██████▏   | 12453/20000 [00:01<00:01, 7402.40it/s] 66%|██████▌   | 13231/20000 [00:01<00:00, 7512.01it/s] 70%|██████▉   | 13984/20000 [00:01<00:00, 7508.59it/s] 74%|███████▍  | 14783/20000 [00:02<00:00, 7648.82it/s] 78%|███████▊  | 15632/20000 [00:02<00:00, 7897.37it/s] 82%|████████▏ | 16455/20000 [00:02<00:00, 7995.57it/s] 86%|████████▋ | 17256/20000 [00:02<00:00, 7841.91it/s] 90%|█████████ | 18047/20000 [00:02<00:00, 7850.31it/s] 94%|█████████▍| 18868/20000 [00:02<00:00, 7955.47it/s] 98%|█████████▊| 19675/20000 [00:02<00:00, 7986.78it/s]100%|██████████| 20000/20000 [00:02<00:00, 7459.46it/s]
  0%|          | 0/40000 [00:00<?, ?it/s]  2%|▏         | 809/40000 [00:00<00:04, 8083.24it/s]  4%|▍         | 1618/40000 [00:00<00:04, 7991.51it/s]  6%|▌         | 2418/40000 [00:00<00:04, 7572.63it/s]  8%|▊         | 3178/40000 [00:00<00:04, 7574.24it/s] 10%|█         | 4071/40000 [00:00<00:04, 8049.57it/s] 12%|█▏        | 4883/40000 [00:00<00:04, 8071.74it/s] 14%|█▍        | 5771/40000 [00:00<00:04, 8332.83it/s] 17%|█▋        | 6657/40000 [00:00<00:03, 8495.85it/s] 19%|█▉        | 7650/40000 [00:00<00:03, 8937.95it/s] 21%|██▏       | 8545/40000 [00:01<00:03, 8503.80it/s] 24%|██▎       | 9401/40000 [00:01<00:03, 8177.31it/s] 26%|██▌       | 10224/40000 [00:01<00:03, 7921.09it/s] 28%|██▊       | 11021/40000 [00:01<00:03, 7797.95it/s] 30%|██▉       | 11804/40000 [00:01<00:03, 7592.74it/s] 31%|███▏      | 12566/40000 [00:01<00:03, 7465.55it/s] 33%|███▎      | 13314/40000 [00:01<00:03, 7392.62it/s] 35%|███▌      | 14120/40000 [00:01<00:03, 7582.59it/s] 37%|███▋      | 14880/40000 [00:01<00:03, 7545.55it/s] 39%|███▉      | 15636/40000 [00:02<00:03, 6925.86it/s] 41%|████      | 16395/40000 [00:02<00:03, 7108.95it/s] 43%|████▎     | 17137/40000 [00:02<00:03, 7194.47it/s] 45%|████▍     | 17922/40000 [00:02<00:02, 7380.43it/s] 47%|████▋     | 18666/40000 [00:02<00:02, 7352.62it/s] 49%|████▊     | 19405/40000 [00:02<00:02, 7143.96it/s] 50%|█████     | 20123/40000 [00:02<00:02, 7039.98it/s] 52%|█████▏    | 20830/40000 [00:02<00:02, 6984.73it/s] 54%|█████▍    | 21531/40000 [00:02<00:02, 6955.86it/s] 56%|█████▌    | 22228/40000 [00:02<00:02, 6667.92it/s] 57%|█████▋    | 22943/40000 [00:03<00:02, 6803.80it/s] 59%|█████▉    | 23626/40000 [00:03<00:02, 6732.51it/s] 61%|██████    | 24321/40000 [00:03<00:02, 6793.73it/s] 63%|██████▎   | 25002/40000 [00:03<00:02, 6718.05it/s] 64%|██████▍   | 25675/40000 [00:03<00:02, 6208.90it/s] 66%|██████▌   | 26385/40000 [00:03<00:02, 6456.54it/s] 68%|██████▊   | 27130/40000 [00:03<00:01, 6736.57it/s] 70%|██████▉   | 27873/40000 [00:03<00:01, 6934.73it/s] 71%|███████▏  | 28572/40000 [00:03<00:01, 6933.66it/s] 73%|███████▎  | 29302/40000 [00:03<00:01, 7039.28it/s] 75%|███████▌  | 30014/40000 [00:04<00:01, 7062.85it/s] 77%|███████▋  | 30774/40000 [00:04<00:01, 7221.38it/s] 79%|███████▉  | 31524/40000 [00:04<00:01, 7273.54it/s] 81%|████████  | 32303/40000 [00:04<00:01, 7425.06it/s] 83%|████████▎ | 33047/40000 [00:04<00:00, 7355.85it/s] 84%|████████▍ | 33784/40000 [00:04<00:00, 7357.14it/s] 86%|████████▋ | 34547/40000 [00:04<00:00, 7436.45it/s] 88%|████████▊ | 35292/40000 [00:04<00:00, 7373.64it/s] 90%|█████████ | 36030/40000 [00:04<00:00, 7286.25it/s] 92%|█████████▏| 36760/40000 [00:05<00:00, 7155.06it/s] 94%|█████████▍| 37506/40000 [00:05<00:00, 7241.35it/s] 96%|█████████▌| 38291/40000 [00:05<00:00, 7419.40it/s] 98%|█████████▊| 39034/40000 [00:05<00:00, 7103.69it/s] 99%|█████████▉| 39765/40000 [00:05<00:00, 7160.87it/s]100%|██████████| 40000/40000 [00:05<00:00, 7322.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 36.53it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 40.91it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 41.12it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 41.04it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 40.53it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 43.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 39.22it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.93it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.97it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.17it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 26.31it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 36.34it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 33.78it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 32.09it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 31.74it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 30.34it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 31.79it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.25it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 42.50it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 52.04it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.97it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 32.89it/s]Train:  40%|████      | 14/35 [00:00<00:00, 36.08it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.14it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.62it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.70it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.18it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 33.65it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.11it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.32it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 48.00it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 39.30it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.30it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 28.93it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.71it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 32.82it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.35it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.46it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.71it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.25it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 25.92it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 35.50it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 37.04it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 38.46it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.05it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 38.30it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.67it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 44.18it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 57.29it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 28.44it/s]Train:  20%|██        | 7/35 [00:00<00:00, 33.09it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.11it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.75it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 37.45it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 38.14it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 37.43it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 35.48it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 38.00it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.35it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 29.58it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 38.22it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 35.59it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 32.71it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.71it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.79it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 37.60it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.73it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 35.51it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.45it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.77it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.19it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 34.79it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.96it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.51it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.47it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.62it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 23.24it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 29.77it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.16it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 38.48it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 33.11it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 33.84it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 37.76it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.33it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.79it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.11it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.43it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.48it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 30.01it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 35.29it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 37.40it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.16it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 38.65it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 23.84it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 33.28it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.32it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.85it/s]Train:  20%|██        | 7/35 [00:00<00:01, 27.44it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.27it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.72it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 39.02it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 40.39it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.23it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.46it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.73it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.64it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 25.27it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.97it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 36.19it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 37.59it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.49it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 39.20it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.33it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 34.77it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.52it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.28it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.78it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.26it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 37.35it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 36.46it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 37.39it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.32it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 29.82it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.71it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.69it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 43.11it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 35.93it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.55it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.09it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.00it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 36.33it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.51it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.77it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.71it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.60it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 32.69it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.13it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 28.01it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.29it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.86it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 33.74it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.95it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 31.45it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.28it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.52it/s]Train:  20%|██        | 7/35 [00:00<00:01, 27.17it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.95it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.25it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 37.77it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 39.23it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.81it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.82it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 29.65it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.08it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 25.36it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.85it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.30it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.77it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.87it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.92it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.75it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 35.98it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.49it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 26.53it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 35.02it/s]Train:  40%|████      | 14/35 [00:00<00:00, 37.54it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 38.93it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 39.31it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 39.81it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 36.65it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 39.36it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.35it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.44it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 44.58it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 37.88it/s]Train:  40%|████      | 14/35 [00:00<00:00, 36.58it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.46it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 37.53it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 39.02it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 41.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.90it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.46it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.26it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.16it/s]
Current taxi columns: ['start_lon', 'start_lat', 'end_lon', 'end_lat', 'trip_distance', 'taxi_duration']
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 2 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [2, 200]  [4096, 200]     600        400
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           20801
Trainable params       20801
Non-trainable params       0
Mult-Adds              20500
=================================================================
n_classes=2
task=regression
model_name=ny_B_2022-05-21-21-30-26
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/ny_B_2022-05-21-21-30-26.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f9bae71a4c0>, <metric.rmse.RMSE object at 0x7f9bae71a520>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=2, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f9bae71a430>
Epoch 1: Loss:            : Train 0.0466, Val 0.0219, Test 0.0224
          R2_Score         : Train 0.0473, Val 0.5459, Test 0.5476
          RMSE             : Train 421.1207, Val 287.1858, Test 289.9767
Best:
          R2_Score         : Train 0.0473, Val 0.5459, Test 0.5476
          RMSE             : Train 421.1207, Val 287.1858, Test 289.9767
Epoch 2: Loss:            : Train 0.0205, Val 0.0192, Test 0.0196
          R2_Score         : Train 0.5873, Val 0.6035, Test 0.6042
          RMSE             : Train 277.1649, Val 268.3354, Test 271.2271
Best:
          R2_Score         : Train 0.5873, Val 0.6035, Test 0.6042
          RMSE             : Train 277.1649, Val 268.3354, Test 271.2271
Epoch 3: Loss:            : Train 0.0193, Val 0.0189, Test 0.0193
          R2_Score         : Train 0.6097, Val 0.6080, Test 0.6104
          RMSE             : Train 269.5427, Val 266.8106, Test 269.0935
Best:
          R2_Score         : Train 0.6097, Val 0.6080, Test 0.6104
          RMSE             : Train 269.5427, Val 266.8106, Test 269.0935
Epoch 4: Loss:            : Train 0.0192, Val 0.0187, Test 0.0191
          R2_Score         : Train 0.6138, Val 0.6126, Test 0.6151
          RMSE             : Train 268.1129, Val 265.2439, Test 267.4806
Best:
          R2_Score         : Train 0.6138, Val 0.6126, Test 0.6151
          RMSE             : Train 268.1129, Val 265.2439, Test 267.4806
Epoch 5: Loss:            : Train 0.0191, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6154, Val 0.6141, Test 0.6166
          RMSE             : Train 267.5683, Val 264.7375, Test 266.9616
Best:
          R2_Score         : Train 0.6154, Val 0.6141, Test 0.6166
          RMSE             : Train 267.5683, Val 264.7375, Test 266.9616
Epoch 6: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6155, Val 0.6141, Test 0.6165
          RMSE             : Train 267.5407, Val 264.7320, Test 266.9856
Best:
          R2_Score         : Train 0.6155, Val 0.6141, Test 0.6165
          RMSE             : Train 267.5407, Val 264.7320, Test 266.9856
Epoch 7: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6167, Val 0.6152, Test 0.6173
          RMSE             : Train 267.1200, Val 264.3447, Test 266.7085
Best:
          R2_Score         : Train 0.6167, Val 0.6152, Test 0.6173
          RMSE             : Train 267.1200, Val 264.3447, Test 266.7085
Epoch 8: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6174, Val 0.6147, Test 0.6168
          RMSE             : Train 266.8790, Val 264.5239, Test 266.8806
Best:
          R2_Score         : Train 0.6167, Val 0.6152, Test 0.6173
          RMSE             : Train 267.1200, Val 264.3447, Test 266.7085
Epoch 9: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6172, Val 0.6157, Test 0.6177
          RMSE             : Train 266.9374, Val 264.1847, Test 266.5891
Best:
          R2_Score         : Train 0.6172, Val 0.6157, Test 0.6177
          RMSE             : Train 266.9374, Val 264.1847, Test 266.5891
Epoch 10: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6178, Val 0.6147, Test 0.6160
          RMSE             : Train 266.7197, Val 264.5290, Test 267.1549
Best:
          R2_Score         : Train 0.6172, Val 0.6157, Test 0.6177
          RMSE             : Train 266.9374, Val 264.1847, Test 266.5891
Epoch 11: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6177, Val 0.6146, Test 0.6167
          RMSE             : Train 266.7678, Val 264.5581, Test 266.9065
Best:
          R2_Score         : Train 0.6172, Val 0.6157, Test 0.6177
          RMSE             : Train 266.9374, Val 264.1847, Test 266.5891
Epoch 12: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6180, Val 0.6161, Test 0.6179
          RMSE             : Train 266.6694, Val 264.0536, Test 266.5073
Best:
          R2_Score         : Train 0.6180, Val 0.6161, Test 0.6179
          RMSE             : Train 266.6694, Val 264.0536, Test 266.5073
Epoch 13: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6177, Val 0.6163, Test 0.6183
          RMSE             : Train 266.7684, Val 263.9586, Test 266.3799
Best:
          R2_Score         : Train 0.6177, Val 0.6163, Test 0.6183
          RMSE             : Train 266.7684, Val 263.9586, Test 266.3799
Epoch 14: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6185, Val 0.6148, Test 0.6167
          RMSE             : Train 266.4917, Val 264.4739, Test 266.9041
Best:
          R2_Score         : Train 0.6177, Val 0.6163, Test 0.6183
          RMSE             : Train 266.7684, Val 263.9586, Test 266.3799
Epoch 15: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6180, Val 0.6171, Test 0.6186
          RMSE             : Train 266.6672, Val 263.7000, Test 266.2712
Best:
          R2_Score         : Train 0.6180, Val 0.6171, Test 0.6186
          RMSE             : Train 266.6672, Val 263.7000, Test 266.2712
Epoch 16: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6181, Val 0.6153, Test 0.6172
          RMSE             : Train 266.6125, Val 264.3028, Test 266.7298
Best:
          R2_Score         : Train 0.6180, Val 0.6171, Test 0.6186
          RMSE             : Train 266.6672, Val 263.7000, Test 266.2712
Epoch 17: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6184, Val 0.6174, Test 0.6187
          RMSE             : Train 266.5023, Val 263.5921, Test 266.2138
Best:
          R2_Score         : Train 0.6184, Val 0.6174, Test 0.6187
          RMSE             : Train 266.5023, Val 263.5921, Test 266.2138
Epoch 18: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6185, Val 0.6161, Test 0.6176
          RMSE             : Train 266.4689, Val 264.0446, Test 266.5946
Best:
          R2_Score         : Train 0.6184, Val 0.6174, Test 0.6187
          RMSE             : Train 266.5023, Val 263.5921, Test 266.2138
Epoch 19: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6182, Val 0.6173, Test 0.6187
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.55it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.18it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.59it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.47it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.83it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.41it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.85it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 30.38it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.47it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  7.97it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 30.20it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.90it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.66it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.64it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.64it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.55it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 30.91it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.10it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.45it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 28.10it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 25.83it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.96it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 25.27it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.10it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 33.34it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.43it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.77it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.26it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 35.06it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.37it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 49.66it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 59.71it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 16.48it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.59it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 35.49it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 35.86it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 37.25it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 36.29it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.38it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.57it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 28.81it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.77it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.05it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 41.29it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.37it/s]Train:  40%|████      | 14/35 [00:00<00:00, 27.70it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 29.49it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 31.77it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 32.79it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.53it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.34it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.60it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.89it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.45it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.61it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.05it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.06it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.43it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.17it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.30it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.31it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.87it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  7.02it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.15it/s]Train:  20%|██        | 7/35 [00:00<00:01, 19.83it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 24.39it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.54it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.01it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.44it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 32.75it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.50it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.04it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 29.99it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.61it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 30.82it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 35.40it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.02it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.50it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.74it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 32.24it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.79it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 34.52it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.84it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:03, 10.88it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.44it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.56it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.93it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 34.99it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.77it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.08it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 23.63it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.28it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 38.24it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 29.48it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.52it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.27it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 37.12it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 38.34it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.39it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00,  9.71it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 23.00it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.65it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 18.24it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 28.42it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.44it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.32it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.95it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.58it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.52it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 30.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.60it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.40it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 31.52it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.09it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.78it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.39it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 34.57it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 34.54it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.45it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.06it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.30it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.04it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.89it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 17.92it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.40it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.95it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 37.17it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.93it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 38.46it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.05it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 34.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.95it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.82it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.74it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 32.17it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.97it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 31.63it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.10it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 32.74it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.78it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 36.72it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.56it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 40.95it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 35.00it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.75it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.02it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.57it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.21it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 16.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.29it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.08it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.60it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.71it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 30.58it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.95it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.77it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.11it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 37.86it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 25.97it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 33.57it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.79it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.98it/s]Train:  20%|██        | 7/35 [00:00<00:01, 24.73it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.47it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.07it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 33.09it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 33.16it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.20it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 25.66it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.79it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.27it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 24.92it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.94it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 33.47it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 33.11it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.06it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 33.49it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.06it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 35.78it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.63it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.26it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 30.37it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.96it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 38.38it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 38.79it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 39.76it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.63it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.07it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.18it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.12it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 45.02it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 38.67it/s]Train:  40%|████      | 14/35 [00:00<00:00, 37.79it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 37.21it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 38.40it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 40.03it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.74it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.05it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.53it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.35it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 22.12it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.97it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 36.88it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 38.61it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.53it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.63it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 31.09it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.80it/s]Train:  20%|██        | 7/35 [00:00<00:01, 27.85it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 31.03it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.24it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 34.75it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.65it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.90it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.10it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.66it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.53it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 25.58it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.82it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.43it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.47it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.40it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.30it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.80it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 35.59it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.54it/s]
          RMSE             : Train 266.5786, Val 263.6341, Test 266.2077
Best:
          R2_Score         : Train 0.6184, Val 0.6174, Test 0.6187
          RMSE             : Train 266.5023, Val 263.5921, Test 266.2138
Epoch 20: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6178, Val 0.6147, Test 0.6167
          RMSE             : Train 266.7135, Val 264.5356, Test 266.9193
Best:
          R2_Score         : Train 0.6184, Val 0.6174, Test 0.6187
          RMSE             : Train 266.5023, Val 263.5921, Test 266.2138
Epoch 21: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6184, Val 0.6164, Test 0.6178
          RMSE             : Train 266.5028, Val 263.9547, Test 266.5523
Best:
          R2_Score         : Train 0.6184, Val 0.6174, Test 0.6187
          RMSE             : Train 266.5023, Val 263.5921, Test 266.2138
Epoch 22: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6159, Test 0.6176
          RMSE             : Train 266.4269, Val 264.1079, Test 266.5982
Best:
          R2_Score         : Train 0.6184, Val 0.6174, Test 0.6187
          RMSE             : Train 266.5023, Val 263.5921, Test 266.2138
Epoch 23: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6163, Test 0.6182
          RMSE             : Train 266.3677, Val 263.9633, Test 266.3899
Best:
          R2_Score         : Train 0.6184, Val 0.6174, Test 0.6187
          RMSE             : Train 266.5023, Val 263.5921, Test 266.2138
Epoch 24: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6160, Test 0.6180
          RMSE             : Train 266.3115, Val 264.0807, Test 266.4619
Best:
          R2_Score         : Train 0.6184, Val 0.6174, Test 0.6187
          RMSE             : Train 266.5023, Val 263.5921, Test 266.2138
Epoch 25: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 26: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6185, Val 0.6172, Test 0.6188
          RMSE             : Train 266.4978, Val 263.6587, Test 266.1836
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 27: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6164, Test 0.6184
          RMSE             : Train 266.2978, Val 263.9379, Test 266.3132
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 28: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6166, Test 0.6184
          RMSE             : Train 266.2517, Val 263.8731, Test 266.3311
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 29: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6159, Test 0.6176
          RMSE             : Train 266.3957, Val 264.1148, Test 266.6089
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 30: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6163, Test 0.6183
          RMSE             : Train 266.3315, Val 263.9911, Test 266.3790
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 31: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6164, Test 0.6184
          RMSE             : Train 266.4275, Val 263.9295, Test 266.3402
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 32: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6169, Test 0.6188
          RMSE             : Train 266.2678, Val 263.7521, Test 266.1787
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 33: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6160, Test 0.6181
          RMSE             : Train 266.2423, Val 264.0697, Test 266.4334
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 34: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6167, Test 0.6185
          RMSE             : Train 266.2485, Val 263.8373, Test 266.2769
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 35: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6165, Test 0.6178
          RMSE             : Train 266.3216, Val 263.8983, Test 266.5516
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 36: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6167, Test 0.6183
          RMSE             : Train 266.3258, Val 263.8268, Test 266.3660
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 37: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6157, Test 0.6176
          RMSE             : Train 266.2867, Val 264.1962, Test 266.6012
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 38: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6192, Val 0.6153, Test 0.6168
          RMSE             : Train 266.2320, Val 264.3055, Test 266.8822
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3896, Val 263.5772, Test 266.1255
Epoch 39: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 40: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6192, Val 0.6147, Test 0.6167
          RMSE             : Train 266.2347, Val 264.5277, Test 266.9123
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 41: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6167, Test 0.6188
          RMSE             : Train 266.3391, Val 263.8470, Test 266.1735
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 42: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6171, Test 0.6182
          RMSE             : Train 266.3418, Val 263.7057, Test 266.3844

Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 16.45it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 29.18it/s]Train:  40%|████      | 14/35 [00:00<00:00, 35.29it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 37.82it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 37.92it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 38.82it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.53it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.10it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.16it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.12it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.29it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 30.37it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.72it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.83it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.85it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.57it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.69it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.03it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.39it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.99it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.67it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 36.88it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 39.44it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 40.69it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 40.71it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.68it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.18it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.23it/s]Train:  20%|██        | 7/35 [00:00<00:01, 23.80it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 26.59it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.09it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.69it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 34.42it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 25.72it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.34it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.17it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 25.10it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.47it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.82it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.23it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.75it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.02it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.15it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 34.62it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.73it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.58it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 28.82it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.72it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.53it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.94it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 37.38it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 39.24it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.35it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.18it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.44it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.36it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.97it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 30.70it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 31.38it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.15it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.50it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.95it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.30it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.27it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.27it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 16.46it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.79it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.68it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 37.33it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.21it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 39.20it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.10it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 31.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.26it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.72it/s]Train:  20%|██        | 7/35 [00:00<00:01, 21.83it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 25.71it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 29.93it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.59it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 30.31it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.22it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.14it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 31.25it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.56it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.33it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 17.13it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 25.11it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.15it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 33.41it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.46it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 37.88it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 37.31it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 37.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.01it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.08it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.12it/s]Train:  20%|██        | 7/35 [00:00<00:00, 31.69it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 30.95it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.68it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.37it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.63it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.02it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.64it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.63it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.53it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 27.89it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.87it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.38it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.79it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 37.31it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 37.17it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.01it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.07it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 24.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.76it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 14.95it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 24.94it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 29.13it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.58it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.72it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 31.56it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 29.74it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 25.13it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 28.36it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.27it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.64it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 26.47it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 18.87it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 19.37it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 21.93it/s]Train:  69%|██████▊   | 24/35 [00:01<00:00, 23.15it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 25.19it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  6.79it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:01,  7.09it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 19.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 20.81it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 16.11it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 21.56it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 25.12it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 27.54it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 26.55it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 28.21it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.86it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 21.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.04it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:03, 10.01it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 16.64it/s]Train:  40%|████      | 14/35 [00:00<00:01, 20.44it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 24.54it/s]Train:  71%|███████▏  | 25/35 [00:01<00:00, 26.66it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 29.84it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 26.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 19.85it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 26.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 25.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.40it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.40it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 26.31it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 22.09it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.51it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.97it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 31.12it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 33.43it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.60it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 26.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 15.34it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 27.73it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.81it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 17.89it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 32.56it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 31.64it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.97it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.17it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.51it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.87it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.66it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.11it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.78it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.81it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.59it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.13it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.11it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.25it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.80it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.47it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.08it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.16it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 21.72it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.22it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 36.70it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.36it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.53it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 39.21it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.23it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 35.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.74it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 12.79it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.99it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.52it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.81it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 33.89it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.08it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 13.42it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 24.71it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.98it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 45.19it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 37.93it/s]Train:  40%|████      | 14/35 [00:00<00:00, 35.47it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.62it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 34.38it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 36.47it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.90it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.77it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.73it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.21it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 16.61it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 28.11it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.98it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 37.00it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.05it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.85it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.46it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 30.72it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.00it/s]Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 43: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6163, Test 0.6182
          RMSE             : Train 266.3309, Val 263.9624, Test 266.3831
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 44: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6190, Val 0.6149, Test 0.6168
          RMSE             : Train 266.3186, Val 264.4673, Test 266.8988
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 45: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6174, Test 0.6191
          RMSE             : Train 266.1483, Val 263.5962, Test 266.0709
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 46: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6167, Test 0.6186
          RMSE             : Train 266.1617, Val 263.8450, Test 266.2452
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 47: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6160, Test 0.6180
          RMSE             : Train 266.2580, Val 264.0676, Test 266.4535
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 48: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6159, Test 0.6176
          RMSE             : Train 266.2476, Val 264.1227, Test 266.5924
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 49: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6170, Test 0.6191
          RMSE             : Train 266.2096, Val 263.7265, Test 266.0686
Best:
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6191
          RMSE             : Train 266.3856, Val 263.5706, Test 266.0912
Epoch 50: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 51: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6172, Test 0.6191
          RMSE             : Train 266.2076, Val 263.6812, Test 266.0764
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 52: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6153, Test 0.6178
          RMSE             : Train 266.0774, Val 264.3304, Test 266.5374
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 53: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6165, Test 0.6187
          RMSE             : Train 266.1428, Val 263.8914, Test 266.2128
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 54: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6166, Test 0.6188
          RMSE             : Train 266.1165, Val 263.8707, Test 266.1723
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 55: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6172, Test 0.6189
          RMSE             : Train 266.1096, Val 263.6727, Test 266.1435
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 56: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6176, Test 0.6192
          RMSE             : Train 266.1666, Val 263.5272, Test 266.0423
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 57: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6162, Test 0.6181
          RMSE             : Train 266.2389, Val 263.9993, Test 266.4392
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 58: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6161, Test 0.6181
          RMSE             : Train 266.0556, Val 264.0512, Test 266.4374
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 59: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6174, Test 0.6193
          RMSE             : Train 266.1052, Val 263.5997, Test 266.0007
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 60: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6155, Test 0.6174
          RMSE             : Train 266.2322, Val 264.2486, Test 266.6611
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 61: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6152, Test 0.6174
          RMSE             : Train 266.2576, Val 264.3453, Test 266.6689
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 62: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6170, Test 0.6189
          RMSE             : Train 266.1411, Val 263.7386, Test 266.1555
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 63: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6173, Test 0.6187
          RMSE             : Train 266.0049, Val 263.6393, Test 266.2356
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 64: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6170, Test 0.6186
          RMSE             : Train 266.1968, Val 263.7312, Test 266.2600
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 65: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6168, Test 0.6187
          RMSE             : Train 266.0699, Val 263.8184, Test 266.2331
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.10it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 28.77it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 28.67it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.98it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.66it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.26it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.82it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.15it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.31it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.15it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.19it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 28.54it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 26.55it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.18it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 30.93it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 33.12it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.99it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 32.79it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.69it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 35.97it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.69it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.71it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.06it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 27.00it/s]Train:  40%|████      | 14/35 [00:00<00:00, 30.50it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.22it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 36.92it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.35it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.78it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.52it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.44it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.74it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 37.21it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 32.39it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.24it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.94it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.02it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 37.42it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.70it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.82it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.83it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 13.28it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 27.44it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.96it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 37.60it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.53it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 38.46it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.34it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 34.69it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.35it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.87it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 31.76it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.51it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.06it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.99it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.15it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 38.26it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.18it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.79it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.71it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 26.36it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.80it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 37.90it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 40.20it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.77it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 40.66it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.20it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 37.07it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.57it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.29it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.58it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 31.92it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 27.49it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 25.80it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 25.14it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 26.79it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 21.18it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 22.54it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.44it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.89it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 30.95it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.25it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.48it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 31.05it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 30.14it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 30.49it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.14it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.49it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.12it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.84it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 13.74it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 24.94it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.93it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.37it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.07it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.87it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.10it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.32it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.18it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.12it/s]Train:  20%|██        | 7/35 [00:00<00:01, 21.48it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 26.88it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.49it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 34.39it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.77it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.21it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 14.88it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 31.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.42it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 24.21it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 35.78it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 31.43it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 32.54it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 35.09it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.87it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 33.87it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.24it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 32.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.55it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.69it/s]Train:  20%|██        | 7/35 [00:00<00:00, 31.76it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 32.82it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 29.16it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 29.17it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 29.48it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 33.03it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 21.42it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 28.49it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.79it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.96it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 38.54it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 30.12it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.26it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.04it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.65it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 30.71it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.01it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 22.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 10.55it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 25.20it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.96it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 12.42it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 25.27it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.63it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.43it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.56it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 31.25it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.29it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 28.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.29it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.86it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.01it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.62it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 22.95it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 28.52it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 29.96it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 33.03it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  6.76it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.93it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 29.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.97it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.19it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 27.54it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 25.26it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.43it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 29.15it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 31.64it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.77it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 34.64it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.21it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 48.16it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.26it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.82it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 19.04it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.69it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.91it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 38.50it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 39.01it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 40.61it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.18it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 32.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.60it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.12it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 27.04it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 26.32it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.25it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 37.03it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 37.70it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 39.04it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.04it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.32it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 23.50it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.06it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 17.23it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 30.91it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 31.05it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 31.73it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 30.85it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.76it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 32.13it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 32.19it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.74it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.80it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.05it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  7.39it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.01it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.85it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.76it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.26it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 37.07it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 39.15it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.46it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 14.73it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 25.53it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.36it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 27.79it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 20.33it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 24.44it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 28.42it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 31.27it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 31.95it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 33.87it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 43.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.84it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.95it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 13.79it/s]Train:  20%|██        | 7/35 [00:00<00:00, 31.72it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 32.52it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.65it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.04it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 36.03it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 38.04it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.77it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 19.20it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.55it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.51it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 27.94it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 21.86it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.15it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.81it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.98it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 38.68it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.14it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.72it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.58it/s]
Epoch 66: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6171, Test 0.6190
          RMSE             : Train 266.1319, Val 263.6918, Test 266.1047
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 67: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6174, Test 0.6195
          RMSE             : Train 266.0829, Val 263.6104, Test 265.9422
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 68: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6171, Test 0.6192
          RMSE             : Train 266.0108, Val 263.6823, Test 266.0416
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 69: Loss:            : Train 0.0187, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6192, Val 0.6153, Test 0.6171
          RMSE             : Train 266.2521, Val 264.3065, Test 266.7972
Best:
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1181, Val 263.4981, Test 266.0502
Epoch 70: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 71: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6171, Test 0.6193
          RMSE             : Train 266.1576, Val 263.7134, Test 266.0217
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 72: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6174, Test 0.6194
          RMSE             : Train 266.1047, Val 263.6107, Test 265.9923
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 73: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6163, Test 0.6187
          RMSE             : Train 266.0145, Val 263.9777, Test 266.2315
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 74: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6162, Test 0.6180
          RMSE             : Train 266.1271, Val 264.0112, Test 266.4516
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 75: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6161, Test 0.6187
          RMSE             : Train 266.0806, Val 264.0341, Test 266.2291
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 76: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6172, Test 0.6192
          RMSE             : Train 266.0403, Val 263.6647, Test 266.0594
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 77: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6171, Test 0.6190
          RMSE             : Train 266.0411, Val 263.7028, Test 266.1286
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 78: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6198, Val 0.6174, Test 0.6196
          RMSE             : Train 266.0261, Val 263.5900, Test 265.9233
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 79: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6198, Val 0.6176, Test 0.6194
          RMSE             : Train 266.0145, Val 263.5422, Test 265.9796
Best:
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6199
          RMSE             : Train 266.1137, Val 263.4490, Test 265.8055
Epoch 80: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 81: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6167, Test 0.6187
          RMSE             : Train 266.0832, Val 263.8395, Test 266.2309
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 82: Loss:            : Train 0.0187, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6172, Test 0.6188
          RMSE             : Train 265.9077, Val 263.6766, Test 266.1770
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 83: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6169, Test 0.6190
          RMSE             : Train 266.0667, Val 263.7569, Test 266.1124
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 84: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6199, Val 0.6178, Test 0.6197
          RMSE             : Train 266.0104, Val 263.4553, Test 265.8812
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 85: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6163, Test 0.6178
          RMSE             : Train 265.8778, Val 263.9585, Test 266.5305
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 86: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6171, Test 0.6189
          RMSE             : Train 265.8754, Val 263.6974, Test 266.1434
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 87: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6170, Test 0.6185
          RMSE             : Train 265.9817, Val 263.7266, Test 266.2902
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 88: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6179, Test 0.6196
          RMSE             : Train 265.9301, Val 263.4310, Test 265.9066
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 89: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6201, Val 0.6168, Test 0.6187
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.67it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 16.62it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 23.43it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 29.70it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 29.68it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 29.88it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 30.95it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.08it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.70it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 28.98it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.56it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.13it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 20.09it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 27.40it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.39it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.99it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.97it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.43it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.40it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.83it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.25it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.11it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.92it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.40it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.58it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 37.99it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.85it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 38.70it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.55it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.16it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.86it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.07it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.10it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.36it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 37.16it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 38.35it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 39.85it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.33it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.46it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.26it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.26it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 17.09it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 21.09it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.75it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.21it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.20it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 38.79it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.66it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 13.57it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 26.34it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.05it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 12.35it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 25.79it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.65it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.02it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.87it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 38.73it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 32.18it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 29.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.37it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.89it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 28.60it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.29it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.68it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.75it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 38.28it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 39.32it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.44it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 10.83it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.63it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.76it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 22.27it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 22.25it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.15it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.94it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 38.46it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.53it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 38.85it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.48it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.15it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.51it/s]Train:  20%|██        | 7/35 [00:00<00:00, 35.14it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 36.05it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 36.65it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.45it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 37.50it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 39.98it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.59it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.09it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.12it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 38.01it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 35.50it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 36.65it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.34it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 38.16it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 40.44it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.14it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.69it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 32.30it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.08it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 13.87it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 28.62it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.58it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.96it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.73it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 37.60it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.48it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.06it/s]

          RMSE             : Train 265.9376, Val 263.7975, Test 266.2124
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 90: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6166, Test 0.6191
          RMSE             : Train 265.9948, Val 263.8667, Test 266.0726
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 91: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6178, Test 0.6198
          RMSE             : Train 266.0916, Val 263.4473, Test 265.8482
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 92: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6170, Test 0.6192
          RMSE             : Train 265.8754, Val 263.7490, Test 266.0450
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 93: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6200, Val 0.6177, Test 0.6199
          RMSE             : Train 265.9512, Val 263.5051, Test 265.8127
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 94: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6198, Val 0.6177, Test 0.6195
          RMSE             : Train 266.0391, Val 263.5047, Test 265.9460
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 95: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6203, Val 0.6166, Test 0.6186
          RMSE             : Train 265.8399, Val 263.8686, Test 266.2435
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 96: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6200, Val 0.6177, Test 0.6194
          RMSE             : Train 265.9513, Val 263.4889, Test 265.9913
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 97: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6204, Val 0.6171, Test 0.6191
          RMSE             : Train 265.8117, Val 263.7086, Test 266.0786
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 98: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6202, Val 0.6174, Test 0.6195
          RMSE             : Train 265.8814, Val 263.5979, Test 265.9576
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 99: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6178, Test 0.6198
          RMSE             : Train 265.9096, Val 263.4553, Test 265.8417
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
Epoch 100: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6202, Val 0.6179, Test 0.6200
          RMSE             : Train 265.8797, Val 263.4368, Test 265.7538
Best:
          R2_Score         : Train 0.6197, Val 0.6181, Test 0.6198
          RMSE             : Train 266.0625, Val 263.3716, Test 265.8322
