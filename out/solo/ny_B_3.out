Loading bike from data/nytaxi/bike_201606_clean_sample_2e5.pkl
Loaded.
Loading taxi from data/nytaxi/taxi_201606_clean_sample_1e5.pkl
Loaded.
Current bike columns: ['age', 'gender_1', 'gender_2', 'sid_79', 'sid_82', 'sid_83', 'sid_116', 'sid_119', 'sid_120', 'sid_127', 'sid_128', 'sid_137', 'sid_143', 'sid_144', 'sid_146', 'sid_147', 'sid_150', 'sid_151', 'sid_152', 'sid_153', 'sid_157', 'sid_161', 'sid_164', 'sid_167', 'sid_168', 'sid_173', 'sid_174', 'sid_195', 'sid_212', 'sid_216', 'sid_217', 'sid_223', 'sid_224', 'sid_225', 'sid_228', 'sid_229', 'sid_232', 'sid_233', 'sid_236', 'sid_237', 'sid_238', 'sid_239', 'sid_241', 'sid_242', 'sid_243', 'sid_244', 'sid_245', 'sid_247', 'sid_248', 'sid_249', 'sid_250', 'sid_251', 'sid_252', 'sid_253', 'sid_254', 'sid_257', 'sid_258', 'sid_259', 'sid_260', 'sid_261', 'sid_262', 'sid_263', 'sid_264', 'sid_265', 'sid_266', 'sid_267', 'sid_268', 'sid_270', 'sid_274', 'sid_275', 'sid_276', 'sid_278', 'sid_279', 'sid_280', 'sid_281', 'sid_282', 'sid_284', 'sid_285', 'sid_289', 'sid_291', 'sid_293', 'sid_295', 'sid_296', 'sid_297', 'sid_298', 'sid_300', 'sid_301', 'sid_302', 'sid_303', 'sid_304', 'sid_305', 'sid_306', 'sid_307', 'sid_308', 'sid_309', 'sid_310', 'sid_311', 'sid_312', 'sid_313', 'sid_315', 'sid_316', 'sid_317', 'sid_319', 'sid_320', 'sid_321', 'sid_322', 'sid_323', 'sid_324', 'sid_325', 'sid_326', 'sid_327', 'sid_328', 'sid_329', 'sid_330', 'sid_331', 'sid_332', 'sid_334', 'sid_335', 'sid_336', 'sid_337', 'sid_339', 'sid_340', 'sid_341', 'sid_342', 'sid_343', 'sid_344', 'sid_345', 'sid_346', 'sid_347', 'sid_348', 'sid_349', 'sid_350', 'sid_351', 'sid_352', 'sid_353', 'sid_354', 'sid_355', 'sid_356', 'sid_357', 'sid_358', 'sid_359', 'sid_360', 'sid_361', 'sid_362', 'sid_363', 'sid_364', 'sid_365', 'sid_366', 'sid_367', 'sid_368', 'sid_369', 'sid_372', 'sid_373', 'sid_375', 'sid_376', 'sid_377', 'sid_379', 'sid_380', 'sid_382', 'sid_383', 'sid_384', 'sid_385', 'sid_386', 'sid_387', 'sid_388', 'sid_389', 'sid_390', 'sid_391', 'sid_392', 'sid_393', 'sid_394', 'sid_395', 'sid_396', 'sid_397', 'sid_398', 'sid_399', 'sid_400', 'sid_401', 'sid_402', 'sid_405', 'sid_406', 'sid_407', 'sid_408', 'sid_409', 'sid_410', 'sid_411', 'sid_412', 'sid_414', 'sid_415', 'sid_416', 'sid_417', 'sid_418', 'sid_419', 'sid_420', 'sid_421', 'sid_422', 'sid_423', 'sid_426', 'sid_427', 'sid_428', 'sid_430', 'sid_432', 'sid_433', 'sid_434', 'sid_435', 'sid_436', 'sid_437', 'sid_438', 'sid_439', 'sid_440', 'sid_441', 'sid_442', 'sid_443', 'sid_444', 'sid_445', 'sid_446', 'sid_447', 'sid_448', 'sid_449', 'sid_450', 'sid_453', 'sid_454', 'sid_455', 'sid_456', 'sid_457', 'sid_458', 'sid_459', 'sid_460', 'sid_461', 'sid_462', 'sid_465', 'sid_466', 'sid_467', 'sid_468', 'sid_469', 'sid_470', 'sid_471', 'sid_472', 'sid_473', 'sid_474', 'sid_475', 'sid_476', 'sid_477', 'sid_478', 'sid_479', 'sid_480', 'sid_481', 'sid_482', 'sid_483', 'sid_484', 'sid_485', 'sid_486', 'sid_487', 'sid_488', 'sid_490', 'sid_491', 'sid_492', 'sid_493', 'sid_494', 'sid_495', 'sid_496', 'sid_497', 'sid_498', 'sid_499', 'sid_500', 'sid_501', 'sid_502', 'sid_503', 'sid_504', 'sid_505', 'sid_507', 'sid_508', 'sid_509', 'sid_510', 'sid_511', 'sid_513', 'sid_514', 'sid_515', 'sid_516', 'sid_517', 'sid_518', 'sid_519', 'sid_520', 'sid_522', 'sid_523', 'sid_524', 'sid_525', 'sid_526', 'sid_527', 'sid_528', 'sid_529', 'sid_530', 'sid_531', 'sid_532', 'sid_533', 'sid_534', 'sid_536', 'sid_537', 'sid_539', 'sid_540', 'sid_545', 'sid_546', 'sid_2000', 'sid_2001', 'sid_2002', 'sid_2003', 'sid_2004', 'sid_2005', 'sid_2006', 'sid_2008', 'sid_2009', 'sid_2010', 'sid_2012', 'sid_2017', 'sid_2021', 'sid_2022', 'sid_2023', 'sid_3002', 'sid_3016', 'sid_3041', 'sid_3042', 'sid_3043', 'sid_3044', 'sid_3046', 'sid_3047', 'sid_3048', 'sid_3049', 'sid_3050', 'sid_3052', 'sid_3053', 'sid_3054', 'sid_3055', 'sid_3056', 'sid_3057', 'sid_3058', 'sid_3059', 'sid_3060', 'sid_3061', 'sid_3062', 'sid_3063', 'sid_3064', 'sid_3065', 'sid_3066', 'sid_3067', 'sid_3068', 'sid_3069', 'sid_3070', 'sid_3071', 'sid_3072', 'sid_3073', 'sid_3074', 'sid_3075', 'sid_3076', 'sid_3077', 'sid_3078', 'sid_3079', 'sid_3080', 'sid_3081', 'sid_3082', 'sid_3083', 'sid_3084', 'sid_3085', 'sid_3086', 'sid_3087', 'sid_3088', 'sid_3089', 'sid_3090', 'sid_3091', 'sid_3092', 'sid_3093', 'sid_3094', 'sid_3095', 'sid_3096', 'sid_3098', 'sid_3099', 'sid_3100', 'sid_3101', 'sid_3102', 'sid_3103', 'sid_3105', 'sid_3106', 'sid_3107', 'sid_3108', 'sid_3109', 'sid_3110', 'sid_3111', 'sid_3112', 'sid_3113', 'sid_3114', 'sid_3115', 'sid_3116', 'sid_3117', 'sid_3118', 'sid_3119', 'sid_3120', 'sid_3121', 'sid_3122', 'sid_3123', 'sid_3124', 'sid_3125', 'sid_3126', 'sid_3127', 'sid_3128', 'sid_3129', 'sid_3131', 'sid_3132', 'sid_3134', 'sid_3135', 'sid_3136', 'sid_3137', 'sid_3138', 'sid_3139', 'sid_3140', 'sid_3141', 'sid_3142', 'sid_3143', 'sid_3144', 'sid_3145', 'sid_3146', 'sid_3147', 'sid_3148', 'sid_3150', 'sid_3151', 'sid_3152', 'sid_3153', 'sid_3154', 'sid_3155', 'sid_3156', 'sid_3157', 'sid_3158', 'sid_3159', 'sid_3160', 'sid_3161', 'sid_3162', 'sid_3163', 'sid_3164', 'sid_3165', 'sid_3166', 'sid_3167', 'sid_3168', 'sid_3169', 'sid_3170', 'sid_3171', 'sid_3172', 'sid_3173', 'sid_3175', 'sid_3176', 'sid_3177', 'sid_3178', 'sid_3179', 'sid_3180', 'sid_3182', 'sid_3221', 'sid_3222', 'sid_3223', 'sid_3224', 'sid_3226', 'sid_3230', 'sid_3231', 'sid_3232', 'sid_3233', 'sid_3235', 'sid_3236', 'sid_3237', 'sid_3238', 'sid_3241', 'sid_3242', 'sid_3243', 'sid_3244', 'sid_3246', 'sid_3249', 'sid_3254', 'sid_3255', 'sid_3256', 'sid_3257', 'sid_3259', 'sid_3260', 'eid_79', 'eid_82', 'eid_83', 'eid_116', 'eid_119', 'eid_120', 'eid_127', 'eid_128', 'eid_137', 'eid_143', 'eid_144', 'eid_146', 'eid_147', 'eid_150', 'eid_151', 'eid_152', 'eid_153', 'eid_157', 'eid_161', 'eid_164', 'eid_167', 'eid_168', 'eid_173', 'eid_174', 'eid_195', 'eid_212', 'eid_216', 'eid_217', 'eid_223', 'eid_224', 'eid_225', 'eid_228', 'eid_229', 'eid_232', 'eid_233', 'eid_236', 'eid_237', 'eid_238', 'eid_239', 'eid_241', 'eid_242', 'eid_243', 'eid_244', 'eid_245', 'eid_247', 'eid_248', 'eid_249', 'eid_250', 'eid_251', 'eid_252', 'eid_253', 'eid_254', 'eid_255', 'eid_257', 'eid_258', 'eid_259', 'eid_260', 'eid_261', 'eid_262', 'eid_263', 'eid_264', 'eid_265', 'eid_266', 'eid_267', 'eid_268', 'eid_270', 'eid_274', 'eid_275', 'eid_276', 'eid_278', 'eid_279', 'eid_280', 'eid_281', 'eid_282', 'eid_284', 'eid_285', 'eid_289', 'eid_291', 'eid_293', 'eid_295', 'eid_296', 'eid_297', 'eid_298', 'eid_300', 'eid_301', 'eid_302', 'eid_303', 'eid_304', 'eid_305', 'eid_306', 'eid_307', 'eid_308', 'eid_309', 'eid_310', 'eid_311', 'eid_312', 'eid_313', 'eid_315', 'eid_316', 'eid_317', 'eid_319', 'eid_320', 'eid_321', 'eid_322', 'eid_323', 'eid_324', 'eid_325', 'eid_326', 'eid_327', 'eid_328', 'eid_329', 'eid_330', 'eid_331', 'eid_332', 'eid_334', 'eid_335', 'eid_336', 'eid_337', 'eid_339', 'eid_340', 'eid_341', 'eid_342', 'eid_343', 'eid_344', 'eid_345', 'eid_346', 'eid_347', 'eid_348', 'eid_349', 'eid_350', 'eid_351', 'eid_352', 'eid_353', 'eid_354', 'eid_355', 'eid_356', 'eid_357', 'eid_358', 'eid_359', 'eid_360', 'eid_361', 'eid_362', 'eid_363', 'eid_364', 'eid_365', 'eid_366', 'eid_367', 'eid_368', 'eid_369', 'eid_372', 'eid_373', 'eid_375', 'eid_376', 'eid_377', 'eid_379', 'eid_380', 'eid_382', 'eid_383', 'eid_384', 'eid_385', 'eid_386', 'eid_387', 'eid_388', 'eid_389', 'eid_390', 'eid_391', 'eid_392', 'eid_393', 'eid_394', 'eid_395', 'eid_396', 'eid_397', 'eid_398', 'eid_399', 'eid_400', 'eid_401', 'eid_402', 'eid_405', 'eid_406', 'eid_407', 'eid_408', 'eid_409', 'eid_410', 'eid_411', 'eid_412', 'eid_414', 'eid_415', 'eid_416', 'eid_417', 'eid_418', 'eid_419', 'eid_420', 'eid_421', 'eid_422', 'eid_423', 'eid_426', 'eid_427', 'eid_428', 'eid_430', 'eid_432', 'eid_433', 'eid_434', 'eid_435', 'eid_436', 'eid_437', 'eid_438', 'eid_439', 'eid_440', 'eid_441', 'eid_442', 'eid_443', 'eid_444', 'eid_445', 'eid_446', 'eid_447', 'eid_448', 'eid_449', 'eid_450', 'eid_453', 'eid_454', 'eid_455', 'eid_456', 'eid_457', 'eid_458', 'eid_459', 'eid_460', 'eid_461', 'eid_462', 'eid_465', 'eid_466', 'eid_467', 'eid_468', 'eid_469', 'eid_470', 'eid_471', 'eid_472', 'eid_473', 'eid_474', 'eid_475', 'eid_476', 'eid_477', 'eid_478', 'eid_479', 'eid_480', 'eid_481', 'eid_482', 'eid_483', 'eid_484', 'eid_485', 'eid_486', 'eid_487', 'eid_488', 'eid_490', 'eid_491', 'eid_492', 'eid_493', 'eid_494', 'eid_495', 'eid_496', 'eid_497', 'eid_498', 'eid_499', 'eid_500', 'eid_501', 'eid_502', 'eid_503', 'eid_504', 'eid_505', 'eid_507', 'eid_508', 'eid_509', 'eid_510', 'eid_511', 'eid_513', 'eid_514', 'eid_515', 'eid_516', 'eid_517', 'eid_518', 'eid_519', 'eid_520', 'eid_522', 'eid_523', 'eid_524', 'eid_525', 'eid_526', 'eid_527', 'eid_528', 'eid_529', 'eid_530', 'eid_531', 'eid_532', 'eid_533', 'eid_534', 'eid_536', 'eid_537', 'eid_539', 'eid_540', 'eid_545', 'eid_546', 'eid_2000', 'eid_2001', 'eid_2002', 'eid_2003', 'eid_2004', 'eid_2005', 'eid_2006', 'eid_2008', 'eid_2009', 'eid_2010', 'eid_2012', 'eid_2017', 'eid_2021', 'eid_2022', 'eid_2023', 'eid_3002', 'eid_3016', 'eid_3017', 'eid_3041', 'eid_3042', 'eid_3043', 'eid_3044', 'eid_3046', 'eid_3047', 'eid_3048', 'eid_3049', 'eid_3050', 'eid_3052', 'eid_3053', 'eid_3054', 'eid_3055', 'eid_3056', 'eid_3057', 'eid_3058', 'eid_3059', 'eid_3060', 'eid_3061', 'eid_3062', 'eid_3063', 'eid_3064', 'eid_3065', 'eid_3066', 'eid_3067', 'eid_3068', 'eid_3069', 'eid_3070', 'eid_3071', 'eid_3072', 'eid_3073', 'eid_3074', 'eid_3075', 'eid_3076', 'eid_3077', 'eid_3078', 'eid_3079', 'eid_3080', 'eid_3081', 'eid_3082', 'eid_3083', 'eid_3084', 'eid_3085', 'eid_3086', 'eid_3087', 'eid_3088', 'eid_3089', 'eid_3090', 'eid_3091', 'eid_3092', 'eid_3093', 'eid_3094', 'eid_3095', 'eid_3096', 'eid_3098', 'eid_3099', 'eid_3100', 'eid_3101', 'eid_3102', 'eid_3103', 'eid_3105', 'eid_3106', 'eid_3107', 'eid_3108', 'eid_3109', 'eid_3110', 'eid_3111', 'eid_3112', 'eid_3113', 'eid_3114', 'eid_3115', 'eid_3116', 'eid_3117', 'eid_3118', 'eid_3119', 'eid_3120', 'eid_3121', 'eid_3122', 'eid_3123', 'eid_3124', 'eid_3125', 'eid_3126', 'eid_3127', 'eid_3128', 'eid_3129', 'eid_3131', 'eid_3132', 'eid_3134', 'eid_3135', 'eid_3136', 'eid_3137', 'eid_3138', 'eid_3139', 'eid_3140', 'eid_3141', 'eid_3142', 'eid_3143', 'eid_3144', 'eid_3145', 'eid_3146', 'eid_3147', 'eid_3148', 'eid_3150', 'eid_3151', 'eid_3152', 'eid_3153', 'eid_3154', 'eid_3155', 'eid_3156', 'eid_3157', 'eid_3158', 'eid_3159', 'eid_3160', 'eid_3161', 'eid_3162', 'eid_3163', 'eid_3164', 'eid_3165', 'eid_3166', 'eid_3167', 'eid_3168', 'eid_3169', 'eid_3170', 'eid_3171', 'eid_3172', 'eid_3173', 'eid_3175', 'eid_3176', 'eid_3177', 'eid_3178', 'eid_3179', 'eid_3180', 'eid_3182', 'eid_3183', 'eid_3184', 'eid_3192', 'eid_3219', 'eid_3221', 'eid_3222', 'eid_3223', 'eid_3224', 'eid_3226', 'eid_3230', 'eid_3231', 'eid_3232', 'eid_3233', 'eid_3235', 'eid_3236', 'eid_3237', 'eid_3238', 'eid_3240', 'eid_3241', 'eid_3242', 'eid_3243', 'eid_3244', 'eid_3246', 'eid_3249', 'eid_3250', 'eid_3252', 'eid_3254', 'eid_3255', 'eid_3256', 'eid_3257', 'eid_3259', 'eid_3260', 'start_lon', 'start_lat', 'end_lon', 'end_lat']  0%|          | 0/140000 [00:00<?, ?it/s]  0%|          | 1/140000 [00:00<4:07:38,  9.42it/s]  1%|          | 768/140000 [00:00<00:31, 4402.49it/s]  1%|          | 1461/140000 [00:00<00:25, 5540.33it/s]  2%|▏         | 2102/140000 [00:00<00:23, 5879.09it/s]  2%|▏         | 2879/140000 [00:00<00:20, 6556.91it/s]  3%|▎         | 3712/140000 [00:00<00:19, 7155.24it/s]  3%|▎         | 4861/140000 [00:00<00:15, 8568.39it/s]  8%|▊         | 11038/140000 [00:00<00:05, 25471.98it/s] 11%|█         | 15106/140000 [00:00<00:04, 30210.29it/s] 13%|█▎        | 18131/140000 [00:01<00:07, 17048.34it/s] 15%|█▍        | 20489/140000 [00:01<00:08, 13592.87it/s] 16%|█▌        | 22387/140000 [00:01<00:09, 12104.12it/s] 17%|█▋        | 23976/140000 [00:01<00:10, 11084.44it/s] 18%|█▊        | 25340/140000 [00:02<00:11, 9950.86it/s]  19%|█▉        | 26508/140000 [00:02<00:12, 9385.53it/s] 20%|█▉        | 27556/140000 [00:02<00:12, 8856.04it/s] 20%|██        | 28507/140000 [00:02<00:12, 8779.44it/s] 21%|██        | 29428/140000 [00:02<00:12, 8647.16it/s] 22%|██▏       | 30320/140000 [00:02<00:13, 8240.89it/s] 22%|██▏       | 31159/140000 [00:02<00:13, 7845.47it/s] 23%|██▎       | 31991/140000 [00:02<00:13, 7960.89it/s] 23%|██▎       | 32810/140000 [00:03<00:13, 8019.59it/s] 24%|██▍       | 33690/140000 [00:03<00:12, 8228.42it/s] 25%|██▍       | 34529/140000 [00:03<00:12, 8271.50it/s] 25%|██▌       | 35429/140000 [00:03<00:12, 8477.39it/s] 26%|██▌       | 36354/140000 [00:03<00:11, 8697.93it/s] 27%|██▋       | 37236/140000 [00:03<00:11, 8730.39it/s] 27%|██▋       | 38112/140000 [00:03<00:12, 8112.30it/s] 28%|██▊       | 38934/140000 [00:03<00:13, 7756.69it/s] 28%|██▊       | 39719/140000 [00:03<00:13, 7499.49it/s] 29%|██▉       | 40476/140000 [00:04<00:13, 7299.70it/s] 29%|██▉       | 41224/140000 [00:04<00:13, 7348.35it/s] 30%|██▉       | 41985/140000 [00:04<00:13, 7421.27it/s] 31%|███       | 42758/140000 [00:04<00:12, 7509.44it/s] 31%|███       | 43512/140000 [00:04<00:12, 7447.85it/s] 32%|███▏      | 44259/140000 [00:04<00:13, 7203.09it/s] 32%|███▏      | 44982/140000 [00:04<00:13, 6987.93it/s] 33%|███▎      | 45684/140000 [00:04<00:13, 6972.29it/s] 33%|███▎      | 46420/140000 [00:04<00:13, 7082.73it/s] 34%|███▎      | 47136/140000 [00:04<00:13, 7103.08it/s] 34%|███▍      | 47848/140000 [00:05<00:13, 6651.55it/s] 35%|███▍      | 48520/140000 [00:05<00:14, 6516.88it/s] 35%|███▌      | 49223/140000 [00:05<00:13, 6659.27it/s] 36%|███▌      | 49911/140000 [00:05<00:13, 6721.56it/s] 36%|███▌      | 50614/140000 [00:05<00:13, 6811.20it/s] 37%|███▋      | 51349/140000 [00:05<00:12, 6968.69it/s] 37%|███▋      | 52069/140000 [00:05<00:12, 7034.72it/s] 38%|███▊      | 52811/140000 [00:05<00:12, 7146.22it/s] 38%|███▊      | 53582/140000 [00:05<00:11, 7311.72it/s] 39%|███▉      | 54382/140000 [00:06<00:11, 7515.86it/s] 39%|███▉      | 55200/140000 [00:06<00:10, 7711.44it/s] 40%|████      | 56019/140000 [00:06<00:10, 7853.51it/s] 41%|████      | 56835/140000 [00:06<00:10, 7942.46it/s] 41%|████      | 57696/140000 [00:06<00:10, 8142.02it/s] 42%|████▏     | 58558/140000 [00:06<00:09, 8282.72it/s] 42%|████▏     | 59423/140000 [00:06<00:09, 8392.33it/s] 43%|████▎     | 60299/140000 [00:06<00:09, 8501.15it/s] 44%|████▎     | 61150/140000 [00:06<00:09, 8452.10it/s] 44%|████▍     | 61996/140000 [00:06<00:09, 8415.81it/s] 45%|████▍     | 62838/140000 [00:07<00:09, 8244.69it/s] 45%|████▌     | 63664/140000 [00:07<00:09, 7664.65it/s] 46%|████▌     | 64439/140000 [00:07<00:10, 7475.44it/s] 47%|████▋     | 65254/140000 [00:07<00:09, 7663.08it/s] 47%|████▋     | 66026/140000 [00:07<00:10, 7331.11it/s] 48%|████▊     | 66765/140000 [00:07<00:10, 7050.93it/s] 48%|████▊     | 67551/140000 [00:07<00:09, 7274.15it/s] 49%|████▉     | 68340/140000 [00:07<00:09, 7448.10it/s] 49%|████▉     | 69090/140000 [00:07<00:09, 7244.93it/s] 50%|████▉     | 69819/140000 [00:08<00:09, 7086.09it/s] 50%|█████     | 70531/140000 [00:08<00:10, 6659.51it/s] 51%|█████     | 71253/140000 [00:08<00:10, 6813.16it/s] 51%|█████▏    | 72033/140000 [00:08<00:09, 7091.66it/s] 52%|█████▏    | 72798/140000 [00:08<00:09, 7250.64it/s] 53%|█████▎    | 73536/140000 [00:08<00:09, 7288.04it/s] 53%|█████▎    | 74269/140000 [00:08<00:09, 7245.14it/s] 54%|█████▎    | 74996/140000 [00:08<00:09, 7096.27it/s] 54%|█████▍    | 75708/140000 [00:08<00:09, 6994.84it/s] 55%|█████▍    | 76409/140000 [00:08<00:09, 6967.91it/s] 55%|█████▌    | 77107/140000 [00:09<00:09, 6953.15it/s] 56%|█████▌    | 77837/140000 [00:09<00:08, 7052.92it/s] 56%|█████▌    | 78543/140000 [00:09<00:08, 6993.49it/s] 57%|█████▋    | 79264/140000 [00:09<00:08, 7054.39it/s] 57%|█████▋    | 79974/140000 [00:09<00:08, 7066.56it/s] 58%|█████▊    | 80718/140000 [00:09<00:08, 7175.76it/s] 58%|█████▊    | 81510/140000 [00:09<00:07, 7396.37it/s] 59%|█████▉    | 82256/140000 [00:09<00:07, 7409.68it/s] 59%|█████▉    | 83029/140000 [00:09<00:07, 7501.28it/s] 60%|█████▉    | 83780/140000 [00:09<00:07, 7196.84it/s] 60%|██████    | 84503/140000 [00:10<00:08, 6818.14it/s] 61%|██████    | 85191/140000 [00:10<00:08, 6785.66it/s] 61%|██████▏   | 85874/140000 [00:10<00:08, 6514.52it/s] 62%|██████▏   | 86533/140000 [00:10<00:08, 6533.02it/s] 62%|██████▏   | 87192/140000 [00:10<00:08, 6548.92it/s] 63%|██████▎   | 87893/140000 [00:10<00:07, 6681.31it/s] 63%|██████▎   | 88656/140000 [00:10<00:07, 6958.88it/s] 64%|██████▍   | 89444/140000 [00:10<00:06, 7230.47it/s] 64%|██████▍   | 90179/140000 [00:10<00:06, 7263.20it/s] 65%|██████▍   | 90907/140000 [00:11<00:07, 6715.98it/s] 65%|██████▌   | 91588/140000 [00:11<00:07, 6562.65it/s] 66%|██████▌   | 92288/140000 [00:11<00:07, 6674.22it/s] 66%|██████▋   | 93014/140000 [00:11<00:06, 6840.73it/s] 67%|██████▋   | 93703/140000 [00:11<00:06, 6803.61it/s] 67%|██████▋   | 94457/140000 [00:11<00:06, 7016.71it/s] 68%|██████▊   | 95265/140000 [00:11<00:06, 7327.09it/s] 69%|██████▊   | 96124/140000 [00:11<00:05, 7699.50it/s] 69%|██████▉   | 96992/140000 [00:11<00:05, 7989.03it/s] 70%|██████▉   | 97854/140000 [00:11<00:05, 8175.83it/s] 71%|███████   | 98730/140000 [00:12<00:04, 8349.84it/s] 71%|███████   | 99567/140000 [00:12<00:05, 7951.89it/s] 72%|███████▏  | 100367/140000 [00:12<00:05, 7920.02it/s] 72%|███████▏  | 101163/140000 [00:12<00:05, 7504.72it/s] 73%|███████▎  | 101920/140000 [00:12<00:05, 7272.21it/s] 73%|███████▎  | 102652/140000 [00:12<00:05, 7094.81it/s] 74%|███████▍  | 103492/140000 [00:12<00:04, 7459.66it/s] 74%|███████▍  | 104243/140000 [00:12<00:04, 7215.46it/s] 75%|███████▍  | 104969/140000 [00:12<00:05, 6813.82it/s] 76%|███████▌  | 105780/140000 [00:13<00:04, 7170.29it/s] 76%|███████▌  | 106530/140000 [00:13<00:04, 7262.97it/s] 77%|███████▋  | 107317/140000 [00:13<00:04, 7436.24it/s] 78%|███████▊  | 108681/140000 [00:13<00:03, 9241.58it/s] 79%|███████▊  | 110241/140000 [00:13<00:02, 11108.11it/s] 80%|███████▉  | 111876/140000 [00:13<00:02, 12656.37it/s] 81%|████████  | 113520/140000 [00:13<00:01, 13777.62it/s] 82%|████████▏ | 115171/140000 [00:13<00:01, 14589.67it/s] 83%|████████▎ | 116786/140000 [00:13<00:01, 15054.78it/s] 85%|████████▍ | 118491/140000 [00:13<00:01, 15648.63it/s] 86%|████████▌ | 120141/140000 [00:14<00:01, 15902.77it/s] 87%|████████▋ | 121858/140000 [00:14<00:01, 16279.59it/s] 88%|████████▊ | 123488/140000 [00:14<00:01, 14311.72it/s] 89%|████████▉ | 124964/140000 [00:14<00:01, 13975.59it/s] 90%|█████████ | 126393/140000 [00:14<00:00, 13851.75it/s] 91%|█████████▏| 127800/140000 [00:14<00:00, 13034.38it/s] 93%|█████████▎| 129554/140000 [00:14<00:00, 14256.94it/s] 94%|█████████▎| 131125/140000 [00:14<00:00, 14662.71it/s] 95%|█████████▍| 132614/140000 [00:14<00:00, 14268.35it/s] 96%|█████████▌| 134182/140000 [00:15<00:00, 14667.26it/s] 97%|█████████▋| 135867/140000 [00:15<00:00, 15294.04it/s] 98%|█████████▊| 137567/140000 [00:15<00:00, 15789.03it/s] 99%|█████████▉| 139281/140000 [00:15<00:00, 16185.45it/s]100%|██████████| 140000/140000 [00:15<00:00, 9093.89it/s] 
  0%|          | 0/20000 [00:00<?, ?it/s] 33%|███▎      | 6518/20000 [00:00<00:00, 65170.12it/s] 65%|██████▌   | 13053/20000 [00:00<00:00, 65269.00it/s] 98%|█████████▊| 19580/20000 [00:00<00:00, 65072.42it/s]100%|██████████| 20000/20000 [00:00<00:00, 65091.14it/s]
  0%|          | 0/40000 [00:00<?, ?it/s]  5%|▌         | 2136/40000 [00:00<00:01, 21353.76it/s] 11%|█         | 4272/40000 [00:00<00:01, 20064.78it/s] 16%|█▌        | 6370/40000 [00:00<00:01, 20464.77it/s] 21%|██        | 8427/40000 [00:00<00:01, 20502.68it/s] 26%|██▌       | 10480/40000 [00:00<00:01, 18106.13it/s] 31%|███       | 12332/40000 [00:00<00:01, 17791.67it/s] 35%|███▌      | 14137/40000 [00:00<00:01, 17268.76it/s] 40%|███▉      | 15881/40000 [00:00<00:01, 17067.26it/s] 44%|████▍     | 17712/40000 [00:00<00:01, 17429.54it/s] 49%|████▊     | 19465/40000 [00:01<00:01, 16819.88it/s] 53%|█████▎    | 21158/40000 [00:01<00:01, 16849.21it/s] 58%|█████▊    | 23039/40000 [00:01<00:00, 17419.63it/s] 62%|██████▏   | 24927/40000 [00:01<00:00, 17849.07it/s] 67%|██████▋   | 26811/40000 [00:01<00:00, 18141.48it/s] 72%|███████▏  | 28729/40000 [00:01<00:00, 18448.87it/s] 77%|███████▋  | 30627/40000 [00:01<00:00, 18605.69it/s] 81%|████████  | 32491/40000 [00:01<00:00, 18517.26it/s] 86%|████████▌ | 34345/40000 [00:01<00:00, 18456.98it/s] 91%|█████████ | 36225/40000 [00:01<00:00, 18556.59it/s] 95%|█████████▌| 38082/40000 [00:02<00:00, 17633.48it/s]100%|█████████▉| 39856/40000 [00:02<00:00, 17485.94it/s]100%|██████████| 40000/40000 [00:02<00:00, 17992.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 36.84it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 31.38it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.74it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.26it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 35.12it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.78it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  5.65it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.96it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.10it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.32it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 23.37it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 33.28it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 32.30it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 32.73it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.87it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.93it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 34.24it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.89it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 32.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.05it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 27.27it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 33.79it/s]Train:  40%|████      | 14/35 [00:00<00:00, 35.21it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.12it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 35.98it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 36.06it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.28it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 36.04it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 40.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 26.84it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.28it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.78it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 41.22it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 36.99it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.21it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.88it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 31.83it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.12it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.29it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.90it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 33.80it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.91it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.15it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 33.27it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 34.78it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.30it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.64it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.26it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 32.01it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 26.98it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 31.97it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 46.06it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.75it/s]Train:  20%|██        | 7/35 [00:00<00:00, 28.39it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.01it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.19it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 37.05it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 38.27it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.72it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 25.43it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.31it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.99it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 24.27it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 34.91it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 34.30it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 35.21it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.92it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.86it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 39.76it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 31.43it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.63it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 12.28it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.16it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.03it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.97it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 36.83it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 37.50it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 23.21it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.07it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 42.35it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 37.21it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.83it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.06it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.09it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 38.19it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.43it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.83it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.26it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.00it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 26.75it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 38.76it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 35.95it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.11it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.38it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 36.85it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 34.82it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 32.25it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 31.58it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 43.49it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 49.59it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.53it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.23it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.31it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.10it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.10it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.69it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.38it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.91it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.24it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.47it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 24.01it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.68it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 36.72it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.70it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.45it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.15it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.64it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.97it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 11.02it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 24.87it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.04it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.49it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 36.96it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 38.23it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.49it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 26.35it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.50it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.59it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.72it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 31.17it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.85it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.79it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.10it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 33.45it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 32.26it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.96it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.18it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.61it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.80it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.71it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.06it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.25it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.89it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.09it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.00it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.22it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.93it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 22.98it/s]Train:  20%|██        | 7/35 [00:00<00:01, 25.55it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.92it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.45it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 35.58it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.60it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.38it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.43it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.13it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.94it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 19.49it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.60it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.93it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 32.97it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.75it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 29.41it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 32.80it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.36it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 47.73it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 58.08it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.84it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.18it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 32.70it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.54it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 30.92it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 31.98it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 29.35it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.45it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 28.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.62it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.54it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.89it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 30.14it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 31.14it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.85it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.90it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 38.40it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 33.03it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.19it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.42it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 38.04it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.36it/s]
Current taxi columns: ['start_lon', 'start_lat', 'end_lon', 'end_lat', 'trip_distance', 'taxi_duration']
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 2 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [2, 200]  [4096, 200]     600        400
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           20801
Trainable params       20801
Non-trainable params       0
Mult-Adds              20500
=================================================================
n_classes=2
task=regression
model_name=ny_B_2022-05-21-21-28-38
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/ny_B_2022-05-21-21-28-38.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f5661ed7760>, <metric.rmse.RMSE object at 0x7f5661ed77c0>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=2, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f5661ed76d0>
Epoch 1: Loss:            : Train 0.0390, Val 0.0214, Test 0.0219
          R2_Score         : Train 0.2053, Val 0.5572, Test 0.5583
          RMSE             : Train 384.6102, Val 283.5779, Test 286.5187
Best:
          R2_Score         : Train 0.2053, Val 0.5572, Test 0.5583
          RMSE             : Train 384.6102, Val 283.5779, Test 286.5187
Epoch 2: Loss:            : Train 0.0203, Val 0.0190, Test 0.0194
          R2_Score         : Train 0.5903, Val 0.6067, Test 0.6077
          RMSE             : Train 276.1512, Val 267.2551, Test 270.0222
Best:
          R2_Score         : Train 0.5903, Val 0.6067, Test 0.6077
          RMSE             : Train 276.1512, Val 267.2551, Test 270.0222
Epoch 3: Loss:            : Train 0.0193, Val 0.0188, Test 0.0192
          R2_Score         : Train 0.6112, Val 0.6104, Test 0.6127
          RMSE             : Train 269.0282, Val 266.0058, Test 268.3025
Best:
          R2_Score         : Train 0.6112, Val 0.6104, Test 0.6127
          RMSE             : Train 269.0282, Val 266.0058, Test 268.3025
Epoch 4: Loss:            : Train 0.0191, Val 0.0187, Test 0.0191
          R2_Score         : Train 0.6144, Val 0.6125, Test 0.6145
          RMSE             : Train 267.9166, Val 265.2816, Test 267.6880
Best:
          R2_Score         : Train 0.6144, Val 0.6125, Test 0.6145
          RMSE             : Train 267.9166, Val 265.2816, Test 267.6880
Epoch 5: Loss:            : Train 0.0192, Val 0.0188, Test 0.0191
          R2_Score         : Train 0.6148, Val 0.6107, Test 0.6133
          RMSE             : Train 267.7838, Val 265.8982, Test 268.0880
Best:
          R2_Score         : Train 0.6144, Val 0.6125, Test 0.6145
          RMSE             : Train 267.9166, Val 265.2816, Test 267.6880
Epoch 6: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6159, Val 0.6149, Test 0.6171
          RMSE             : Train 267.3841, Val 264.4472, Test 266.7950
Best:
          R2_Score         : Train 0.6159, Val 0.6149, Test 0.6171
          RMSE             : Train 267.3841, Val 264.4472, Test 266.7950
Epoch 7: Loss:            : Train 0.0191, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6165, Val 0.6142, Test 0.6164
          RMSE             : Train 267.1728, Val 264.7054, Test 267.0133
Best:
          R2_Score         : Train 0.6159, Val 0.6149, Test 0.6171
          RMSE             : Train 267.3841, Val 264.4472, Test 266.7950
Epoch 8: Loss:            : Train 0.0192, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6166, Val 0.6153, Test 0.6168
          RMSE             : Train 267.1392, Val 264.3050, Test 266.8825
Best:
          R2_Score         : Train 0.6166, Val 0.6153, Test 0.6168
          RMSE             : Train 267.1392, Val 264.3050, Test 266.8825
Epoch 9: Loss:            : Train 0.0190, Val 0.0187, Test 0.0190
          R2_Score         : Train 0.6172, Val 0.6129, Test 0.6154
          RMSE             : Train 266.9376, Val 265.1305, Test 267.3567
Best:
          R2_Score         : Train 0.6166, Val 0.6153, Test 0.6168
          RMSE             : Train 267.1392, Val 264.3050, Test 266.8825
Epoch 10: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6177, Val 0.6148, Test 0.6168
          RMSE             : Train 266.7720, Val 264.4952, Test 266.8915
Best:
          R2_Score         : Train 0.6166, Val 0.6153, Test 0.6168
          RMSE             : Train 267.1392, Val 264.3050, Test 266.8825
Epoch 11: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6176, Val 0.6159, Test 0.6169
          RMSE             : Train 266.7864, Val 264.1160, Test 266.8439
Best:
          R2_Score         : Train 0.6176, Val 0.6159, Test 0.6169
          RMSE             : Train 266.7864, Val 264.1160, Test 266.8439
Epoch 12: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6182, Val 0.6161, Test 0.6178
          RMSE             : Train 266.6042, Val 264.0553, Test 266.5280
Best:
          R2_Score         : Train 0.6182, Val 0.6161, Test 0.6178
          RMSE             : Train 266.6042, Val 264.0553, Test 266.5280
Epoch 13: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6181, Val 0.6164, Test 0.6182
          RMSE             : Train 266.6364, Val 263.9567, Test 266.3888
Best:
          R2_Score         : Train 0.6181, Val 0.6164, Test 0.6182
          RMSE             : Train 266.6364, Val 263.9567, Test 266.3888
Epoch 14: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6182, Val 0.6160, Test 0.6177
          RMSE             : Train 266.5906, Val 264.0840, Test 266.5708
Best:
          R2_Score         : Train 0.6181, Val 0.6164, Test 0.6182
          RMSE             : Train 266.6364, Val 263.9567, Test 266.3888
Epoch 15: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6180, Val 0.6162, Test 0.6182
          RMSE             : Train 266.6623, Val 264.0231, Test 266.4142
Best:
          R2_Score         : Train 0.6181, Val 0.6164, Test 0.6182
          RMSE             : Train 266.6364, Val 263.9567, Test 266.3888
Epoch 16: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6184, Val 0.6142, Test 0.6166
          RMSE             : Train 266.5236, Val 264.6954, Test 266.9575
Best:
          R2_Score         : Train 0.6181, Val 0.6164, Test 0.6182
          RMSE             : Train 266.6364, Val 263.9567, Test 266.3888
Epoch 17: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6159, Test 0.6179
          RMSE             : Train 266.4543, Val 264.1040, Test 266.4980
Best:
          R2_Score         : Train 0.6181, Val 0.6164, Test 0.6182
          RMSE             : Train 266.6364, Val 263.9567, Test 266.3888
Epoch 18: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6187, Val 0.6153, Test 0.6169
          RMSE             : Train 266.4049, Val 264.3241, Test 266.8364
Best:
          R2_Score         : Train 0.6181, Val 0.6164, Test 0.6182
          RMSE             : Train 266.6364, Val 263.9567, Test 266.3888
Epoch 19: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 25.11it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 37.60it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 37.14it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 36.07it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.47it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.59it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 32.20it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 20.54it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 22.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.15it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.29it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.80it/s]Train:  20%|██        | 7/35 [00:00<00:01, 23.71it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.32it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.54it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 34.11it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 34.81it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.12it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.18it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 31.16it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.64it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 22.07it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.90it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.85it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.68it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.38it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 33.93it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.09it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.21it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.81it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.59it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.42it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.56it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 31.57it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 27.36it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 31.52it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 33.98it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.18it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 23.86it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 44.86it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.90it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.69it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 45.39it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 38.26it/s]Train:  40%|████      | 14/35 [00:00<00:00, 37.40it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.75it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.10it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.61it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.65it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 37.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.98it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 27.92it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.75it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.86it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 32.19it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 31.32it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 31.53it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.69it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 38.19it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 33.68it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 33.25it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 32.86it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 40.70it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 54.54it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.75it/s]Train:  20%|██        | 7/35 [00:00<00:00, 29.51it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.08it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 34.38it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.97it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.55it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 34.11it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 37.35it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 38.90it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 36.04it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.63it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 27.30it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 36.90it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 35.28it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 31.49it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 32.78it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.20it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 33.81it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.57it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 34.26it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.40it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.97it/s]Train:  20%|██        | 7/35 [00:00<00:00, 33.88it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 30.62it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.92it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 31.85it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 31.97it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 32.56it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.01it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 38.46it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.42it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.57it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 39.69it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.52it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 28.51it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 28.66it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 23.16it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 26.15it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 30.90it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 34.75it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.61it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 39.31it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 39.67it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 26.60it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 32.91it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.37it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 37.46it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.16it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 33.95it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.48it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 36.92it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 50.61it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.48it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 30.21it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.44it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 26.39it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.92it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 35.36it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 39.15it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 35.86it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.60it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 24.13it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 24.30it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.78it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.35it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 24.11it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.22it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 33.56it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.07it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.61it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 34.26it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.73it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 48.99it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 58.63it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 28.15it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 32.57it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.87it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 38.08it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.30it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.16it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 30.67it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 23.89it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 18.94it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.75it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 44.37it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 37.81it/s]Train:  40%|████      | 14/35 [00:00<00:00, 36.83it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.19it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 30.48it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.77it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:01,  3.80it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 15.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.61it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 22.78it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.39it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.21it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 23.04it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 27.65it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 24.48it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 26.23it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 28.56it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 28.90it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 23.95it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 28.70it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:05,  5.82it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 25.29it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 26.33it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 23.24it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 24.28it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 27.26it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 28.90it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.96it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 15.86it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.96it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.58it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 21.98it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.18it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 33.07it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.68it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.71it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 34.63it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 20.50it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.83it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.64it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.04it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 26.99it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 20.27it/s]Train:  40%|████      | 14/35 [00:00<00:00, 23.76it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 28.55it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 30.00it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 33.97it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 32.33it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 19.23it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 26.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 28.21it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.48it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.38it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 38.81it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.66it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 32.13it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.06it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.98it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.06it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.84it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 21.28it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 22.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.03it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 26.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.67it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.24it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 28.47it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.79it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 37.50it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.84it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 31.96it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 31.65it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 26.08it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.36it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.97it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.18it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.59it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.23it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 35.47it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.62it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.43it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.80it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.53it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.81it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.37it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 14.65it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 15.99it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 22.96it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 29.49it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.78it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.78it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 31.67it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 31.67it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.23it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 41.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.88it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.74it/s]
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 20: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6180, Val 0.6142, Test 0.6161
          RMSE             : Train 266.6441, Val 264.7081, Test 267.1209
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 21: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6166, Test 0.6186
          RMSE             : Train 266.3545, Val 263.8638, Test 266.2713
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 22: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6157, Test 0.6177
          RMSE             : Train 266.4109, Val 264.1933, Test 266.5560
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 23: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6183, Val 0.6142, Test 0.6161
          RMSE             : Train 266.5656, Val 264.6940, Test 267.1215
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 24: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6182, Val 0.6159, Test 0.6175
          RMSE             : Train 266.5833, Val 264.1262, Test 266.6451
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 25: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6160, Test 0.6177
          RMSE             : Train 266.2645, Val 264.0809, Test 266.5889
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 26: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6163, Test 0.6177
          RMSE             : Train 266.3876, Val 263.9713, Test 266.5831
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 27: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6154, Test 0.6175
          RMSE             : Train 266.3099, Val 264.2851, Test 266.6418
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 28: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6164, Test 0.6183
          RMSE             : Train 266.3507, Val 263.9414, Test 266.3672
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 29: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6159, Test 0.6179
          RMSE             : Train 266.3228, Val 264.1097, Test 266.4904
Best:
          R2_Score         : Train 0.6184, Val 0.6167, Test 0.6182
          RMSE             : Train 266.5204, Val 263.8507, Test 266.3821
Epoch 30: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6168, Test 0.6188
          RMSE             : Train 266.3662, Val 263.8007, Test 266.1795
Best:
          R2_Score         : Train 0.6188, Val 0.6168, Test 0.6188
          RMSE             : Train 266.3662, Val 263.8007, Test 266.1795
Epoch 31: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 32: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6167, Test 0.6187
          RMSE             : Train 266.3999, Val 263.8277, Test 266.2105
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 33: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6166, Test 0.6188
          RMSE             : Train 266.3950, Val 263.8840, Test 266.1773
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 34: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6155, Test 0.6177
          RMSE             : Train 266.3021, Val 264.2476, Test 266.5568
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 35: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6159, Test 0.6184
          RMSE             : Train 266.4352, Val 264.0955, Test 266.3331
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 36: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6170, Test 0.6186
          RMSE             : Train 266.4505, Val 263.7500, Test 266.2546
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 37: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6165, Test 0.6184
          RMSE             : Train 266.4345, Val 263.9203, Test 266.3328
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 38: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6160, Test 0.6182
          RMSE             : Train 266.4071, Val 264.0813, Test 266.3859
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 39: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6187
          RMSE             : Train 266.4443, Val 263.7937, Test 266.2276
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 40: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6164, Test 0.6182
          RMSE             : Train 266.2468, Val 263.9550, Test 266.4026
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 41: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6173, Test 0.6189
          RMSE             : Train 266.2541, Val 263.6331, Test 266.1645
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 42: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6161, Test 0.6183
          RMSE             : Train 266.1936, Val 264.0555, Test 266.3602

Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 11.67it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.16it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.94it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.45it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 34.83it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.49it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 16.90it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 17.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.04it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 31.48it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 27.02it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 25.25it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 29.38it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.03it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 33.98it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.65it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.25it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.71it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.40it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.90it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.71it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.43it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.34it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.20it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.04it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 25.32it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 22.50it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 20.99it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.35it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  8.97it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 31.24it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.40it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.01it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 29.94it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.42it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 32.50it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.27it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:01,  7.32it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 22.82it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 23.26it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 31.41it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 36.76it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 38.38it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 39.22it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.42it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 37.67it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.49it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.21it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 25.44it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.25it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 13.69it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.07it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.80it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.39it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.92it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.51it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.82it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.18it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.16it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.96it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 37.68it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 35.58it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 34.36it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.70it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.31it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.03it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 31.71it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.96it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.28it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.53it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 31.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.22it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.13it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.22it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 36.84it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.49it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.13it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 39.57it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.67it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 34.54it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.19it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:06,  5.13it/s]Train:  20%|██        | 7/35 [00:00<00:01, 24.72it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 26.92it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.61it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 33.80it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 37.40it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 34.94it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.03it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 25.48it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.09it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.70it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.58it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.86it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.49it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.71it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.00it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 36.38it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 33.29it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 30.93it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.86it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 34.63it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.85it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.48it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 28.99it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.40it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 37.82it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 31.28it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 29.47it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 27.87it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.87it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 19.30it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.44it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.09it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.31it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 17.74it/s]Train:  34%|███▍      | 12/35 [00:00<00:01, 16.81it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 21.27it/s]Train:  66%|██████▌   | 23/35 [00:01<00:00, 22.25it/s]Train:  80%|████████  | 28/35 [00:01<00:00, 27.20it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 26.00it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 24.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.04it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.07it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.35it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.21it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 18.57it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.85it/s]Train:  40%|████      | 14/35 [00:00<00:00, 35.32it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.16it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 32.75it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.53it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 32.35it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 31.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 35.54it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.72it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  8.21it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.71it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.38it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.26it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.89it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.74it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 39.02it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.50it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.84it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.51it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.32it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 23.11it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.98it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.35it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.59it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.58it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 38.23it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.74it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 31.25it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.21it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.24it/s]Train:  20%|██        | 7/35 [00:00<00:00, 33.95it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 28.51it/s]Train:  40%|████      | 14/35 [00:00<00:00, 27.77it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 33.14it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.65it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 38.32it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.36it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.32it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.73it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.63it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.09it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.62it/s]Train:  20%|██        | 7/35 [00:00<00:01, 22.46it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 25.34it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.01it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 30.43it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 35.17it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 35.75it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.65it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 21.39it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 24.89it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 23.84it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 25.71it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.69it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 15.98it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.44it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.80it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.51it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 37.36it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 33.52it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 31.99it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 25.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 29.52it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.39it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.71it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.30it/s]Train:  20%|██        | 7/35 [00:00<00:01, 25.97it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.20it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 33.70it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.55it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.82it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.52it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.97it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 13.06it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 26.11it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.40it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 22.66it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.21it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 28.16it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 26.72it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 24.18it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 25.85it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.64it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 17.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 39.80it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 25.05it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.85it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 13.65it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 27.17it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.41it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.04it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.68it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.27it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 20.63it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 25.66it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.05it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.74it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 45.72it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 35.48it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.28it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.17it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.12it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.39it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 15.57it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.43it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.37it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.16it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 18.92it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 27.57it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.86it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.87it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.61it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.18it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 26.42it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 30.34it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.28it/s]Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 43: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6175, Test 0.6190
          RMSE             : Train 266.3837, Val 263.5644, Test 266.1286
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 44: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6175, Test 0.6188
          RMSE             : Train 266.2380, Val 263.5557, Test 266.1746
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 45: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6165, Test 0.6185
          RMSE             : Train 266.2513, Val 263.8957, Test 266.3052
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 46: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6168, Test 0.6187
          RMSE             : Train 266.3447, Val 263.7867, Test 266.2197
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 47: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6173, Test 0.6191
          RMSE             : Train 266.0896, Val 263.6450, Test 266.0954
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 48: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6172, Test 0.6187
          RMSE             : Train 266.3233, Val 263.6591, Test 266.2367
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 49: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6162, Test 0.6184
          RMSE             : Train 266.3548, Val 264.0081, Test 266.3354
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 50: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6190, Val 0.6176, Test 0.6194
          RMSE             : Train 266.2976, Val 263.5115, Test 265.9808
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 51: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6162, Test 0.6184
          RMSE             : Train 266.1883, Val 263.9985, Test 266.3448
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 52: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6191, Val 0.6147, Test 0.6168
          RMSE             : Train 266.2849, Val 264.5320, Test 266.8879
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 53: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6171, Test 0.6184
          RMSE             : Train 266.3425, Val 263.7076, Test 266.3113
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 54: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6172, Test 0.6189
          RMSE             : Train 266.3184, Val 263.6788, Test 266.1406
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 55: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6165, Test 0.6186
          RMSE             : Train 266.0612, Val 263.9150, Test 266.2493
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 56: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6170, Test 0.6188
          RMSE             : Train 266.1767, Val 263.7449, Test 266.1989
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 57: Loss:            : Train 0.0188, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6195, Val 0.6152, Test 0.6171
          RMSE             : Train 266.1446, Val 264.3582, Test 266.7768
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 58: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6162, Test 0.6183
          RMSE             : Train 266.2646, Val 264.0232, Test 266.3730
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 59: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6161, Test 0.6174
          RMSE             : Train 266.2072, Val 264.0370, Test 266.6690
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 60: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6164, Test 0.6186
          RMSE             : Train 266.2078, Val 263.9495, Test 266.2626
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 61: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6160, Test 0.6184
          RMSE             : Train 266.1867, Val 264.0909, Test 266.3430
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 62: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6176, Test 0.6188
          RMSE             : Train 266.2453, Val 263.5260, Test 266.1826
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 63: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6169, Test 0.6190
          RMSE             : Train 266.3426, Val 263.7821, Test 266.1318
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 64: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6163, Test 0.6178
          RMSE             : Train 266.1902, Val 263.9716, Test 266.5352
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 65: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6191, Val 0.6173, Test 0.6193
          RMSE             : Train 266.2717, Val 263.6194, Test 266.0173
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  8.82it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.94it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.63it/s]Train:  40%|████      | 14/35 [00:00<00:00, 30.81it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.73it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 34.23it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 34.73it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.49it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.01it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.38it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:02, 15.10it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.58it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 26.70it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 27.42it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 29.28it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 30.95it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 33.47it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.87it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 31.23it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.46it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 12.47it/s]Train:  20%|██        | 7/35 [00:00<00:00, 29.11it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 31.28it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 29.31it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 30.80it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.64it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.08it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 19.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 27.18it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.25it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.19it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 37.50it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 27.91it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.84it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.95it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 31.38it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 33.66it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.74it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.35it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 27.43it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.27it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.04it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 27.30it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.52it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.10it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.80it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 33.61it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 26.29it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 29.24it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.74it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:05,  6.47it/s]Train:  20%|██        | 7/35 [00:00<00:01, 23.04it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.79it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.39it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 33.41it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.32it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.80it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.76it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.81it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.53it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 22.91it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.17it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 34.77it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 35.75it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.99it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 35.97it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.74it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 28.74it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.17it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 13.84it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 25.55it/s]Train:  40%|████      | 14/35 [00:00<00:00, 28.66it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 32.70it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 33.28it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 33.33it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.07it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 27.48it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.86it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.08it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 45.27it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 35.75it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.22it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.23it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.61it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 33.22it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.75it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.22it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 24.83it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.28it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  8.84it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 12.40it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 23.92it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.24it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.84it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 30.88it/s]Train:  80%|████████  | 28/35 [00:01<00:00, 27.78it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 26.18it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 23.17it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 26.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 27.55it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.30it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.21it/s]Train:  20%|██        | 7/35 [00:00<00:00, 28.62it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.21it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.60it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 35.91it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 36.54it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 16.88it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 15.97it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 27.10it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.12it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 21.02it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.92it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.86it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.82it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.24it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.11it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.87it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.00it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.62it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 13.46it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 27.14it/s]Train:  40%|████      | 14/35 [00:00<00:00, 30.68it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 31.43it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 30.72it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 31.78it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 14.40it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 23.22it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.00it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.59it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.91it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 25.85it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.59it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.53it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.66it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.05it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.32it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.02it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.36it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.24it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.49it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 29.04it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.20it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.57it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.02it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 30.52it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 17.75it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 28.41it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.89it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.05it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 25.81it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 19.97it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 24.02it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 29.43it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.31it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 34.36it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.28it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.58it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 31.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.94it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 20.88it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.66it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 33.46it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.91it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 34.32it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 32.15it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 31.17it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.25it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 28.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 24.86it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.64it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.09it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 27.65it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.21it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.08it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 34.16it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.32it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.16it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 25.30it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.19it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.59it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 39.39it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.58it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 27.74it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 25.99it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 26.44it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 29.70it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.10it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 25.76it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.55it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.10it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.91it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.25it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.36it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 37.41it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.61it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 39.34it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.98it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 34.15it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.58it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.12it/s]Train:  20%|██        | 7/35 [00:00<00:01, 27.84it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.91it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.33it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 39.00it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.98it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.71it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 17.32it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.74it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.39it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 25.20it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 34.08it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 36.95it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.59it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.54it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 39.88it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.29it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.94it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.31it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.90it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.16it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 35.13it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 35.71it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 37.67it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 38.56it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 38.47it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.80it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 32.32it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.41it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 28.66it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 25.93it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 33.25it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.61it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.64it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 39.08it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.57it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 25.46it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 25.88it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.61it/s]
Epoch 66: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6172, Test 0.6192
          RMSE             : Train 266.1974, Val 263.6563, Test 266.0338
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 67: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6167, Test 0.6179
          RMSE             : Train 266.1918, Val 263.8370, Test 266.4975
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 68: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6172, Test 0.6184
          RMSE             : Train 266.2778, Val 263.6727, Test 266.3267
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 69: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6192
          RMSE             : Train 266.1401, Val 263.4955, Test 266.0483
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 70: Loss:            : Train 0.0190, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6195, Val 0.6177, Test 0.6195
          RMSE             : Train 266.1302, Val 263.4830, Test 265.9333
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 71: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6171, Test 0.6179
          RMSE             : Train 266.3660, Val 263.6921, Test 266.5026
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 72: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6171, Test 0.6190
          RMSE             : Train 266.2110, Val 263.6849, Test 266.1228
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 73: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6167, Test 0.6190
          RMSE             : Train 266.1285, Val 263.8249, Test 266.1330
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 74: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6164, Test 0.6185
          RMSE             : Train 266.1401, Val 263.9259, Test 266.2928
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 75: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6176, Test 0.6190
          RMSE             : Train 266.1178, Val 263.5442, Test 266.1102
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 76: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6166, Test 0.6185
          RMSE             : Train 266.1401, Val 263.8594, Test 266.2829
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 77: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6173, Test 0.6190
          RMSE             : Train 266.0516, Val 263.6418, Test 266.1066
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 78: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6147, Test 0.6174
          RMSE             : Train 266.0265, Val 264.5205, Test 266.6812
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 79: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6169, Test 0.6186
          RMSE             : Train 266.3074, Val 263.7746, Test 266.2612
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 80: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6159, Test 0.6180
          RMSE             : Train 266.2147, Val 264.0994, Test 266.4808
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 81: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6176, Test 0.6193
          RMSE             : Train 266.1808, Val 263.5364, Test 266.0246
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 82: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6197, Val 0.6175, Test 0.6195
          RMSE             : Train 266.0748, Val 263.5785, Test 265.9485
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 83: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6195, Val 0.6175, Test 0.6196
          RMSE             : Train 266.1427, Val 263.5676, Test 265.9096
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 84: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6175, Test 0.6189
          RMSE             : Train 266.0528, Val 263.5541, Test 266.1369
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 85: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6200, Val 0.6158, Test 0.6184
          RMSE             : Train 265.9451, Val 264.1353, Test 266.3426
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 86: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6167, Test 0.6188
          RMSE             : Train 266.0449, Val 263.8320, Test 266.2020
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 87: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6164, Test 0.6186
          RMSE             : Train 266.1587, Val 263.9522, Test 266.2536
Best:
          R2_Score         : Train 0.6190, Val 0.6178, Test 0.6192
          RMSE             : Train 266.3002, Val 263.4571, Test 266.0589
Epoch 88: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6194
          RMSE             : Train 266.1128, Val 263.3969, Test 265.9631
Best:
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6194
          RMSE             : Train 266.1128, Val 263.3969, Test 265.9631
Epoch 89: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6176, Test 0.6197
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.11it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 30.78it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 35.59it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 38.08it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.33it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 37.99it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 29.25it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 31.98it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.66it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.85it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.50it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.34it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 31.12it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 28.26it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 28.69it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 33.17it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.19it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.41it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 35.14it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.61it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 29.49it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 27.27it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.10it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.23it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 38.13it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.29it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 38.28it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.76it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.69it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.09it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 19.22it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 28.59it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.04it/s]Train:  40%|████      | 14/35 [00:00<00:00, 29.99it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 35.96it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.69it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 31.24it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 31.21it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.72it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.97it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.03it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.74it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 42.55it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 36.74it/s]Train:  40%|████      | 14/35 [00:00<00:00, 35.50it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.19it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 37.01it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 39.56it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 41.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.05it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.14it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 31.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.18it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.50it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.56it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.77it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.00it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.12it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 32.88it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.95it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 34.55it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.79it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.52it/s]Train:  20%|██        | 7/35 [00:00<00:00, 28.89it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 33.45it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 37.70it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 40.13it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 41.00it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.65it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.98it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.50it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 24.71it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.76it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.71it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.11it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.48it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 39.55it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.95it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 47.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.21it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.89it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.28it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 28.08it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.40it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.83it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.11it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 33.69it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.94it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.25it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.93it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.07it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.18it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 45.99it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 39.44it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 38.11it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 35.87it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.09it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.44it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.81it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.17it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 27.64it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.84it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.14it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.09it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.30it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.67it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.40it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 34.20it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 23.78it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 27.42it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.22it/s]

          RMSE             : Train 266.0930, Val 263.5132, Test 265.8616
Best:
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6194
          RMSE             : Train 266.1128, Val 263.3969, Test 265.9631
Epoch 90: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6169, Test 0.6191
          RMSE             : Train 266.2058, Val 263.7525, Test 266.0924
Best:
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6194
          RMSE             : Train 266.1128, Val 263.3969, Test 265.9631
Epoch 91: Loss:            : Train 0.0190, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6157, Test 0.6180
          RMSE             : Train 266.2448, Val 264.1913, Test 266.4778
Best:
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6194
          RMSE             : Train 266.1128, Val 263.3969, Test 265.9631
Epoch 92: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
Best:
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
Epoch 93: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6197, Val 0.6176, Test 0.6198
          RMSE             : Train 266.0670, Val 263.5426, Test 265.8545
Best:
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
Epoch 94: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6197, Val 0.6172, Test 0.6196
          RMSE             : Train 266.0551, Val 263.6807, Test 265.9067
Best:
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
Epoch 95: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6163, Test 0.6188
          RMSE             : Train 266.1890, Val 263.9742, Test 266.1947
Best:
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
Epoch 96: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6172, Test 0.6192
          RMSE             : Train 266.0931, Val 263.6774, Test 266.0361
Best:
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
Epoch 97: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6159, Test 0.6183
          RMSE             : Train 265.8864, Val 264.1018, Test 266.3520
Best:
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
Epoch 98: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6172, Test 0.6197
          RMSE             : Train 266.1124, Val 263.6479, Test 265.8577
Best:
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
Epoch 99: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6199, Val 0.6178, Test 0.6199
          RMSE             : Train 265.9981, Val 263.4491, Test 265.8043
Best:
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
Epoch 100: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6156, Test 0.6178
          RMSE             : Train 266.1520, Val 264.2216, Test 266.5445
Best:
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6200
          RMSE             : Train 266.0384, Val 263.3952, Test 265.7778
