  0%|          | 0/64445 [00:00<?, ?it/s]  9%|▊         | 5514/64445 [00:00<00:01, 55133.22it/s] 17%|█▋        | 11028/64445 [00:00<00:00, 53529.77it/s] 25%|██▌       | 16385/64445 [00:00<00:00, 51233.39it/s] 34%|███▍      | 21963/64445 [00:00<00:00, 52959.05it/s] 45%|████▌     | 29098/64445 [00:00<00:00, 59433.04it/s] 55%|█████▍    | 35392/64445 [00:00<00:00, 60605.30it/s] 64%|██████▍   | 41470/64445 [00:00<00:00, 58994.57it/s] 76%|███████▋  | 49225/64445 [00:00<00:00, 64745.27it/s] 89%|████████▉ | 57591/64445 [00:00<00:00, 70548.33it/s]100%|██████████| 64445/64445 [00:01<00:00, 62007.69it/s]
  0%|          | 0/9207 [00:00<?, ?it/s] 57%|█████▋    | 5260/9207 [00:00<00:00, 52574.73it/s]100%|██████████| 9207/9207 [00:00<00:00, 58764.74it/s]
  0%|          | 0/18413 [00:00<?, ?it/s] 41%|████      | 7591/18413 [00:00<00:00, 75899.40it/s] 82%|████████▏ | 15181/18413 [00:00<00:00, 55350.36it/s]100%|██████████| 18413/18413 [00:00<00:00, 51981.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.27it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.31it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.08it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.12it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.27it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  3.98it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.88it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.28it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 30.71it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.81it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.00it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 24.40it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 24.97it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.26it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.10it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.53it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.36it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 21.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.45it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 50.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.70it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.82it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.46it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 31.56it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.73it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.23it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.57it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.51it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.14it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.54it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.76it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.27it/s]Test:  80%|████████  | 4/5 [00:00<00:00,  8.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 10.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.63it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.26it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.81it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 28.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.01it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.36it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 10.80it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.95it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.04it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.97it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.77it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.99it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.55it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.69it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.57it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.15it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.81it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.88it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.73it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 57.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.79it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 22.26it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.40it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.38it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.68it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.77it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.78it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.26it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.24it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.59it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.41it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.41it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 17.99it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 11.71it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.67it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 14.94it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.02it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.08it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.28it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.46it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.91it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.81it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 12.36it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 13.56it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 16.21it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.28it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.78it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.89it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.08it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.17it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  8.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.88it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.26it/s]Loading house from data/hdb/hdb_clean.csv
Loading airbnb from data/hdb/school_clean.csv
Current hdb columns Index(['floor_area_sqm', 'lease_commence_year_before_2020', 'tn_BEDOK',
       'tn_BISHAN', 'tn_BUKIT BATOK', 'tn_BUKIT MERAH', 'tn_BUKIT PANJANG',
       'tn_BUKIT TIMAH', 'tn_CENTRAL AREA', 'tn_CHOA CHU KANG', 'tn_CLEMENTI',
       'tn_GEYLANG', 'tn_HOUGANG', 'tn_JURONG EAST', 'tn_JURONG WEST',
       'tn_KALLANG/WHAMPOA', 'tn_MARINE PARADE', 'tn_PASIR RIS', 'tn_PUNGGOL',
       'tn_QUEENSTOWN', 'tn_SEMBAWANG', 'tn_SENGKANG', 'tn_SERANGOON',
       'tn_TAMPINES', 'tn_TOA PAYOH', 'tn_WOODLANDS', 'tn_YISHUN', 'ft_2 ROOM',
       'ft_3 ROOM', 'ft_4 ROOM', 'ft_5 ROOM', 'ft_EXECUTIVE',
       'ft_MULTI-GENERATION', 'sr_04 TO 06', 'sr_07 TO 09', 'sr_10 TO 12',
       'sr_13 TO 15', 'sr_16 TO 18', 'sr_19 TO 21', 'sr_22 TO 24',
       'sr_25 TO 27', 'sr_28 TO 30', 'sr_31 TO 33', 'sr_34 TO 36',
       'sr_37 TO 39', 'sr_40 TO 42', 'sr_43 TO 45', 'sr_46 TO 48',
       'sr_49 TO 51', 'fm_Adjoined flat', 'fm_Apartment', 'fm_DBSS',
       'fm_Improved', 'fm_Improved-Maisonette', 'fm_Maisonette', 'fm_Model A',
       'fm_Model A-Maisonette', 'fm_Model A2', 'fm_Multi Generation',
       'fm_New Generation', 'fm_Premium Apartment',
       'fm_Premium Apartment Loft', 'fm_Premium Maisonette', 'fm_Simplified',
       'fm_Standard', 'fm_Terrace', 'fm_Type S1', 'fm_Type S2', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'n_places_0', 'vacancy_rate_0', 'n_places_1',
       'vacancy_rate_1', 'n_places_2', 'vacancy_rate_2', 'n_places_3',
       'vacancy_rate_3'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 8 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [8, 400]  [4096, 400]    3600       3200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           84001
Trainable params       84001
Non-trainable params       0
Mult-Adds              83400
=================================================================
n_classes=2
task=regression
model_name=hdb_B_2022-05-21-21-23-52
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:2
test_batch_size=4096
train_batch_size=4096
learning_rate=0.01
weight_decay=1e-05
num_epochs=200
model_save_path=ckp/hdb_B_2022-05-21-21-23-52.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7fdec1961430>, <metric.rmse.RMSE object at 0x7fdec1961490>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=8, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fdec19613a0>
Epoch 1: Loss:            : Train 0.0353, Val 0.0283, Test 0.0279
          R2_Score         : Train -0.8205, Val -0.3571, Test -0.3820
          RMSE             : Train 208.6203, Val 180.6401, Test 182.9527
Best:
          R2_Score         : Train -0.8205, Val -0.3571, Test -0.3820
          RMSE             : Train 208.6203, Val 180.6401, Test 182.9527
Epoch 2: Loss:            : Train 0.0217, Val 0.0216, Test 0.0207
          R2_Score         : Train -0.1151, Val -0.0447, Test -0.0348
          RMSE             : Train 163.2753, Val 158.4895, Test 158.3111
Best:
          R2_Score         : Train -0.1151, Val -0.0447, Test -0.0348
          RMSE             : Train 163.2753, Val 158.4895, Test 158.3111
Epoch 3: Loss:            : Train 0.0194, Val 0.0196, Test 0.0191
          R2_Score         : Train 0.0046, Val 0.0311, Test 0.0395
          RMSE             : Train 154.2639, Val 152.6324, Test 152.5179
Best:
          R2_Score         : Train 0.0046, Val 0.0311, Test 0.0395
          RMSE             : Train 154.2639, Val 152.6324, Test 152.5179
Epoch 4: Loss:            : Train 0.0185, Val 0.0194, Test 0.0187
          R2_Score         : Train 0.0498, Val 0.0439, Test 0.0601
          RMSE             : Train 150.7162, Val 151.6174, Test 150.8746
Best:
          R2_Score         : Train 0.0498, Val 0.0439, Test 0.0601
          RMSE             : Train 150.7162, Val 151.6174, Test 150.8746
Epoch 5: Loss:            : Train 0.0179, Val 0.0183, Test 0.0180
          R2_Score         : Train 0.0815, Val 0.0867, Test 0.0964
          RMSE             : Train 148.1804, Val 148.1884, Test 147.9350
Best:
          R2_Score         : Train 0.0815, Val 0.0867, Test 0.0964
          RMSE             : Train 148.1804, Val 148.1884, Test 147.9350
Epoch 6: Loss:            : Train 0.0175, Val 0.0181, Test 0.0177
          R2_Score         : Train 0.1004, Val 0.1015, Test 0.1131
          RMSE             : Train 146.6467, Val 146.9799, Test 146.5579
Best:
          R2_Score         : Train 0.1004, Val 0.1015, Test 0.1131
          RMSE             : Train 146.6467, Val 146.9799, Test 146.5579
Epoch 7: Loss:            : Train 0.0172, Val 0.0192, Test 0.0188
          R2_Score         : Train 0.1151, Val 0.0642, Test 0.0617
          RMSE             : Train 145.4454, Val 149.9994, Test 150.7506
Best:
          R2_Score         : Train 0.1004, Val 0.1015, Test 0.1131
          RMSE             : Train 146.6467, Val 146.9799, Test 146.5579
Epoch 8: Loss:            : Train 0.0172, Val 0.0179, Test 0.0174
          R2_Score         : Train 0.1146, Val 0.1167, Test 0.1277
          RMSE             : Train 145.4899, Val 145.7313, Test 145.3489
Best:
          R2_Score         : Train 0.1146, Val 0.1167, Test 0.1277
          RMSE             : Train 145.4899, Val 145.7313, Test 145.3489
Epoch 9: Loss:            : Train 0.0169, Val 0.0178, Test 0.0174
          R2_Score         : Train 0.1311, Val 0.1242, Test 0.1300
          RMSE             : Train 144.1234, Val 145.1124, Test 145.1576
Best:
          R2_Score         : Train 0.1311, Val 0.1242, Test 0.1300
          RMSE             : Train 144.1234, Val 145.1124, Test 145.1576
Epoch 10: Loss:            : Train 0.0167, Val 0.0176, Test 0.0172
          R2_Score         : Train 0.1416, Val 0.1336, Test 0.1401
          RMSE             : Train 143.2521, Val 144.3357, Test 144.3140
Best:
          R2_Score         : Train 0.1416, Val 0.1336, Test 0.1401
          RMSE             : Train 143.2521, Val 144.3357, Test 144.3140
Epoch 11: Loss:            : Train 0.0166, Val 0.0180, Test 0.0174
          R2_Score         : Train 0.1494, Val 0.1200, Test 0.1332
          RMSE             : Train 142.6012, Val 145.4599, Test 144.8953
Best:
          R2_Score         : Train 0.1416, Val 0.1336, Test 0.1401
          RMSE             : Train 143.2521, Val 144.3357, Test 144.3140
Epoch 12: Loss:            : Train 0.0164, Val 0.0175, Test 0.0171
          R2_Score         : Train 0.1571, Val 0.1435, Test 0.1462
          RMSE             : Train 141.9563, Val 143.5026, Test 143.7998
Best:
          R2_Score         : Train 0.1571, Val 0.1435, Test 0.1462
          RMSE             : Train 141.9563, Val 143.5026, Test 143.7998
Epoch 13: Loss:            : Train 0.0162, Val 0.0171, Test 0.0167
          R2_Score         : Train 0.1667, Val 0.1607, Test 0.1636
          RMSE             : Train 141.1452, Val 142.0612, Test 142.3278
Best:
          R2_Score         : Train 0.1667, Val 0.1607, Test 0.1636
          RMSE             : Train 141.1452, Val 142.0612, Test 142.3278
Epoch 14: Loss:            : Train 0.0162, Val 0.0169, Test 0.0166
          R2_Score         : Train 0.1715, Val 0.1589, Test 0.1661
          RMSE             : Train 140.7379, Val 142.2120, Test 142.1115
Best:
          R2_Score         : Train 0.1667, Val 0.1607, Test 0.1636
          RMSE             : Train 141.1452, Val 142.0612, Test 142.3278
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.75it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.11it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.11it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.06it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  8.18it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  7.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 46.27it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.72it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.81it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.77it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.66it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.43it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.29it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.31it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.93it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.18it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.99it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 30.61it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.56it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  5.47it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  8.82it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.56it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.39it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.64it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.56it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.39it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.78it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.00it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.77it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.00it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.40it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  8.35it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.14it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.68it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.96it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.58it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.24it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.51it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 40.23it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 33.44it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.80it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.80it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 32.39it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.02it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.34it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  5.09it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  7.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.71it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.54it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 15.17it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 12.84it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 13.43it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.64it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.66it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.51it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 28.67it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.01it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 13.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.88it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  8.60it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.36it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.19it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.99it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.14it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.68it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 13.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.83it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.47it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.08it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.21it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 17.75it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.90it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.92it/s]Test:  80%|████████  | 4/5 [00:00<00:00,  9.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.34it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 29.42it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 26.89it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.97it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 32.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.41it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.84it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.53it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.00it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.35it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.31it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.56it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.73it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 24.00it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.45it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 15.74it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 14.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  5.82it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  8.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.38it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.51it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.42it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.17it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.44it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.90it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.21it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.99it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 24.31it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.21it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.53it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 10.93it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.28it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.66it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 19.32it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.02it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.74it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.75it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.76it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 11.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.52it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.45it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 18.77it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.76it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 32.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.64it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.88it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.40it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.68it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.96it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.19it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.70it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.16it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.65it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.59it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 15.90it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.97it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.38it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.47it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.14it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 25.92it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 23.55it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.87it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  9.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.72it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.27it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.99it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.99it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.35it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.25it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.89it/s]
Epoch 15: Loss:            : Train 0.0160, Val 0.0170, Test 0.0166
          R2_Score         : Train 0.1788, Val 0.1658, Test 0.1701
          RMSE             : Train 140.1141, Val 141.6242, Test 141.7730
Best:
          R2_Score         : Train 0.1788, Val 0.1658, Test 0.1701
          RMSE             : Train 140.1141, Val 141.6242, Test 141.7730
Epoch 16: Loss:            : Train 0.0159, Val 0.0168, Test 0.0167
          R2_Score         : Train 0.1851, Val 0.1618, Test 0.1645
          RMSE             : Train 139.5765, Val 141.9648, Test 142.2488
Best:
          R2_Score         : Train 0.1788, Val 0.1658, Test 0.1701
          RMSE             : Train 140.1141, Val 141.6242, Test 141.7730
Epoch 17: Loss:            : Train 0.0158, Val 0.0164, Test 0.0162
          R2_Score         : Train 0.1883, Val 0.1794, Test 0.1846
          RMSE             : Train 139.3030, Val 140.4638, Test 140.5304
Best:
          R2_Score         : Train 0.1883, Val 0.1794, Test 0.1846
          RMSE             : Train 139.3030, Val 140.4638, Test 140.5304
Epoch 18: Loss:            : Train 0.0158, Val 0.0163, Test 0.0160
          R2_Score         : Train 0.1902, Val 0.1919, Test 0.1980
          RMSE             : Train 139.1403, Val 139.3947, Test 139.3683
Best:
          R2_Score         : Train 0.1902, Val 0.1919, Test 0.1980
          RMSE             : Train 139.1403, Val 139.3947, Test 139.3683
Epoch 19: Loss:            : Train 0.0159, Val 0.0168, Test 0.0166
          R2_Score         : Train 0.1809, Val 0.1579, Test 0.1678
          RMSE             : Train 139.9393, Val 142.2933, Test 141.9672
Best:
          R2_Score         : Train 0.1902, Val 0.1919, Test 0.1980
          RMSE             : Train 139.1403, Val 139.3947, Test 139.3683
Epoch 20: Loss:            : Train 0.0157, Val 0.0166, Test 0.0161
          R2_Score         : Train 0.1923, Val 0.1885, Test 0.1960
          RMSE             : Train 138.9585, Val 139.6886, Test 139.5473
Best:
          R2_Score         : Train 0.1902, Val 0.1919, Test 0.1980
          RMSE             : Train 139.1403, Val 139.3947, Test 139.3683
Epoch 21: Loss:            : Train 0.0159, Val 0.0164, Test 0.0160
          R2_Score         : Train 0.1857, Val 0.1958, Test 0.2008
          RMSE             : Train 139.5268, Val 139.0535, Test 139.1300
Best:
          R2_Score         : Train 0.1857, Val 0.1958, Test 0.2008
          RMSE             : Train 139.5268, Val 139.0535, Test 139.1300
Epoch 22: Loss:            : Train 0.0156, Val 0.0162, Test 0.0159
          R2_Score         : Train 0.2003, Val 0.1973, Test 0.2036
          RMSE             : Train 138.2690, Val 138.9296, Test 138.8864
Best:
          R2_Score         : Train 0.2003, Val 0.1973, Test 0.2036
          RMSE             : Train 138.2690, Val 138.9296, Test 138.8864
Epoch 23: Loss:            : Train 0.0157, Val 0.0161, Test 0.0159
          R2_Score         : Train 0.1921, Val 0.2080, Test 0.2059
          RMSE             : Train 138.9765, Val 138.0005, Test 138.6854
Best:
          R2_Score         : Train 0.1921, Val 0.2080, Test 0.2059
          RMSE             : Train 138.9765, Val 138.0005, Test 138.6854
Epoch 24: Loss:            : Train 0.0155, Val 0.0163, Test 0.0161
          R2_Score         : Train 0.2032, Val 0.1933, Test 0.1925
          RMSE             : Train 138.0193, Val 139.2683, Test 139.8439
Best:
          R2_Score         : Train 0.1921, Val 0.2080, Test 0.2059
          RMSE             : Train 138.9765, Val 138.0005, Test 138.6854
Epoch 25: Loss:            : Train 0.0154, Val 0.0165, Test 0.0161
          R2_Score         : Train 0.2113, Val 0.1873, Test 0.1936
          RMSE             : Train 137.3142, Val 139.7892, Test 139.7535
Best:
          R2_Score         : Train 0.1921, Val 0.2080, Test 0.2059
          RMSE             : Train 138.9765, Val 138.0005, Test 138.6854
Epoch 26: Loss:            : Train 0.0155, Val 0.0163, Test 0.0158
          R2_Score         : Train 0.2066, Val 0.2053, Test 0.2115
          RMSE             : Train 137.7246, Val 138.2303, Test 138.1904
Best:
          R2_Score         : Train 0.1921, Val 0.2080, Test 0.2059
          RMSE             : Train 138.9765, Val 138.0005, Test 138.6854
Epoch 27: Loss:            : Train 0.0155, Val 0.0164, Test 0.0158
          R2_Score         : Train 0.2052, Val 0.2060, Test 0.2110
          RMSE             : Train 137.8398, Val 138.1679, Test 138.2391
Best:
          R2_Score         : Train 0.1921, Val 0.2080, Test 0.2059
          RMSE             : Train 138.9765, Val 138.0005, Test 138.6854
Epoch 28: Loss:            : Train 0.0154, Val 0.0163, Test 0.0160
          R2_Score         : Train 0.2112, Val 0.1895, Test 0.1977
          RMSE             : Train 137.3212, Val 139.5996, Test 139.3941
Best:
          R2_Score         : Train 0.1921, Val 0.2080, Test 0.2059
          RMSE             : Train 138.9765, Val 138.0005, Test 138.6854
Epoch 29: Loss:            : Train 0.0154, Val 0.0162, Test 0.0158
          R2_Score         : Train 0.2108, Val 0.2090, Test 0.2112
          RMSE             : Train 137.3610, Val 137.9104, Test 138.2170
Best:
          R2_Score         : Train 0.2108, Val 0.2090, Test 0.2112
          RMSE             : Train 137.3610, Val 137.9104, Test 138.2170
Epoch 30: Loss:            : Train 0.0153, Val 0.0169, Test 0.0164
          R2_Score         : Train 0.2122, Val 0.1871, Test 0.1863
          RMSE             : Train 137.2370, Val 139.8101, Test 140.3809
Best:
          R2_Score         : Train 0.2108, Val 0.2090, Test 0.2112
          RMSE             : Train 137.3610, Val 137.9104, Test 138.2170
Epoch 31: Loss:            : Train 0.0153, Val 0.0160, Test 0.0158
          R2_Score         : Train 0.2155, Val 0.2060, Test 0.2052
          RMSE             : Train 136.9472, Val 138.1695, Test 138.7402
Best:
          R2_Score         : Train 0.2108, Val 0.2090, Test 0.2112
          RMSE             : Train 137.3610, Val 137.9104, Test 138.2170
Epoch 32: Loss:            : Train 0.0151, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2232, Val 0.2188, Test 0.2206
          RMSE             : Train 136.2755, Val 137.0532, Test 137.3969
Best:
          R2_Score         : Train 0.2232, Val 0.2188, Test 0.2206
          RMSE             : Train 136.2755, Val 137.0532, Test 137.3969
Epoch 33: Loss:            : Train 0.0151, Val 0.0160, Test 0.0155
          R2_Score         : Train 0.2245, Val 0.2145, Test 0.2227
          RMSE             : Train 136.1575, Val 137.4289, Test 137.2061
Best:
          R2_Score         : Train 0.2232, Val 0.2188, Test 0.2206
          RMSE             : Train 136.2755, Val 137.0532, Test 137.3969
Epoch 34: Loss:            : Train 0.0153, Val 0.0160, Test 0.0157
          R2_Score         : Train 0.2152, Val 0.2160, Test 0.2154
          RMSE             : Train 136.9769, Val 137.2944, Test 137.8464
Best:
          R2_Score         : Train 0.2232, Val 0.2188, Test 0.2206
          RMSE             : Train 136.2755, Val 137.0532, Test 137.3969
Epoch 35: Loss:            : Train 0.0152, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2215, Val 0.2266, Test 0.2279
          RMSE             : Train 136.4215, Val 136.3667, Test 136.7440
Best:
          R2_Score         : Train 0.2215, Val 0.2266, Test 0.2279
          RMSE             : Train 136.4215, Val 136.3667, Test 136.7440
Epoch 36: Loss:            : Train 0.0150, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2285, Val 0.2284, Test 0.2328
          RMSE             : Train 135.8103, Val 136.2064, Test 136.3088
Best:
          R2_Score         : Train 0.2285, Val 0.2284, Test 0.2328
          RMSE             : Train 135.8103, Val 136.2064, Test 136.3088
Epoch 37: Loss:            : Train 0.0150, Val 0.0161, Test 0.0156
          R2_Score         : Train 0.2284, Val 0.2177, Test 0.2222
          RMSE             : Train 135.8138, Val 137.1490, Test 137.2546
Best:
          R2_Score         : Train 0.2285, Val 0.2284, Test 0.2328
          RMSE             : Train 135.8103, Val 136.2064, Test 136.3088
Epoch 38: Loss:            : Train 0.0150, Val 0.0159, Test 0.0156
          R2_Score         : Train 0.2264, Val 0.2161, Test 0.2162
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.58it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.52it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.81it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.82it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.93it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 52.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.91it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.30it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.53it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 13.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 48.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.95it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.99it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.08it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.78it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.18it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.31it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.31it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.19it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.09it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.94it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.95it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 16.11it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.19it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.01it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.96it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.40it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.07it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 13.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.53it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.57it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.22it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.08it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.67it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.06it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.61it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.20it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.19it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.57it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.07it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.12it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.11it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.10it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.73it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.08it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.40it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.36it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.28it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.37it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 15.16it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.42it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 12.98it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 17.77it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.30it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 57.91it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.04it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.25it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.09it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.31it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.99it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.09it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 29.98it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.12it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.72it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.09it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.79it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.90it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 17.11it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  6.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.88it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.32it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.60it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.29it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.39it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.26it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.59it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.76it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 16.34it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 26.44it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.69it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  8.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.24it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.90it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.62it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.86it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.25it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  7.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.04it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.90it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.05it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.35it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.02it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  6.89it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.35it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 19.07it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 48.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.94it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.17it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 23.60it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 13.33it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.06it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.61it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.19it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.09it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 13.12it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.30it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.80it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  9.19it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.15it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 10.30it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 13.70it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 13.73it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.06it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 14.15it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.82it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.50it/s]Train:  38%|███▊      | 6/16 [00:00<00:01,  8.45it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 13.59it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.22it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 60.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.51it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.76it/s]Train:  50%|█████     | 8/16 [00:00<00:00,  9.76it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 11.86it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 14.70it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.56it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.89it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.91it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.57it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 14.03it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.22it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.04it/s]
          RMSE             : Train 135.9942, Val 137.2885, Test 137.7824
Best:
          R2_Score         : Train 0.2285, Val 0.2284, Test 0.2328
          RMSE             : Train 135.8103, Val 136.2064, Test 136.3088
Epoch 39: Loss:            : Train 0.0151, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2222, Val 0.2332, Test 0.2335
          RMSE             : Train 136.3639, Val 135.7832, Test 136.2489
Best:
          R2_Score         : Train 0.2222, Val 0.2332, Test 0.2335
          RMSE             : Train 136.3639, Val 135.7832, Test 136.2489
Epoch 40: Loss:            : Train 0.0151, Val 0.0160, Test 0.0156
          R2_Score         : Train 0.2250, Val 0.2132, Test 0.2198
          RMSE             : Train 136.1140, Val 137.5404, Test 137.4638
Best:
          R2_Score         : Train 0.2222, Val 0.2332, Test 0.2335
          RMSE             : Train 136.3639, Val 135.7832, Test 136.2489
Epoch 41: Loss:            : Train 0.0151, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2229, Val 0.2313, Test 0.2291
          RMSE             : Train 136.2990, Val 135.9480, Test 136.6414
Best:
          R2_Score         : Train 0.2222, Val 0.2332, Test 0.2335
          RMSE             : Train 136.3639, Val 135.7832, Test 136.2489
Epoch 42: Loss:            : Train 0.0151, Val 0.0159, Test 0.0158
          R2_Score         : Train 0.2252, Val 0.2109, Test 0.2067
          RMSE             : Train 136.0985, Val 137.7440, Test 138.6164
Best:
          R2_Score         : Train 0.2222, Val 0.2332, Test 0.2335
          RMSE             : Train 136.3639, Val 135.7832, Test 136.2489
Epoch 43: Loss:            : Train 0.0151, Val 0.0159, Test 0.0157
          R2_Score         : Train 0.2260, Val 0.2076, Test 0.2093
          RMSE             : Train 136.0247, Val 138.0288, Test 138.3877
Best:
          R2_Score         : Train 0.2222, Val 0.2332, Test 0.2335
          RMSE             : Train 136.3639, Val 135.7832, Test 136.2489
Epoch 44: Loss:            : Train 0.0151, Val 0.0160, Test 0.0156
          R2_Score         : Train 0.2230, Val 0.2174, Test 0.2194
          RMSE             : Train 136.2913, Val 137.1771, Test 137.4984
Best:
          R2_Score         : Train 0.2222, Val 0.2332, Test 0.2335
          RMSE             : Train 136.3639, Val 135.7832, Test 136.2489
Epoch 45: Loss:            : Train 0.0150, Val 0.0161, Test 0.0155
          R2_Score         : Train 0.2273, Val 0.2176, Test 0.2239
          RMSE             : Train 135.9120, Val 137.1610, Test 137.0985
Best:
          R2_Score         : Train 0.2222, Val 0.2332, Test 0.2335
          RMSE             : Train 136.3639, Val 135.7832, Test 136.2489
Epoch 46: Loss:            : Train 0.0150, Val 0.0160, Test 0.0154
          R2_Score         : Train 0.2303, Val 0.2279, Test 0.2330
          RMSE             : Train 135.6464, Val 136.2501, Test 136.2943
Best:
          R2_Score         : Train 0.2222, Val 0.2332, Test 0.2335
          RMSE             : Train 136.3639, Val 135.7832, Test 136.2489
Epoch 47: Loss:            : Train 0.0149, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2336, Val 0.2349, Test 0.2346
          RMSE             : Train 135.3613, Val 135.6364, Test 136.1505
Best:
          R2_Score         : Train 0.2336, Val 0.2349, Test 0.2346
          RMSE             : Train 135.3613, Val 135.6364, Test 136.1505
Epoch 48: Loss:            : Train 0.0150, Val 0.0160, Test 0.0157
          R2_Score         : Train 0.2283, Val 0.2050, Test 0.2114
          RMSE             : Train 135.8275, Val 138.2544, Test 138.2016
Best:
          R2_Score         : Train 0.2336, Val 0.2349, Test 0.2346
          RMSE             : Train 135.3613, Val 135.6364, Test 136.1505
Epoch 49: Loss:            : Train 0.0151, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2260, Val 0.2363, Test 0.2370
          RMSE             : Train 136.0321, Val 135.5054, Test 135.9352
Best:
          R2_Score         : Train 0.2260, Val 0.2363, Test 0.2370
          RMSE             : Train 136.0321, Val 135.5054, Test 135.9352
Epoch 50: Loss:            : Train 0.0150, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2303, Val 0.2345, Test 0.2360
          RMSE             : Train 135.6468, Val 135.6697, Test 136.0320
Best:
          R2_Score         : Train 0.2260, Val 0.2363, Test 0.2370
          RMSE             : Train 136.0321, Val 135.5054, Test 135.9352
Epoch 51: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2365, Val 0.2343, Test 0.2344
          RMSE             : Train 135.0995, Val 135.6843, Test 136.1752
Best:
          R2_Score         : Train 0.2260, Val 0.2363, Test 0.2370
          RMSE             : Train 136.0321, Val 135.5054, Test 135.9352
Epoch 52: Loss:            : Train 0.0149, Val 0.0160, Test 0.0155
          R2_Score         : Train 0.2365, Val 0.2270, Test 0.2260
          RMSE             : Train 135.1006, Val 136.3313, Test 136.9134
Best:
          R2_Score         : Train 0.2260, Val 0.2363, Test 0.2370
          RMSE             : Train 136.0321, Val 135.5054, Test 135.9352
Epoch 53: Loss:            : Train 0.0149, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2346, Val 0.2311, Test 0.2321
          RMSE             : Train 135.2699, Val 135.9683, Test 136.3725
Best:
          R2_Score         : Train 0.2260, Val 0.2363, Test 0.2370
          RMSE             : Train 136.0321, Val 135.5054, Test 135.9352
Epoch 54: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2354, Val 0.2335, Test 0.2361
          RMSE             : Train 135.2025, Val 135.7544, Test 136.0177
Best:
          R2_Score         : Train 0.2260, Val 0.2363, Test 0.2370
          RMSE             : Train 136.0321, Val 135.5054, Test 135.9352
Epoch 55: Loss:            : Train 0.0150, Val 0.0163, Test 0.0158
          R2_Score         : Train 0.2284, Val 0.2141, Test 0.2156
          RMSE             : Train 135.8179, Val 137.4630, Test 137.8311
Best:
          R2_Score         : Train 0.2260, Val 0.2363, Test 0.2370
          RMSE             : Train 136.0321, Val 135.5054, Test 135.9352
Epoch 56: Loss:            : Train 0.0150, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2303, Val 0.2268, Test 0.2336
          RMSE             : Train 135.6481, Val 136.3483, Test 136.2461
Best:
          R2_Score         : Train 0.2260, Val 0.2363, Test 0.2370
          RMSE             : Train 136.0321, Val 135.5054, Test 135.9352
Epoch 57: Loss:            : Train 0.0149, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 58: Loss:            : Train 0.0149, Val 0.0160, Test 0.0155
          R2_Score         : Train 0.2354, Val 0.2271, Test 0.2270
          RMSE             : Train 135.1982, Val 136.3252, Test 136.8257
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 59: Loss:            : Train 0.0149, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2345, Val 0.2370, Test 0.2420
          RMSE             : Train 135.2797, Val 135.4477, Test 135.4897
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 60: Loss:            : Train 0.0149, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2341, Val 0.2356, Test 0.2348
          RMSE             : Train 135.3125, Val 135.5740, Test 136.1349
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 61: Loss:            : Train 0.0149, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2369, Val 0.2214, Test 0.2263
          RMSE             : Train 135.0687, Val 136.8241, Test 136.8854

Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.72it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.52it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.00it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.13it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.04it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 34.04it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.14it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.84it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 29.03it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.10it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.86it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.54it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.05it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 26.07it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.91it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.42it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.19it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.79it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.92it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.55it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.14it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.18it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.67it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.97it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.93it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.43it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 15.39it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.36it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 29.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.99it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.66it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.79it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.96it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.82it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.16it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.14it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.43it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.97it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.71it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.07it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.02it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.01it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.03it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.85it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.98it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.97it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.84it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.03it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.00it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.28it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.19it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 27.14it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.82it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.62it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.10it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.02it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.02it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 10.92it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.11it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.54it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.35it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 11.22it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.90it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 15.02it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.90it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.77it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.35it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.77it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.60it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.44it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.25it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 17.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 37.16it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.32it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.20it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 26.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.33it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.58it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.17it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.95it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.18it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.83it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.71it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 21.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.24it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.88it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 26.18it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.47it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 23.60it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 24.22it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  7.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.17it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 25.15it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.81it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.72it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.17it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.91it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.76it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.49it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 26.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.44it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.73it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.55it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.87it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.64it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.64it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  6.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.73it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.73it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.85it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.97it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 16.96it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.33it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 17.52it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.21it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.99it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 20.30it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 25.99it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 12.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.93it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 29.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 42.99it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.38it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.45it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  9.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.92it/s]Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 62: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2333, Val 0.2313, Test 0.2344
          RMSE             : Train 135.3833, Val 135.9525, Test 136.1708
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 63: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2364, Val 0.2361, Test 0.2351
          RMSE             : Train 135.1068, Val 135.5299, Test 136.1051
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 64: Loss:            : Train 0.0149, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2351, Val 0.2349, Test 0.2388
          RMSE             : Train 135.2299, Val 135.6315, Test 135.7767
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 65: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2363, Val 0.2297, Test 0.2310
          RMSE             : Train 135.1205, Val 136.0958, Test 136.4768
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 66: Loss:            : Train 0.0150, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2296, Val 0.2343, Test 0.2346
          RMSE             : Train 135.7147, Val 135.6896, Test 136.1519
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 67: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2379, Val 0.2332, Test 0.2368
          RMSE             : Train 134.9776, Val 135.7843, Test 135.9615
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 68: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2402, Val 0.2364, Test 0.2420
          RMSE             : Train 134.7766, Val 135.4987, Test 135.4951
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 69: Loss:            : Train 0.0148, Val 0.0162, Test 0.0155
          R2_Score         : Train 0.2372, Val 0.2204, Test 0.2272
          RMSE             : Train 135.0404, Val 136.9081, Test 136.8090
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 70: Loss:            : Train 0.0150, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2306, Val 0.2248, Test 0.2272
          RMSE             : Train 135.6198, Val 136.5266, Test 136.8106
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 71: Loss:            : Train 0.0149, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2355, Val 0.2271, Test 0.2331
          RMSE             : Train 135.1870, Val 136.3192, Test 136.2868
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 72: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2391, Val 0.2369, Test 0.2366
          RMSE             : Train 134.8748, Val 135.4554, Test 135.9774
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 73: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2343, Val 0.2307, Test 0.2345
          RMSE             : Train 135.2950, Val 136.0055, Test 136.1630
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 74: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2382, Val 0.2311, Test 0.2302
          RMSE             : Train 134.9526, Val 135.9706, Test 136.5482
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 75: Loss:            : Train 0.0149, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2344, Val 0.2277, Test 0.2323
          RMSE             : Train 135.2866, Val 136.2656, Test 136.3544
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 76: Loss:            : Train 0.0148, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2380, Val 0.2294, Test 0.2326
          RMSE             : Train 134.9715, Val 136.1160, Test 136.3342
Best:
          R2_Score         : Train 0.2348, Val 0.2384, Test 0.2434
          RMSE             : Train 135.2487, Val 135.3225, Test 135.3647
Epoch 77: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2387, Val 0.2394, Test 0.2383
          RMSE             : Train 134.9073, Val 135.2338, Test 135.8255
Best:
          R2_Score         : Train 0.2387, Val 0.2394, Test 0.2383
          RMSE             : Train 134.9073, Val 135.2338, Test 135.8255
Epoch 78: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2392, Val 0.2319, Test 0.2345
          RMSE             : Train 134.8621, Val 135.8992, Test 136.1580
Best:
          R2_Score         : Train 0.2387, Val 0.2394, Test 0.2383
          RMSE             : Train 134.9073, Val 135.2338, Test 135.8255
Epoch 79: Loss:            : Train 0.0150, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2325, Val 0.2364, Test 0.2393
          RMSE             : Train 135.4561, Val 135.5003, Test 135.7301
Best:
          R2_Score         : Train 0.2387, Val 0.2394, Test 0.2383
          RMSE             : Train 134.9073, Val 135.2338, Test 135.8255
Epoch 80: Loss:            : Train 0.0148, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2390, Val 0.2336, Test 0.2358
          RMSE             : Train 134.8776, Val 135.7481, Test 136.0434
Best:
          R2_Score         : Train 0.2387, Val 0.2394, Test 0.2383
          RMSE             : Train 134.9073, Val 135.2338, Test 135.8255
Epoch 81: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2399, Val 0.2399, Test 0.2394
          RMSE             : Train 134.7987, Val 135.1915, Test 135.7216
Best:
          R2_Score         : Train 0.2399, Val 0.2399, Test 0.2394
          RMSE             : Train 134.7987, Val 135.1915, Test 135.7216
Epoch 82: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 83: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2407, Val 0.2345, Test 0.2362
          RMSE             : Train 134.7286, Val 135.6678, Test 136.0108
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 84: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2378, Val 0.2351, Test 0.2378
          RMSE             : Train 134.9829, Val 135.6126, Test 135.8658
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.71it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.01it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.62it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.67it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.88it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.36it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.30it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.12it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.70it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.55it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.16it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.47it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.37it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 17.82it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 15.32it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 50.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.81it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.36it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.93it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 29.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.85it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.68it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 29.09it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.66it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.02it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.36it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 21.51it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 33.41it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 29.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.68it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.59it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.92it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 19.53it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 30.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.25it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.58it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.25it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.03it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 29.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.13it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.35it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  9.94it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.06it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.27it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.81it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.10it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 23.55it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.31it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.49it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.35it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.32it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.48it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.94it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.80it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 103.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.78it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.30it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 25.44it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 27.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.68it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.89it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.93it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 21.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.06it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 34.71it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.70it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.86it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.25it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 21.14it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 48.94it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 28.60it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.53it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.04it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 20.37it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.72it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.94it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.64it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 36.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 37.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.62it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.75it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 19.35it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.71it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.73it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 27.29it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.07it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 35.24it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.17it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 24.12it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 28.11it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 29.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.01it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.87it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.59it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.04it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.43it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.93it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.21it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.56it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.08it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.90it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.24it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.48it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 60.15it/s]
Epoch 85: Loss:            : Train 0.0148, Val 0.0161, Test 0.0154
          R2_Score         : Train 0.2407, Val 0.2233, Test 0.2338
          RMSE             : Train 134.7329, Val 136.6546, Test 136.2221
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 86: Loss:            : Train 0.0148, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2395, Val 0.2353, Test 0.2374
          RMSE             : Train 134.8335, Val 135.5957, Test 135.9032
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 87: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2387, Val 0.2383, Test 0.2366
          RMSE             : Train 134.9082, Val 135.3294, Test 135.9787
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 88: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2409, Val 0.2348, Test 0.2368
          RMSE             : Train 134.7134, Val 135.6409, Test 135.9602
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 89: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2375, Val 0.2336, Test 0.2353
          RMSE             : Train 135.0154, Val 135.7489, Test 136.0880
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 90: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2374, Val 0.2325, Test 0.2387
          RMSE             : Train 135.0256, Val 135.8423, Test 135.7867
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 91: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2389, Val 0.2362, Test 0.2392
          RMSE             : Train 134.8876, Val 135.5184, Test 135.7461
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 92: Loss:            : Train 0.0148, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2389, Val 0.2302, Test 0.2372
          RMSE             : Train 134.8857, Val 136.0450, Test 135.9252
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 93: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2396, Val 0.2329, Test 0.2367
          RMSE             : Train 134.8235, Val 135.8145, Test 135.9622
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 94: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2410, Val 0.2315, Test 0.2311
          RMSE             : Train 134.7020, Val 135.9339, Test 136.4684
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 95: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2386, Val 0.2362, Test 0.2427
          RMSE             : Train 134.9203, Val 135.5151, Test 135.4352
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 96: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2409, Val 0.2416, Test 0.2458
          RMSE             : Train 134.7143, Val 135.0336, Test 135.1515
Best:
          R2_Score         : Train 0.2396, Val 0.2424, Test 0.2432
          RMSE             : Train 134.8257, Val 134.9709, Test 135.3821
Epoch 97: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Best:
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Epoch 98: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2406, Val 0.2284, Test 0.2367
          RMSE             : Train 134.7402, Val 136.2041, Test 135.9675
Best:
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Epoch 99: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2396, Val 0.2410, Test 0.2425
          RMSE             : Train 134.8262, Val 135.0930, Test 135.4473
Best:
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Epoch 100: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2413, Val 0.2380, Test 0.2423
          RMSE             : Train 134.6774, Val 135.3607, Test 135.4672
Best:
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Epoch 101: Loss:            : Train 0.0148, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2403, Val 0.2319, Test 0.2308
          RMSE             : Train 134.7655, Val 135.8950, Test 136.4905
Best:
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Epoch 102: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2381, Val 0.2409, Test 0.2452
          RMSE             : Train 134.9645, Val 135.0968, Test 135.2106
Best:
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Epoch 103: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2438, Val 0.2376, Test 0.2427
          RMSE             : Train 134.4552, Val 135.3928, Test 135.4273
Best:
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Epoch 104: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2416, Val 0.2355, Test 0.2384
          RMSE             : Train 134.6539, Val 135.5836, Test 135.8157
Best:
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Epoch 105: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2387, Val 0.2404, Test 0.2433
          RMSE             : Train 134.9120, Val 135.1449, Test 135.3813
Best:
          R2_Score         : Train 0.2402, Val 0.2424, Test 0.2424
          RMSE             : Train 134.7752, Val 134.9694, Test 135.4586
Epoch 106: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2421, Val 0.2448, Test 0.2432
          RMSE             : Train 134.6073, Val 134.7507, Test 135.3904
Best:
          R2_Score         : Train 0.2421, Val 0.2448, Test 0.2432
          RMSE             : Train 134.6073, Val 134.7507, Test 135.3904
Epoch 107: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2418, Val 0.2437, Test 0.2455
          RMSE             : Train 134.6358, Val 134.8552, Test 135.1808
Best:
          R2_Score         : Train 0.2421, Val 0.2448, Test 0.2432
          RMSE             : Train 134.6073, Val 134.7507, Test 135.3904
Epoch 108: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.69it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.42it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.30it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 28.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.74it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.98it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.97it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.20it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 15.38it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.59it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.21it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 30.18it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.77it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.11it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 40.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.05it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.20it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.76it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.00it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.48it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.55it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.43it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.17it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 29.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.91it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.14it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.80it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.92it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.11it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  8.37it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 33.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 38.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 30.51it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.12it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.55it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.67it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.87it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.78it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 32.29it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.41it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 31.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.76it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.21it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 30.42it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 32.28it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 32.74it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 43.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.82it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.52it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.77it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.88it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.95it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.38it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.67it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 15.19it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.76it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.10it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 17.39it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.32it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.87it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.60it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 29.12it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.82it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.21it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 37.99it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.51it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 24.02it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.55it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 27.29it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.78it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.54it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.82it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.11it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 25.85it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.28it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.44it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 37.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.47it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 31.12it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 28.15it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.11it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 38.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.64it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.21it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 27.14it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.74it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.84it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.67it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.45it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.34it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.60it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.27it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.40it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.95it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.94it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 17.09it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.96it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.59it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 22.95it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.76it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.56it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.81it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.05it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.58it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 24.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 29.23it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.74it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.39it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.64it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.69it/s]
          R2_Score         : Train 0.2419, Val 0.2280, Test 0.2340
          RMSE             : Train 134.6266, Val 136.2448, Test 136.2099
Best:
          R2_Score         : Train 0.2421, Val 0.2448, Test 0.2432
          RMSE             : Train 134.6073, Val 134.7507, Test 135.3904
Epoch 109: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2430, Val 0.2404, Test 0.2452
          RMSE             : Train 134.5230, Val 135.1432, Test 135.2057
Best:
          R2_Score         : Train 0.2421, Val 0.2448, Test 0.2432
          RMSE             : Train 134.6073, Val 134.7507, Test 135.3904
Epoch 110: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2412, Val 0.2341, Test 0.2382
          RMSE             : Train 134.6876, Val 135.7042, Test 135.8363
Best:
          R2_Score         : Train 0.2421, Val 0.2448, Test 0.2432
          RMSE             : Train 134.6073, Val 134.7507, Test 135.3904
Epoch 111: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2401, Val 0.2418, Test 0.2437
          RMSE             : Train 134.7871, Val 135.0199, Test 135.3402
Best:
          R2_Score         : Train 0.2421, Val 0.2448, Test 0.2432
          RMSE             : Train 134.6073, Val 134.7507, Test 135.3904
Epoch 112: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2428, Val 0.2369, Test 0.2416
          RMSE             : Train 134.5460, Val 135.4565, Test 135.5323
Best:
          R2_Score         : Train 0.2421, Val 0.2448, Test 0.2432
          RMSE             : Train 134.6073, Val 134.7507, Test 135.3904
Epoch 113: Loss:            : Train 0.0148, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2394, Val 0.2437, Test 0.2474
          RMSE             : Train 134.8419, Val 134.8497, Test 135.0137
Best:
          R2_Score         : Train 0.2421, Val 0.2448, Test 0.2432
          RMSE             : Train 134.6073, Val 134.7507, Test 135.3904
Epoch 114: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2455, Val 0.2457, Test 0.2448
          RMSE             : Train 134.3058, Val 134.6733, Test 135.2400
Best:
          R2_Score         : Train 0.2455, Val 0.2457, Test 0.2448
          RMSE             : Train 134.3058, Val 134.6733, Test 135.2400
Epoch 115: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 116: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2445, Val 0.2427, Test 0.2434
          RMSE             : Train 134.3893, Val 134.9406, Test 135.3724
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 117: Loss:            : Train 0.0147, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2457, Val 0.2405, Test 0.2341
          RMSE             : Train 134.2837, Val 135.1354, Test 136.1989
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 118: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2454, Val 0.2368, Test 0.2436
          RMSE             : Train 134.3141, Val 135.4674, Test 135.3493
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 119: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2436, Val 0.2431, Test 0.2378
          RMSE             : Train 134.4760, Val 134.9025, Test 135.8714
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 120: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2409, Val 0.2410, Test 0.2386
          RMSE             : Train 134.7165, Val 135.0920, Test 135.7969
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 121: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2420, Val 0.2357, Test 0.2441
          RMSE             : Train 134.6184, Val 135.5628, Test 135.3070
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 122: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2426, Val 0.2438, Test 0.2380
          RMSE             : Train 134.5638, Val 134.8379, Test 135.8509
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 123: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2438, Val 0.2427, Test 0.2467
          RMSE             : Train 134.4557, Val 134.9405, Test 135.0724
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 124: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2457, Val 0.2429, Test 0.2461
          RMSE             : Train 134.2878, Val 134.9259, Test 135.1220
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 125: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2435, Val 0.2421, Test 0.2432
          RMSE             : Train 134.4798, Val 134.9907, Test 135.3850
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 126: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2423, Val 0.2362, Test 0.2378
          RMSE             : Train 134.5903, Val 135.5164, Test 135.8676
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 127: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2402, Val 0.2393, Test 0.2418
          RMSE             : Train 134.7752, Val 135.2446, Test 135.5132
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 128: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2437, Val 0.2446, Test 0.2447
          RMSE             : Train 134.4650, Val 134.7676, Test 135.2527
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 129: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2417, Val 0.2345, Test 0.2380
          RMSE             : Train 134.6421, Val 135.6679, Test 135.8489
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 130: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2438, Val 0.2397, Test 0.2470
          RMSE             : Train 134.4525, Val 135.2090, Test 135.0421
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 131: Loss:            : Train 0.0147, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2448, Val 0.2361, Test 0.2349
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.97it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.23it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.39it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 16.67it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.62it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.95it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.64it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.65it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.54it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.00it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.60it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 13.34it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.00it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.51it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 17.27it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.90it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.27it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.78it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 89.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.23it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.14it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.38it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.15it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.57it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.11it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.82it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 29.64it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.25it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 34.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.91it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.15it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 32.95it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  8.18it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 35.80it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.32it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.98it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 37.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 40.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.95it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.80it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.56it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.65it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.55it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 36.61it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.73it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.99it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.04it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.18it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.87it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 29.39it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.90it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.40it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.97it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 27.86it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.19it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 24.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.25it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 19.36it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.35it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.55it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 28.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 51.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.09it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.68it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.90it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.52it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 31.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.07it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.81it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.90it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.61it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.99it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.48it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.09it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.98it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 78.92it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:04,  3.47it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.05it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.87it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  3.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.95it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.33it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.45it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.89it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.21it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.29it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.71it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.42it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.84it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 28.12it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.65it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 26.67it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.60it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.62it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.04it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.64it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 24.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.14it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 13.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.88it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.81it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.39it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 35.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.48it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.41it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.18it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 42.84it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 33.34it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.03it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 34.48it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 39.85it/s]
          RMSE             : Train 134.3618, Val 135.5277, Test 136.1265
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 132: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2420, Val 0.2341, Test 0.2399
          RMSE             : Train 134.6149, Val 135.7037, Test 135.6844
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 133: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2441, Val 0.2389, Test 0.2449
          RMSE             : Train 134.4314, Val 135.2788, Test 135.2357
Best:
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2489
          RMSE             : Train 134.2485, Val 134.6189, Test 134.8742
Epoch 134: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2459, Val 0.2467, Test 0.2442
          RMSE             : Train 134.2706, Val 134.5804, Test 135.2982
Best:
          R2_Score         : Train 0.2459, Val 0.2467, Test 0.2442
          RMSE             : Train 134.2706, Val 134.5804, Test 135.2982
Epoch 135: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2459, Val 0.2374, Test 0.2404
          RMSE             : Train 134.2701, Val 135.4139, Test 135.6392
Best:
          R2_Score         : Train 0.2459, Val 0.2467, Test 0.2442
          RMSE             : Train 134.2706, Val 134.5804, Test 135.2982
Epoch 136: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2436, Val 0.2403, Test 0.2424
          RMSE             : Train 134.4734, Val 135.1555, Test 135.4579
Best:
          R2_Score         : Train 0.2459, Val 0.2467, Test 0.2442
          RMSE             : Train 134.2706, Val 134.5804, Test 135.2982
Epoch 137: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2428, Val 0.2408, Test 0.2439
          RMSE             : Train 134.5397, Val 135.1128, Test 135.3204
Best:
          R2_Score         : Train 0.2459, Val 0.2467, Test 0.2442
          RMSE             : Train 134.2706, Val 134.5804, Test 135.2982
Epoch 138: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Best:
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Epoch 139: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2474, Val 0.2411, Test 0.2449
          RMSE             : Train 134.1328, Val 135.0811, Test 135.2359
Best:
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Epoch 140: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2461, Val 0.2355, Test 0.2412
          RMSE             : Train 134.2523, Val 135.5787, Test 135.5685
Best:
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Epoch 141: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2444, Val 0.2459, Test 0.2468
          RMSE             : Train 134.3988, Val 134.6559, Test 135.0677
Best:
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Epoch 142: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2457, Val 0.2365, Test 0.2427
          RMSE             : Train 134.2883, Val 135.4879, Test 135.4325
Best:
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Epoch 143: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2442, Val 0.2400, Test 0.2452
          RMSE             : Train 134.4160, Val 135.1774, Test 135.2091
Best:
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Epoch 144: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2458, Val 0.2442, Test 0.2444
          RMSE             : Train 134.2785, Val 134.8044, Test 135.2825
Best:
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Epoch 145: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2441, Val 0.2380, Test 0.2472
          RMSE             : Train 134.4250, Val 135.3541, Test 135.0310
Best:
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Epoch 146: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2418, Val 0.2391, Test 0.2452
          RMSE             : Train 134.6294, Val 135.2644, Test 135.2078
Best:
          R2_Score         : Train 0.2451, Val 0.2479, Test 0.2490
          RMSE             : Train 134.3371, Val 134.4734, Test 134.8702
Epoch 147: Loss:            : Train 0.0147, Val 0.0153, Test 0.0150
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 148: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2470, Val 0.2488, Test 0.2504
          RMSE             : Train 134.1707, Val 134.3921, Test 134.7403
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 149: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2456, Val 0.2396, Test 0.2459
          RMSE             : Train 134.2952, Val 135.2134, Test 135.1464
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 150: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2434, Val 0.2352, Test 0.2382
          RMSE             : Train 134.4880, Val 135.6105, Test 135.8362
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 151: Loss:            : Train 0.0147, Val 0.0156, Test 0.0150
          R2_Score         : Train 0.2442, Val 0.2402, Test 0.2480
          RMSE             : Train 134.4203, Val 135.1651, Test 134.9591
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 152: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2442, Val 0.2341, Test 0.2414
          RMSE             : Train 134.4217, Val 135.7067, Test 135.5485
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 153: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2422, Val 0.2412, Test 0.2431
          RMSE             : Train 134.5969, Val 135.0724, Test 135.3967
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 154: Loss:            : Train 0.0147, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2440, Val 0.2409, Test 0.2372
          RMSE             : Train 134.4355, Val 135.0977, Test 135.9239
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.18it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.71it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.65it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 29.28it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  6.68it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  9.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 79.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.02it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 22.24it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.80it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.57it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 14.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.97it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 21.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.04it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.33it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.88it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.43it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.93it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.57it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 29.91it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.15it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.62it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 56.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.46it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 30.91it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.07it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.53it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.04it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.36it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.56it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 35.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 23.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.08it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.91it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.62it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.90it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 17.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.46it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.31it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.44it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.97it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 52.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.92it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.75it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.09it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.65it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.60it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 28.63it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.27it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.68it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.62it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.94it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.59it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 27.04it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.84it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.24it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.98it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.07it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.93it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 26.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 49.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.93it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.04it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.21it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.46it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.10it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.17it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 33.93it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.96it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 33.53it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 39.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.86it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 36.07it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 29.70it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.68it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 33.04it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.48it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.19it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.89it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.90it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 56.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.43it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.21it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.90it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 28.73it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 37.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.93it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 24.39it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.68it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.98it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.12it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.80it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.51it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.06it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.27it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.83it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.09it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.48it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.38it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.35it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.92it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 26.82it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 24.48it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.32it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 30.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.81it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.20it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.48it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.24it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.07it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 27.18it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.43it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.88it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.19it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.78it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.38it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.27it/s]
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 155: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2440, Val 0.2401, Test 0.2409
          RMSE             : Train 134.4395, Val 135.1680, Test 135.5928
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 156: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2449, Val 0.2363, Test 0.2429
          RMSE             : Train 134.3542, Val 135.5074, Test 135.4135
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 157: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2407, Val 0.2365, Test 0.2404
          RMSE             : Train 134.7265, Val 135.4918, Test 135.6319
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 158: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2407, Val 0.2419, Test 0.2410
          RMSE             : Train 134.7269, Val 135.0155, Test 135.5811
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 159: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2416, Val 0.2455, Test 0.2467
          RMSE             : Train 134.6461, Val 134.6925, Test 135.0770
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 160: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2466, Val 0.2405, Test 0.2424
          RMSE             : Train 134.2077, Val 135.1318, Test 135.4620
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 161: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2455, Val 0.2402, Test 0.2387
          RMSE             : Train 134.2999, Val 135.1660, Test 135.7856
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 162: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2447, Val 0.2427, Test 0.2471
          RMSE             : Train 134.3757, Val 134.9425, Test 135.0393
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 163: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2466, Val 0.2425, Test 0.2457
          RMSE             : Train 134.2076, Val 134.9564, Test 135.1595
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 164: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2470, Val 0.2463, Test 0.2481
          RMSE             : Train 134.1693, Val 134.6216, Test 134.9466
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 165: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2443, Val 0.2393, Test 0.2441
          RMSE             : Train 134.4146, Val 135.2457, Test 135.3015
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 166: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2457, Val 0.2355, Test 0.2420
          RMSE             : Train 134.2829, Val 135.5841, Test 135.4960
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 167: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2447, Val 0.2417, Test 0.2436
          RMSE             : Train 134.3755, Val 135.0311, Test 135.3513
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 168: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2463, Val 0.2425, Test 0.2437
          RMSE             : Train 134.2295, Val 134.9607, Test 135.3386
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 169: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2423, Val 0.2468, Test 0.2469
          RMSE             : Train 134.5852, Val 134.5776, Test 135.0542
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 170: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2452, Val 0.2455, Test 0.2477
          RMSE             : Train 134.3279, Val 134.6861, Test 134.9795
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 171: Loss:            : Train 0.0147, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2438, Val 0.2408, Test 0.2375
          RMSE             : Train 134.4518, Val 135.1102, Test 135.8915
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 172: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2420, Val 0.2464, Test 0.2467
          RMSE             : Train 134.6148, Val 134.6077, Test 135.0686
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 173: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2453, Val 0.2432, Test 0.2471
          RMSE             : Train 134.3232, Val 134.8929, Test 135.0364
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 174: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2479, Val 0.2433, Test 0.2476
          RMSE             : Train 134.0937, Val 134.8874, Test 134.9918
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 175: Loss:            : Train 0.0146, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2482, Val 0.2460, Test 0.2470
          RMSE             : Train 134.0600, Val 134.6484, Test 135.0462
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 176: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2451, Val 0.2475, Test 0.2458
          RMSE             : Train 134.3388, Val 134.5127, Test 135.1519
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 177: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2431, Val 0.2368, Test 0.2410
          RMSE             : Train 134.5147, Val 135.4628, Test 135.5788
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.63it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 19.82it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.02it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.86it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.31it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 28.56it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.27it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.33it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 24.62it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.40it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.70it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.38it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 29.90it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.20it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.92it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.49it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 33.35it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 32.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.14it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.67it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.26it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.44it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.35it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.34it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 32.62it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.82it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.10it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.98it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 28.24it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 20.41it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.29it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.30it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 20.33it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.73it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.37it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.20it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.13it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 20.18it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.53it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.37it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.80it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.57it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.24it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.38it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.35it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.64it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.71it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.55it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.38it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.38it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.86it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.22it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.38it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 28.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 37.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 16.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.11it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.47it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.27it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 30.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.02it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.95it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.28it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 31.65it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 29.82it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.06it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.80it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.68it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.73it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.56it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.54it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  3.84it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  9.33it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.23it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 25.73it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.06it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.91it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.29it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.37it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 21.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.44it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.99it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 15.80it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.68it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 26.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.27it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.68it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.21it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 34.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.20it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 11.14it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.98it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.33it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 27.00it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.38it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.18it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.31it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 14.05it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 30.43it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.90it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.73it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 31.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.14it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 34.42it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 27.38it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.03it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.35it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.26it/s]
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 178: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2432, Val 0.2492, Test 0.2459
          RMSE             : Train 134.5081, Val 134.3553, Test 135.1435
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 179: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2454, Val 0.2437, Test 0.2472
          RMSE             : Train 134.3104, Val 134.8537, Test 135.0248
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 180: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2456, Val 0.2473, Test 0.2469
          RMSE             : Train 134.2989, Val 134.5292, Test 135.0577
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 181: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2444, Val 0.2485, Test 0.2485
          RMSE             : Train 134.4037, Val 134.4198, Test 134.9106
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 182: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2470, Val 0.2435, Test 0.2438
          RMSE             : Train 134.1695, Val 134.8710, Test 135.3349
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 183: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2458, Val 0.2406, Test 0.2436
          RMSE             : Train 134.2812, Val 135.1276, Test 135.3547
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 184: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2451, Val 0.2445, Test 0.2457
          RMSE             : Train 134.3390, Val 134.7794, Test 135.1610
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 185: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2471, Val 0.2464, Test 0.2476
          RMSE             : Train 134.1634, Val 134.6144, Test 134.9924
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 186: Loss:            : Train 0.0146, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2485, Val 0.2382, Test 0.2428
          RMSE             : Train 134.0365, Val 135.3423, Test 135.4188
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 187: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2407, Val 0.2423, Test 0.2448
          RMSE             : Train 134.7344, Val 134.9736, Test 135.2426
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 188: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2455, Val 0.2387, Test 0.2425
          RMSE             : Train 134.3056, Val 135.2968, Test 135.4510
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 189: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2461, Val 0.2463, Test 0.2493
          RMSE             : Train 134.2521, Val 134.6219, Test 134.8401
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 190: Loss:            : Train 0.0147, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2443, Val 0.2386, Test 0.2387
          RMSE             : Train 134.4134, Val 135.3043, Test 135.7850
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 191: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2462, Val 0.2461, Test 0.2485
          RMSE             : Train 134.2415, Val 134.6386, Test 134.9142
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 192: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2458, Val 0.2448, Test 0.2470
          RMSE             : Train 134.2764, Val 134.7570, Test 135.0494
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 193: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2446, Val 0.2437, Test 0.2451
          RMSE             : Train 134.3814, Val 134.8481, Test 135.2145
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 194: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2461, Val 0.2460, Test 0.2472
          RMSE             : Train 134.2480, Val 134.6492, Test 135.0283
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 195: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2464, Val 0.2350, Test 0.2443
          RMSE             : Train 134.2261, Val 135.6202, Test 135.2837
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 196: Loss:            : Train 0.0146, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2485, Val 0.2484, Test 0.2486
          RMSE             : Train 134.0323, Val 134.4336, Test 134.9019
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 197: Loss:            : Train 0.0146, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2488, Val 0.2452, Test 0.2480
          RMSE             : Train 134.0103, Val 134.7184, Test 134.9591
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 198: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2460, Val 0.2305, Test 0.2353
          RMSE             : Train 134.2584, Val 136.0225, Test 136.0914
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 199: Loss:            : Train 0.0148, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2419, Val 0.2449, Test 0.2482
          RMSE             : Train 134.6265, Val 134.7465, Test 134.9414
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168
Epoch 200: Loss:            : Train 0.0146, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2485, Val 0.2487, Test 0.2492
          RMSE             : Train 134.0369, Val 134.4073, Test 134.8504
Best:
          R2_Score         : Train 0.2459, Val 0.2493, Test 0.2496
          RMSE             : Train 134.2694, Val 134.3507, Test 134.8168

