  0%|          | 0/98735 [00:00<?, ?it/s]  5%|▌         | 5286/98735 [00:00<00:01, 52844.30it/s] 12%|█▏        | 12021/98735 [00:00<00:01, 61374.85it/s] 19%|█▉        | 18893/98735 [00:00<00:01, 64726.10it/s] 26%|██▌       | 25765/98735 [00:00<00:01, 66299.83it/s] 34%|███▎      | 33132/98735 [00:00<00:00, 68954.91it/s] 41%|████      | 40028/98735 [00:00<00:01, 42607.57it/s] 46%|████▌     | 45411/98735 [00:01<00:01, 33470.77it/s] 50%|█████     | 49733/98735 [00:01<00:01, 29657.78it/s] 54%|█████▍    | 53373/98735 [00:01<00:01, 28158.44it/s] 57%|█████▋    | 56624/98735 [00:01<00:01, 26524.67it/s] 60%|██████    | 59552/98735 [00:01<00:01, 24977.03it/s] 63%|██████▎   | 62219/98735 [00:01<00:01, 24007.23it/s] 66%|██████▌   | 64719/98735 [00:01<00:01, 23613.83it/s] 68%|██████▊   | 67140/98735 [00:02<00:01, 23180.64it/s] 70%|███████   | 69492/98735 [00:02<00:01, 22821.26it/s] 73%|███████▎  | 71793/98735 [00:02<00:01, 22494.39it/s] 77%|███████▋  | 75599/98735 [00:02<00:00, 26641.85it/s] 84%|████████▎ | 82494/98735 [00:02<00:00, 38305.46it/s] 90%|█████████ | 89103/98735 [00:02<00:00, 46155.89it/s] 97%|█████████▋| 95889/98735 [00:02<00:00, 52396.33it/s]100%|██████████| 98735/98735 [00:02<00:00, 36879.00it/s]
  0%|          | 0/14105 [00:00<?, ?it/s] 48%|████▊     | 6801/14105 [00:00<00:00, 67993.69it/s] 98%|█████████▊| 13801/14105 [00:00<00:00, 69168.36it/s]100%|██████████| 14105/14105 [00:00<00:00, 68869.70it/s]
  0%|          | 0/28210 [00:00<?, ?it/s] 24%|██▍       | 6825/28210 [00:00<00:00, 68241.93it/s] 48%|████▊     | 13650/28210 [00:00<00:00, 67622.24it/s] 72%|███████▏  | 20413/28210 [00:00<00:00, 67536.18it/s] 96%|█████████▋| 27167/28210 [00:00<00:00, 67190.77it/s]100%|██████████| 28210/28210 [00:00<00:00, 67566.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 24.62it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.75it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 28.57it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 32.43it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 35.06it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 32.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.77it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 28.47it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.59it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.03it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.02it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 30.28it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.80it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 28.48it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  8.71it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.72it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:06,  3.52it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 18.07it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.63it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.67it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 31.03it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 58.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.91it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.46it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.23it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 30.50it/s]Train:  40%|████      | 10/25 [00:00<00:00, 24.71it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.65it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.95it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 28.66it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 38.44it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 38.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 20.07it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.99it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.66it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.10it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 31.08it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.72it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 25.42it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 34.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.74it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 15.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.02it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.89it/s]Train:  20%|██        | 5/25 [00:00<00:01, 18.15it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.23it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 26.18it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 25.90it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 26.17it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 35.20it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  5.71it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 12.04it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.70it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:03,  7.32it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 18.44it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 18.27it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 23.51it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 27.18it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 23.93it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  6.26it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 17.37it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.02it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 15.18it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.26it/s]Train:  40%|████      | 10/25 [00:00<00:00, 17.76it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 18.00it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 24.43it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 22.61it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 15.86it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 17.04it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.12it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:02,  8.90it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 17.09it/s]Train:  40%|████      | 10/25 [00:00<00:01, 11.92it/s]Train:  56%|█████▌    | 14/25 [00:01<00:00, 13.52it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 17.59it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 18.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  7.59it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 14.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 19.87it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.15it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:02,  8.25it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 13.18it/s]Train:  36%|███▌      | 9/25 [00:00<00:01, 12.60it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 18.16it/s]Train:  64%|██████▍   | 16/25 [00:01<00:00, 17.04it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 18.03it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 18.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 13.60it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 22.52it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.41it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 12.54it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.68it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 18.18it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 21.75it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 19.06it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 19.75it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 10.26it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 13.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 22.76it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.05it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 16.73it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 28.37it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.98it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 21.41it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 23.31it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 16.13it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 49.77it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 38.84it/s]Train:  32%|███▏      | 8/25 [00:00<00:01, 15.82it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 15.46it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 17.46it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 23.60it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 21.69it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.91it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 24.73it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.14it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:01, 19.12it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 25.32it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 15.31it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 14.61it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 17.59it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 19.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.59it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 49.05it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.40it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 20.25it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.77it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 20.79it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 23.49it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 25.41it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 59.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  4.59it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.70it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 17.25it/s]Loading house from data/beijing/house_clean.csv
Loading airbnb from data/beijing/airbnb_clean.csv
Current house columns Index(['cid', 'DOM', 'followers', 'square', 'livingRoom', 'drawingRoom',
       'kitchen', 'bathRoom', 'floor', 'constructionTime', 'ladderRatio',
       'elevator', 'fiveYearsProperty', 'subway', 'did_2', 'did_3', 'did_4',
       'did_5', 'did_6', 'did_7', 'did_8', 'did_9', 'did_10', 'did_11',
       'did_12', 'did_13', 'bt_2', 'bt_3', 'bt_4', 'rc_2', 'rc_3', 'rc_4',
       'bs_2', 'bs_3', 'bs_4', 'bs_5', 'bs_6', 'ty_2014', 'ty_2015', 'ty_2016',
       'ty_2017', 'ty_2018', 'tm_2', 'tm_3', 'tm_4', 'tm_5', 'tm_6', 'tm_7',
       'tm_8', 'tm_9', 'tm_10', 'tm_11', 'tm_12', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'price', 'minimum_nights', 'number_of_reviews',
       'reviews_per_month', 'calculated_host_listings_count',
       'availability_365', 'nbr_丰台区 ', 'nbr_大兴区 ', 'nbr_密云县 ', 'nbr_平谷区 ',
       'nbr_延庆县 ', 'nbr_怀柔区 ', 'nbr_房山区', 'nbr_昌平区', 'nbr_朝阳区 ', 'nbr_海淀区',
       'nbr_石景山区', 'nbr_西城区', 'nbr_通州区 ', 'nbr_门头沟区 ', 'nbr_顺义区 ',
       'rt_Private room', 'rt_Shared room'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 25 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0    [23, 400]  [4096, 400]    9600       9200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           90001
Trainable params       90001
Non-trainable params       0
Mult-Adds              89400
=================================================================
n_classes=2
task=regression
model_name=beijing_B_2022-05-21-21-23-15
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/beijing_B_2022-05-21-21-23-15.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f83f7ac8580>, <metric.rmse.RMSE object at 0x7f83f7ac85e0>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=23, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f83f7ac85b0>
Epoch 1: Loss:            : Train 0.0362, Val 0.0308, Test 0.0312
          R2_Score         : Train -0.0686, Val 0.0860, Test 0.0874
          RMSE             : Train 189.0760, Val 176.7596, Test 175.1928
Best:
          R2_Score         : Train -0.0686, Val 0.0860, Test 0.0874
          RMSE             : Train 189.0760, Val 176.7596, Test 175.1928
Epoch 2: Loss:            : Train 0.0302, Val 0.0300, Test 0.0299
          R2_Score         : Train 0.1133, Val 0.1297, Test 0.1289
          RMSE             : Train 172.2411, Val 172.4824, Test 171.1699
Best:
          R2_Score         : Train 0.1133, Val 0.1297, Test 0.1289
          RMSE             : Train 172.2411, Val 172.4824, Test 171.1699
Epoch 3: Loss:            : Train 0.0294, Val 0.0296, Test 0.0294
          R2_Score         : Train 0.1366, Val 0.1436, Test 0.1427
          RMSE             : Train 169.9625, Val 171.0996, Test 169.8013
Best:
          R2_Score         : Train 0.1366, Val 0.1436, Test 0.1427
          RMSE             : Train 169.9625, Val 171.0996, Test 169.8013
Epoch 4: Loss:            : Train 0.0291, Val 0.0294, Test 0.0291
          R2_Score         : Train 0.1491, Val 0.1514, Test 0.1512
          RMSE             : Train 168.7278, Val 170.3219, Test 168.9579
Best:
          R2_Score         : Train 0.1491, Val 0.1514, Test 0.1512
          RMSE             : Train 168.7278, Val 170.3219, Test 168.9579
Epoch 5: Loss:            : Train 0.0287, Val 0.0290, Test 0.0288
          R2_Score         : Train 0.1572, Val 0.1603, Test 0.1587
          RMSE             : Train 167.9175, Val 169.4315, Test 168.2157
Best:
          R2_Score         : Train 0.1572, Val 0.1603, Test 0.1587
          RMSE             : Train 167.9175, Val 169.4315, Test 168.2157
Epoch 6: Loss:            : Train 0.0286, Val 0.0288, Test 0.0286
          R2_Score         : Train 0.1657, Val 0.1655, Test 0.1650
          RMSE             : Train 167.0735, Val 168.9009, Test 167.5792
Best:
          R2_Score         : Train 0.1657, Val 0.1655, Test 0.1650
          RMSE             : Train 167.0735, Val 168.9009, Test 167.5792
Epoch 7: Loss:            : Train 0.0283, Val 0.0288, Test 0.0284
          R2_Score         : Train 0.1712, Val 0.1726, Test 0.1713
          RMSE             : Train 166.5176, Val 168.1871, Test 166.9460
Best:
          R2_Score         : Train 0.1712, Val 0.1726, Test 0.1713
          RMSE             : Train 166.5176, Val 168.1871, Test 166.9460
Epoch 8: Loss:            : Train 0.0280, Val 0.0284, Test 0.0281
          R2_Score         : Train 0.1781, Val 0.1782, Test 0.1793
          RMSE             : Train 165.8240, Val 167.6140, Test 166.1399
Best:
          R2_Score         : Train 0.1781, Val 0.1782, Test 0.1793
          RMSE             : Train 165.8240, Val 167.6140, Test 166.1399
Epoch 9: Loss:            : Train 0.0278, Val 0.0281, Test 0.0279
          R2_Score         : Train 0.1850, Val 0.1867, Test 0.1849
          RMSE             : Train 165.1298, Val 166.7453, Test 165.5699
Best:
          R2_Score         : Train 0.1850, Val 0.1867, Test 0.1849
          RMSE             : Train 165.1298, Val 166.7453, Test 165.5699
Epoch 10: Loss:            : Train 0.0277, Val 0.0279, Test 0.0277
          R2_Score         : Train 0.1908, Val 0.1930, Test 0.1917
          RMSE             : Train 164.5377, Val 166.0974, Test 164.8808
Best:
          R2_Score         : Train 0.1908, Val 0.1930, Test 0.1917
          RMSE             : Train 164.5377, Val 166.0974, Test 164.8808
Epoch 11: Loss:            : Train 0.0274, Val 0.0281, Test 0.0276
          R2_Score         : Train 0.1970, Val 0.1952, Test 0.1946
          RMSE             : Train 163.9037, Val 165.8674, Test 164.5841
Best:
          R2_Score         : Train 0.1970, Val 0.1952, Test 0.1946
          RMSE             : Train 163.9037, Val 165.8674, Test 164.5841
Epoch 12: Loss:            : Train 0.0272, Val 0.0276, Test 0.0273
          R2_Score         : Train 0.2032, Val 0.2039, Test 0.2032
          RMSE             : Train 163.2720, Val 164.9653, Test 163.7032
Best:
          R2_Score         : Train 0.2032, Val 0.2039, Test 0.2032
          RMSE             : Train 163.2720, Val 164.9653, Test 163.7032
Epoch 13: Loss:            : Train 0.0272, Val 0.0278, Test 0.0274
          R2_Score         : Train 0.2075, Val 0.2070, Test 0.2023
          RMSE             : Train 162.8355, Val 164.6505, Test 163.7952
Best:
          R2_Score         : Train 0.2075, Val 0.2070, Test 0.2023
          RMSE             : Train 162.8355, Val 164.6505, Test 163.7952
Epoch 14: Loss:            : Train 0.0268, Val 0.0272, Test 0.0270
          R2_Score         : Train 0.2121, Val 0.2133, Test 0.2125
          RMSE             : Train 162.3591, Val 163.9979, Test 162.7413
Best:
          R2_Score         : Train 0.2121, Val 0.2133, Test 0.2125
          RMSE             : Train 162.3591, Val 163.9979, Test 162.7413
Epoch 15: Loss:            : Train 0.0269, Val 0.0275, Test 0.0271
          R2_Score         : Train 0.2179, Val 0.2116, Test 0.2105
          RMSE             : Train 161.7575, Val 164.1689, Test 162.9538
Best:
          R2_Score         : Train 0.2121, Val 0.2133, Test 0.2125
          RMSE             : Train 162.3591, Val 163.9979, Test 162.7413
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 39.07it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 26.52it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.26it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 28.48it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 25.30it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 22.69it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.37it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.37it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.43it/s]Train:  20%|██        | 5/25 [00:00<00:00, 25.27it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.40it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 20.66it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 25.55it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 20.05it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 19.15it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 84.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 12.32it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.45it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.54it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:07,  3.33it/s]Train:  20%|██        | 5/25 [00:00<00:01, 14.87it/s]Train:  32%|███▏      | 8/25 [00:00<00:01, 15.53it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 18.38it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 21.90it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 26.99it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00,  9.10it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.87it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  7.34it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 28.42it/s]Train:  40%|████      | 10/25 [00:00<00:00, 26.72it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.27it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.54it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 28.60it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 59.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 12.39it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.13it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  7.04it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.52it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 19.54it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.94it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 28.94it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 24.47it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.58it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 20.11it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.12it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 10.55it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 26.88it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 18.30it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 17.58it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 19.84it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  3.95it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 11.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 17.14it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.09it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.26it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 24.07it/s]Train:  40%|████      | 10/25 [00:00<00:00, 21.17it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.91it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 18.16it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 19.07it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 28.29it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  4.12it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 14.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.00it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 15.12it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.02it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 10.80it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.05it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 26.34it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 20.13it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 17.55it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 21.36it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  6.70it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 24.85it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.45it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 11.15it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 17.19it/s]Train:  36%|███▌      | 9/25 [00:00<00:01, 13.58it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 16.36it/s]Train:  60%|██████    | 15/25 [00:01<00:00, 12.31it/s]Train:  76%|███████▌  | 19/25 [00:01<00:00, 17.15it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 13.77it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 15.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  4.77it/s]Val: 100%|██████████| 4/4 [00:00<00:00,  8.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 21.87it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 15.76it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 18.33it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.59it/s]Train:  12%|█▏        | 3/25 [00:00<00:02,  8.45it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.32it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 17.10it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 19.52it/s]Train:  68%|██████▊   | 17/25 [00:01<00:00, 12.31it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 13.90it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 16.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 10.62it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 13.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 38.60it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.34it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 17.91it/s]Train:  40%|████      | 10/25 [00:00<00:00, 22.59it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 21.70it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 16.10it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 18.78it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 17.49it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 19.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 21.93it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 27.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 30.47it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.18it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 23.01it/s]Train:  40%|████      | 10/25 [00:00<00:00, 23.85it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 30.45it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.06it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 28.82it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.11it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 37.80it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.69it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 27.46it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.26it/s]Train:  40%|████      | 10/25 [00:00<00:00, 25.39it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 31.25it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 30.29it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 29.47it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 21.30it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 49.38it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.64it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.23it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.14it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.95it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.15it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.58it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 55.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  9.95it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 32.39it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.59it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 47.99it/s]Train:  40%|████      | 10/25 [00:00<00:00, 28.64it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 27.38it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.71it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 30.32it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 58.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.01it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.72it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.09it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 28.07it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 17.60it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 27.55it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.99it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 22.20it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 24.35it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  6.22it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 25.11it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.72it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 27.15it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 21.30it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 30.91it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 27.98it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 27.42it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 30.45it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.83it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.64it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 13.98it/s]Train:  40%|████      | 10/25 [00:00<00:00, 20.10it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 20.49it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.83it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.09it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 23.53it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.43it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 28.86it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.78it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.12it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.49it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 20.28it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 23.36it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.18it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.18it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 24.32it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.13it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.35it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.91it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  8.90it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 18.66it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 17.26it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 23.38it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 19.20it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 19.62it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 19.07it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 16.72it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 18.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.80it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 14.09it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.95it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.91it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 18.99it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 25.66it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 23.55it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 19.29it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 19.84it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 28.30it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 35.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.14it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 20.59it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.20it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.42it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 25.12it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.50it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 21.22it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 22.54it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.68it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.43it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 22.51it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.89it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.54it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.30it/s]Train:  32%|███▏      | 8/25 [00:00<00:01, 16.30it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 24.50it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 18.08it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 20.00it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 23.63it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 28.19it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 34.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 22.72it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.65it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02, 10.55it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 24.66it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 31.36it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 28.55it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 22.45it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 11.56it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 29.53it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 36.77it/s]
Epoch 16: Loss:            : Train 0.0266, Val 0.0270, Test 0.0267
          R2_Score         : Train 0.2215, Val 0.2248, Test 0.2225
          RMSE             : Train 161.3880, Val 162.7893, Test 161.7100
Best:
          R2_Score         : Train 0.2215, Val 0.2248, Test 0.2225
          RMSE             : Train 161.3880, Val 162.7893, Test 161.7100
Epoch 17: Loss:            : Train 0.0265, Val 0.0273, Test 0.0267
          R2_Score         : Train 0.2266, Val 0.2237, Test 0.2219
          RMSE             : Train 160.8529, Val 162.9085, Test 161.7707
Best:
          R2_Score         : Train 0.2215, Val 0.2248, Test 0.2225
          RMSE             : Train 161.3880, Val 162.7893, Test 161.7100
Epoch 18: Loss:            : Train 0.0263, Val 0.0268, Test 0.0266
          R2_Score         : Train 0.2295, Val 0.2249, Test 0.2238
          RMSE             : Train 160.5587, Val 162.7792, Test 161.5749
Best:
          R2_Score         : Train 0.2295, Val 0.2249, Test 0.2238
          RMSE             : Train 160.5587, Val 162.7792, Test 161.5749
Epoch 19: Loss:            : Train 0.0262, Val 0.0267, Test 0.0263
          R2_Score         : Train 0.2331, Val 0.2349, Test 0.2321
          RMSE             : Train 160.1751, Val 161.7307, Test 160.7101
Best:
          R2_Score         : Train 0.2331, Val 0.2349, Test 0.2321
          RMSE             : Train 160.1751, Val 161.7307, Test 160.7101
Epoch 20: Loss:            : Train 0.0260, Val 0.0266, Test 0.0263
          R2_Score         : Train 0.2370, Val 0.2325, Test 0.2327
          RMSE             : Train 159.7764, Val 161.9775, Test 160.6413
Best:
          R2_Score         : Train 0.2331, Val 0.2349, Test 0.2321
          RMSE             : Train 160.1751, Val 161.7307, Test 160.7101
Epoch 21: Loss:            : Train 0.0259, Val 0.0262, Test 0.0260
          R2_Score         : Train 0.2406, Val 0.2429, Test 0.2409
          RMSE             : Train 159.3913, Val 160.8818, Test 159.7878
Best:
          R2_Score         : Train 0.2406, Val 0.2429, Test 0.2409
          RMSE             : Train 159.3913, Val 160.8818, Test 159.7878
Epoch 22: Loss:            : Train 0.0258, Val 0.0264, Test 0.0260
          R2_Score         : Train 0.2440, Val 0.2431, Test 0.2416
          RMSE             : Train 159.0324, Val 160.8593, Test 159.7074
Best:
          R2_Score         : Train 0.2440, Val 0.2431, Test 0.2416
          RMSE             : Train 159.0324, Val 160.8593, Test 159.7074
Epoch 23: Loss:            : Train 0.0256, Val 0.0262, Test 0.0260
          R2_Score         : Train 0.2473, Val 0.2434, Test 0.2413
          RMSE             : Train 158.6887, Val 160.8258, Test 159.7431
Best:
          R2_Score         : Train 0.2473, Val 0.2434, Test 0.2413
          RMSE             : Train 158.6887, Val 160.8258, Test 159.7431
Epoch 24: Loss:            : Train 0.0256, Val 0.0262, Test 0.0258
          R2_Score         : Train 0.2480, Val 0.2497, Test 0.2491
          RMSE             : Train 158.6104, Val 160.1538, Test 158.9164
Best:
          R2_Score         : Train 0.2480, Val 0.2497, Test 0.2491
          RMSE             : Train 158.6104, Val 160.1538, Test 158.9164
Epoch 25: Loss:            : Train 0.0256, Val 0.0261, Test 0.0259
          R2_Score         : Train 0.2521, Val 0.2494, Test 0.2463
          RMSE             : Train 158.1856, Val 160.1895, Test 159.2173
Best:
          R2_Score         : Train 0.2480, Val 0.2497, Test 0.2491
          RMSE             : Train 158.6104, Val 160.1538, Test 158.9164
Epoch 26: Loss:            : Train 0.0256, Val 0.0265, Test 0.0259
          R2_Score         : Train 0.2532, Val 0.2489, Test 0.2453
          RMSE             : Train 158.0650, Val 160.2365, Test 159.3194
Best:
          R2_Score         : Train 0.2480, Val 0.2497, Test 0.2491
          RMSE             : Train 158.6104, Val 160.1538, Test 158.9164
Epoch 27: Loss:            : Train 0.0254, Val 0.0258, Test 0.0257
          R2_Score         : Train 0.2545, Val 0.2506, Test 0.2514
          RMSE             : Train 157.9325, Val 160.0560, Test 158.6774
Best:
          R2_Score         : Train 0.2545, Val 0.2506, Test 0.2514
          RMSE             : Train 157.9325, Val 160.0560, Test 158.6774
Epoch 28: Loss:            : Train 0.0254, Val 0.0260, Test 0.0257
          R2_Score         : Train 0.2573, Val 0.2501, Test 0.2511
          RMSE             : Train 157.6338, Val 160.1081, Test 158.7028
Best:
          R2_Score         : Train 0.2545, Val 0.2506, Test 0.2514
          RMSE             : Train 157.9325, Val 160.0560, Test 158.6774
Epoch 29: Loss:            : Train 0.0254, Val 0.0258, Test 0.0256
          R2_Score         : Train 0.2587, Val 0.2498, Test 0.2520
          RMSE             : Train 157.4781, Val 160.1436, Test 158.6078
Best:
          R2_Score         : Train 0.2545, Val 0.2506, Test 0.2514
          RMSE             : Train 157.9325, Val 160.0560, Test 158.6774
Epoch 30: Loss:            : Train 0.0252, Val 0.0256, Test 0.0254
          R2_Score         : Train 0.2613, Val 0.2574, Test 0.2585
          RMSE             : Train 157.2034, Val 159.3277, Test 157.9196
Best:
          R2_Score         : Train 0.2613, Val 0.2574, Test 0.2585
          RMSE             : Train 157.2034, Val 159.3277, Test 157.9196
Epoch 31: Loss:            : Train 0.0251, Val 0.0257, Test 0.0255
          R2_Score         : Train 0.2657, Val 0.2486, Test 0.2549
          RMSE             : Train 156.7391, Val 160.2720, Test 158.3048
Best:
          R2_Score         : Train 0.2613, Val 0.2574, Test 0.2585
          RMSE             : Train 157.2034, Val 159.3277, Test 157.9196
Epoch 32: Loss:            : Train 0.0250, Val 0.0264, Test 0.0255
          R2_Score         : Train 0.2666, Val 0.2580, Test 0.2586
          RMSE             : Train 156.6469, Val 159.2613, Test 157.9126
Best:
          R2_Score         : Train 0.2666, Val 0.2580, Test 0.2586
          RMSE             : Train 156.6469, Val 159.2613, Test 157.9126
Epoch 33: Loss:            : Train 0.0250, Val 0.0255, Test 0.0250
          R2_Score         : Train 0.2677, Val 0.2687, Test 0.2703
          RMSE             : Train 156.5268, Val 158.1157, Test 156.6616
Best:
          R2_Score         : Train 0.2677, Val 0.2687, Test 0.2703
          RMSE             : Train 156.5268, Val 158.1157, Test 156.6616
Epoch 34: Loss:            : Train 0.0249, Val 0.0262, Test 0.0261
          R2_Score         : Train 0.2674, Val 0.2332, Test 0.2373
          RMSE             : Train 156.5537, Val 161.9040, Test 160.1615
Best:
          R2_Score         : Train 0.2677, Val 0.2687, Test 0.2703
          RMSE             : Train 156.5268, Val 158.1157, Test 156.6616
Epoch 35: Loss:            : Train 0.0250, Val 0.0256, Test 0.0251
          R2_Score         : Train 0.2690, Val 0.2706, Test 0.2697
          RMSE             : Train 156.3870, Val 157.9112, Test 156.7193
Best:
          R2_Score         : Train 0.2690, Val 0.2706, Test 0.2697
          RMSE             : Train 156.3870, Val 157.9112, Test 156.7193
Epoch 36: Loss:            : Train 0.0247, Val 0.0258, Test 0.0253
          R2_Score         : Train 0.2726, Val 0.2630, Test 0.2622
          RMSE             : Train 156.0048, Val 158.7305, Test 157.5205
Best:
          R2_Score         : Train 0.2690, Val 0.2706, Test 0.2697
          RMSE             : Train 156.3870, Val 157.9112, Test 156.7193
Epoch 37: Loss:            : Train 0.0248, Val 0.0254, Test 0.0253
          R2_Score         : Train 0.2728, Val 0.2590, Test 0.2629
          RMSE             : Train 155.9747, Val 159.1621, Test 157.4557
Best:
          R2_Score         : Train 0.2690, Val 0.2706, Test 0.2697
          RMSE             : Train 156.3870, Val 157.9112, Test 156.7193
Epoch 38: Loss:            : Train 0.0247, Val 0.0252, Test 0.0249
          R2_Score         : Train 0.2750, Val 0.2709, Test 0.2736
          RMSE             : Train 155.7432, Val 157.8800, Test 156.3084
Best:
          R2_Score         : Train 0.2750, Val 0.2709, Test 0.2736
          RMSE             : Train 155.7432, Val 157.8800, Test 156.3084
Epoch 39: Loss:            : Train 0.0246, Val 0.0256, Test 0.0250
          R2_Score         : Train 0.2783, Val 0.2739, Test 0.2731
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.33it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 32.83it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 35.27it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 30.86it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 29.69it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.68it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 21.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 29.78it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.08it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.09it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 29.37it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.46it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 22.51it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.22it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.69it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 15.09it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 29.78it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 24.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.62it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.90it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 31.17it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.58it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.83it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.28it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.93it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 39.20it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.04it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 22.65it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.71it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 20.97it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 26.62it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 23.85it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 25.73it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 15.27it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 32.81it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.25it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.87it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.13it/s]Train:  40%|████      | 10/25 [00:00<00:00, 21.73it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 23.91it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 22.28it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.71it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 22.99it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.16it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 31.74it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.09it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 29.28it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 21.23it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 23.14it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 24.94it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 31.15it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.63it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.37it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 31.63it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.70it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 35.87it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.68it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.89it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 30.00it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 29.30it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 27.02it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 71.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.65it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 25.65it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.39it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:00, 48.46it/s]Train:  40%|████      | 10/25 [00:00<00:00, 30.83it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 28.75it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 26.01it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 28.79it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 30.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 17.51it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 23.92it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 18.94it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 38.17it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 29.36it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.22it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 30.04it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 27.33it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 25.05it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 57.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.28it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.81it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.54it/s]Train:  20%|██        | 5/25 [00:00<00:00, 26.20it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.50it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.77it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.76it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 21.21it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 24.90it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.52it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.32it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 33.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.03it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.39it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.91it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 28.58it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 25.45it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 25.73it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 29.46it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 27.32it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 27.97it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 12.68it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.89it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.09it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 29.07it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 25.78it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.45it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 31.04it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.27it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 24.55it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.99it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.00it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.05it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.95it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 28.06it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 25.81it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 27.02it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 27.90it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 21.82it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 25.83it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.47it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.40it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.99it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.68it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 21.44it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 17.90it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 21.66it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 23.27it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 26.38it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 18.35it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.49it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.30it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:03,  6.75it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 19.24it/s]Train:  40%|████      | 10/25 [00:00<00:00, 20.35it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 22.65it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 26.84it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 24.75it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 25.77it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  4.61it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 15.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 32.87it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 39.67it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 18.73it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 16.84it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 20.90it/s]Train:  40%|████      | 10/25 [00:00<00:00, 20.37it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 20.75it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 19.83it/s]Train:  80%|████████  | 20/25 [00:01<00:00, 19.83it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 24.10it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00,  9.32it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 17.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 20.21it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.82it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 15.45it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 12.32it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 21.14it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 20.19it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 20.23it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 27.15it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 30.05it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 15.83it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 27.86it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.74it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.70it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 13.63it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 22.98it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 18.62it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 21.39it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 28.09it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 28.80it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.15it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 33.78it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.95it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 11.00it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 16.36it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 16.15it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 24.06it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 23.64it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 23.83it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.15it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 26.79it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.56it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.15it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.43it/s]Train:  40%|████      | 10/25 [00:00<00:00, 22.41it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 24.19it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 22.13it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 24.99it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.98it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 27.12it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.56it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 22.03it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 28.78it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.49it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 22.16it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 24.14it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.35it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.68it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 18.36it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.36it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  20%|██        | 5/25 [00:00<00:01, 19.36it/s]Train:  40%|████      | 10/25 [00:00<00:00, 28.68it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 23.74it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 21.08it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 24.90it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 20.52it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.66it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  7.86it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 18.27it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.04it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 28.10it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 19.82it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 24.21it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 30.37it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 26.29it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 23.83it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.91it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:00,  6.91it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 21.56it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.68it/s]
          RMSE             : Train 155.3851, Val 157.5525, Test 156.3559
Best:
          R2_Score         : Train 0.2783, Val 0.2739, Test 0.2731
          RMSE             : Train 155.3851, Val 157.5525, Test 156.3559
Epoch 40: Loss:            : Train 0.0245, Val 0.0252, Test 0.0247
          R2_Score         : Train 0.2788, Val 0.2800, Test 0.2799
          RMSE             : Train 155.3362, Val 156.8897, Test 155.6223
Best:
          R2_Score         : Train 0.2788, Val 0.2800, Test 0.2799
          RMSE             : Train 155.3362, Val 156.8897, Test 155.6223
Epoch 41: Loss:            : Train 0.0245, Val 0.0255, Test 0.0249
          R2_Score         : Train 0.2837, Val 0.2774, Test 0.2755
          RMSE             : Train 154.8037, Val 157.1737, Test 156.0975
Best:
          R2_Score         : Train 0.2788, Val 0.2800, Test 0.2799
          RMSE             : Train 155.3362, Val 156.8897, Test 155.6223
Epoch 42: Loss:            : Train 0.0245, Val 0.0255, Test 0.0249
          R2_Score         : Train 0.2822, Val 0.2762, Test 0.2741
          RMSE             : Train 154.9662, Val 157.3031, Test 156.2551
Best:
          R2_Score         : Train 0.2788, Val 0.2800, Test 0.2799
          RMSE             : Train 155.3362, Val 156.8897, Test 155.6223
Epoch 43: Loss:            : Train 0.0244, Val 0.0251, Test 0.0247
          R2_Score         : Train 0.2871, Val 0.2742, Test 0.2801
          RMSE             : Train 154.4411, Val 157.5177, Test 155.6075
Best:
          R2_Score         : Train 0.2788, Val 0.2800, Test 0.2799
          RMSE             : Train 155.3362, Val 156.8897, Test 155.6223
Epoch 44: Loss:            : Train 0.0244, Val 0.0260, Test 0.0251
          R2_Score         : Train 0.2843, Val 0.2706, Test 0.2691
          RMSE             : Train 154.7353, Val 157.9052, Test 156.7829
Best:
          R2_Score         : Train 0.2788, Val 0.2800, Test 0.2799
          RMSE             : Train 155.3362, Val 156.8897, Test 155.6223
Epoch 45: Loss:            : Train 0.0245, Val 0.0258, Test 0.0250
          R2_Score         : Train 0.2840, Val 0.2751, Test 0.2739
          RMSE             : Train 154.7709, Val 157.4186, Test 156.2696
Best:
          R2_Score         : Train 0.2788, Val 0.2800, Test 0.2799
          RMSE             : Train 155.3362, Val 156.8897, Test 155.6223
Epoch 46: Loss:            : Train 0.0243, Val 0.0250, Test 0.0245
          R2_Score         : Train 0.2856, Val 0.2860, Test 0.2865
          RMSE             : Train 154.5998, Val 156.2300, Test 154.9087
Best:
          R2_Score         : Train 0.2856, Val 0.2860, Test 0.2865
          RMSE             : Train 154.5998, Val 156.2300, Test 154.9087
Epoch 47: Loss:            : Train 0.0242, Val 0.0247, Test 0.0246
          R2_Score         : Train 0.2906, Val 0.2756, Test 0.2805
          RMSE             : Train 154.0523, Val 157.3649, Test 155.5573
Best:
          R2_Score         : Train 0.2856, Val 0.2860, Test 0.2865
          RMSE             : Train 154.5998, Val 156.2300, Test 154.9087
Epoch 48: Loss:            : Train 0.0244, Val 0.0252, Test 0.0247
          R2_Score         : Train 0.2900, Val 0.2831, Test 0.2801
          RMSE             : Train 154.1209, Val 156.5507, Test 155.6055
Best:
          R2_Score         : Train 0.2856, Val 0.2860, Test 0.2865
          RMSE             : Train 154.5998, Val 156.2300, Test 154.9087
Epoch 49: Loss:            : Train 0.0240, Val 0.0247, Test 0.0245
          R2_Score         : Train 0.2924, Val 0.2835, Test 0.2861
          RMSE             : Train 153.8577, Val 156.5002, Test 154.9558
Best:
          R2_Score         : Train 0.2856, Val 0.2860, Test 0.2865
          RMSE             : Train 154.5998, Val 156.2300, Test 154.9087
Epoch 50: Loss:            : Train 0.0241, Val 0.0247, Test 0.0242
          R2_Score         : Train 0.2951, Val 0.2906, Test 0.2952
          RMSE             : Train 153.5634, Val 155.7314, Test 153.9672
Best:
          R2_Score         : Train 0.2951, Val 0.2906, Test 0.2952
          RMSE             : Train 153.5634, Val 155.7314, Test 153.9672
Epoch 51: Loss:            : Train 0.0240, Val 0.0245, Test 0.0242
          R2_Score         : Train 0.2981, Val 0.2939, Test 0.2953
          RMSE             : Train 153.2363, Val 155.3662, Test 153.9563
Best:
          R2_Score         : Train 0.2981, Val 0.2939, Test 0.2953
          RMSE             : Train 153.2363, Val 155.3662, Test 153.9563
Epoch 52: Loss:            : Train 0.0240, Val 0.0254, Test 0.0246
          R2_Score         : Train 0.2978, Val 0.2780, Test 0.2831
          RMSE             : Train 153.2763, Val 157.1045, Test 155.2827
Best:
          R2_Score         : Train 0.2981, Val 0.2939, Test 0.2953
          RMSE             : Train 153.2363, Val 155.3662, Test 153.9563
Epoch 53: Loss:            : Train 0.0240, Val 0.0252, Test 0.0245
          R2_Score         : Train 0.2956, Val 0.2896, Test 0.2865
          RMSE             : Train 153.5126, Val 155.8343, Test 154.9050
Best:
          R2_Score         : Train 0.2981, Val 0.2939, Test 0.2953
          RMSE             : Train 153.2363, Val 155.3662, Test 153.9563
Epoch 54: Loss:            : Train 0.0239, Val 0.0247, Test 0.0241
          R2_Score         : Train 0.2988, Val 0.2940, Test 0.2988
          RMSE             : Train 153.1597, Val 155.3555, Test 153.5714
Best:
          R2_Score         : Train 0.2988, Val 0.2940, Test 0.2988
          RMSE             : Train 153.1597, Val 155.3555, Test 153.5714
Epoch 55: Loss:            : Train 0.0239, Val 0.0250, Test 0.0242
          R2_Score         : Train 0.2997, Val 0.2964, Test 0.2968
          RMSE             : Train 153.0694, Val 155.0901, Test 153.7884
Best:
          R2_Score         : Train 0.2997, Val 0.2964, Test 0.2968
          RMSE             : Train 153.0694, Val 155.0901, Test 153.7884
Epoch 56: Loss:            : Train 0.0238, Val 0.0251, Test 0.0242
          R2_Score         : Train 0.3021, Val 0.2908, Test 0.2948
          RMSE             : Train 152.8045, Val 155.7016, Test 154.0033
Best:
          R2_Score         : Train 0.2997, Val 0.2964, Test 0.2968
          RMSE             : Train 153.0694, Val 155.0901, Test 153.7884
Epoch 57: Loss:            : Train 0.0238, Val 0.0246, Test 0.0242
          R2_Score         : Train 0.3011, Val 0.2972, Test 0.2941
          RMSE             : Train 152.9136, Val 155.0061, Test 154.0798
Best:
          R2_Score         : Train 0.3011, Val 0.2972, Test 0.2941
          RMSE             : Train 152.9136, Val 155.0061, Test 154.0798
Epoch 58: Loss:            : Train 0.0237, Val 0.0254, Test 0.0245
          R2_Score         : Train 0.3024, Val 0.2867, Test 0.2868
          RMSE             : Train 152.7720, Val 156.1586, Test 154.8720
Best:
          R2_Score         : Train 0.3011, Val 0.2972, Test 0.2941
          RMSE             : Train 152.9136, Val 155.0061, Test 154.0798
Epoch 59: Loss:            : Train 0.0237, Val 0.0247, Test 0.0243
          R2_Score         : Train 0.3045, Val 0.2806, Test 0.2901
          RMSE             : Train 152.5452, Val 156.8181, Test 154.5172
Best:
          R2_Score         : Train 0.3011, Val 0.2972, Test 0.2941
          RMSE             : Train 152.9136, Val 155.0061, Test 154.0798
Epoch 60: Loss:            : Train 0.0238, Val 0.0251, Test 0.0243
          R2_Score         : Train 0.3055, Val 0.2948, Test 0.2942
          RMSE             : Train 152.4287, Val 155.2689, Test 154.0706
Best:
          R2_Score         : Train 0.3011, Val 0.2972, Test 0.2941
          RMSE             : Train 152.9136, Val 155.0061, Test 154.0798
Epoch 61: Loss:            : Train 0.0237, Val 0.0245, Test 0.0238
          R2_Score         : Train 0.3062, Val 0.3025, Test 0.3074
          RMSE             : Train 152.3576, Val 154.4115, Test 152.6220
Best:
          R2_Score         : Train 0.3062, Val 0.3025, Test 0.3074
          RMSE             : Train 152.3576, Val 154.4115, Test 152.6220
Epoch 62: Loss:            : Train 0.0235, Val 0.0245, Test 0.0241
          R2_Score         : Train 0.3080, Val 0.2958, Test 0.2964
          RMSE             : Train 152.1583, Val 155.1564, Test 153.8296

Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 24.66it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.02it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 23.99it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.68it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 24.39it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 29.42it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 59.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  14%|█▍        | 1/7 [00:00<00:01,  5.85it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 15.94it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.82it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 17.36it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.84it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 14.11it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.71it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 25.81it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 21.20it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 22.22it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 21.86it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.54it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.89it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.64it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 23.65it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 17.05it/s]Train:  40%|████      | 10/25 [00:00<00:00, 23.67it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 22.15it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 25.64it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.07it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 23.92it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 23.87it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 29.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 13.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.37it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.46it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.44it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 22.22it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 30.55it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.52it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 24.84it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 30.45it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 59.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.45it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.98it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.63it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 14.62it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 15.44it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 24.12it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 20.04it/s]Train:  72%|███████▏  | 18/25 [00:01<00:00, 17.93it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 23.81it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 27.31it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 14.11it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.03it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:03,  6.92it/s]Train:  20%|██        | 5/25 [00:00<00:00, 22.94it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 21.77it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 25.04it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 21.05it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 21.82it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 25.30it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 22.36it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 33.71it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.74it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 23.06it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 25.01it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 20.21it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 24.65it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 19.65it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  9.71it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 14.21it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.32it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 12.00it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 15.23it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 19.82it/s]Train:  40%|████      | 10/25 [00:00<00:00, 19.99it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 17.99it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 22.84it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 23.58it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  7.14it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.13it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.27it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 16.85it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 32.84it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 25.86it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 21.45it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 27.18it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 21.31it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  7.73it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 18.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.74it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 22.51it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.24it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.19it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.87it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.66it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 21.00it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 23.36it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 20.91it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.73it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 14.40it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.65it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 18.66it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 21.60it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 20.01it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 24.24it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.88it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 25.40it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 29.00it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.67it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.85it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 32.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 19.92it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.27it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.88it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 11.58it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.41it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 21.20it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.15it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 27.06it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 25.48it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 19.41it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 36.18it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.40it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 26.70it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 21.71it/s]Train:  40%|████      | 10/25 [00:00<00:00, 19.16it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 26.10it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 25.15it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 25.16it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 17.02it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 21.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 28.49it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.29it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 13.79it/s]Train:  16%|█▌        | 4/25 [00:00<00:02, 10.47it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 16.00it/s]Train:  40%|████      | 10/25 [00:00<00:00, 15.66it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 21.18it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 20.57it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 24.22it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 25.58it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 28.44it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 18.12it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.31it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 37.13it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 26.34it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 24.78it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 26.06it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 32.18it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 29.49it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 23.02it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 47.67it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 35.22it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 27.77it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.43it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 25.30it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 22.99it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 22.46it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 26.24it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 24.62it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.53it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 36.57it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.91it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:00, 26.53it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 21.07it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 16.56it/s]Train:  44%|████▍     | 11/25 [00:00<00:01, 11.01it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 16.53it/s]Train:  72%|███████▏  | 18/25 [00:01<00:00, 16.90it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 21.24it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.62it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 18.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 50.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 18.16it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.56it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.19it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 17.78it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 17.86it/s]Train:  40%|████      | 10/25 [00:00<00:00, 23.54it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 21.75it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 25.47it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 21.61it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 20.81it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.68it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 11.81it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.18it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.86it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:04,  5.78it/s]Train:  20%|██        | 5/25 [00:00<00:01, 18.31it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 15.17it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 21.66it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 21.54it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 20.76it/s]Train:  88%|████████▊ | 22/25 [00:01<00:00, 24.96it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 18.85it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 19.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 26.06it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 37.54it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.92it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 30.38it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.95it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 22.73it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 29.48it/s]Train:  84%|████████▍ | 21/25 [00:00<00:00, 28.21it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 28.36it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 27.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 20.75it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 11.36it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.23it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.36it/s]Train:  20%|██        | 5/25 [00:00<00:00, 25.90it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.50it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 26.44it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 25.47it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 23.69it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 27.85it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 60.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 23.56it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.10it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.22it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:06,  3.70it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 11.61it/s]Train:  28%|██▊       | 7/25 [00:00<00:01, 13.77it/s]Train:  40%|████      | 10/25 [00:00<00:00, 17.28it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 18.80it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 19.00it/s]Train:  76%|███████▌  | 19/25 [00:01<00:00, 17.16it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 21.18it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 17.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 55.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 11.25it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 19.92it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  9.57it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 22.58it/s]Train:  40%|████      | 10/25 [00:00<00:00, 19.22it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 18.76it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 20.57it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 20.82it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 26.65it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 17.96it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 28.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 21.55it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.29it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.75it/s]Best:
          R2_Score         : Train 0.3062, Val 0.3025, Test 0.3074
          RMSE             : Train 152.3576, Val 154.4115, Test 152.6220
Epoch 63: Loss:            : Train 0.0237, Val 0.0251, Test 0.0242
          R2_Score         : Train 0.3087, Val 0.2945, Test 0.2951
          RMSE             : Train 152.0770, Val 155.2954, Test 153.9692
Best:
          R2_Score         : Train 0.3062, Val 0.3025, Test 0.3074
          RMSE             : Train 152.3576, Val 154.4115, Test 152.6220
Epoch 64: Loss:            : Train 0.0236, Val 0.0246, Test 0.0239
          R2_Score         : Train 0.3098, Val 0.3005, Test 0.3033
          RMSE             : Train 151.9548, Val 154.6354, Test 153.0711
Best:
          R2_Score         : Train 0.3062, Val 0.3025, Test 0.3074
          RMSE             : Train 152.3576, Val 154.4115, Test 152.6220
Epoch 65: Loss:            : Train 0.0235, Val 0.0242, Test 0.0239
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Best:
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Epoch 66: Loss:            : Train 0.0236, Val 0.0250, Test 0.0243
          R2_Score         : Train 0.3081, Val 0.2973, Test 0.2932
          RMSE             : Train 152.1489, Val 154.9965, Test 154.1847
Best:
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Epoch 67: Loss:            : Train 0.0236, Val 0.0243, Test 0.0239
          R2_Score         : Train 0.3082, Val 0.2999, Test 0.3037
          RMSE             : Train 152.1309, Val 154.6988, Test 153.0334
Best:
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Epoch 68: Loss:            : Train 0.0236, Val 0.0242, Test 0.0240
          R2_Score         : Train 0.3115, Val 0.2959, Test 0.2997
          RMSE             : Train 151.7735, Val 155.1509, Test 153.4714
Best:
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Epoch 69: Loss:            : Train 0.0235, Val 0.0251, Test 0.0241
          R2_Score         : Train 0.3097, Val 0.2961, Test 0.2996
          RMSE             : Train 151.9741, Val 155.1221, Test 153.4797
Best:
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Epoch 70: Loss:            : Train 0.0235, Val 0.0246, Test 0.0241
          R2_Score         : Train 0.3130, Val 0.2977, Test 0.2987
          RMSE             : Train 151.6061, Val 154.9458, Test 153.5827
Best:
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Epoch 71: Loss:            : Train 0.0234, Val 0.0249, Test 0.0241
          R2_Score         : Train 0.3137, Val 0.2982, Test 0.2995
          RMSE             : Train 151.5286, Val 154.8900, Test 153.4871
Best:
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Epoch 72: Loss:            : Train 0.0235, Val 0.0241, Test 0.0236
          R2_Score         : Train 0.3133, Val 0.3038, Test 0.3133
          RMSE             : Train 151.5699, Val 154.2748, Test 151.9755
Best:
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Epoch 73: Loss:            : Train 0.0234, Val 0.0245, Test 0.0239
          R2_Score         : Train 0.3157, Val 0.3042, Test 0.3047
          RMSE             : Train 151.3113, Val 154.2279, Test 152.9266
Best:
          R2_Score         : Train 0.3096, Val 0.3053, Test 0.3035
          RMSE             : Train 151.9829, Val 154.1010, Test 153.0489
Epoch 74: Loss:            : Train 0.0235, Val 0.0240, Test 0.0235
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 75: Loss:            : Train 0.0234, Val 0.0238, Test 0.0235
          R2_Score         : Train 0.3169, Val 0.3078, Test 0.3132
          RMSE             : Train 151.1768, Val 153.8266, Test 151.9792
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 76: Loss:            : Train 0.0232, Val 0.0245, Test 0.0237
          R2_Score         : Train 0.3195, Val 0.3129, Test 0.3124
          RMSE             : Train 150.8850, Val 153.2581, Test 152.0686
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 77: Loss:            : Train 0.0233, Val 0.0240, Test 0.0236
          R2_Score         : Train 0.3201, Val 0.3123, Test 0.3126
          RMSE             : Train 150.8221, Val 153.3230, Test 152.0488
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 78: Loss:            : Train 0.0233, Val 0.0242, Test 0.0237
          R2_Score         : Train 0.3209, Val 0.3054, Test 0.3090
          RMSE             : Train 150.7368, Val 154.0908, Test 152.4491
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 79: Loss:            : Train 0.0233, Val 0.0241, Test 0.0236
          R2_Score         : Train 0.3191, Val 0.3085, Test 0.3136
          RMSE             : Train 150.9299, Val 153.7472, Test 151.9417
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 80: Loss:            : Train 0.0232, Val 0.0241, Test 0.0236
          R2_Score         : Train 0.3212, Val 0.3089, Test 0.3113
          RMSE             : Train 150.7012, Val 153.7094, Test 152.1990
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 81: Loss:            : Train 0.0232, Val 0.0240, Test 0.0234
          R2_Score         : Train 0.3202, Val 0.3132, Test 0.3190
          RMSE             : Train 150.8109, Val 153.2278, Test 151.3455
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 82: Loss:            : Train 0.0231, Val 0.0242, Test 0.0237
          R2_Score         : Train 0.3228, Val 0.3074, Test 0.3080
          RMSE             : Train 150.5193, Val 153.8774, Test 152.5576
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 83: Loss:            : Train 0.0233, Val 0.0240, Test 0.0235
          R2_Score         : Train 0.3189, Val 0.3109, Test 0.3153
          RMSE             : Train 150.9528, Val 153.4874, Test 151.7556
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 84: Loss:            : Train 0.0230, Val 0.0239, Test 0.0235
          R2_Score         : Train 0.3221, Val 0.3089, Test 0.3134
          RMSE             : Train 150.6028, Val 153.7074, Test 151.9647
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Epoch 85: Loss:            : Train 0.0234, Val 0.0241, Test 0.0237
          R2_Score         : Train 0.3204, Val 0.3135, Test 0.3102
          RMSE             : Train 150.7822, Val 153.1912, Test 152.3152
Best:
          R2_Score         : Train 0.3118, Val 0.3156, Test 0.3162
          RMSE             : Train 151.7425, Val 152.9651, Test 151.6555
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:03,  6.04it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 15.31it/s]Train:  36%|███▌      | 9/25 [00:00<00:01, 14.05it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 19.82it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 18.71it/s]Train:  76%|███████▌  | 19/25 [00:01<00:00, 19.43it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 24.80it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  7.74it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 21.46it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 24.72it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.80it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:02,  8.24it/s]Train:  20%|██        | 5/25 [00:00<00:01, 16.29it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 17.96it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 23.62it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 21.53it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.37it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 25.60it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  25%|██▌       | 1/4 [00:00<00:00,  6.14it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 19.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  57%|█████▋    | 4/7 [00:00<00:00, 26.40it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 28.82it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 13.48it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 21.68it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 26.52it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 24.96it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 28.12it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 26.62it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 12.19it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 20.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 28.14it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 31.27it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 18.24it/s]Train:  24%|██▍       | 6/25 [00:00<00:00, 23.01it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 22.57it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 26.81it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 23.12it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 27.04it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 25.34it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 25.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 24.48it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 30.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 21.57it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.10it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 17.54it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.90it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 27.03it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 20.53it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 20.82it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 15.39it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 20.61it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 24.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 26.04it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 30.51it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 19.32it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 13.80it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 23.27it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 22.19it/s]Train:  60%|██████    | 15/25 [00:00<00:00, 23.80it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 18.60it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 20.27it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 22.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 21.06it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 26.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  71%|███████▏  | 5/7 [00:00<00:00, 28.29it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.83it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  12%|█▏        | 3/25 [00:00<00:01, 21.25it/s]Train:  24%|██▍       | 6/25 [00:00<00:01, 15.45it/s]Train:  32%|███▏      | 8/25 [00:00<00:01, 16.69it/s]Train:  40%|████      | 10/25 [00:00<00:01, 14.86it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 20.09it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 20.70it/s]Train:  84%|████████▍ | 21/25 [00:01<00:00, 25.53it/s]Train:  96%|█████████▌| 24/25 [00:01<00:00, 24.55it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 17.55it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  86%|████████▌ | 6/7 [00:00<00:00, 26.91it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.16it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.67it/s]Train:  20%|██        | 5/25 [00:00<00:01, 17.13it/s]Train:  36%|███▌      | 9/25 [00:00<00:00, 24.12it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 19.03it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 20.41it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 21.70it/s]Train:  92%|█████████▏| 23/25 [00:01<00:00, 19.55it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 20.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 43.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 16.10it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 23.48it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 22.57it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 33.58it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 25.51it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 18.40it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 23.86it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 24.76it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 22.90it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 24.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 38.67it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 38.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.98it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 25.09it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 24.53it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 36.06it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 27.32it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 26.62it/s]Train:  68%|██████▊   | 17/25 [00:00<00:00, 25.62it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 29.62it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 28.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 62.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 25.49it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.89it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 29.20it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:  16%|█▌        | 4/25 [00:00<00:00, 38.24it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 21.21it/s]Train:  44%|████▍     | 11/25 [00:00<00:00, 21.57it/s]Train:  56%|█████▌    | 14/25 [00:00<00:00, 22.22it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 20.84it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 24.52it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.45it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 23.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 49.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 11.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 26.66it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.74it/s]Train:  20%|██        | 5/25 [00:00<00:00, 23.62it/s]Train:  32%|███▏      | 8/25 [00:00<00:00, 20.82it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 23.10it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 27.54it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 25.85it/s]Train:  88%|████████▊ | 22/25 [00:00<00:00, 25.96it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 19.33it/s]Train: 100%|██████████| 25/25 [00:01<00:00, 21.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  50%|█████     | 2/4 [00:00<00:00, 19.37it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 22.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 15.69it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.48it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 14.64it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 26.47it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 32.76it/s]Train:  72%|███████▏  | 18/25 [00:00<00:00, 32.30it/s]Train:  92%|█████████▏| 23/25 [00:00<00:00, 36.35it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 31.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.69it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 31.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  29%|██▊       | 2/7 [00:00<00:00, 19.27it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 34.79it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 32.52it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   4%|▍         | 1/25 [00:00<00:02,  9.57it/s]Train:  16%|█▌        | 4/25 [00:00<00:01, 20.54it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 21.25it/s]Train:  48%|████▊     | 12/25 [00:00<00:00, 30.89it/s]Train:  64%|██████▍   | 16/25 [00:00<00:00, 30.24it/s]Train:  80%|████████  | 20/25 [00:00<00:00, 28.27it/s]Train:  96%|█████████▌| 24/25 [00:00<00:00, 25.66it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 26.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 61.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 16.74it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 27.85it/s]
Train:   0%|          | 0/25 [00:00<?, ?it/s]Train:   8%|▊         | 2/25 [00:00<00:01, 17.25it/s]Train:  28%|██▊       | 7/25 [00:00<00:00, 28.17it/s]Train:  52%|█████▏    | 13/25 [00:00<00:00, 32.79it/s]Train:  76%|███████▌  | 19/25 [00:00<00:00, 34.15it/s]Train: 100%|██████████| 25/25 [00:00<00:00, 37.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/4 [00:00<?, ?it/s]Val:  75%|███████▌  | 3/4 [00:00<00:00, 26.70it/s]Val: 100%|██████████| 4/4 [00:00<00:00, 33.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/7 [00:00<?, ?it/s]Test:  43%|████▎     | 3/7 [00:00<00:00, 27.05it/s]Test: 100%|██████████| 7/7 [00:00<00:00, 38.34it/s]

Epoch 86: Loss:            : Train 0.0230, Val 0.0238, Test 0.0233
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 87: Loss:            : Train 0.0230, Val 0.0241, Test 0.0233
          R2_Score         : Train 0.3258, Val 0.3126, Test 0.3208
          RMSE             : Train 150.1905, Val 153.2961, Test 151.1396
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 88: Loss:            : Train 0.0230, Val 0.0244, Test 0.0236
          R2_Score         : Train 0.3271, Val 0.3084, Test 0.3131
          RMSE             : Train 150.0472, Val 153.7612, Test 151.9999
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 89: Loss:            : Train 0.0229, Val 0.0237, Test 0.0234
          R2_Score         : Train 0.3279, Val 0.3166, Test 0.3189
          RMSE             : Train 149.9567, Val 152.8429, Test 151.3566
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 90: Loss:            : Train 0.0229, Val 0.0241, Test 0.0236
          R2_Score         : Train 0.3279, Val 0.3049, Test 0.3128
          RMSE             : Train 149.9488, Val 154.1517, Test 152.0246
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 91: Loss:            : Train 0.0230, Val 0.0239, Test 0.0234
          R2_Score         : Train 0.3258, Val 0.3129, Test 0.3171
          RMSE             : Train 150.1844, Val 153.2586, Test 151.5555
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 92: Loss:            : Train 0.0230, Val 0.0240, Test 0.0234
          R2_Score         : Train 0.3263, Val 0.3124, Test 0.3192
          RMSE             : Train 150.1325, Val 153.3128, Test 151.3204
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 93: Loss:            : Train 0.0230, Val 0.0246, Test 0.0238
          R2_Score         : Train 0.3276, Val 0.3137, Test 0.3097
          RMSE             : Train 149.9881, Val 153.1728, Test 152.3693
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 94: Loss:            : Train 0.0229, Val 0.0244, Test 0.0238
          R2_Score         : Train 0.3271, Val 0.3096, Test 0.3090
          RMSE             : Train 150.0442, Val 153.6253, Test 152.4466
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 95: Loss:            : Train 0.0230, Val 0.0239, Test 0.0236
          R2_Score         : Train 0.3269, Val 0.3014, Test 0.3118
          RMSE             : Train 150.0641, Val 154.5391, Test 152.1420
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 96: Loss:            : Train 0.0229, Val 0.0241, Test 0.0236
          R2_Score         : Train 0.3286, Val 0.2993, Test 0.3112
          RMSE             : Train 149.8694, Val 154.7668, Test 152.2081
Best:
          R2_Score         : Train 0.3251, Val 0.3199, Test 0.3223
          RMSE             : Train 150.2623, Val 152.4736, Test 150.9784
Epoch 97: Loss:            : Train 0.0228, Val 0.0236, Test 0.0231
          R2_Score         : Train 0.3302, Val 0.3256, Test 0.3259
          RMSE             : Train 149.6985, Val 151.8368, Test 150.5710
Best:
          R2_Score         : Train 0.3302, Val 0.3256, Test 0.3259
          RMSE             : Train 149.6985, Val 151.8368, Test 150.5710
Epoch 98: Loss:            : Train 0.0229, Val 0.0238, Test 0.0232
          R2_Score         : Train 0.3327, Val 0.3223, Test 0.3252
          RMSE             : Train 149.4128, Val 152.2144, Test 150.6451
Best:
          R2_Score         : Train 0.3302, Val 0.3256, Test 0.3259
          RMSE             : Train 149.6985, Val 151.8368, Test 150.5710
Epoch 99: Loss:            : Train 0.0230, Val 0.0238, Test 0.0234
          R2_Score         : Train 0.3293, Val 0.3135, Test 0.3164
          RMSE             : Train 149.7992, Val 153.1897, Test 151.6278
Best:
          R2_Score         : Train 0.3302, Val 0.3256, Test 0.3259
          RMSE             : Train 149.6985, Val 151.8368, Test 150.5710
Epoch 100: Loss:            : Train 0.0228, Val 0.0237, Test 0.0235
          R2_Score         : Train 0.3296, Val 0.3060, Test 0.3144
          RMSE             : Train 149.7681, Val 154.0287, Test 151.8559
Best:
          R2_Score         : Train 0.3302, Val 0.3256, Test 0.3259
          RMSE             : Train 149.6985, Val 151.8368, Test 150.5710
