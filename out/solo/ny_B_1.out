Loading bike from data/nytaxi/bike_201606_clean_sample_2e5.pkl
Loaded.
Loading taxi from data/nytaxi/taxi_201606_clean_sample_1e5.pkl
Loaded.
Current bike columns: ['age', 'gender_1', 'gender_2', 'sid_79', 'sid_82', 'sid_83', 'sid_116', 'sid_119', 'sid_120', 'sid_127', 'sid_128', 'sid_137', 'sid_143', 'sid_144', 'sid_146', 'sid_147', 'sid_150', 'sid_151', 'sid_152', 'sid_153', 'sid_157', 'sid_161', 'sid_164', 'sid_167', 'sid_168', 'sid_173', 'sid_174', 'sid_195', 'sid_212', 'sid_216', 'sid_217', 'sid_223', 'sid_224', 'sid_225', 'sid_228', 'sid_229', 'sid_232', 'sid_233', 'sid_236', 'sid_237', 'sid_238', 'sid_239', 'sid_241', 'sid_242', 'sid_243', 'sid_244', 'sid_245', 'sid_247', 'sid_248', 'sid_249', 'sid_250', 'sid_251', 'sid_252', 'sid_253', 'sid_254', 'sid_257', 'sid_258', 'sid_259', 'sid_260', 'sid_261', 'sid_262', 'sid_263', 'sid_264', 'sid_265', 'sid_266', 'sid_267', 'sid_268', 'sid_270', 'sid_274', 'sid_275', 'sid_276', 'sid_278', 'sid_279', 'sid_280', 'sid_281', 'sid_282', 'sid_284', 'sid_285', 'sid_289', 'sid_291', 'sid_293', 'sid_295', 'sid_296', 'sid_297', 'sid_298', 'sid_300', 'sid_301', 'sid_302', 'sid_303', 'sid_304', 'sid_305', 'sid_306', 'sid_307', 'sid_308', 'sid_309', 'sid_310', 'sid_311', 'sid_312', 'sid_313', 'sid_315', 'sid_316', 'sid_317', 'sid_319', 'sid_320', 'sid_321', 'sid_322', 'sid_323', 'sid_324', 'sid_325', 'sid_326', 'sid_327', 'sid_328', 'sid_329', 'sid_330', 'sid_331', 'sid_332', 'sid_334', 'sid_335', 'sid_336', 'sid_337', 'sid_339', 'sid_340', 'sid_341', 'sid_342', 'sid_343', 'sid_344', 'sid_345', 'sid_346', 'sid_347', 'sid_348', 'sid_349', 'sid_350', 'sid_351', 'sid_352', 'sid_353', 'sid_354', 'sid_355', 'sid_356', 'sid_357', 'sid_358', 'sid_359', 'sid_360', 'sid_361', 'sid_362', 'sid_363', 'sid_364', 'sid_365', 'sid_366', 'sid_367', 'sid_368', 'sid_369', 'sid_372', 'sid_373', 'sid_375', 'sid_376', 'sid_377', 'sid_379', 'sid_380', 'sid_382', 'sid_383', 'sid_384', 'sid_385', 'sid_386', 'sid_387', 'sid_388', 'sid_389', 'sid_390', 'sid_391', 'sid_392', 'sid_393', 'sid_394', 'sid_395', 'sid_396', 'sid_397', 'sid_398', 'sid_399', 'sid_400', 'sid_401', 'sid_402', 'sid_405', 'sid_406', 'sid_407', 'sid_408', 'sid_409', 'sid_410', 'sid_411', 'sid_412', 'sid_414', 'sid_415', 'sid_416', 'sid_417', 'sid_418', 'sid_419', 'sid_420', 'sid_421', 'sid_422', 'sid_423', 'sid_426', 'sid_427', 'sid_428', 'sid_430', 'sid_432', 'sid_433', 'sid_434', 'sid_435', 'sid_436', 'sid_437', 'sid_438', 'sid_439', 'sid_440', 'sid_441', 'sid_442', 'sid_443', 'sid_444', 'sid_445', 'sid_446', 'sid_447', 'sid_448', 'sid_449', 'sid_450', 'sid_453', 'sid_454', 'sid_455', 'sid_456', 'sid_457', 'sid_458', 'sid_459', 'sid_460', 'sid_461', 'sid_462', 'sid_465', 'sid_466', 'sid_467', 'sid_468', 'sid_469', 'sid_470', 'sid_471', 'sid_472', 'sid_473', 'sid_474', 'sid_475', 'sid_476', 'sid_477', 'sid_478', 'sid_479', 'sid_480', 'sid_481', 'sid_482', 'sid_483', 'sid_484', 'sid_485', 'sid_486', 'sid_487', 'sid_488', 'sid_490', 'sid_491', 'sid_492', 'sid_493', 'sid_494', 'sid_495', 'sid_496', 'sid_497', 'sid_498', 'sid_499', 'sid_500', 'sid_501', 'sid_502', 'sid_503', 'sid_504', 'sid_505', 'sid_507', 'sid_508', 'sid_509', 'sid_510', 'sid_511', 'sid_513', 'sid_514', 'sid_515', 'sid_516', 'sid_517', 'sid_518', 'sid_519', 'sid_520', 'sid_522', 'sid_523', 'sid_524', 'sid_525', 'sid_526', 'sid_527', 'sid_528', 'sid_529', 'sid_530', 'sid_531', 'sid_532', 'sid_533', 'sid_534', 'sid_536', 'sid_537', 'sid_539', 'sid_540', 'sid_545', 'sid_546', 'sid_2000', 'sid_2001', 'sid_2002', 'sid_2003', 'sid_2004', 'sid_2005', 'sid_2006', 'sid_2008', 'sid_2009', 'sid_2010', 'sid_2012', 'sid_2017', 'sid_2021', 'sid_2022', 'sid_2023', 'sid_3002', 'sid_3016', 'sid_3041', 'sid_3042', 'sid_3043', 'sid_3044', 'sid_3046', 'sid_3047', 'sid_3048', 'sid_3049', 'sid_3050', 'sid_3052', 'sid_3053', 'sid_3054', 'sid_3055', 'sid_3056', 'sid_3057', 'sid_3058', 'sid_3059', 'sid_3060', 'sid_3061', 'sid_3062', 'sid_3063', 'sid_3064', 'sid_3065', 'sid_3066', 'sid_3067', 'sid_3068', 'sid_3069', 'sid_3070', 'sid_3071', 'sid_3072', 'sid_3073', 'sid_3074', 'sid_3075', 'sid_3076', 'sid_3077', 'sid_3078', 'sid_3079', 'sid_3080', 'sid_3081', 'sid_3082', 'sid_3083', 'sid_3084', 'sid_3085', 'sid_3086', 'sid_3087', 'sid_3088', 'sid_3089', 'sid_3090', 'sid_3091', 'sid_3092', 'sid_3093', 'sid_3094', 'sid_3095', 'sid_3096', 'sid_3098', 'sid_3099', 'sid_3100', 'sid_3101', 'sid_3102', 'sid_3103', 'sid_3105', 'sid_3106', 'sid_3107', 'sid_3108', 'sid_3109', 'sid_3110', 'sid_3111', 'sid_3112', 'sid_3113', 'sid_3114', 'sid_3115', 'sid_3116', 'sid_3117', 'sid_3118', 'sid_3119', 'sid_3120', 'sid_3121', 'sid_3122', 'sid_3123', 'sid_3124', 'sid_3125', 'sid_3126', 'sid_3127', 'sid_3128', 'sid_3129', 'sid_3131', 'sid_3132', 'sid_3134', 'sid_3135', 'sid_3136', 'sid_3137', 'sid_3138', 'sid_3139', 'sid_3140', 'sid_3141', 'sid_3142', 'sid_3143', 'sid_3144', 'sid_3145', 'sid_3146', 'sid_3147', 'sid_3148', 'sid_3150', 'sid_3151', 'sid_3152', 'sid_3153', 'sid_3154', 'sid_3155', 'sid_3156', 'sid_3157', 'sid_3158', 'sid_3159', 'sid_3160', 'sid_3161', 'sid_3162', 'sid_3163', 'sid_3164', 'sid_3165', 'sid_3166', 'sid_3167', 'sid_3168', 'sid_3169', 'sid_3170', 'sid_3171', 'sid_3172', 'sid_3173', 'sid_3175', 'sid_3176', 'sid_3177', 'sid_3178', 'sid_3179', 'sid_3180', 'sid_3182', 'sid_3221', 'sid_3222', 'sid_3223', 'sid_3224', 'sid_3226', 'sid_3230', 'sid_3231', 'sid_3232', 'sid_3233', 'sid_3235', 'sid_3236', 'sid_3237', 'sid_3238', 'sid_3241', 'sid_3242', 'sid_3243', 'sid_3244', 'sid_3246', 'sid_3249', 'sid_3254', 'sid_3255', 'sid_3256', 'sid_3257', 'sid_3259', 'sid_3260', 'eid_79', 'eid_82', 'eid_83', 'eid_116', 'eid_119', 'eid_120', 'eid_127', 'eid_128', 'eid_137', 'eid_143', 'eid_144', 'eid_146', 'eid_147', 'eid_150', 'eid_151', 'eid_152', 'eid_153', 'eid_157', 'eid_161', 'eid_164', 'eid_167', 'eid_168', 'eid_173', 'eid_174', 'eid_195', 'eid_212', 'eid_216', 'eid_217', 'eid_223', 'eid_224', 'eid_225', 'eid_228', 'eid_229', 'eid_232', 'eid_233', 'eid_236', 'eid_237', 'eid_238', 'eid_239', 'eid_241', 'eid_242', 'eid_243', 'eid_244', 'eid_245', 'eid_247', 'eid_248', 'eid_249', 'eid_250', 'eid_251', 'eid_252', 'eid_253', 'eid_254', 'eid_255', 'eid_257', 'eid_258', 'eid_259', 'eid_260', 'eid_261', 'eid_262', 'eid_263', 'eid_264', 'eid_265', 'eid_266', 'eid_267', 'eid_268', 'eid_270', 'eid_274', 'eid_275', 'eid_276', 'eid_278', 'eid_279', 'eid_280', 'eid_281', 'eid_282', 'eid_284', 'eid_285', 'eid_289', 'eid_291', 'eid_293', 'eid_295', 'eid_296', 'eid_297', 'eid_298', 'eid_300', 'eid_301', 'eid_302', 'eid_303', 'eid_304', 'eid_305', 'eid_306', 'eid_307', 'eid_308', 'eid_309', 'eid_310', 'eid_311', 'eid_312', 'eid_313', 'eid_315', 'eid_316', 'eid_317', 'eid_319', 'eid_320', 'eid_321', 'eid_322', 'eid_323', 'eid_324', 'eid_325', 'eid_326', 'eid_327', 'eid_328', 'eid_329', 'eid_330', 'eid_331', 'eid_332', 'eid_334', 'eid_335', 'eid_336', 'eid_337', 'eid_339', 'eid_340', 'eid_341', 'eid_342', 'eid_343', 'eid_344', 'eid_345', 'eid_346', 'eid_347', 'eid_348', 'eid_349', 'eid_350', 'eid_351', 'eid_352', 'eid_353', 'eid_354', 'eid_355', 'eid_356', 'eid_357', 'eid_358', 'eid_359', 'eid_360', 'eid_361', 'eid_362', 'eid_363', 'eid_364', 'eid_365', 'eid_366', 'eid_367', 'eid_368', 'eid_369', 'eid_372', 'eid_373', 'eid_375', 'eid_376', 'eid_377', 'eid_379', 'eid_380', 'eid_382', 'eid_383', 'eid_384', 'eid_385', 'eid_386', 'eid_387', 'eid_388', 'eid_389', 'eid_390', 'eid_391', 'eid_392', 'eid_393', 'eid_394', 'eid_395', 'eid_396', 'eid_397', 'eid_398', 'eid_399', 'eid_400', 'eid_401', 'eid_402', 'eid_405', 'eid_406', 'eid_407', 'eid_408', 'eid_409', 'eid_410', 'eid_411', 'eid_412', 'eid_414', 'eid_415', 'eid_416', 'eid_417', 'eid_418', 'eid_419', 'eid_420', 'eid_421', 'eid_422', 'eid_423', 'eid_426', 'eid_427', 'eid_428', 'eid_430', 'eid_432', 'eid_433', 'eid_434', 'eid_435', 'eid_436', 'eid_437', 'eid_438', 'eid_439', 'eid_440', 'eid_441', 'eid_442', 'eid_443', 'eid_444', 'eid_445', 'eid_446', 'eid_447', 'eid_448', 'eid_449', 'eid_450', 'eid_453', 'eid_454', 'eid_455', 'eid_456', 'eid_457', 'eid_458', 'eid_459', 'eid_460', 'eid_461', 'eid_462', 'eid_465', 'eid_466', 'eid_467', 'eid_468', 'eid_469', 'eid_470', 'eid_471', 'eid_472', 'eid_473', 'eid_474', 'eid_475', 'eid_476', 'eid_477', 'eid_478', 'eid_479', 'eid_480', 'eid_481', 'eid_482', 'eid_483', 'eid_484', 'eid_485', 'eid_486', 'eid_487', 'eid_488', 'eid_490', 'eid_491', 'eid_492', 'eid_493', 'eid_494', 'eid_495', 'eid_496', 'eid_497', 'eid_498', 'eid_499', 'eid_500', 'eid_501', 'eid_502', 'eid_503', 'eid_504', 'eid_505', 'eid_507', 'eid_508', 'eid_509', 'eid_510', 'eid_511', 'eid_513', 'eid_514', 'eid_515', 'eid_516', 'eid_517', 'eid_518', 'eid_519', 'eid_520', 'eid_522', 'eid_523', 'eid_524', 'eid_525', 'eid_526', 'eid_527', 'eid_528', 'eid_529', 'eid_530', 'eid_531', 'eid_532', 'eid_533', 'eid_534', 'eid_536', 'eid_537', 'eid_539', 'eid_540', 'eid_545', 'eid_546', 'eid_2000', 'eid_2001', 'eid_2002', 'eid_2003', 'eid_2004', 'eid_2005', 'eid_2006', 'eid_2008', 'eid_2009', 'eid_2010', 'eid_2012', 'eid_2017', 'eid_2021', 'eid_2022', 'eid_2023', 'eid_3002', 'eid_3016', 'eid_3017', 'eid_3041', 'eid_3042', 'eid_3043', 'eid_3044', 'eid_3046', 'eid_3047', 'eid_3048', 'eid_3049', 'eid_3050', 'eid_3052', 'eid_3053', 'eid_3054', 'eid_3055', 'eid_3056', 'eid_3057', 'eid_3058', 'eid_3059', 'eid_3060', 'eid_3061', 'eid_3062', 'eid_3063', 'eid_3064', 'eid_3065', 'eid_3066', 'eid_3067', 'eid_3068', 'eid_3069', 'eid_3070', 'eid_3071', 'eid_3072', 'eid_3073', 'eid_3074', 'eid_3075', 'eid_3076', 'eid_3077', 'eid_3078', 'eid_3079', 'eid_3080', 'eid_3081', 'eid_3082', 'eid_3083', 'eid_3084', 'eid_3085', 'eid_3086', 'eid_3087', 'eid_3088', 'eid_3089', 'eid_3090', 'eid_3091', 'eid_3092', 'eid_3093', 'eid_3094', 'eid_3095', 'eid_3096', 'eid_3098', 'eid_3099', 'eid_3100', 'eid_3101', 'eid_3102', 'eid_3103', 'eid_3105', 'eid_3106', 'eid_3107', 'eid_3108', 'eid_3109', 'eid_3110', 'eid_3111', 'eid_3112', 'eid_3113', 'eid_3114', 'eid_3115', 'eid_3116', 'eid_3117', 'eid_3118', 'eid_3119', 'eid_3120', 'eid_3121', 'eid_3122', 'eid_3123', 'eid_3124', 'eid_3125', 'eid_3126', 'eid_3127', 'eid_3128', 'eid_3129', 'eid_3131', 'eid_3132', 'eid_3134', 'eid_3135', 'eid_3136', 'eid_3137', 'eid_3138', 'eid_3139', 'eid_3140', 'eid_3141', 'eid_3142', 'eid_3143', 'eid_3144', 'eid_3145', 'eid_3146', 'eid_3147', 'eid_3148', 'eid_3150', 'eid_3151', 'eid_3152', 'eid_3153', 'eid_3154', 'eid_3155', 'eid_3156', 'eid_3157', 'eid_3158', 'eid_3159', 'eid_3160', 'eid_3161', 'eid_3162', 'eid_3163', 'eid_3164', 'eid_3165', 'eid_3166', 'eid_3167', 'eid_3168', 'eid_3169', 'eid_3170', 'eid_3171', 'eid_3172', 'eid_3173', 'eid_3175', 'eid_3176', 'eid_3177', 'eid_3178', 'eid_3179', 'eid_3180', 'eid_3182', 'eid_3183', 'eid_3184', 'eid_3192', 'eid_3219', 'eid_3221', 'eid_3222', 'eid_3223', 'eid_3224', 'eid_3226', 'eid_3230', 'eid_3231', 'eid_3232', 'eid_3233', 'eid_3235', 'eid_3236', 'eid_3237', 'eid_3238', 'eid_3240', 'eid_3241', 'eid_3242', 'eid_3243', 'eid_3244', 'eid_3246', 'eid_3249', 'eid_3250', 'eid_3252', 'eid_3254', 'eid_3255', 'eid_3256', 'eid_3257', 'eid_3259', 'eid_3260', 'start_lon', 'start_lat', 'end_lon', 'end_lat']  0%|          | 0/140000 [00:00<?, ?it/s]  0%|          | 451/140000 [00:00<00:30, 4506.64it/s]  1%|          | 1094/140000 [00:00<00:24, 5633.26it/s]  1%|          | 1746/140000 [00:00<00:22, 6036.44it/s]  2%|▏         | 2392/140000 [00:00<00:22, 6201.08it/s]  2%|▏         | 3067/140000 [00:00<00:21, 6396.20it/s]  3%|▎         | 3778/140000 [00:00<00:20, 6638.29it/s]  3%|▎         | 4467/140000 [00:00<00:20, 6717.72it/s]  4%|▎         | 5148/140000 [00:00<00:20, 6742.53it/s]  4%|▍         | 5823/140000 [00:00<00:20, 6406.64it/s]  5%|▍         | 6467/140000 [00:01<00:20, 6366.12it/s]  5%|▌         | 7106/140000 [00:01<00:21, 6322.90it/s]  6%|▌         | 7740/140000 [00:01<00:21, 6266.95it/s]  6%|▌         | 8368/140000 [00:01<00:22, 5967.29it/s]  6%|▋         | 8968/140000 [00:01<00:22, 5804.53it/s]  7%|▋         | 9592/140000 [00:01<00:21, 5927.81it/s]  7%|▋         | 10188/140000 [00:01<00:22, 5719.85it/s]  8%|▊         | 10763/140000 [00:01<00:22, 5713.95it/s]  8%|▊         | 11437/140000 [00:01<00:21, 6007.58it/s]  9%|▊         | 12145/140000 [00:01<00:20, 6143.86it/s]  9%|▉         | 12875/140000 [00:02<00:19, 6476.44it/s] 10%|▉         | 13592/140000 [00:02<00:18, 6677.92it/s] 10%|█         | 14289/140000 [00:02<00:18, 6761.60it/s] 11%|█         | 14995/140000 [00:02<00:18, 6846.96it/s] 11%|█         | 15681/140000 [00:02<00:18, 6845.77it/s] 12%|█▏        | 16367/140000 [00:02<00:18, 6644.07it/s] 12%|█▏        | 17089/140000 [00:02<00:18, 6810.93it/s] 13%|█▎        | 17819/140000 [00:02<00:17, 6953.31it/s] 13%|█▎        | 18563/140000 [00:02<00:17, 7097.16it/s] 14%|█▍        | 19304/140000 [00:02<00:16, 7188.20it/s] 14%|█▍        | 20044/140000 [00:03<00:16, 7250.68it/s] 15%|█▍        | 20788/140000 [00:03<00:16, 7305.98it/s] 15%|█▌        | 21520/140000 [00:03<00:16, 7252.86it/s] 16%|█▌        | 22273/140000 [00:03<00:16, 7332.89it/s] 16%|█▋        | 23007/140000 [00:03<00:16, 7165.46it/s] 17%|█▋        | 23809/140000 [00:03<00:15, 7414.45it/s] 18%|█▊        | 24619/140000 [00:03<00:15, 7614.45it/s] 18%|█▊        | 25438/140000 [00:03<00:14, 7783.76it/s] 19%|█▊        | 26249/140000 [00:03<00:14, 7878.24it/s] 19%|█▉        | 27046/140000 [00:04<00:14, 7904.64it/s] 20%|█▉        | 27873/140000 [00:04<00:13, 8012.31it/s] 20%|██        | 28700/140000 [00:04<00:13, 8087.70it/s] 21%|██        | 29516/140000 [00:04<00:13, 8106.24it/s] 22%|██▏       | 30327/140000 [00:04<00:13, 7942.69it/s] 22%|██▏       | 31123/140000 [00:04<00:14, 7732.28it/s] 23%|██▎       | 31898/140000 [00:04<00:14, 7680.72it/s] 23%|██▎       | 32668/140000 [00:04<00:13, 7679.70it/s] 24%|██▍       | 33449/140000 [00:04<00:13, 7715.78it/s] 24%|██▍       | 34222/140000 [00:04<00:13, 7704.36it/s] 25%|██▍       | 34993/140000 [00:05<00:13, 7701.82it/s] 26%|██▌       | 35773/140000 [00:05<00:13, 7728.14it/s] 26%|██▌       | 36566/140000 [00:05<00:13, 7786.42it/s] 27%|██▋       | 37393/140000 [00:05<00:12, 7928.31it/s] 27%|██▋       | 38215/140000 [00:05<00:12, 8014.37it/s] 28%|██▊       | 39017/140000 [00:05<00:12, 7894.91it/s] 28%|██▊       | 39843/140000 [00:05<00:12, 8000.33it/s] 29%|██▉       | 40674/140000 [00:05<00:12, 8089.93it/s] 30%|██▉       | 41488/140000 [00:05<00:12, 8102.03it/s] 30%|███       | 42315/140000 [00:05<00:11, 8151.32it/s] 31%|███       | 43131/140000 [00:06<00:11, 8102.77it/s] 31%|███▏      | 43948/140000 [00:06<00:11, 8119.70it/s] 32%|███▏      | 44771/140000 [00:06<00:11, 8151.43it/s] 33%|███▎      | 45587/140000 [00:06<00:12, 7833.33it/s] 33%|███▎      | 46374/140000 [00:06<00:12, 7536.10it/s] 34%|███▎      | 47132/140000 [00:06<00:12, 7372.49it/s] 34%|███▍      | 47872/140000 [00:06<00:12, 7294.01it/s] 35%|███▍      | 48604/140000 [00:06<00:12, 7246.94it/s] 35%|███▌      | 49330/140000 [00:06<00:12, 7193.40it/s] 36%|███▌      | 50052/140000 [00:06<00:12, 7198.47it/s] 36%|███▋      | 50773/140000 [00:07<00:12, 7136.80it/s] 37%|███▋      | 51487/140000 [00:07<00:12, 7036.58it/s] 37%|███▋      | 52200/140000 [00:07<00:12, 7063.50it/s] 38%|███▊      | 52935/140000 [00:07<00:12, 7147.72it/s] 38%|███▊      | 53663/140000 [00:07<00:12, 7185.12it/s] 39%|███▉      | 54382/140000 [00:07<00:11, 7181.89it/s] 39%|███▉      | 55107/140000 [00:07<00:11, 7200.26it/s] 40%|███▉      | 55828/140000 [00:07<00:11, 7194.74it/s] 40%|████      | 56548/140000 [00:07<00:11, 7155.40it/s] 41%|████      | 57291/140000 [00:07<00:11, 7236.68it/s] 41%|████▏     | 58048/140000 [00:08<00:11, 7335.61it/s] 42%|████▏     | 58782/140000 [00:08<00:11, 7246.68it/s] 43%|████▎     | 59507/140000 [00:08<00:11, 7087.68it/s] 43%|████▎     | 60217/140000 [00:08<00:11, 6933.92it/s] 44%|████▎     | 60912/140000 [00:08<00:11, 6892.28it/s] 44%|████▍     | 61631/140000 [00:08<00:11, 6976.95it/s] 45%|████▍     | 62330/140000 [00:08<00:11, 6917.10it/s] 45%|████▌     | 63023/140000 [00:08<00:11, 6791.39it/s] 46%|████▌     | 63707/140000 [00:08<00:11, 6802.82it/s] 46%|████▌     | 64392/140000 [00:09<00:11, 6814.07it/s] 46%|████▋     | 65080/140000 [00:09<00:10, 6831.72it/s] 47%|████▋     | 65773/140000 [00:09<00:10, 6858.59it/s] 48%|████▊     | 66517/140000 [00:09<00:10, 7029.09it/s] 48%|████▊     | 67221/140000 [00:09<00:10, 6885.10it/s] 49%|████▊     | 67963/140000 [00:09<00:10, 7040.33it/s] 49%|████▉     | 68692/140000 [00:09<00:10, 7112.32it/s] 50%|████▉     | 69447/140000 [00:09<00:09, 7240.35it/s] 50%|█████     | 70187/140000 [00:09<00:09, 7287.06it/s] 51%|█████     | 70927/140000 [00:09<00:09, 7318.72it/s] 51%|█████     | 71671/140000 [00:10<00:09, 7353.99it/s] 52%|█████▏    | 72428/140000 [00:10<00:09, 7415.80it/s] 52%|█████▏    | 73179/140000 [00:10<00:08, 7441.28it/s] 53%|█████▎    | 73942/140000 [00:10<00:08, 7494.93it/s] 53%|█████▎    | 74692/140000 [00:10<00:08, 7400.71it/s] 54%|█████▍    | 75433/140000 [00:10<00:08, 7214.45it/s] 54%|█████▍    | 76156/140000 [00:10<00:09, 7061.23it/s] 55%|█████▍    | 76864/140000 [00:10<00:08, 7048.52it/s] 55%|█████▌    | 77570/140000 [00:10<00:08, 7037.34it/s] 56%|█████▌    | 78299/140000 [00:10<00:08, 7108.73it/s] 56%|█████▋    | 79011/140000 [00:11<00:08, 7085.06it/s] 57%|█████▋    | 79775/140000 [00:11<00:08, 7247.38it/s] 58%|█████▊    | 80528/140000 [00:11<00:08, 7328.93it/s] 58%|█████▊    | 81262/140000 [00:11<00:08, 7208.49it/s] 59%|█████▊    | 82010/140000 [00:11<00:07, 7288.19it/s] 59%|█████▉    | 82740/140000 [00:11<00:07, 7255.06it/s] 60%|█████▉    | 83466/140000 [00:11<00:08, 7007.49it/s] 60%|██████    | 84169/140000 [00:11<00:08, 6790.68it/s] 61%|██████    | 84851/140000 [00:11<00:08, 6683.23it/s] 61%|██████    | 85521/140000 [00:11<00:08, 6537.81it/s] 62%|██████▏   | 86180/140000 [00:12<00:08, 6550.72it/s] 62%|██████▏   | 86847/140000 [00:12<00:08, 6583.31it/s] 63%|██████▎   | 87518/140000 [00:12<00:07, 6618.15it/s] 63%|██████▎   | 88214/140000 [00:12<00:07, 6716.18it/s] 64%|██████▎   | 88903/140000 [00:12<00:07, 6765.82it/s] 64%|██████▍   | 89614/140000 [00:12<00:07, 6867.97it/s] 65%|██████▌   | 91331/140000 [00:12<00:04, 9938.85it/s] 67%|██████▋   | 93174/140000 [00:12<00:03, 12472.36it/s] 68%|██████▊   | 94823/140000 [00:12<00:03, 13672.13it/s] 69%|██████▊   | 96193/140000 [00:13<00:03, 13187.81it/s] 70%|██████▉   | 97809/140000 [00:13<00:03, 14054.54it/s] 71%|███████   | 99221/140000 [00:13<00:02, 13889.80it/s] 72%|███████▏  | 100809/140000 [00:13<00:02, 14469.71it/s] 73%|███████▎  | 102261/140000 [00:13<00:02, 14107.43it/s] 74%|███████▍  | 103810/140000 [00:13<00:02, 14505.84it/s] 75%|███████▌  | 105357/140000 [00:13<00:02, 14788.57it/s] 76%|███████▋  | 106840/140000 [00:13<00:02, 14215.24it/s] 77%|███████▋  | 108269/140000 [00:13<00:02, 13896.67it/s] 78%|███████▊  | 109664/140000 [00:13<00:02, 13801.74it/s] 79%|███████▉  | 111071/140000 [00:14<00:02, 13877.27it/s] 80%|████████  | 112462/140000 [00:14<00:02, 13310.06it/s] 81%|████████▏ | 113799/140000 [00:14<00:02, 13007.98it/s] 82%|████████▏ | 115228/140000 [00:14<00:01, 13372.53it/s] 83%|████████▎ | 116571/140000 [00:14<00:01, 12853.76it/s] 84%|████████▍ | 117863/140000 [00:14<00:01, 12636.58it/s] 85%|████████▌ | 119131/140000 [00:14<00:01, 11927.89it/s] 86%|████████▌ | 120333/140000 [00:14<00:01, 11312.63it/s] 87%|████████▋ | 121474/140000 [00:14<00:01, 11238.85it/s] 88%|████████▊ | 122648/140000 [00:15<00:01, 11376.42it/s] 88%|████████▊ | 123791/140000 [00:15<00:01, 11260.75it/s] 89%|████████▉ | 124921/140000 [00:15<00:01, 10952.14it/s] 90%|█████████ | 126020/140000 [00:15<00:01, 10859.28it/s] 91%|█████████ | 127108/140000 [00:15<00:01, 10766.28it/s] 92%|█████████▏| 128254/140000 [00:15<00:01, 10963.65it/s] 92%|█████████▏| 129352/140000 [00:15<00:00, 10949.75it/s] 93%|█████████▎| 130464/140000 [00:15<00:00, 10999.30it/s] 94%|█████████▍| 131610/140000 [00:15<00:00, 11134.28it/s] 95%|█████████▍| 132963/140000 [00:15<00:00, 11843.51it/s] 96%|█████████▌| 134149/140000 [00:16<00:00, 11589.87it/s] 97%|█████████▋| 135320/140000 [00:16<00:00, 11623.26it/s] 97%|█████████▋| 136484/140000 [00:16<00:00, 11025.13it/s] 98%|█████████▊| 137594/140000 [00:16<00:00, 10758.06it/s] 99%|█████████▉| 138749/140000 [00:16<00:00, 10981.17it/s]100%|█████████▉| 139852/140000 [00:16<00:00, 10773.94it/s]100%|██████████| 140000/140000 [00:16<00:00, 8424.12it/s] 
  0%|          | 0/20000 [00:00<?, ?it/s] 32%|███▏      | 6360/20000 [00:00<00:00, 63590.05it/s] 64%|██████▎   | 12720/20000 [00:00<00:00, 61982.65it/s] 95%|█████████▍| 18922/20000 [00:00<00:00, 61644.61it/s]100%|██████████| 20000/20000 [00:00<00:00, 61065.13it/s]
  0%|          | 0/40000 [00:00<?, ?it/s]  3%|▎         | 1058/40000 [00:00<00:03, 10576.71it/s]  5%|▌         | 2116/40000 [00:00<00:04, 9253.91it/s]   8%|▊         | 3140/40000 [00:00<00:03, 9669.38it/s] 10%|█         | 4136/40000 [00:00<00:03, 9775.17it/s] 13%|█▎        | 5120/40000 [00:00<00:03, 9793.63it/s] 15%|█▌        | 6104/40000 [00:00<00:03, 9795.38it/s] 18%|█▊        | 7087/40000 [00:00<00:03, 9651.23it/s] 20%|██        | 8076/40000 [00:00<00:03, 9725.33it/s] 23%|██▎       | 9051/40000 [00:00<00:03, 9678.80it/s] 25%|██▌       | 10039/40000 [00:01<00:03, 9739.49it/s] 28%|██▊       | 11014/40000 [00:01<00:03, 9526.92it/s] 30%|██▉       | 11985/40000 [00:01<00:02, 9579.37it/s] 32%|███▏      | 12990/40000 [00:01<00:02, 9716.69it/s] 35%|███▍      | 13965/40000 [00:01<00:02, 9724.29it/s] 37%|███▋      | 14939/40000 [00:01<00:02, 9663.46it/s] 40%|███▉      | 15967/40000 [00:01<00:02, 9844.54it/s] 42%|████▏     | 16952/40000 [00:01<00:02, 9499.58it/s] 45%|████▍     | 17905/40000 [00:01<00:02, 9494.12it/s] 47%|████▋     | 18857/40000 [00:01<00:02, 9474.43it/s] 50%|████▉     | 19818/40000 [00:02<00:02, 9509.15it/s] 52%|█████▏    | 20788/40000 [00:02<00:02, 9562.99it/s] 54%|█████▍    | 21746/40000 [00:02<00:01, 9536.93it/s] 57%|█████▋    | 22708/40000 [00:02<00:01, 9559.31it/s] 59%|█████▉    | 23666/40000 [00:02<00:01, 9563.63it/s] 62%|██████▏   | 24623/40000 [00:02<00:01, 9310.01it/s] 64%|██████▍   | 25556/40000 [00:02<00:01, 9097.08it/s] 66%|██████▌   | 26468/40000 [00:02<00:01, 9081.94it/s] 68%|██████▊   | 27378/40000 [00:02<00:01, 9024.13it/s] 71%|███████   | 28282/40000 [00:02<00:01, 8860.58it/s] 73%|███████▎  | 29169/40000 [00:03<00:01, 8587.82it/s] 75%|███████▌  | 30030/40000 [00:03<00:01, 8484.78it/s] 77%|███████▋  | 30927/40000 [00:03<00:01, 8622.04it/s] 80%|███████▉  | 31869/40000 [00:03<00:00, 8853.96it/s] 82%|████████▏ | 32808/40000 [00:03<00:00, 9009.55it/s] 84%|████████▍ | 33741/40000 [00:03<00:00, 9102.04it/s] 87%|████████▋ | 34653/40000 [00:03<00:00, 9077.65it/s] 89%|████████▉ | 35582/40000 [00:03<00:00, 9139.28it/s] 91%|█████████▏| 36533/40000 [00:03<00:00, 9248.30it/s] 94%|█████████▎| 37459/40000 [00:04<00:00, 9146.33it/s] 96%|█████████▌| 38375/40000 [00:04<00:00, 9120.64it/s] 98%|█████████▊| 39288/40000 [00:04<00:00, 8728.29it/s]100%|██████████| 40000/40000 [00:04<00:00, 9301.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 37.87it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 29.31it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.46it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 37.26it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 40.12it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 40.05it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 41.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.32it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 11.20it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 29.15it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.03it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.40it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 22.23it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.54it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.42it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 38.84it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.83it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 41.37it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.74it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 39.23it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.34it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.22it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.79it/s]Train:  20%|██        | 7/35 [00:00<00:00, 33.72it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 34.18it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.22it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 35.66it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 36.60it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 38.54it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.67it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 29.93it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.22it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.96it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 37.80it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 33.99it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 36.02it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 39.98it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 40.93it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 38.54it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.76it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.99it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 31.03it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.98it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 22.61it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.83it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 37.24it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 40.45it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 41.62it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 40.38it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 30.02it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 34.35it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.52it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.66it/s]Train:  20%|██        | 7/35 [00:00<00:00, 28.27it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 33.80it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 38.22it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 40.04it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 41.18it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.37it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.53it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.49it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 27.01it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 35.06it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 39.27it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 41.58it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 41.66it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 42.89it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 42.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.02it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.20it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.44it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.21it/s]Train:  20%|██        | 7/35 [00:00<00:00, 34.90it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 36.48it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 36.53it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 38.82it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 39.48it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 41.35it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 41.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.57it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.60it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.18it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.05it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 45.81it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 39.35it/s]Train:  40%|████      | 14/35 [00:00<00:00, 39.05it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 38.98it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 40.23it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 41.83it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 44.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.90it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.79it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 31.67it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.66it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 23.75it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 33.39it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 38.51it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 41.18it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 42.18it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 41.46it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 41.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 30.34it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 33.84it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.71it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  8.78it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.63it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.30it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.24it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 38.51it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 39.62it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.62it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.49it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.24it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.87it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 25.60it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.77it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 37.21it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 39.99it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.87it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 40.84it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.40it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.18it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.55it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.99it/s]Train:  20%|██        | 7/35 [00:00<00:00, 33.60it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 32.52it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.03it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.68it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.81it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 37.71it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 23.75it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.05it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.39it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.62it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 44.42it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.65it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.88it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.17it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.00it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.22it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.87it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.04it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.05it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.72it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 30.11it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 35.02it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.76it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.86it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.63it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 31.69it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 34.13it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.11it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.06it/s]Train:  20%|██        | 7/35 [00:00<00:00, 28.17it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 33.70it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 38.10it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 39.58it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 41.03it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.34it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.33it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 31.55it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.26it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 29.31it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 34.08it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 36.05it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 39.03it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.34it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 40.74it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.80it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 35.82it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.16it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.40it/s]Train:  20%|██        | 7/35 [00:00<00:00, 35.75it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 36.79it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 37.24it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.12it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 37.07it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 39.04it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 28.26it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.11it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.38it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.46it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 35.88it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 31.24it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.68it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.23it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.57it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 37.46it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.24it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.57it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.87it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.49it/s]
Current taxi columns: ['start_lon', 'start_lat', 'end_lon', 'end_lat', 'trip_distance', 'taxi_duration']
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 2 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [2, 200]  [4096, 200]     600        400
1_fc_layers.Linear_1   [200, 100]  [4096, 100]   20100      20000
2_fc_layers.Linear_2     [100, 1]    [4096, 1]     101        100
-----------------------------------------------------------------
                      Totals
Total params           20801
Trainable params       20801
Non-trainable params       0
Mult-Adds              20500
=================================================================
n_classes=2
task=regression
model_name=ny_B_2022-05-21-21-27-57
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=8
device=cuda:1
test_batch_size=4096
train_batch_size=4096
learning_rate=0.003
weight_decay=1e-05
num_epochs=100
model_save_path=ckp/ny_B_2022-05-21-21-27-57.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7fcd4ed57760>, <metric.rmse.RMSE object at 0x7fcd4ed577c0>]
hidden_sizes=[200, 100]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=2, out_features=200, bias=True)
    (1): Linear(in_features=200, out_features=100, bias=True)
    (2): Linear(in_features=100, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fcd4ed576d0>
Epoch 1: Loss:            : Train 0.0365, Val 0.0198, Test 0.0203
          R2_Score         : Train 0.2567, Val 0.5897, Test 0.5894
          RMSE             : Train 371.9655, Val 272.9617, Test 276.2624
Best:
          R2_Score         : Train 0.2567, Val 0.5897, Test 0.5894
          RMSE             : Train 371.9655, Val 272.9617, Test 276.2624
Epoch 2: Loss:            : Train 0.0199, Val 0.0190, Test 0.0194
          R2_Score         : Train 0.5981, Val 0.6066, Test 0.6078
          RMSE             : Train 273.5246, Val 267.3008, Test 270.0094
Best:
          R2_Score         : Train 0.5981, Val 0.6066, Test 0.6078
          RMSE             : Train 273.5246, Val 267.3008, Test 270.0094
Epoch 3: Loss:            : Train 0.0192, Val 0.0188, Test 0.0191
          R2_Score         : Train 0.6118, Val 0.6116, Test 0.6138
          RMSE             : Train 268.8134, Val 265.5886, Test 267.9421
Best:
          R2_Score         : Train 0.6118, Val 0.6116, Test 0.6138
          RMSE             : Train 268.8134, Val 265.5886, Test 267.9421
Epoch 4: Loss:            : Train 0.0191, Val 0.0188, Test 0.0191
          R2_Score         : Train 0.6146, Val 0.6119, Test 0.6146
          RMSE             : Train 267.8501, Val 265.4982, Test 267.6589
Best:
          R2_Score         : Train 0.6146, Val 0.6119, Test 0.6146
          RMSE             : Train 267.8501, Val 265.4982, Test 267.6589
Epoch 5: Loss:            : Train 0.0191, Val 0.0187, Test 0.0190
          R2_Score         : Train 0.6160, Val 0.6129, Test 0.6156
          RMSE             : Train 267.3495, Val 265.1354, Test 267.3113
Best:
          R2_Score         : Train 0.6160, Val 0.6129, Test 0.6156
          RMSE             : Train 267.3495, Val 265.1354, Test 267.3113
Epoch 6: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6170, Val 0.6152, Test 0.6173
          RMSE             : Train 267.0066, Val 264.3625, Test 266.7221
Best:
          R2_Score         : Train 0.6170, Val 0.6152, Test 0.6173
          RMSE             : Train 267.0066, Val 264.3625, Test 266.7221
Epoch 7: Loss:            : Train 0.0190, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6176, Val 0.6153, Test 0.6170
          RMSE             : Train 266.8057, Val 264.3182, Test 266.8224
Best:
          R2_Score         : Train 0.6176, Val 0.6153, Test 0.6170
          RMSE             : Train 266.8057, Val 264.3182, Test 266.8224
Epoch 8: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6173, Val 0.6165, Test 0.6181
          RMSE             : Train 266.8994, Val 263.9177, Test 266.4185
Best:
          R2_Score         : Train 0.6173, Val 0.6165, Test 0.6181
          RMSE             : Train 266.8994, Val 263.9177, Test 266.4185
Epoch 9: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6180, Val 0.6160, Test 0.6177
          RMSE             : Train 266.6651, Val 264.0716, Test 266.5878
Best:
          R2_Score         : Train 0.6173, Val 0.6165, Test 0.6181
          RMSE             : Train 266.8994, Val 263.9177, Test 266.4185
Epoch 10: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6174, Val 0.6152, Test 0.6168
          RMSE             : Train 266.8628, Val 264.3471, Test 266.8850
Best:
          R2_Score         : Train 0.6173, Val 0.6165, Test 0.6181
          RMSE             : Train 266.8994, Val 263.9177, Test 266.4185
Epoch 11: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6182, Val 0.6161, Test 0.6176
          RMSE             : Train 266.5968, Val 264.0595, Test 266.6104
Best:
          R2_Score         : Train 0.6173, Val 0.6165, Test 0.6181
          RMSE             : Train 266.8994, Val 263.9177, Test 266.4185
Epoch 12: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6182, Val 0.6155, Test 0.6170
          RMSE             : Train 266.6028, Val 264.2539, Test 266.8170
Best:
          R2_Score         : Train 0.6173, Val 0.6165, Test 0.6181
          RMSE             : Train 266.8994, Val 263.9177, Test 266.4185
Epoch 13: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 14: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6183, Val 0.6162, Test 0.6181
          RMSE             : Train 266.5589, Val 264.0157, Test 266.4432
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 15: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6188, Val 0.6147, Test 0.6164
          RMSE             : Train 266.3841, Val 264.5316, Test 267.0282
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 16: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6184, Val 0.6164, Test 0.6182
          RMSE             : Train 266.5098, Val 263.9442, Test 266.3933
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 17: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6185, Val 0.6156, Test 0.6178
          RMSE             : Train 266.4865, Val 264.1994, Test 266.5419
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 18: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6179, Val 0.6144, Test 0.6166
          RMSE             : Train 266.6911, Val 264.6133, Test 266.9636
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 19: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6161, Test 0.6179
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 22.26it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 32.81it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 37.66it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 39.18it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 41.01it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 40.76it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 30.53it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 34.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.20it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.95it/s]Train:  20%|██        | 7/35 [00:00<00:00, 28.88it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 34.41it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 37.96it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 38.69it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 39.30it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.61it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 19.93it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.17it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.21it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 24.50it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 31.61it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 33.43it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.00it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.81it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 37.93it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.70it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.64it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.77it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.07it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 30.48it/s]Train:  40%|████      | 14/35 [00:00<00:00, 36.43it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 38.76it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 37.72it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 36.75it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.01it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.44it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.04it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.90it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 44.70it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 37.91it/s]Train:  40%|████      | 14/35 [00:00<00:00, 37.46it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 37.04it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 37.57it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.09it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.92it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.79it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.41it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.03it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 23.00it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 32.06it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 37.23it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 39.94it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 41.32it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 40.58it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 33.54it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 35.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 33.84it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.38it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.19it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 31.59it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.44it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.95it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.20it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 34.03it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.52it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.64it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 23.29it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 29.04it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.76it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 23.43it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.19it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 37.06it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 39.32it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.85it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 40.55it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.79it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.16it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.66it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.21it/s]Train:  20%|██        | 7/35 [00:00<00:00, 32.07it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 30.79it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.38it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.54it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 34.94it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 38.61it/s]Train:  97%|█████████▋| 34/35 [00:00<00:00, 36.56it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.14it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 30.85it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.19it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.09it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 39.93it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 33.42it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 34.05it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 37.22it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.94it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 38.88it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 35.12it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  8.10it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.21it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.31it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.93it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.49it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 30.18it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 35.66it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 38.79it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 39.89it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 39.14it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.49it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 32.99it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.12it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.18it/s]Train:  20%|██        | 7/35 [00:00<00:01, 27.98it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.71it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.66it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 37.27it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 38.54it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 29.16it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 38.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 38.36it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 38.07it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 42.62it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 29.28it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 39.08it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.02it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 28.17it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 29.81it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 31.53it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 34.33it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.90it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 32.99it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.32it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.84it/s]Train:  20%|██        | 7/35 [00:00<00:00, 30.93it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 29.82it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.56it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 29.94it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 31.44it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.00it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 20.70it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.66it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.96it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.19it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 43.33it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.58it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.79it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.01it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 36.06it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 39.31it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 35.33it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.62it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 15.72it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.07it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.80it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 21.37it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 35.28it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 35.32it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.59it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.88it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.81it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 34.59it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.97it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 31.96it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.53it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:06,  4.86it/s]Train:  20%|██        | 7/35 [00:00<00:01, 21.02it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 26.04it/s]Train:  40%|████      | 14/35 [00:00<00:00, 23.89it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 24.24it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.14it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 27.41it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 25.57it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 27.61it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  6.22it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 13.76it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.63it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.34it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 26.24it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 33.78it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 37.40it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.52it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.31it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 34.03it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.47it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.95it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 25.30it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 30.33it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.56it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:03,  9.27it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 25.18it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.91it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.40it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 33.84it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.07it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 15.45it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 14.80it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 17.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.34it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 21.83it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.66it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 38.68it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.67it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.80it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.80it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.99it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 37.80it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.14it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 13.74it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 25.37it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.09it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 23.75it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 30.41it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.18it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 34.43it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.01it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.90it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 31.84it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.40it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.54it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.15it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 28.90it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 25.97it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 28.43it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.66it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.54it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 33.43it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 23.82it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 25.84it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 27.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.89it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 19.19it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 27.91it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.36it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 32.92it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.71it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 28.44it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 33.43it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.05it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 48.20it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 39.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.78it/s]
          RMSE             : Train 266.3746, Val 264.0401, Test 266.4876
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 20: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6163, Test 0.6179
          RMSE             : Train 266.3750, Val 263.9772, Test 266.5042
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 21: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6164, Test 0.6182
          RMSE             : Train 266.3216, Val 263.9548, Test 266.3901
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 22: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6162, Test 0.6179
          RMSE             : Train 266.3402, Val 264.0166, Test 266.4961
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 23: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6160, Test 0.6178
          RMSE             : Train 266.4448, Val 264.0702, Test 266.5484
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 24: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6166, Test 0.6184
          RMSE             : Train 266.3152, Val 263.8684, Test 266.3440
Best:
          R2_Score         : Train 0.6186, Val 0.6168, Test 0.6185
          RMSE             : Train 266.4621, Val 263.8151, Test 266.2866
Epoch 25: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6172, Test 0.6186
          RMSE             : Train 266.4006, Val 263.6615, Test 266.2658
Best:
          R2_Score         : Train 0.6187, Val 0.6172, Test 0.6186
          RMSE             : Train 266.4006, Val 263.6615, Test 266.2658
Epoch 26: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6188, Val 0.6157, Test 0.6174
          RMSE             : Train 266.3895, Val 264.1919, Test 266.6853
Best:
          R2_Score         : Train 0.6187, Val 0.6172, Test 0.6186
          RMSE             : Train 266.4006, Val 263.6615, Test 266.2658
Epoch 27: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6170, Test 0.6187
          RMSE             : Train 266.3624, Val 263.7368, Test 266.2115
Best:
          R2_Score         : Train 0.6187, Val 0.6172, Test 0.6186
          RMSE             : Train 266.4006, Val 263.6615, Test 266.2658
Epoch 28: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6167, Test 0.6182
          RMSE             : Train 266.2784, Val 263.8393, Test 266.3818
Best:
          R2_Score         : Train 0.6187, Val 0.6172, Test 0.6186
          RMSE             : Train 266.4006, Val 263.6615, Test 266.2658
Epoch 29: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6167, Test 0.6181
          RMSE             : Train 266.2686, Val 263.8350, Test 266.4273
Best:
          R2_Score         : Train 0.6187, Val 0.6172, Test 0.6186
          RMSE             : Train 266.4006, Val 263.6615, Test 266.2658
Epoch 30: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 31: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6190, Val 0.6169, Test 0.6186
          RMSE             : Train 266.3018, Val 263.7571, Test 266.2597
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 32: Loss:            : Train 0.0188, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6189, Val 0.6147, Test 0.6169
          RMSE             : Train 266.3385, Val 264.5333, Test 266.8623
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 33: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6165, Test 0.6184
          RMSE             : Train 266.2276, Val 263.8914, Test 266.3153
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 34: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6160, Test 0.6181
          RMSE             : Train 266.1562, Val 264.0718, Test 266.4469
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 35: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6187, Val 0.6156, Test 0.6176
          RMSE             : Train 266.4198, Val 264.2124, Test 266.6169
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 36: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6191, Val 0.6171, Test 0.6183
          RMSE             : Train 266.2693, Val 263.7161, Test 266.3633
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 37: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6169, Test 0.6186
          RMSE             : Train 266.2169, Val 263.7634, Test 266.2607
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 38: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6167, Test 0.6186
          RMSE             : Train 266.2129, Val 263.8525, Test 266.2443
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 39: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6189, Val 0.6166, Test 0.6184
          RMSE             : Train 266.3368, Val 263.8615, Test 266.3343
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 40: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6170, Test 0.6189
          RMSE             : Train 266.2361, Val 263.7171, Test 266.1495
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 41: Loss:            : Train 0.0189, Val 0.0187, Test 0.0190
          R2_Score         : Train 0.6187, Val 0.6134, Test 0.6155
          RMSE             : Train 266.3981, Val 264.9562, Test 267.3214
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 42: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6162, Test 0.6182
          RMSE             : Train 266.2314, Val 263.9978, Test 266.3882

Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:03,  9.69it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.08it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 27.44it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 30.64it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 32.22it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.65it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 32.72it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.06it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 19.69it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.14it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.85it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 45.01it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 38.92it/s]Train:  40%|████      | 14/35 [00:00<00:00, 36.92it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.88it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.50it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.16it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 32.65it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.92it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 25.89it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 12.27it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 25.26it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.45it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 22.17it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 36.02it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 36.50it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 36.57it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 38.34it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 41.65it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 38.09it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.79it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.84it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 38.41it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.48it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.22it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:05,  6.15it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 21.22it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 27.58it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 30.47it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.03it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 38.04it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.59it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.55it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.15it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.70it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.88it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 26.23it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 35.64it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 35.35it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 35.07it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 36.61it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 36.98it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 39.82it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.80it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 43.48it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.46it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.21it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:03,  8.88it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 21.30it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 28.46it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 29.36it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 30.08it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 28.56it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 30.84it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.67it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 27.31it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 36.23it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.99it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 36.24it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 27.08it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.89it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.60it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 30.81it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 31.90it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  4.46it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 16.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00,  9.52it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 22.72it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.13it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.28it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 31.57it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.64it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 30.45it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.01it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.60it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 34.03it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.26it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 28.91it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.66it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 16.25it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 28.60it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 24.57it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 28.40it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.50it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 34.31it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 36.68it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 15.77it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.62it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 33.26it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.89it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 26.24it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 22.20it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 23.86it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.06it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 33.11it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.97it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.10it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 36.84it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 36.51it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 33.01it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 40.10it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.99it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 27.86it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 35.09it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 32.44it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 32.11it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.11it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 34.43it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.00it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 29.33it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 39.43it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.71it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.22it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 22.11it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 24.45it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 28.25it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.46it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.77it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.25it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 38.41it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.84it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.00it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 29.23it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.45it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 19.80it/s]Train:  20%|██        | 7/35 [00:00<00:00, 29.00it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 32.03it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 31.15it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.13it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.12it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 37.35it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.14it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 32.59it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 33.91it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 38.45it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.83it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 27.62it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 27.29it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 30.50it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.53it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.83it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.52it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.83it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.04it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 30.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.41it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 22.25it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 34.49it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 34.80it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 34.27it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 34.82it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.13it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 36.20it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.58it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 25.57it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 21.51it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.27it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.79it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 29.58it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.35it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.55it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 36.79it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 37.68it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.31it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 29.53it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.32it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.15it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 44.04it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 38.21it/s]Train:  40%|████      | 14/35 [00:00<00:00, 36.34it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 36.17it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.73it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 38.10it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 40.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.66it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 12.54it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 25.59it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.98it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.89it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 31.02it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.71it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.00it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 38.29it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.80it/s]Train:  97%|█████████▋| 34/35 [00:00<00:00, 34.60it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 19.89it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 22.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 24.12it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 35.99it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.86it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 27.09it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.54it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 25.70it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 31.67it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 35.38it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.61it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.46it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.36it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.89it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.56it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 29.82it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 26.65it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.21it/s]Train:  40%|████      | 14/35 [00:00<00:00, 33.40it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 28.07it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 27.03it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 29.13it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 32.79it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.01it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.52it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.07it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.85it/s]Train:  20%|██        | 7/35 [00:00<00:00, 33.94it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 32.57it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 28.87it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 30.44it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 31.48it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 33.34it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.16it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 31.51it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 37.90it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.97it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 43.94it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 36.96it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.97it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.83it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.89it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 35.26it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  4.90it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 19.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00,  9.26it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 24.77it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.95it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 20.08it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 30.19it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 34.89it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.63it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.66it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.44it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.95it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 34.70it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 28.79it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.12it/s]Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 43: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6171, Test 0.6182
          RMSE             : Train 266.0483, Val 263.6979, Test 266.4097
Best:
          R2_Score         : Train 0.6186, Val 0.6174, Test 0.6191
          RMSE             : Train 266.4382, Val 263.5860, Test 266.0981
Epoch 44: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6174, Test 0.6187
          RMSE             : Train 266.2332, Val 263.5809, Test 266.2109
Best:
          R2_Score         : Train 0.6192, Val 0.6174, Test 0.6187
          RMSE             : Train 266.2332, Val 263.5809, Test 266.2109
Epoch 45: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6175, Test 0.6192
          RMSE             : Train 266.2445, Val 263.5484, Test 266.0650
Best:
          R2_Score         : Train 0.6192, Val 0.6175, Test 0.6192
          RMSE             : Train 266.2445, Val 263.5484, Test 266.0650
Epoch 46: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6194, Val 0.6179, Test 0.6193
          RMSE             : Train 266.1853, Val 263.4400, Test 266.0207
Best:
          R2_Score         : Train 0.6194, Val 0.6179, Test 0.6193
          RMSE             : Train 266.1853, Val 263.4400, Test 266.0207
Epoch 47: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6159, Test 0.6180
          RMSE             : Train 266.1156, Val 264.1148, Test 266.4796
Best:
          R2_Score         : Train 0.6194, Val 0.6179, Test 0.6193
          RMSE             : Train 266.1853, Val 263.4400, Test 266.0207
Epoch 48: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6163, Test 0.6181
          RMSE             : Train 266.1047, Val 263.9646, Test 266.4489
Best:
          R2_Score         : Train 0.6194, Val 0.6179, Test 0.6193
          RMSE             : Train 266.1853, Val 263.4400, Test 266.0207
Epoch 49: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6175, Test 0.6190
          RMSE             : Train 266.2000, Val 263.5661, Test 266.1027
Best:
          R2_Score         : Train 0.6194, Val 0.6179, Test 0.6193
          RMSE             : Train 266.1853, Val 263.4400, Test 266.0207
Epoch 50: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6168, Test 0.6188
          RMSE             : Train 266.1072, Val 263.7996, Test 266.1916
Best:
          R2_Score         : Train 0.6194, Val 0.6179, Test 0.6193
          RMSE             : Train 266.1853, Val 263.4400, Test 266.0207
Epoch 51: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Best:
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Epoch 52: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6177, Test 0.6188
          RMSE             : Train 266.1978, Val 263.5019, Test 266.1977
Best:
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Epoch 53: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6176, Test 0.6192
          RMSE             : Train 266.1407, Val 263.5250, Test 266.0573
Best:
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Epoch 54: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6179, Test 0.6192
          RMSE             : Train 266.0511, Val 263.4209, Test 266.0579
Best:
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Epoch 55: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6179, Test 0.6192
          RMSE             : Train 266.0766, Val 263.4406, Test 266.0442
Best:
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Epoch 56: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6172, Test 0.6190
          RMSE             : Train 266.0364, Val 263.6489, Test 266.1205
Best:
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Epoch 57: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6193, Val 0.6174, Test 0.6188
          RMSE             : Train 266.2089, Val 263.5825, Test 266.1885
Best:
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Epoch 58: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6169, Test 0.6187
          RMSE             : Train 266.0767, Val 263.7714, Test 266.2405
Best:
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Epoch 59: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6164, Test 0.6183
          RMSE             : Train 266.0760, Val 263.9419, Test 266.3661
Best:
          R2_Score         : Train 0.6194, Val 0.6180, Test 0.6192
          RMSE             : Train 266.1775, Val 263.4036, Test 266.0640
Epoch 60: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6193
          RMSE             : Train 266.0852, Val 263.3958, Test 266.0227
Best:
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6193
          RMSE             : Train 266.0852, Val 263.3958, Test 266.0227
Epoch 61: Loss:            : Train 0.0188, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6197, Val 0.6156, Test 0.6170
          RMSE             : Train 266.0539, Val 264.2151, Test 266.8255
Best:
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6193
          RMSE             : Train 266.0852, Val 263.3958, Test 266.0227
Epoch 62: Loss:            : Train 0.0188, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 63: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6159, Test 0.6178
          RMSE             : Train 266.0644, Val 264.1017, Test 266.5435
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 64: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6192, Val 0.6179, Test 0.6191
          RMSE             : Train 266.2227, Val 263.4224, Test 266.0906
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 65: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6200, Val 0.6172, Test 0.6186
          RMSE             : Train 265.9770, Val 263.6708, Test 266.2455
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:07,  4.85it/s]Train:  20%|██        | 7/35 [00:00<00:01, 23.32it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.63it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.28it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.74it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 38.83it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.38it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.40it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 31.76it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.55it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 22.40it/s]Train:  20%|██        | 7/35 [00:00<00:01, 24.10it/s]Train:  29%|██▊       | 10/35 [00:00<00:01, 16.77it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 25.07it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 30.82it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 30.07it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 30.07it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 31.83it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.36it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 42.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 46.95it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 56.15it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 19.49it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 34.98it/s]Train:  40%|████      | 14/35 [00:00<00:00, 34.64it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 34.26it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 28.80it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 26.50it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 25.96it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.95it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 38.60it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.49it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.64it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 46.70it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 36.24it/s]Train:  40%|████      | 14/35 [00:00<00:00, 32.19it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.99it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 29.64it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 32.72it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.10it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 35.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.62it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.67it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 30.11it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.84it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 23.18it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 34.13it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 33.63it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 36.84it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.76it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 38.66it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 28.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 39.54it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 35.93it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 41.36it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  7.43it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 13.39it/s]Train:  20%|██        | 7/35 [00:00<00:01, 23.25it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.45it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.02it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 35.35it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 35.73it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.79it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 19.16it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 22.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00,  9.20it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 22.88it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 23.83it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 23.74it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 32.37it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 35.33it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 38.49it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 38.62it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 39.32it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 44.07it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 43.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 46.79it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 55.65it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.92it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 27.82it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 25.28it/s]Train:  40%|████      | 14/35 [00:00<00:00, 26.35it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 31.50it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 31.06it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 31.35it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 31.24it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.83it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 26.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.97it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 23.42it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.43it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.47it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 34.79it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 29.42it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.19it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 32.58it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 30.13it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 29.18it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 31.83it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  6.09it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00,  9.51it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 22.29it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 24.80it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.46it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 15.94it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 23.66it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 28.58it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 33.59it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 32.42it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 32.15it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 31.85it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.38it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 24.78it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.48it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.88it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 29.62it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 26.73it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.89it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.28it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 37.82it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.50it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.76it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 33.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.92it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 33.34it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.36it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 22.43it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 29.98it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 31.19it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 33.27it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.11it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 33.88it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.35it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 34.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 36.66it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 45.15it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 12.00it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.78it/s]Train:  40%|████      | 14/35 [00:00<00:00, 31.80it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 36.20it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 35.02it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.43it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 33.94it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.68it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 16.75it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.77it/s]Test:  40%|████      | 4/10 [00:00<00:00, 15.88it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.19it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.08it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:00, 38.56it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 27.99it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.36it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.82it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.94it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 36.76it/s]Train:  97%|█████████▋| 34/35 [00:00<00:00, 38.91it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  6.13it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 21.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.43it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 28.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 33.49it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.54it/s]Train:  11%|█▏        | 4/35 [00:00<00:02, 15.19it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 24.93it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.40it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 35.13it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.57it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 36.98it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 27.01it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 23.37it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 36.41it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 16.91it/s]Train:  14%|█▍        | 5/35 [00:00<00:01, 23.98it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 30.26it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 32.48it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 34.97it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 37.45it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 36.37it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 28.05it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 38.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 35.72it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 41.64it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 43.34it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 30.54it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 38.14it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 40.32it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 40.64it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.47it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 29.30it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 25.76it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.22it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 49.75it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 59.78it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 24.78it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 33.68it/s]Train:  40%|████      | 14/35 [00:00<00:00, 36.82it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 39.58it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 39.01it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 40.39it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 39.80it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 38.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 25.58it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 27.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 24.37it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 26.73it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 29.41it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.42it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 49.60it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 34.19it/s]Train:  40%|████      | 14/35 [00:00<00:00, 29.91it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 30.25it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 30.77it/s]Train:  80%|████████  | 28/35 [00:00<00:00, 34.95it/s]Train:  91%|█████████▏| 32/35 [00:00<00:00, 31.09it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 18.66it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 30.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00,  9.55it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 23.19it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.46it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:05,  5.73it/s]Train:   9%|▊         | 3/35 [00:00<00:03, 10.21it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 21.03it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 27.22it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 30.32it/s]Train:  74%|███████▍  | 26/35 [00:00<00:00, 33.68it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 29.71it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 29.67it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 27.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.68it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 18.74it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 16.88it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.15it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:06,  5.15it/s]Train:  20%|██        | 7/35 [00:00<00:01, 21.44it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 26.32it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 28.20it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.16it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 32.05it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 29.91it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 36.43it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 41.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 44.66it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.15it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.83it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.55it/s]Train:  11%|█▏        | 4/35 [00:00<00:02, 13.87it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 25.69it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 32.94it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 34.31it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 32.75it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 33.38it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 34.76it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 45.15it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 45.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 51.01it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 60.04it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.73it/s]Train:  20%|██        | 7/35 [00:00<00:00, 31.23it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 29.43it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 27.09it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 27.64it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 29.21it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 31.06it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 31.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 22.61it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 24.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 28.20it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 21.83it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.33it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 26.36it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:  14%|█▍        | 5/35 [00:00<00:00, 40.60it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.70it/s]Train:  40%|████      | 14/35 [00:00<00:00, 28.97it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 27.12it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 28.87it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 26.49it/s]Train:  83%|████████▎ | 29/35 [00:01<00:00, 27.29it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 32.45it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.57it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 36.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 37.77it/s]Test:  90%|█████████ | 9/10 [00:00<00:00, 42.19it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.15it/s]
Epoch 66: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6195, Val 0.6180, Test 0.6194
          RMSE             : Train 266.1247, Val 263.3767, Test 265.9681
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 67: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6198, Val 0.6180, Test 0.6193
          RMSE             : Train 266.0220, Val 263.3971, Test 266.0128
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 68: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6179, Test 0.6189
          RMSE             : Train 266.1664, Val 263.4292, Test 266.1402
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 69: Loss:            : Train 0.0189, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6194, Val 0.6160, Test 0.6178
          RMSE             : Train 266.1859, Val 264.0890, Test 266.5368
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 70: Loss:            : Train 0.0189, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6183, Test 0.6196
          RMSE             : Train 266.1114, Val 263.3000, Test 265.9263
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 71: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6166, Test 0.6183
          RMSE             : Train 266.0063, Val 263.8826, Test 266.3748
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 72: Loss:            : Train 0.0188, Val 0.0186, Test 0.0189
          R2_Score         : Train 0.6197, Val 0.6159, Test 0.6180
          RMSE             : Train 266.0684, Val 264.1242, Test 266.4825
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 73: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6173, Test 0.6189
          RMSE             : Train 266.1394, Val 263.6172, Test 266.1589
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 74: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6171, Test 0.6184
          RMSE             : Train 266.0055, Val 263.6957, Test 266.3417
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 75: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6194, Val 0.6177, Test 0.6194
          RMSE             : Train 266.1707, Val 263.4882, Test 265.9691
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 76: Loss:            : Train 0.0189, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6196, Val 0.6147, Test 0.6169
          RMSE             : Train 266.0847, Val 264.5347, Test 266.8650
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 77: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6193, Val 0.6181, Test 0.6196
          RMSE             : Train 266.2130, Val 263.3480, Test 265.9264
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 78: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6173, Test 0.6189
          RMSE             : Train 266.0199, Val 263.6351, Test 266.1603
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 79: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6192, Val 0.6179, Test 0.6193
          RMSE             : Train 266.2327, Val 263.4101, Test 266.0166
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 80: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6177, Test 0.6190
          RMSE             : Train 266.0300, Val 263.4897, Test 266.1053
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 81: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6200, Val 0.6174, Test 0.6187
          RMSE             : Train 265.9511, Val 263.6055, Test 266.2206
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 82: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6196, Val 0.6180, Test 0.6196
          RMSE             : Train 266.0918, Val 263.3996, Test 265.8973
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 83: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6177, Test 0.6190
          RMSE             : Train 265.8869, Val 263.4881, Test 266.1144
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 84: Loss:            : Train 0.0188, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6192, Val 0.6180, Test 0.6193
          RMSE             : Train 266.2392, Val 263.3738, Test 266.0108
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 85: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6195, Val 0.6181, Test 0.6193
          RMSE             : Train 266.1306, Val 263.3602, Test 266.0230
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 86: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6178, Test 0.6192
          RMSE             : Train 266.0152, Val 263.4471, Test 266.0652
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 87: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6200, Val 0.6175, Test 0.6191
          RMSE             : Train 265.9696, Val 263.5599, Test 266.0870
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 88: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6201, Val 0.6174, Test 0.6190
          RMSE             : Train 265.9311, Val 263.6022, Test 266.1110
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 89: Loss:            : Train 0.0189, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6168, Test 0.6185
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:01, 22.62it/s]Train:  23%|██▎       | 8/35 [00:00<00:00, 34.25it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 27.61it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 25.92it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 30.03it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 30.37it/s]Train:  89%|████████▊ | 31/35 [00:01<00:00, 31.72it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 32.41it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 27.76it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 33.94it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.55it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 18.32it/s]Train:  17%|█▋        | 6/35 [00:00<00:00, 30.45it/s]Train:  29%|██▊       | 10/35 [00:00<00:00, 30.80it/s]Train:  40%|████      | 14/35 [00:00<00:00, 29.95it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 20.74it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 25.79it/s]Train:  74%|███████▍  | 26/35 [00:01<00:00, 25.64it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 28.14it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  9.46it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 16.83it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 32.31it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 34.48it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:03,  9.15it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.13it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 26.99it/s]Train:  31%|███▏      | 11/35 [00:00<00:00, 25.86it/s]Train:  46%|████▌     | 16/35 [00:00<00:00, 28.19it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 33.68it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 31.88it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 31.72it/s]Train:  94%|█████████▍| 33/35 [00:01<00:00, 32.79it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.99it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 35.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 44.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.03it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 27.11it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 25.53it/s]Train:  40%|████      | 14/35 [00:00<00:00, 29.99it/s]Train:  54%|█████▍    | 19/35 [00:00<00:00, 35.60it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.27it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 35.48it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 35.43it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 24.97it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 31.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  40%|████      | 4/10 [00:00<00:00, 29.54it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.27it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 31.02it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.44it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 20.33it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 30.09it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 33.98it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 35.00it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 34.60it/s]Train:  89%|████████▊ | 31/35 [00:00<00:00, 32.08it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 33.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  5.93it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 22.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 11.77it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 26.03it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.88it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 15.81it/s]Train:  11%|█▏        | 4/35 [00:00<00:02, 14.93it/s]Train:  26%|██▌       | 9/35 [00:00<00:01, 22.78it/s]Train:  40%|████      | 14/35 [00:00<00:00, 29.79it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 29.87it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 31.22it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 30.01it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 30.96it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 30.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  80%|████████  | 4/5 [00:00<00:00, 29.31it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 32.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.11it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 18.73it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.23it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 17.19it/s]Train:  20%|██        | 7/35 [00:00<00:01, 26.20it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 32.19it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 35.37it/s]Train:  69%|██████▊   | 24/35 [00:00<00:00, 36.74it/s]Train:  86%|████████▌ | 30/35 [00:00<00:00, 37.00it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 37.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  20%|██        | 1/5 [00:00<00:00,  5.01it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 19.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00,  9.93it/s]Test:  80%|████████  | 8/10 [00:00<00:00, 27.48it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.34it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:01, 19.86it/s]Train:  11%|█▏        | 4/35 [00:00<00:01, 18.64it/s]Train:  26%|██▌       | 9/35 [00:00<00:00, 32.39it/s]Train:  37%|███▋      | 13/35 [00:00<00:00, 33.87it/s]Train:  49%|████▊     | 17/35 [00:00<00:00, 34.42it/s]Train:  63%|██████▎   | 22/35 [00:00<00:00, 35.75it/s]Train:  77%|███████▋  | 27/35 [00:00<00:00, 37.18it/s]Train:  94%|█████████▍| 33/35 [00:00<00:00, 38.32it/s]Train: 100%|██████████| 35/35 [00:00<00:00, 36.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.16it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.87it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 18.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  50%|█████     | 5/10 [00:00<00:00, 43.47it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 30.77it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 32.16it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   3%|▎         | 1/35 [00:00<00:04,  8.22it/s]Train:   6%|▌         | 2/35 [00:00<00:04,  7.34it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 21.27it/s]Train:  40%|████      | 14/35 [00:00<00:00, 26.96it/s]Train:  57%|█████▋    | 20/35 [00:00<00:00, 31.07it/s]Train:  71%|███████▏  | 25/35 [00:00<00:00, 32.78it/s]Train:  86%|████████▌ | 30/35 [00:01<00:00, 36.92it/s]Train:  97%|█████████▋| 34/35 [00:01<00:00, 33.16it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 29.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 19.48it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 23.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 27.16it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 22.10it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.93it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.44it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   6%|▌         | 2/35 [00:00<00:02, 14.33it/s]Train:  17%|█▋        | 6/35 [00:00<00:01, 21.37it/s]Train:  34%|███▍      | 12/35 [00:00<00:00, 29.87it/s]Train:  51%|█████▏    | 18/35 [00:00<00:00, 32.95it/s]Train:  66%|██████▌   | 23/35 [00:00<00:00, 33.23it/s]Train:  83%|████████▎ | 29/35 [00:00<00:00, 34.21it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 34.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  40%|████      | 2/5 [00:00<00:00, 19.89it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 29.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  20%|██        | 2/10 [00:00<00:00, 17.02it/s]Test:  70%|███████   | 7/10 [00:00<00:00, 26.34it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 27.00it/s]
Train:   0%|          | 0/35 [00:00<?, ?it/s]Train:   9%|▊         | 3/35 [00:00<00:02, 11.57it/s]Train:  23%|██▎       | 8/35 [00:00<00:01, 23.75it/s]Train:  31%|███▏      | 11/35 [00:00<00:01, 20.88it/s]Train:  43%|████▎     | 15/35 [00:00<00:00, 22.91it/s]Train:  60%|██████    | 21/35 [00:00<00:00, 28.09it/s]Train:  77%|███████▋  | 27/35 [00:01<00:00, 31.39it/s]Train:  91%|█████████▏| 32/35 [00:01<00:00, 31.64it/s]Train: 100%|██████████| 35/35 [00:01<00:00, 28.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/5 [00:00<?, ?it/s]Val:  60%|██████    | 3/5 [00:00<00:00, 26.36it/s]Val: 100%|██████████| 5/5 [00:00<00:00, 20.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/10 [00:00<?, ?it/s]Test:  30%|███       | 3/10 [00:00<00:00, 26.52it/s]Test:  60%|██████    | 6/10 [00:00<00:00, 21.56it/s]Test: 100%|██████████| 10/10 [00:00<00:00, 28.56it/s]

          RMSE             : Train 266.0185, Val 263.8128, Test 266.2905
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 90: Loss:            : Train 0.0190, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6198, Val 0.6175, Test 0.6193
          RMSE             : Train 266.0190, Val 263.5770, Test 266.0224
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 91: Loss:            : Train 0.0188, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6194, Val 0.6145, Test 0.6166
          RMSE             : Train 266.1693, Val 264.5904, Test 266.9598
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 92: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6194, Val 0.6177, Test 0.6194
          RMSE             : Train 266.1723, Val 263.5030, Test 265.9677
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 93: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6194, Val 0.6181, Test 0.6195
          RMSE             : Train 266.1599, Val 263.3467, Test 265.9500
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 94: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6201, Val 0.6178, Test 0.6193
          RMSE             : Train 265.9307, Val 263.4439, Test 266.0210
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 95: Loss:            : Train 0.0188, Val 0.0186, Test 0.0190
          R2_Score         : Train 0.6197, Val 0.6155, Test 0.6162
          RMSE             : Train 266.0599, Val 264.2479, Test 267.0868
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 96: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6178, Test 0.6191
          RMSE             : Train 265.9979, Val 263.4726, Test 266.0782
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 97: Loss:            : Train 0.0188, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6202, Val 0.6169, Test 0.6184
          RMSE             : Train 265.8915, Val 263.7726, Test 266.3324
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 98: Loss:            : Train 0.0189, Val 0.0185, Test 0.0188
          R2_Score         : Train 0.6198, Val 0.6181, Test 0.6195
          RMSE             : Train 266.0409, Val 263.3703, Test 265.9318
Best:
          R2_Score         : Train 0.6194, Val 0.6184, Test 0.6197
          RMSE             : Train 266.1759, Val 263.2605, Test 265.8895
Epoch 99: Loss:            : Train 0.0189, Val 0.0184, Test 0.0188
          R2_Score         : Train 0.6203, Val 0.6187, Test 0.6200
          RMSE             : Train 265.8648, Val 263.1555, Test 265.7762
Best:
          R2_Score         : Train 0.6203, Val 0.6187, Test 0.6200
          RMSE             : Train 265.8648, Val 263.1555, Test 265.7762
Epoch 100: Loss:            : Train 0.0187, Val 0.0185, Test 0.0189
          R2_Score         : Train 0.6199, Val 0.6173, Test 0.6189
          RMSE             : Train 265.9880, Val 263.6317, Test 266.1367
Best:
          R2_Score         : Train 0.6203, Val 0.6187, Test 0.6200
          RMSE             : Train 265.8648, Val 263.1555, Test 265.7762
