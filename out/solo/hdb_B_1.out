  0%|          | 0/64445 [00:00<?, ?it/s]  3%|▎         | 1732/64445 [00:00<00:03, 15767.99it/s]  6%|▌         | 3648/64445 [00:00<00:03, 17224.13it/s] 13%|█▎        | 8464/64445 [00:00<00:01, 30841.92it/s] 18%|█▊        | 11652/64445 [00:00<00:01, 31059.97it/s] 23%|██▎       | 14790/64445 [00:00<00:01, 28490.07it/s] 35%|███▍      | 22496/64445 [00:00<00:00, 43844.95it/s] 45%|████▍     | 28833/64445 [00:00<00:00, 49917.27it/s] 53%|█████▎    | 34425/64445 [00:00<00:00, 51762.83it/s] 64%|██████▍   | 41483/64445 [00:00<00:00, 57507.55it/s] 76%|███████▌  | 49039/64445 [00:01<00:00, 62988.05it/s] 87%|████████▋ | 56038/64445 [00:01<00:00, 65104.72it/s] 97%|█████████▋| 62596/64445 [00:01<00:00, 65088.20it/s]100%|██████████| 64445/64445 [00:01<00:00, 50606.98it/s]
  0%|          | 0/9207 [00:00<?, ?it/s] 26%|██▋       | 2420/9207 [00:00<00:00, 24189.07it/s] 61%|██████    | 5587/9207 [00:00<00:00, 27970.62it/s] 91%|█████████ | 8379/9207 [00:00<00:00, 27679.12it/s]100%|██████████| 9207/9207 [00:00<00:00, 27971.24it/s]
  0%|          | 0/18413 [00:00<?, ?it/s] 17%|█▋        | 3187/18413 [00:00<00:00, 31861.60it/s] 35%|███▌      | 6488/18413 [00:00<00:00, 32534.88it/s] 56%|█████▋    | 10386/18413 [00:00<00:00, 35469.18it/s] 88%|████████▊ | 16188/18413 [00:00<00:00, 44368.17it/s]100%|██████████| 18413/18413 [00:00<00:00, 42325.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 26.49it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 35.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 50.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.30it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 17.35it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 23.65it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.14it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.35it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  6.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 49.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 48.98it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.21it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 19.31it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.87it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.68it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  8.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.11it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.58it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.32it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.80it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.35it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.11it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.81it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.60it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 12.26it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.97it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.89it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 17.42it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.82it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.57it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 28.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.31it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  6.61it/s]Test: 100%|██████████| 5/5 [00:00<00:00,  9.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 25.43it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.22it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.37it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 27.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.90it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.57it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.42it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 16.61it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.78it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.45it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.09it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.78it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.11it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.54it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.77it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.64it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.41it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.81it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.97it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.01it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.81it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.59it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 86.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.99it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.61it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.28it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.58it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 28.60it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.16it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  3.90it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.45it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.40it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.65it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.14it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.44it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.91it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.74it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.78it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.08it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.77it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.30it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.28it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 15.78it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 34.78it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.61it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.27it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.54it/s]Loading house from data/hdb/hdb_clean.csv
Loading airbnb from data/hdb/school_clean.csv
Current hdb columns Index(['floor_area_sqm', 'lease_commence_year_before_2020', 'tn_BEDOK',
       'tn_BISHAN', 'tn_BUKIT BATOK', 'tn_BUKIT MERAH', 'tn_BUKIT PANJANG',
       'tn_BUKIT TIMAH', 'tn_CENTRAL AREA', 'tn_CHOA CHU KANG', 'tn_CLEMENTI',
       'tn_GEYLANG', 'tn_HOUGANG', 'tn_JURONG EAST', 'tn_JURONG WEST',
       'tn_KALLANG/WHAMPOA', 'tn_MARINE PARADE', 'tn_PASIR RIS', 'tn_PUNGGOL',
       'tn_QUEENSTOWN', 'tn_SEMBAWANG', 'tn_SENGKANG', 'tn_SERANGOON',
       'tn_TAMPINES', 'tn_TOA PAYOH', 'tn_WOODLANDS', 'tn_YISHUN', 'ft_2 ROOM',
       'ft_3 ROOM', 'ft_4 ROOM', 'ft_5 ROOM', 'ft_EXECUTIVE',
       'ft_MULTI-GENERATION', 'sr_04 TO 06', 'sr_07 TO 09', 'sr_10 TO 12',
       'sr_13 TO 15', 'sr_16 TO 18', 'sr_19 TO 21', 'sr_22 TO 24',
       'sr_25 TO 27', 'sr_28 TO 30', 'sr_31 TO 33', 'sr_34 TO 36',
       'sr_37 TO 39', 'sr_40 TO 42', 'sr_43 TO 45', 'sr_46 TO 48',
       'sr_49 TO 51', 'fm_Adjoined flat', 'fm_Apartment', 'fm_DBSS',
       'fm_Improved', 'fm_Improved-Maisonette', 'fm_Maisonette', 'fm_Model A',
       'fm_Model A-Maisonette', 'fm_Model A2', 'fm_Multi Generation',
       'fm_New Generation', 'fm_Premium Apartment',
       'fm_Premium Apartment Loft', 'fm_Premium Maisonette', 'fm_Simplified',
       'fm_Standard', 'fm_Terrace', 'fm_Type S1', 'fm_Type S2', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'n_places_0', 'vacancy_rate_0', 'n_places_1',
       'vacancy_rate_1', 'n_places_2', 'vacancy_rate_2', 'n_places_3',
       'vacancy_rate_3'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 8 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [8, 400]  [4096, 400]    3600       3200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           84001
Trainable params       84001
Non-trainable params       0
Mult-Adds              83400
=================================================================
n_classes=2
task=regression
model_name=hdb_B_2022-05-21-21-23-50
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:2
test_batch_size=4096
train_batch_size=4096
learning_rate=0.01
weight_decay=1e-05
num_epochs=200
model_save_path=ckp/hdb_B_2022-05-21-21-23-50.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7fcf9bc70490>, <metric.rmse.RMSE object at 0x7fcf9bc704f0>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=8, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7fcf9bc70400>
Epoch 1: Loss:            : Train 0.0402, Val 0.0319, Test 0.0314
          R2_Score         : Train -1.0742, Val -0.5229, Test -0.5505
          RMSE             : Train 222.6819, Val 191.3550, Test 193.7848
Best:
          R2_Score         : Train -1.0742, Val -0.5229, Test -0.5505
          RMSE             : Train 222.6819, Val 191.3550, Test 193.7848
Epoch 2: Loss:            : Train 0.0233, Val 0.0204, Test 0.0203
          R2_Score         : Train -0.1962, Val -0.0239, Test -0.0244
          RMSE             : Train 169.1042, Val 156.9016, Test 157.5115
Best:
          R2_Score         : Train -0.1962, Val -0.0239, Test -0.0244
          RMSE             : Train 169.1042, Val 156.9016, Test 157.5115
Epoch 3: Loss:            : Train 0.0193, Val 0.0201, Test 0.0195
          R2_Score         : Train 0.0072, Val 0.0162, Test 0.0232
          RMSE             : Train 154.0625, Val 153.8044, Test 153.8087
Best:
          R2_Score         : Train 0.0072, Val 0.0162, Test 0.0232
          RMSE             : Train 154.0625, Val 153.8044, Test 153.8087
Epoch 4: Loss:            : Train 0.0186, Val 0.0192, Test 0.0187
          R2_Score         : Train 0.0441, Val 0.0537, Test 0.0619
          RMSE             : Train 151.1657, Val 150.8381, Test 150.7313
Best:
          R2_Score         : Train 0.0441, Val 0.0537, Test 0.0619
          RMSE             : Train 151.1657, Val 150.8381, Test 150.7313
Epoch 5: Loss:            : Train 0.0180, Val 0.0188, Test 0.0183
          R2_Score         : Train 0.0753, Val 0.0672, Test 0.0824
          RMSE             : Train 148.6856, Val 149.7639, Test 149.0769
Best:
          R2_Score         : Train 0.0753, Val 0.0672, Test 0.0824
          RMSE             : Train 148.6856, Val 149.7639, Test 149.0769
Epoch 6: Loss:            : Train 0.0177, Val 0.0184, Test 0.0179
          R2_Score         : Train 0.0911, Val 0.0886, Test 0.1011
          RMSE             : Train 147.4056, Val 148.0310, Test 147.5538
Best:
          R2_Score         : Train 0.0911, Val 0.0886, Test 0.1011
          RMSE             : Train 147.4056, Val 148.0310, Test 147.5538
Epoch 7: Loss:            : Train 0.0173, Val 0.0183, Test 0.0180
          R2_Score         : Train 0.1131, Val 0.0975, Test 0.1002
          RMSE             : Train 145.6103, Val 147.3058, Test 147.6244
Best:
          R2_Score         : Train 0.1131, Val 0.0975, Test 0.1002
          RMSE             : Train 145.6103, Val 147.3058, Test 147.6244
Epoch 8: Loss:            : Train 0.0172, Val 0.0178, Test 0.0174
          R2_Score         : Train 0.1170, Val 0.1213, Test 0.1270
          RMSE             : Train 145.2941, Val 145.3571, Test 145.4080
Best:
          R2_Score         : Train 0.1170, Val 0.1213, Test 0.1270
          RMSE             : Train 145.2941, Val 145.3571, Test 145.4080
Epoch 9: Loss:            : Train 0.0172, Val 0.0177, Test 0.0174
          R2_Score         : Train 0.1170, Val 0.1214, Test 0.1295
          RMSE             : Train 145.2878, Val 145.3447, Test 145.1982
Best:
          R2_Score         : Train 0.1170, Val 0.1214, Test 0.1295
          RMSE             : Train 145.2878, Val 145.3447, Test 145.1982
Epoch 10: Loss:            : Train 0.0169, Val 0.0181, Test 0.0176
          R2_Score         : Train 0.1339, Val 0.1077, Test 0.1189
          RMSE             : Train 143.8931, Val 146.4722, Test 146.0817
Best:
          R2_Score         : Train 0.1170, Val 0.1214, Test 0.1295
          RMSE             : Train 145.2878, Val 145.3447, Test 145.1982
Epoch 11: Loss:            : Train 0.0169, Val 0.0179, Test 0.0173
          R2_Score         : Train 0.1333, Val 0.1231, Test 0.1347
          RMSE             : Train 143.9418, Val 145.2044, Test 144.7683
Best:
          R2_Score         : Train 0.1333, Val 0.1231, Test 0.1347
          RMSE             : Train 143.9418, Val 145.2044, Test 144.7683
Epoch 12: Loss:            : Train 0.0167, Val 0.0173, Test 0.0170
          R2_Score         : Train 0.1439, Val 0.1344, Test 0.1455
          RMSE             : Train 143.0573, Val 144.2688, Test 143.8601
Best:
          R2_Score         : Train 0.1439, Val 0.1344, Test 0.1455
          RMSE             : Train 143.0573, Val 144.2688, Test 143.8601
Epoch 13: Loss:            : Train 0.0164, Val 0.0174, Test 0.0170
          R2_Score         : Train 0.1591, Val 0.1329, Test 0.1434
          RMSE             : Train 141.7889, Val 144.3917, Test 144.0382
Best:
          R2_Score         : Train 0.1439, Val 0.1344, Test 0.1455
          RMSE             : Train 143.0573, Val 144.2688, Test 143.8601
Epoch 14: Loss:            : Train 0.0163, Val 0.0169, Test 0.0166
          R2_Score         : Train 0.1633, Val 0.1578, Test 0.1657
          RMSE             : Train 141.4326, Val 142.3009, Test 142.1510
Best:
          R2_Score         : Train 0.1633, Val 0.1578, Test 0.1657
          RMSE             : Train 141.4326, Val 142.3009, Test 142.1510
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.28it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.31it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.89it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.24it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.18it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.51it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.02it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.10it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  7.83it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.00it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 16.63it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.16it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.70it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 13.71it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.33it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.15it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.00it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.16it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.83it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 31.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.31it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.86it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.13it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 18.43it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.22it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.22it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.51it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 11.68it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.45it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.84it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.87it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.19it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 32.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.07it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.31it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.48it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.32it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.51it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 100.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.20it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 36.74it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 10.98it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 11.82it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.23it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.17it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.97it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.85it/s]Train:  38%|███▊      | 6/16 [00:00<00:01,  9.14it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 12.91it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 12.73it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.02it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 33.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 39.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.71it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.74it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.84it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.36it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.42it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.41it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.25it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.24it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 12.67it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.96it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.60it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.84it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.96it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.51it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.80it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.65it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.59it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 11.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.94it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.64it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.62it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.46it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 91.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.12it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.96it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.31it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.03it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.81it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.18it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.99it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.26it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 27.88it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 25.06it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.10it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.33it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.65it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.36it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.53it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.32it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.10it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  7.27it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:04,  3.37it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.63it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 14.85it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.90it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 33.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.13it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  3.99it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.67it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.86it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 10.25it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 13.82it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 14.33it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.45it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 17.28it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  5.65it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  7.99it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 11.20it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.72it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 14.21it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.78it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.88it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.05it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.58it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.76it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 62.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.92it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 22.85it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 20.54it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 19.32it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.28it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.18it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.13it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.93it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.36it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.52it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.77it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 10.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.14it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.00it/s]Train:  31%|███▏      | 5/16 [00:00<00:01, 10.19it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.91it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.00it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.34it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 20.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.91it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 28.08it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.78it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.60it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.05it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.77it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  9.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.36it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.13it/s]
Epoch 15: Loss:            : Train 0.0163, Val 0.0172, Test 0.0170
          R2_Score         : Train 0.1630, Val 0.1407, Test 0.1476
          RMSE             : Train 141.4571, Val 143.7397, Test 143.6822
Best:
          R2_Score         : Train 0.1633, Val 0.1578, Test 0.1657
          RMSE             : Train 141.4326, Val 142.3009, Test 142.1510
Epoch 16: Loss:            : Train 0.0162, Val 0.0172, Test 0.0170
          R2_Score         : Train 0.1650, Val 0.1429, Test 0.1452
          RMSE             : Train 141.2885, Val 143.5587, Test 143.8842
Best:
          R2_Score         : Train 0.1633, Val 0.1578, Test 0.1657
          RMSE             : Train 141.4326, Val 142.3009, Test 142.1510
Epoch 17: Loss:            : Train 0.0162, Val 0.0167, Test 0.0164
          R2_Score         : Train 0.1676, Val 0.1672, Test 0.1743
          RMSE             : Train 141.0634, Val 141.5063, Test 141.4110
Best:
          R2_Score         : Train 0.1676, Val 0.1672, Test 0.1743
          RMSE             : Train 141.0634, Val 141.5063, Test 141.4110
Epoch 18: Loss:            : Train 0.0162, Val 0.0166, Test 0.0164
          R2_Score         : Train 0.1704, Val 0.1771, Test 0.1799
          RMSE             : Train 140.8326, Val 140.6630, Test 140.9346
Best:
          R2_Score         : Train 0.1704, Val 0.1771, Test 0.1799
          RMSE             : Train 140.8326, Val 140.6630, Test 140.9346
Epoch 19: Loss:            : Train 0.0160, Val 0.0165, Test 0.0163
          R2_Score         : Train 0.1761, Val 0.1775, Test 0.1816
          RMSE             : Train 140.3476, Val 140.6325, Test 140.7850
Best:
          R2_Score         : Train 0.1761, Val 0.1775, Test 0.1816
          RMSE             : Train 140.3476, Val 140.6325, Test 140.7850
Epoch 20: Loss:            : Train 0.0161, Val 0.0169, Test 0.0167
          R2_Score         : Train 0.1746, Val 0.1688, Test 0.1677
          RMSE             : Train 140.4725, Val 141.3728, Test 141.9824
Best:
          R2_Score         : Train 0.1761, Val 0.1775, Test 0.1816
          RMSE             : Train 140.3476, Val 140.6325, Test 140.7850
Epoch 21: Loss:            : Train 0.0159, Val 0.0166, Test 0.0163
          R2_Score         : Train 0.1847, Val 0.1765, Test 0.1864
          RMSE             : Train 139.6083, Val 140.7118, Test 140.3788
Best:
          R2_Score         : Train 0.1761, Val 0.1775, Test 0.1816
          RMSE             : Train 140.3476, Val 140.6325, Test 140.7850
Epoch 22: Loss:            : Train 0.0156, Val 0.0166, Test 0.0162
          R2_Score         : Train 0.1965, Val 0.1874, Test 0.1929
          RMSE             : Train 138.5966, Val 139.7832, Test 139.8122
Best:
          R2_Score         : Train 0.1965, Val 0.1874, Test 0.1929
          RMSE             : Train 138.5966, Val 139.7832, Test 139.8122
Epoch 23: Loss:            : Train 0.0157, Val 0.0165, Test 0.0160
          R2_Score         : Train 0.1948, Val 0.1906, Test 0.1997
          RMSE             : Train 138.7429, Val 139.5066, Test 139.2244
Best:
          R2_Score         : Train 0.1948, Val 0.1906, Test 0.1997
          RMSE             : Train 138.7429, Val 139.5066, Test 139.2244
Epoch 24: Loss:            : Train 0.0158, Val 0.0162, Test 0.0159
          R2_Score         : Train 0.1901, Val 0.2016, Test 0.2060
          RMSE             : Train 139.1428, Val 138.5548, Test 138.6741
Best:
          R2_Score         : Train 0.1901, Val 0.2016, Test 0.2060
          RMSE             : Train 139.1428, Val 138.5548, Test 138.6741
Epoch 25: Loss:            : Train 0.0157, Val 0.0162, Test 0.0161
          R2_Score         : Train 0.1931, Val 0.1942, Test 0.1915
          RMSE             : Train 138.8927, Val 139.1958, Test 139.9359
Best:
          R2_Score         : Train 0.1901, Val 0.2016, Test 0.2060
          RMSE             : Train 139.1428, Val 138.5548, Test 138.6741
Epoch 26: Loss:            : Train 0.0156, Val 0.0163, Test 0.0159
          R2_Score         : Train 0.2003, Val 0.1987, Test 0.2061
          RMSE             : Train 138.2689, Val 138.8090, Test 138.6666
Best:
          R2_Score         : Train 0.1901, Val 0.2016, Test 0.2060
          RMSE             : Train 139.1428, Val 138.5548, Test 138.6741
Epoch 27: Loss:            : Train 0.0156, Val 0.0160, Test 0.0158
          R2_Score         : Train 0.1988, Val 0.2048, Test 0.2087
          RMSE             : Train 138.4010, Val 138.2793, Test 138.4335
Best:
          R2_Score         : Train 0.1988, Val 0.2048, Test 0.2087
          RMSE             : Train 138.4010, Val 138.2793, Test 138.4335
Epoch 28: Loss:            : Train 0.0154, Val 0.0164, Test 0.0160
          R2_Score         : Train 0.2098, Val 0.1926, Test 0.1985
          RMSE             : Train 137.4474, Val 139.3344, Test 139.3280
Best:
          R2_Score         : Train 0.1988, Val 0.2048, Test 0.2087
          RMSE             : Train 138.4010, Val 138.2793, Test 138.4335
Epoch 29: Loss:            : Train 0.0155, Val 0.0172, Test 0.0165
          R2_Score         : Train 0.2048, Val 0.1762, Test 0.1800
          RMSE             : Train 137.8751, Val 140.7434, Test 140.9269
Best:
          R2_Score         : Train 0.1988, Val 0.2048, Test 0.2087
          RMSE             : Train 138.4010, Val 138.2793, Test 138.4335
Epoch 30: Loss:            : Train 0.0155, Val 0.0172, Test 0.0167
          R2_Score         : Train 0.2039, Val 0.1708, Test 0.1737
          RMSE             : Train 137.9528, Val 141.2045, Test 141.4637
Best:
          R2_Score         : Train 0.1988, Val 0.2048, Test 0.2087
          RMSE             : Train 138.4010, Val 138.2793, Test 138.4335
Epoch 31: Loss:            : Train 0.0153, Val 0.0161, Test 0.0158
          R2_Score         : Train 0.2114, Val 0.2080, Test 0.2085
          RMSE             : Train 137.3072, Val 137.9930, Test 138.4571
Best:
          R2_Score         : Train 0.2114, Val 0.2080, Test 0.2085
          RMSE             : Train 137.3072, Val 137.9930, Test 138.4571
Epoch 32: Loss:            : Train 0.0154, Val 0.0160, Test 0.0157
          R2_Score         : Train 0.2112, Val 0.2064, Test 0.2112
          RMSE             : Train 137.3237, Val 138.1382, Test 138.2223
Best:
          R2_Score         : Train 0.2114, Val 0.2080, Test 0.2085
          RMSE             : Train 137.3072, Val 137.9930, Test 138.4571
Epoch 33: Loss:            : Train 0.0153, Val 0.0160, Test 0.0157
          R2_Score         : Train 0.2121, Val 0.2139, Test 0.2150
          RMSE             : Train 137.2480, Val 137.4840, Test 137.8841
Best:
          R2_Score         : Train 0.2121, Val 0.2139, Test 0.2150
          RMSE             : Train 137.2480, Val 137.4840, Test 137.8841
Epoch 34: Loss:            : Train 0.0153, Val 0.0161, Test 0.0158
          R2_Score         : Train 0.2120, Val 0.2014, Test 0.2067
          RMSE             : Train 137.2524, Val 138.5714, Test 138.6121
Best:
          R2_Score         : Train 0.2121, Val 0.2139, Test 0.2150
          RMSE             : Train 137.2480, Val 137.4840, Test 137.8841
Epoch 35: Loss:            : Train 0.0152, Val 0.0159, Test 0.0156
          R2_Score         : Train 0.2185, Val 0.2147, Test 0.2186
          RMSE             : Train 136.6881, Val 137.4118, Test 137.5708
Best:
          R2_Score         : Train 0.2185, Val 0.2147, Test 0.2186
          RMSE             : Train 136.6881, Val 137.4118, Test 137.5708
Epoch 36: Loss:            : Train 0.0152, Val 0.0159, Test 0.0157
          R2_Score         : Train 0.2202, Val 0.2152, Test 0.2131
          RMSE             : Train 136.5396, Val 137.3701, Test 138.0501
Best:
          R2_Score         : Train 0.2202, Val 0.2152, Test 0.2131
          RMSE             : Train 136.5396, Val 137.3701, Test 138.0501
Epoch 37: Loss:            : Train 0.0151, Val 0.0160, Test 0.0157
          R2_Score         : Train 0.2249, Val 0.2078, Test 0.2122
          RMSE             : Train 136.1215, Val 138.0144, Test 138.1333
Best:
          R2_Score         : Train 0.2202, Val 0.2152, Test 0.2131
          RMSE             : Train 136.5396, Val 137.3701, Test 138.0501
Epoch 38: Loss:            : Train 0.0151, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2238, Val 0.2229, Test 0.2278
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.09it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.39it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.81it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.21it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.38it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.93it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.08it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.29it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.56it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.62it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.41it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 37.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.03it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.87it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.97it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.00it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.54it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 37.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.27it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.35it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.73it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.36it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.80it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.66it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 14.89it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 11.78it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 21.20it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 27.68it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.26it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 15.28it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 42.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 10.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 37.57it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 33.27it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 29.31it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 24.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 29.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.94it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 25.18it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 30.68it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.41it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.10it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.29it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.08it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.23it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.87it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.98it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.86it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.72it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.58it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.17it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.55it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.38it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.39it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 65.84it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.15it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 22.08it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.80it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.98it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 13.74it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.74it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.88it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.64it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 29.99it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.28it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.19it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.83it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.75it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.48it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.41it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.84it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.98it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.38it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.40it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.29it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 15.95it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 15.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 105.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 34.25it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 39.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 32.59it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.34it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.13it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  8.84it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.56it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.66it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.68it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.87it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.15it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.00it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 36.08it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.31it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.34it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.60it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 24.86it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.77it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:06,  2.24it/s]Train:  12%|█▎        | 2/16 [00:00<00:03,  4.04it/s]Train:  31%|███▏      | 5/16 [00:00<00:01, 10.12it/s]Train:  44%|████▍     | 7/16 [00:00<00:00,  9.82it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.18it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 16.82it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 12.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.29it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  3.47it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 11.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.78it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.11it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.14it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.84it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 14.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 59.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.98it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.88it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.17it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 10.10it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.06it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 13.47it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.78it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.84it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.17it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 29.86it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 27.20it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 16.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.02it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.94it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.45it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.59it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.10it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.61it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 96.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.29it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.91it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.16it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.26it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.50it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 29.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 34.07it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.98it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 23.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.76it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 31.77it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.97it/s]
          RMSE             : Train 136.2183, Val 136.6895, Test 136.7539
Best:
          R2_Score         : Train 0.2238, Val 0.2229, Test 0.2278
          RMSE             : Train 136.2183, Val 136.6895, Test 136.7539
Epoch 39: Loss:            : Train 0.0151, Val 0.0162, Test 0.0158
          R2_Score         : Train 0.2262, Val 0.2132, Test 0.2125
          RMSE             : Train 136.0089, Val 137.5389, Test 138.1080
Best:
          R2_Score         : Train 0.2238, Val 0.2229, Test 0.2278
          RMSE             : Train 136.2183, Val 136.6895, Test 136.7539
Epoch 40: Loss:            : Train 0.0153, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2152, Val 0.2232, Test 0.2253
          RMSE             : Train 136.9697, Val 136.6686, Test 136.9790
Best:
          R2_Score         : Train 0.2152, Val 0.2232, Test 0.2253
          RMSE             : Train 136.9697, Val 136.6686, Test 136.9790
Epoch 41: Loss:            : Train 0.0152, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2171, Val 0.2240, Test 0.2303
          RMSE             : Train 136.8066, Val 136.5964, Test 136.5392
Best:
          R2_Score         : Train 0.2171, Val 0.2240, Test 0.2303
          RMSE             : Train 136.8066, Val 136.5964, Test 136.5392
Epoch 42: Loss:            : Train 0.0151, Val 0.0162, Test 0.0161
          R2_Score         : Train 0.2222, Val 0.1870, Test 0.1864
          RMSE             : Train 136.3638, Val 139.8118, Test 140.3747
Best:
          R2_Score         : Train 0.2171, Val 0.2240, Test 0.2303
          RMSE             : Train 136.8066, Val 136.5964, Test 136.5392
Epoch 43: Loss:            : Train 0.0152, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2225, Val 0.2278, Test 0.2300
          RMSE             : Train 136.3396, Val 136.2569, Test 136.5577
Best:
          R2_Score         : Train 0.2225, Val 0.2278, Test 0.2300
          RMSE             : Train 136.3396, Val 136.2569, Test 136.5577
Epoch 44: Loss:            : Train 0.0150, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2287, Val 0.2223, Test 0.2269
          RMSE             : Train 135.7946, Val 136.7461, Test 136.8328
Best:
          R2_Score         : Train 0.2225, Val 0.2278, Test 0.2300
          RMSE             : Train 136.3396, Val 136.2569, Test 136.5577
Epoch 45: Loss:            : Train 0.0150, Val 0.0161, Test 0.0156
          R2_Score         : Train 0.2319, Val 0.2193, Test 0.2232
          RMSE             : Train 135.5085, Val 137.0061, Test 137.1660
Best:
          R2_Score         : Train 0.2225, Val 0.2278, Test 0.2300
          RMSE             : Train 136.3396, Val 136.2569, Test 136.5577
Epoch 46: Loss:            : Train 0.0150, Val 0.0156, Test 0.0155
          R2_Score         : Train 0.2301, Val 0.2222, Test 0.2216
          RMSE             : Train 135.6687, Val 136.7529, Test 137.3003
Best:
          R2_Score         : Train 0.2225, Val 0.2278, Test 0.2300
          RMSE             : Train 136.3396, Val 136.2569, Test 136.5577
Epoch 47: Loss:            : Train 0.0150, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2308, Val 0.2314, Test 0.2307
          RMSE             : Train 135.6097, Val 135.9427, Test 136.4956
Best:
          R2_Score         : Train 0.2308, Val 0.2314, Test 0.2307
          RMSE             : Train 135.6097, Val 135.9427, Test 136.4956
Epoch 48: Loss:            : Train 0.0150, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2277, Val 0.2288, Test 0.2328
          RMSE             : Train 135.8814, Val 136.1702, Test 136.3168
Best:
          R2_Score         : Train 0.2308, Val 0.2314, Test 0.2307
          RMSE             : Train 135.6097, Val 135.9427, Test 136.4956
Epoch 49: Loss:            : Train 0.0150, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2326, Val 0.2242, Test 0.2267
          RMSE             : Train 135.4448, Val 136.5770, Test 136.8505
Best:
          R2_Score         : Train 0.2308, Val 0.2314, Test 0.2307
          RMSE             : Train 135.6097, Val 135.9427, Test 136.4956
Epoch 50: Loss:            : Train 0.0151, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2250, Val 0.2270, Test 0.2238
          RMSE             : Train 136.1201, Val 136.3334, Test 137.1089
Best:
          R2_Score         : Train 0.2308, Val 0.2314, Test 0.2307
          RMSE             : Train 135.6097, Val 135.9427, Test 136.4956
Epoch 51: Loss:            : Train 0.0150, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 52: Loss:            : Train 0.0150, Val 0.0156, Test 0.0154
          R2_Score         : Train 0.2297, Val 0.2284, Test 0.2282
          RMSE             : Train 135.7019, Val 136.2073, Test 136.7185
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 53: Loss:            : Train 0.0150, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2317, Val 0.2312, Test 0.2356
          RMSE             : Train 135.5282, Val 135.9639, Test 136.0651
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 54: Loss:            : Train 0.0149, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2346, Val 0.2249, Test 0.2262
          RMSE             : Train 135.2662, Val 136.5156, Test 136.9006
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 55: Loss:            : Train 0.0149, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2328, Val 0.2267, Test 0.2339
          RMSE             : Train 135.4304, Val 136.3570, Test 136.2157
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 56: Loss:            : Train 0.0150, Val 0.0160, Test 0.0154
          R2_Score         : Train 0.2319, Val 0.2179, Test 0.2301
          RMSE             : Train 135.5107, Val 137.1279, Test 136.5566
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 57: Loss:            : Train 0.0149, Val 0.0160, Test 0.0156
          R2_Score         : Train 0.2356, Val 0.2260, Test 0.2211
          RMSE             : Train 135.1811, Val 136.4209, Test 137.3521
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 58: Loss:            : Train 0.0149, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2336, Val 0.2290, Test 0.2315
          RMSE             : Train 135.3587, Val 136.1508, Test 136.4322
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 59: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2340, Val 0.2316, Test 0.2356
          RMSE             : Train 135.3249, Val 135.9237, Test 136.0680
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 60: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2397, Val 0.2292, Test 0.2345
          RMSE             : Train 134.8169, Val 136.1402, Test 136.1580
Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 61: Loss:            : Train 0.0149, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2335, Val 0.2317, Test 0.2300
          RMSE             : Train 135.3677, Val 135.9126, Test 136.5612

Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.59it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 24.27it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.59it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.11it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.29it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.70it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.31it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.71it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.16it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 23.94it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.33it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 30.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.59it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.74it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.55it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.12it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.27it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 13.64it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.40it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.28it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.28it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.36it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.32it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.28it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 14.99it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.39it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.67it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.41it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.74it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.70it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.12it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 14.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.43it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 25.73it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.46it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 12.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 15.89it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 20.22it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.61it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 11.38it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.58it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.17it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.00it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 25.41it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.24it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.21it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 45.92it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 45.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.84it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.78it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.36it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.41it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.50it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 39.24it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 40.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.36it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.83it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.65it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.80it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.12it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.35it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.24it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 29.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.12it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.18it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.38it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.38it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 31.72it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 28.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 11.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.26it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.90it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.36it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.02it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.23it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.37it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.74it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.37it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.28it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.39it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.20it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.31it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.81it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.22it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.94it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.77it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 36.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.91it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.96it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.39it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.74it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.25it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 48.52it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 48.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.45it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.22it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 11.50it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 74.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 29.93it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.11it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.68it/s]Train:  12%|█▎        | 2/16 [00:00<00:03,  4.37it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 15.60it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 13.46it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.83it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  5.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  9.23it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.90it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.03it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 15.60it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 16.06it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 40.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.23it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 11.42it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.18it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.61it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.03it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.43it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.33it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.62it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.94it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.32it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 15.48it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.09it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 15.95it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.72it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 37.51it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.98it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.74it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.43it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.41it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.63it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  2.99it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  7.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 39.84it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.35it/s]Best:
          R2_Score         : Train 0.2275, Val 0.2356, Test 0.2399
          RMSE             : Train 135.8965, Val 135.5682, Test 135.6828
Epoch 62: Loss:            : Train 0.0149, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2345, Val 0.2364, Test 0.2369
          RMSE             : Train 135.2816, Val 135.5014, Test 135.9487
Best:
          R2_Score         : Train 0.2345, Val 0.2364, Test 0.2369
          RMSE             : Train 135.2816, Val 135.5014, Test 135.9487
Epoch 63: Loss:            : Train 0.0149, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2350, Val 0.2326, Test 0.2385
          RMSE             : Train 135.2325, Val 135.8370, Test 135.8055
Best:
          R2_Score         : Train 0.2345, Val 0.2364, Test 0.2369
          RMSE             : Train 135.2816, Val 135.5014, Test 135.9487
Epoch 64: Loss:            : Train 0.0149, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2362, Val 0.2396, Test 0.2354
          RMSE             : Train 135.1287, Val 135.2134, Test 136.0803
Best:
          R2_Score         : Train 0.2362, Val 0.2396, Test 0.2354
          RMSE             : Train 135.1287, Val 135.2134, Test 136.0803
Epoch 65: Loss:            : Train 0.0149, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2360, Val 0.2329, Test 0.2377
          RMSE             : Train 135.1487, Val 135.8111, Test 135.8805
Best:
          R2_Score         : Train 0.2362, Val 0.2396, Test 0.2354
          RMSE             : Train 135.1287, Val 135.2134, Test 136.0803
Epoch 66: Loss:            : Train 0.0149, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2330, Val 0.2174, Test 0.2253
          RMSE             : Train 135.4146, Val 137.1739, Test 136.9748
Best:
          R2_Score         : Train 0.2362, Val 0.2396, Test 0.2354
          RMSE             : Train 135.1287, Val 135.2134, Test 136.0803
Epoch 67: Loss:            : Train 0.0150, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2324, Val 0.2266, Test 0.2271
          RMSE             : Train 135.4673, Val 136.3643, Test 136.8145
Best:
          R2_Score         : Train 0.2362, Val 0.2396, Test 0.2354
          RMSE             : Train 135.1287, Val 135.2134, Test 136.0803
Epoch 68: Loss:            : Train 0.0150, Val 0.0154, Test 0.0153
          R2_Score         : Train 0.2312, Val 0.2350, Test 0.2312
          RMSE             : Train 135.5721, Val 135.6260, Test 136.4508
Best:
          R2_Score         : Train 0.2362, Val 0.2396, Test 0.2354
          RMSE             : Train 135.1287, Val 135.2134, Test 136.0803
Epoch 69: Loss:            : Train 0.0149, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2349, Val 0.2320, Test 0.2337
          RMSE             : Train 135.2443, Val 135.8917, Test 136.2298
Best:
          R2_Score         : Train 0.2362, Val 0.2396, Test 0.2354
          RMSE             : Train 135.1287, Val 135.2134, Test 136.0803
Epoch 70: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2387, Val 0.2340, Test 0.2395
          RMSE             : Train 134.9034, Val 135.7127, Test 135.7158
Best:
          R2_Score         : Train 0.2362, Val 0.2396, Test 0.2354
          RMSE             : Train 135.1287, Val 135.2134, Test 136.0803
Epoch 71: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 72: Loss:            : Train 0.0149, Val 0.0160, Test 0.0154
          R2_Score         : Train 0.2360, Val 0.2220, Test 0.2307
          RMSE             : Train 135.1487, Val 136.7708, Test 136.5017
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 73: Loss:            : Train 0.0149, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2332, Val 0.2371, Test 0.2334
          RMSE             : Train 135.3969, Val 135.4366, Test 136.2556
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 74: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2349, Val 0.2265, Test 0.2333
          RMSE             : Train 135.2440, Val 136.3728, Test 136.2689
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 75: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2344, Val 0.2272, Test 0.2325
          RMSE             : Train 135.2839, Val 136.3121, Test 136.3412
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 76: Loss:            : Train 0.0149, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2369, Val 0.2352, Test 0.2410
          RMSE             : Train 135.0673, Val 135.6031, Test 135.5839
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 77: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2362, Val 0.2337, Test 0.2345
          RMSE             : Train 135.1297, Val 135.7418, Test 136.1633
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 78: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2371, Val 0.2266, Test 0.2347
          RMSE             : Train 135.0470, Val 136.3678, Test 136.1415
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 79: Loss:            : Train 0.0150, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2331, Val 0.2345, Test 0.2320
          RMSE             : Train 135.4040, Val 135.6686, Test 136.3867
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 80: Loss:            : Train 0.0149, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2352, Val 0.2362, Test 0.2375
          RMSE             : Train 135.2133, Val 135.5166, Test 135.8951
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 81: Loss:            : Train 0.0149, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2349, Val 0.2372, Test 0.2322
          RMSE             : Train 135.2469, Val 135.4249, Test 136.3647
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 82: Loss:            : Train 0.0149, Val 0.0160, Test 0.0154
          R2_Score         : Train 0.2345, Val 0.2295, Test 0.2332
          RMSE             : Train 135.2759, Val 136.1153, Test 136.2735
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 83: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2362, Val 0.2346, Test 0.2346
          RMSE             : Train 135.1277, Val 135.6565, Test 136.1575
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 84: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2407, Val 0.2327, Test 0.2314
          RMSE             : Train 134.7298, Val 135.8242, Test 136.4338
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.89it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.02it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.47it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.46it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.80it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 57.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:04,  3.65it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.79it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.74it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 35.11it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 40.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.65it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.42it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.26it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.75it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  7.36it/s]Train:  31%|███▏      | 5/16 [00:00<00:01, 10.44it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 11.29it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 12.47it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 17.04it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 17.22it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 47.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.53it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.98it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.58it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.63it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.28it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 11.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.17it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.76it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.13it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 17.14it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.24it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  8.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.84it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.94it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.71it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.13it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 26.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.06it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.57it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.47it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.07it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.55it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.40it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.11it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.00it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.50it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 13.17it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 12.45it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.60it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 60.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.79it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.22it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.59it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.23it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.11it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.06it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 31.37it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.18it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.42it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.76it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 28.49it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 24.13it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 42.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.61it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.85it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 29.30it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 34.22it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 22.38it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 33.15it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 26.38it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.30it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.68it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.22it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.33it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.28it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 28.55it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.23it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 24.19it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.82it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.40it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.53it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.13it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.62it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.67it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.82it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.39it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.07it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.00it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.64it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.58it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.91it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.55it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.44it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 14.70it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 13.13it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.14it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.42it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.90it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.82it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.74it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 20.82it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.69it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.67it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 72.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.10it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.73it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 38.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.57it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.92it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.98it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 40.97it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.89it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.47it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.45it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.53it/s]
Epoch 85: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2343, Val 0.2376, Test 0.2364
          RMSE             : Train 135.2961, Val 135.3978, Test 135.9923
Best:
          R2_Score         : Train 0.2386, Val 0.2397, Test 0.2368
          RMSE             : Train 134.9124, Val 135.2066, Test 135.9536
Epoch 86: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2389, Val 0.2400, Test 0.2380
          RMSE             : Train 134.8857, Val 135.1791, Test 135.8500
Best:
          R2_Score         : Train 0.2389, Val 0.2400, Test 0.2380
          RMSE             : Train 134.8857, Val 135.1791, Test 135.8500
Epoch 87: Loss:            : Train 0.0149, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2347, Val 0.2383, Test 0.2357
          RMSE             : Train 135.2596, Val 135.3320, Test 136.0528
Best:
          R2_Score         : Train 0.2389, Val 0.2400, Test 0.2380
          RMSE             : Train 134.8857, Val 135.1791, Test 135.8500
Epoch 88: Loss:            : Train 0.0148, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2385, Val 0.2366, Test 0.2434
          RMSE             : Train 134.9294, Val 135.4808, Test 135.3686
Best:
          R2_Score         : Train 0.2389, Val 0.2400, Test 0.2380
          RMSE             : Train 134.8857, Val 135.1791, Test 135.8500
Epoch 89: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2417, Val 0.2424, Test 0.2432
          RMSE             : Train 134.6438, Val 134.9653, Test 135.3884
Best:
          R2_Score         : Train 0.2417, Val 0.2424, Test 0.2432
          RMSE             : Train 134.6438, Val 134.9653, Test 135.3884
Epoch 90: Loss:            : Train 0.0149, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2364, Val 0.2294, Test 0.2339
          RMSE             : Train 135.1079, Val 136.1232, Test 136.2192
Best:
          R2_Score         : Train 0.2417, Val 0.2424, Test 0.2432
          RMSE             : Train 134.6438, Val 134.9653, Test 135.3884
Epoch 91: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2408, Val 0.2340, Test 0.2372
          RMSE             : Train 134.7179, Val 135.7101, Test 135.9226
Best:
          R2_Score         : Train 0.2417, Val 0.2424, Test 0.2432
          RMSE             : Train 134.6438, Val 134.9653, Test 135.3884
Epoch 92: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2388, Val 0.2367, Test 0.2377
          RMSE             : Train 134.9003, Val 135.4706, Test 135.8762
Best:
          R2_Score         : Train 0.2417, Val 0.2424, Test 0.2432
          RMSE             : Train 134.6438, Val 134.9653, Test 135.3884
Epoch 93: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 94: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2425, Val 0.2450, Test 0.2452
          RMSE             : Train 134.5700, Val 134.7325, Test 135.2031
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 95: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2410, Val 0.2404, Test 0.2388
          RMSE             : Train 134.7008, Val 135.1481, Test 135.7751
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 96: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2401, Val 0.2322, Test 0.2378
          RMSE             : Train 134.7852, Val 135.8756, Test 135.8691
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 97: Loss:            : Train 0.0149, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2372, Val 0.2393, Test 0.2385
          RMSE             : Train 135.0434, Val 135.2418, Test 135.8049
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 98: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2392, Val 0.2391, Test 0.2341
          RMSE             : Train 134.8609, Val 135.2619, Test 136.1973
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 99: Loss:            : Train 0.0148, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2383, Val 0.2342, Test 0.2341
          RMSE             : Train 134.9425, Val 135.6920, Test 136.1979
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 100: Loss:            : Train 0.0148, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2377, Val 0.2314, Test 0.2349
          RMSE             : Train 134.9995, Val 135.9401, Test 136.1220
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 101: Loss:            : Train 0.0149, Val 0.0160, Test 0.0153
          R2_Score         : Train 0.2363, Val 0.2281, Test 0.2353
          RMSE             : Train 135.1224, Val 136.2315, Test 136.0908
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 102: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2396, Val 0.2391, Test 0.2377
          RMSE             : Train 134.8301, Val 135.2581, Test 135.8742
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 103: Loss:            : Train 0.0149, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2360, Val 0.2375, Test 0.2414
          RMSE             : Train 135.1469, Val 135.4058, Test 135.5481
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 104: Loss:            : Train 0.0149, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2345, Val 0.2399, Test 0.2395
          RMSE             : Train 135.2829, Val 135.1853, Test 135.7203
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 105: Loss:            : Train 0.0148, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2380, Val 0.2297, Test 0.2236
          RMSE             : Train 134.9695, Val 136.0945, Test 137.1271
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 106: Loss:            : Train 0.0149, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2371, Val 0.2398, Test 0.2348
          RMSE             : Train 135.0508, Val 135.1952, Test 136.1380
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 107: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2404, Val 0.2394, Test 0.2376
          RMSE             : Train 134.7542, Val 135.2319, Test 135.8821
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 108: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.81it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 23.16it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.46it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 31.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 35.43it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.63it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.37it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.14it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 39.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.48it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.56it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.43it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.92it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.73it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.80it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 29.01it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.65it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 59.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.21it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 19.46it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.17it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 28.82it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 14.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.92it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.07it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 31.47it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.10it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.71it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 23.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 43.24it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 26.03it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.27it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.27it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.77it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.70it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 37.67it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.16it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.59it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 49.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 49.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.41it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.83it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.12it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 30.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.04it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.52it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.66it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 18.60it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.73it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.94it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.78it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.79it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.60it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.12it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.94it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.65it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.56it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.89it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 19.79it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 15.46it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.96it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 14.71it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.96it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.76it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.95it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.23it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.80it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.59it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 16.28it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.73it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 22.55it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.31it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 26.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 21.41it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 36.76it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.22it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.80it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.88it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.79it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 60.15it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.45it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 28.22it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 26.30it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.77it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 36.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 41.94it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.73it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.78it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 27.87it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 27.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.12it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 24.70it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.43it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.20it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.74it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 24.07it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 20.59it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.08it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.10it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.35it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.12it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.56it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.97it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.93it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 13.99it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.34it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.37it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 24.75it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.44it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 96.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 30.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.88it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 29.28it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.70it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.42it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 17.00it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.35it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.89it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.26it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.52it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.17it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.29it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 28.39it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.42it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.21it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.09it/s]
          R2_Score         : Train 0.2418, Val 0.2344, Test 0.2370
          RMSE             : Train 134.6370, Val 135.6768, Test 135.9438
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 109: Loss:            : Train 0.0147, Val 0.0154, Test 0.0152
          R2_Score         : Train 0.2435, Val 0.2397, Test 0.2372
          RMSE             : Train 134.4805, Val 135.2052, Test 135.9214
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 110: Loss:            : Train 0.0148, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2423, Val 0.2368, Test 0.2350
          RMSE             : Train 134.5923, Val 135.4683, Test 136.1216
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 111: Loss:            : Train 0.0147, Val 0.0154, Test 0.0152
          R2_Score         : Train 0.2427, Val 0.2443, Test 0.2396
          RMSE             : Train 134.5507, Val 134.7957, Test 135.7037
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 112: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2396, Val 0.2429, Test 0.2395
          RMSE             : Train 134.8270, Val 134.9195, Test 135.7170
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 113: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2390, Val 0.2367, Test 0.2380
          RMSE             : Train 134.8848, Val 135.4712, Test 135.8498
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 114: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2417, Val 0.2286, Test 0.2322
          RMSE             : Train 134.6377, Val 136.1870, Test 136.3657
Best:
          R2_Score         : Train 0.2398, Val 0.2451, Test 0.2396
          RMSE             : Train 134.8113, Val 134.7279, Test 135.7096
Epoch 115: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 116: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2374, Val 0.2367, Test 0.2403
          RMSE             : Train 135.0186, Val 135.4726, Test 135.6411
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 117: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2408, Val 0.2395, Test 0.2388
          RMSE             : Train 134.7183, Val 135.2266, Test 135.7795
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 118: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2408, Val 0.2357, Test 0.2394
          RMSE             : Train 134.7216, Val 135.5592, Test 135.7237
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 119: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2406, Val 0.2423, Test 0.2453
          RMSE             : Train 134.7391, Val 134.9789, Test 135.1942
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 120: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2429, Val 0.2404, Test 0.2445
          RMSE             : Train 134.5393, Val 135.1428, Test 135.2662
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 121: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2412, Val 0.2336, Test 0.2396
          RMSE             : Train 134.6830, Val 135.7502, Test 135.7075
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 122: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2423, Val 0.2332, Test 0.2367
          RMSE             : Train 134.5907, Val 135.7833, Test 135.9633
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 123: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2429, Val 0.2391, Test 0.2446
          RMSE             : Train 134.5326, Val 135.2617, Test 135.2651
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 124: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2419, Val 0.2425, Test 0.2433
          RMSE             : Train 134.6208, Val 134.9590, Test 135.3789
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 125: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2445, Val 0.2433, Test 0.2436
          RMSE             : Train 134.3920, Val 134.8899, Test 135.3534
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 126: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2429, Val 0.2427, Test 0.2417
          RMSE             : Train 134.5329, Val 134.9436, Test 135.5199
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 127: Loss:            : Train 0.0147, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2431, Val 0.2407, Test 0.2397
          RMSE             : Train 134.5139, Val 135.1197, Test 135.7016
Best:
          R2_Score         : Train 0.2401, Val 0.2451, Test 0.2433
          RMSE             : Train 134.7824, Val 134.7236, Test 135.3810
Epoch 128: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2419, Val 0.2463, Test 0.2439
          RMSE             : Train 134.6233, Val 134.6175, Test 135.3262
Best:
          R2_Score         : Train 0.2419, Val 0.2463, Test 0.2439
          RMSE             : Train 134.6233, Val 134.6175, Test 135.3262
Epoch 129: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2435, Val 0.2367, Test 0.2403
          RMSE             : Train 134.4811, Val 135.4738, Test 135.6455
Best:
          R2_Score         : Train 0.2419, Val 0.2463, Test 0.2439
          RMSE             : Train 134.6233, Val 134.6175, Test 135.3262
Epoch 130: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2389, Val 0.2376, Test 0.2382
          RMSE             : Train 134.8858, Val 135.3957, Test 135.8367
Best:
          R2_Score         : Train 0.2419, Val 0.2463, Test 0.2439
          RMSE             : Train 134.6233, Val 134.6175, Test 135.3262
Epoch 131: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2395, Val 0.2271, Test 0.2336
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  3.94it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.19it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.01it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 21.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.94it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.07it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.84it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 23.79it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 27.87it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 27.47it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 37.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.12it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.36it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.35it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.14it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.23it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.73it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.01it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.35it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 30.80it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.99it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.37it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 33.41it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.73it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.06it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.97it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.77it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.70it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.27it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.56it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.78it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.18it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.45it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.46it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 32.41it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.79it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 60.79it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.01it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.97it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 30.95it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.65it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.48it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 23.96it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 32.48it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.61it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.09it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.32it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.92it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.65it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.11it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.58it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 31.65it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.48it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.74it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.24it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.36it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.62it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.65it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.01it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 87.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 36.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 43.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 34.63it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 41.10it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 33.68it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 35.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.45it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.83it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 20.46it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.10it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.54it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 12.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.55it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.53it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.74it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.06it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.76it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 27.63it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.62it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.60it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 45.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 45.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.38it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 10.59it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.77it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.02it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.17it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.57it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  9.41it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.09it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.89it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.09it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 57.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.41it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 25.17it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.14it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 36.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 42.92it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  7.02it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.75it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.42it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 10.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.51it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.69it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.71it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.45it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.20it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 20.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.39it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 26.38it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.34it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.07it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 47.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 33.55it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 39.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 25.30it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 11.67it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.02it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.73it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.53it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.38it/s]
          RMSE             : Train 134.8411, Val 136.3205, Test 136.2381
Best:
          R2_Score         : Train 0.2419, Val 0.2463, Test 0.2439
          RMSE             : Train 134.6233, Val 134.6175, Test 135.3262
Epoch 132: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2391, Val 0.2374, Test 0.2402
          RMSE             : Train 134.8731, Val 135.4089, Test 135.6561
Best:
          R2_Score         : Train 0.2419, Val 0.2463, Test 0.2439
          RMSE             : Train 134.6233, Val 134.6175, Test 135.3262
Epoch 133: Loss:            : Train 0.0147, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2433, Val 0.2365, Test 0.2375
          RMSE             : Train 134.5012, Val 135.4880, Test 135.8953
Best:
          R2_Score         : Train 0.2419, Val 0.2463, Test 0.2439
          RMSE             : Train 134.6233, Val 134.6175, Test 135.3262
Epoch 134: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2426, Val 0.2430, Test 0.2437
          RMSE             : Train 134.5616, Val 134.9120, Test 135.3412
Best:
          R2_Score         : Train 0.2419, Val 0.2463, Test 0.2439
          RMSE             : Train 134.6233, Val 134.6175, Test 135.3262
Epoch 135: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2434, Val 0.2400, Test 0.2447
          RMSE             : Train 134.4941, Val 135.1833, Test 135.2549
Best:
          R2_Score         : Train 0.2419, Val 0.2463, Test 0.2439
          RMSE             : Train 134.6233, Val 134.6175, Test 135.3262
Epoch 136: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 137: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2444, Val 0.2371, Test 0.2376
          RMSE             : Train 134.4043, Val 135.4340, Test 135.8828
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 138: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2450, Val 0.2474, Test 0.2450
          RMSE             : Train 134.3447, Val 134.5240, Test 135.2254
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 139: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2421, Val 0.2395, Test 0.2415
          RMSE             : Train 134.6094, Val 135.2274, Test 135.5411
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 140: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2416, Val 0.2439, Test 0.2444
          RMSE             : Train 134.6543, Val 134.8359, Test 135.2825
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 141: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2430, Val 0.2378, Test 0.2404
          RMSE             : Train 134.5295, Val 135.3744, Test 135.6386
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 142: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2420, Val 0.2428, Test 0.2456
          RMSE             : Train 134.6173, Val 134.9290, Test 135.1673
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 143: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2437, Val 0.2424, Test 0.2416
          RMSE             : Train 134.4629, Val 134.9650, Test 135.5266
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 144: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2441, Val 0.2415, Test 0.2458
          RMSE             : Train 134.4284, Val 135.0503, Test 135.1564
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 145: Loss:            : Train 0.0147, Val 0.0156, Test 0.0154
          R2_Score         : Train 0.2432, Val 0.2348, Test 0.2294
          RMSE             : Train 134.5089, Val 135.6425, Test 136.6183
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 146: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2393, Val 0.2457, Test 0.2443
          RMSE             : Train 134.8513, Val 134.6710, Test 135.2877
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 147: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2420, Val 0.2421, Test 0.2451
          RMSE             : Train 134.6162, Val 134.9954, Test 135.2201
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 148: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2436, Val 0.2380, Test 0.2424
          RMSE             : Train 134.4703, Val 135.3575, Test 135.4566
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 149: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2417, Val 0.2324, Test 0.2383
          RMSE             : Train 134.6444, Val 135.8564, Test 135.8257
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 150: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2415, Val 0.2388, Test 0.2433
          RMSE             : Train 134.6555, Val 135.2840, Test 135.3768
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 151: Loss:            : Train 0.0148, Val 0.0160, Test 0.0153
          R2_Score         : Train 0.2423, Val 0.2367, Test 0.2399
          RMSE             : Train 134.5919, Val 135.4709, Test 135.6844
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 152: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2429, Val 0.2389, Test 0.2447
          RMSE             : Train 134.5339, Val 135.2742, Test 135.2503
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 153: Loss:            : Train 0.0147, Val 0.0156, Test 0.0150
          R2_Score         : Train 0.2447, Val 0.2419, Test 0.2486
          RMSE             : Train 134.3772, Val 135.0071, Test 134.8985
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 154: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2441, Val 0.2418, Test 0.2412
          RMSE             : Train 134.4307, Val 135.0183, Test 135.5640
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.34it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.24it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 23.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.40it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 82.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.97it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.94it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.48it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.19it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 102.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.70it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.03it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.84it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.98it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 101.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 34.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 40.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.22it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.28it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.08it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.06it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.26it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 31.32it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.91it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.61it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.44it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.04it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.91it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 32.23it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.02it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 30.72it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 29.52it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 34.77it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.11it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.40it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.99it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.82it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.51it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.98it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.74it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 23.97it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 51.92it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.61it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.90it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.20it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.46it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.45it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.02it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 55.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.92it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.86it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.22it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.99it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.33it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.07it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 96.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.16it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.10it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 26.32it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.85it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.52it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.19it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.78it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.64it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 14.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.24it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.83it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.80it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.11it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.26it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.92it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 27.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.58it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.38it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.50it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.14it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.45it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.00it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.86it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.82it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 29.85it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.94it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.98it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.38it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.41it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.69it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.36it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 17.84it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.07it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.07it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.47it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 11.63it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.68it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.18it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.42it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.42it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 10.12it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.14it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 77.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.08it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.86it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.17it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 28.36it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 13.40it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 102.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.53it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.71it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.52it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.73it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.64it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 32.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 22.40it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.04it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.66it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.37it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.72it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.45it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.43it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.37it/s]
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 155: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2441, Val 0.2452, Test 0.2443
          RMSE             : Train 134.4325, Val 134.7171, Test 135.2893
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 156: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2428, Val 0.2415, Test 0.2443
          RMSE             : Train 134.5417, Val 135.0439, Test 135.2873
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 157: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2444, Val 0.2446, Test 0.2441
          RMSE             : Train 134.4043, Val 134.7675, Test 135.3058
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 158: Loss:            : Train 0.0148, Val 0.0153, Test 0.0151
          R2_Score         : Train 0.2399, Val 0.2448, Test 0.2439
          RMSE             : Train 134.8005, Val 134.7567, Test 135.3264
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 159: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2413, Val 0.2423, Test 0.2461
          RMSE             : Train 134.6791, Val 134.9798, Test 135.1225
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 160: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2456, Val 0.2445, Test 0.2478
          RMSE             : Train 134.2941, Val 134.7788, Test 134.9754
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 161: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2428, Val 0.2411, Test 0.2429
          RMSE             : Train 134.5460, Val 135.0794, Test 135.4144
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 162: Loss:            : Train 0.0147, Val 0.0154, Test 0.0152
          R2_Score         : Train 0.2429, Val 0.2403, Test 0.2381
          RMSE             : Train 134.5328, Val 135.1579, Test 135.8432
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 163: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2424, Val 0.2434, Test 0.2453
          RMSE             : Train 134.5809, Val 134.8767, Test 135.1964
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 164: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2413, Val 0.2378, Test 0.2364
          RMSE             : Train 134.6776, Val 135.3739, Test 135.9918
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 165: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2436, Val 0.2438, Test 0.2421
          RMSE             : Train 134.4765, Val 134.8403, Test 135.4883
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 166: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2435, Val 0.2401, Test 0.2400
          RMSE             : Train 134.4826, Val 135.1694, Test 135.6689
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 167: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2426, Val 0.2405, Test 0.2440
          RMSE             : Train 134.5638, Val 135.1403, Test 135.3168
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 168: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2451, Val 0.2467, Test 0.2452
          RMSE             : Train 134.3367, Val 134.5821, Test 135.2089
Best:
          R2_Score         : Train 0.2444, Val 0.2480, Test 0.2480
          RMSE             : Train 134.4020, Val 134.4626, Test 134.9524
Epoch 169: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2467, Val 0.2485, Test 0.2481
          RMSE             : Train 134.1949, Val 134.4218, Test 134.9440
Best:
          R2_Score         : Train 0.2467, Val 0.2485, Test 0.2481
          RMSE             : Train 134.1949, Val 134.4218, Test 134.9440
Epoch 170: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2457, Val 0.2356, Test 0.2398
          RMSE             : Train 134.2897, Val 135.5750, Test 135.6918
Best:
          R2_Score         : Train 0.2467, Val 0.2485, Test 0.2481
          RMSE             : Train 134.1949, Val 134.4218, Test 134.9440
Epoch 171: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2404, Val 0.2415, Test 0.2386
          RMSE             : Train 134.7587, Val 135.0429, Test 135.7935
Best:
          R2_Score         : Train 0.2467, Val 0.2485, Test 0.2481
          RMSE             : Train 134.1949, Val 134.4218, Test 134.9440
Epoch 172: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2426, Val 0.2408, Test 0.2433
          RMSE             : Train 134.5585, Val 135.1130, Test 135.3803
Best:
          R2_Score         : Train 0.2467, Val 0.2485, Test 0.2481
          RMSE             : Train 134.1949, Val 134.4218, Test 134.9440
Epoch 173: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 174: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2442, Val 0.2474, Test 0.2441
          RMSE             : Train 134.4192, Val 134.5176, Test 135.3057
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 175: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2455, Val 0.2449, Test 0.2416
          RMSE             : Train 134.3008, Val 134.7462, Test 135.5273
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 176: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2445, Val 0.2379, Test 0.2406
          RMSE             : Train 134.3916, Val 135.3694, Test 135.6166
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 177: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2446, Val 0.2394, Test 0.2425
          RMSE             : Train 134.3823, Val 135.2310, Test 135.4449
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.28it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.34it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.06it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.42it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:04,  3.71it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 15.85it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.25it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.73it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  9.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.78it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.26it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.40it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.03it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.99it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.36it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.12it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 28.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.52it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.03it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.31it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.12it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.23it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.93it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.03it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 28.24it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 37.29it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.22it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 14.33it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 56.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.37it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 27.44it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.33it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 21.59it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 15.61it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.31it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 25.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.79it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.23it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.50it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.27it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.82it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.75it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 54.36it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.96it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.33it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 20.99it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.24it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 13.44it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 15.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 45.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 45.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.36it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 29.65it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 25.31it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.35it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.49it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.41it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.93it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 25.76it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.26it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 79.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.89it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.49it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 11.29it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 13.81it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.82it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.70it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.39it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 30.66it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 30.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.61it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 22.26it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 32.69it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 27.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.87it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.50it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.36it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.39it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.10it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.67it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.42it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.60it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.90it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.82it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.94it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.69it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.01it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.88it/s]Train:  38%|███▊      | 6/16 [00:00<00:01,  9.95it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.22it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.68it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.83it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.90it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 12.81it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.53it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.10it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 36.42it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 32.00it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.69it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.09it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.11it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.52it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.88it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 29.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 103.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 37.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 44.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.33it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 35.02it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 30.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 84.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.21it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.54it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.02it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.39it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 17.51it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.36it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.94it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.97it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.42it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.64it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.01it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.94it/s]
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 178: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2456, Val 0.2343, Test 0.2395
          RMSE             : Train 134.2921, Val 135.6903, Test 135.7196
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 179: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2416, Val 0.2323, Test 0.2364
          RMSE             : Train 134.6546, Val 135.8619, Test 135.9925
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 180: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2451, Val 0.2397, Test 0.2426
          RMSE             : Train 134.3430, Val 135.2042, Test 135.4437
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 181: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2442, Val 0.2431, Test 0.2445
          RMSE             : Train 134.4185, Val 134.9024, Test 135.2735
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 182: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2442, Val 0.2427, Test 0.2444
          RMSE             : Train 134.4168, Val 134.9431, Test 135.2768
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 183: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2453, Val 0.2425, Test 0.2463
          RMSE             : Train 134.3201, Val 134.9596, Test 135.1078
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 184: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2449, Val 0.2372, Test 0.2424
          RMSE             : Train 134.3539, Val 135.4284, Test 135.4555
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 185: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2449, Val 0.2473, Test 0.2480
          RMSE             : Train 134.3598, Val 134.5284, Test 134.9581
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 186: Loss:            : Train 0.0147, Val 0.0158, Test 0.0152
          R2_Score         : Train 0.2439, Val 0.2373, Test 0.2398
          RMSE             : Train 134.4424, Val 135.4170, Test 135.6868
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 187: Loss:            : Train 0.0147, Val 0.0156, Test 0.0150
          R2_Score         : Train 0.2448, Val 0.2435, Test 0.2475
          RMSE             : Train 134.3670, Val 134.8694, Test 135.0028
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 188: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2436, Val 0.2385, Test 0.2397
          RMSE             : Train 134.4726, Val 135.3162, Test 135.7009
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 189: Loss:            : Train 0.0147, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2439, Val 0.2402, Test 0.2382
          RMSE             : Train 134.4448, Val 135.1628, Test 135.8338
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 190: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2446, Val 0.2454, Test 0.2442
          RMSE             : Train 134.3820, Val 134.6985, Test 135.2973
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 191: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2455, Val 0.2437, Test 0.2435
          RMSE             : Train 134.2995, Val 134.8468, Test 135.3593
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 192: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2436, Val 0.2403, Test 0.2441
          RMSE             : Train 134.4735, Val 135.1524, Test 135.3052
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 193: Loss:            : Train 0.0148, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2418, Val 0.2401, Test 0.2448
          RMSE             : Train 134.6325, Val 135.1716, Test 135.2445
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 194: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2425, Val 0.2422, Test 0.2465
          RMSE             : Train 134.5694, Val 134.9860, Test 135.0883
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 195: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2443, Val 0.2488, Test 0.2488
          RMSE             : Train 134.4135, Val 134.3945, Test 134.8884
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 196: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2460, Val 0.2489, Test 0.2458
          RMSE             : Train 134.2579, Val 134.3827, Test 135.1507
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 197: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2455, Val 0.2453, Test 0.2438
          RMSE             : Train 134.3028, Val 134.7086, Test 135.3281
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 198: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2408, Val 0.2425, Test 0.2434
          RMSE             : Train 134.7218, Val 134.9581, Test 135.3637
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 199: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2443, Val 0.2475, Test 0.2467
          RMSE             : Train 134.4119, Val 134.5107, Test 135.0683
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611
Epoch 200: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2470, Val 0.2474, Test 0.2480
          RMSE             : Train 134.1728, Val 134.5242, Test 134.9557
Best:
          R2_Score         : Train 0.2436, Val 0.2500, Test 0.2479
          RMSE             : Train 134.4747, Val 134.2869, Test 134.9611

