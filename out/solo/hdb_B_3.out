  0%|          | 0/64445 [00:00<?, ?it/s]  5%|▌         | 3265/64445 [00:00<00:01, 32641.31it/s] 11%|█         | 7067/64445 [00:00<00:01, 35798.95it/s] 18%|█▊        | 11800/64445 [00:00<00:01, 41059.83it/s] 26%|██▌       | 16700/64445 [00:00<00:01, 44192.75it/s] 35%|███▍      | 22266/64445 [00:00<00:00, 48324.49it/s] 43%|████▎     | 27841/64445 [00:00<00:00, 50845.44it/s] 52%|█████▏    | 33788/64445 [00:00<00:00, 53662.84it/s] 61%|██████    | 39372/64445 [00:00<00:00, 54354.36it/s] 70%|██████▉   | 44960/64445 [00:00<00:00, 54829.06it/s] 79%|███████▉  | 51095/64445 [00:01<00:00, 56839.33it/s] 88%|████████▊ | 56975/64445 [00:01<00:00, 57437.21it/s] 97%|█████████▋| 62719/64445 [00:01<00:00, 49029.53it/s]100%|██████████| 64445/64445 [00:01<00:00, 50071.70it/s]
  0%|          | 0/9207 [00:00<?, ?it/s] 59%|█████▉    | 5445/9207 [00:00<00:00, 54443.43it/s]100%|██████████| 9207/9207 [00:00<00:00, 54264.13it/s]
  0%|          | 0/18413 [00:00<?, ?it/s] 30%|██▉       | 5473/18413 [00:00<00:00, 54726.79it/s] 65%|██████▌   | 11971/18413 [00:00<00:00, 60752.27it/s] 98%|█████████▊| 18047/18413 [00:00<00:00, 57993.98it/s]100%|██████████| 18413/18413 [00:00<00:00, 58039.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:102: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  train_dataset = TensorDataset(torch.tensor(train_X).float(), torch.tensor(train_y).float())
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.72it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.13it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.79it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.98it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.41it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 27.27it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.16it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 53.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  5.04it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  8.25it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.80it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 10.48it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.33it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 10.28it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 11.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.78it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.34it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.06it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.65it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.79it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.48it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.90it/s]Test:  40%|████      | 2/5 [00:00<00:00,  6.78it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.89it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.03it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.88it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.56it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.90it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  6.98it/s]Test: 100%|██████████| 5/5 [00:00<00:00,  9.69it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.77it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.84it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.13it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.38it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 12.89it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 20.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.25it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 13.23it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.36it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.80it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 15.13it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.65it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.60it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.06it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.34it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 15.94it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.06it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.47it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 35.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 41.36it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.34it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.96it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 28.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.22it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 12.26it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.47it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.09it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 20.44it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 11.13it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.41it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 57.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  3.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.88it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.66it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.31it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  5.60it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.55it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 13.15it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.87it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.34it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.52it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 20.97it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 29.15it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 30.39it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 27.44it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 59.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.77it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.60it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.05it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 53.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 20.99it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 35.87it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 29.09it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.41it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 29.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.41it/s]Loading house from data/hdb/hdb_clean.csv
Loading airbnb from data/hdb/school_clean.csv
Current hdb columns Index(['floor_area_sqm', 'lease_commence_year_before_2020', 'tn_BEDOK',
       'tn_BISHAN', 'tn_BUKIT BATOK', 'tn_BUKIT MERAH', 'tn_BUKIT PANJANG',
       'tn_BUKIT TIMAH', 'tn_CENTRAL AREA', 'tn_CHOA CHU KANG', 'tn_CLEMENTI',
       'tn_GEYLANG', 'tn_HOUGANG', 'tn_JURONG EAST', 'tn_JURONG WEST',
       'tn_KALLANG/WHAMPOA', 'tn_MARINE PARADE', 'tn_PASIR RIS', 'tn_PUNGGOL',
       'tn_QUEENSTOWN', 'tn_SEMBAWANG', 'tn_SENGKANG', 'tn_SERANGOON',
       'tn_TAMPINES', 'tn_TOA PAYOH', 'tn_WOODLANDS', 'tn_YISHUN', 'ft_2 ROOM',
       'ft_3 ROOM', 'ft_4 ROOM', 'ft_5 ROOM', 'ft_EXECUTIVE',
       'ft_MULTI-GENERATION', 'sr_04 TO 06', 'sr_07 TO 09', 'sr_10 TO 12',
       'sr_13 TO 15', 'sr_16 TO 18', 'sr_19 TO 21', 'sr_22 TO 24',
       'sr_25 TO 27', 'sr_28 TO 30', 'sr_31 TO 33', 'sr_34 TO 36',
       'sr_37 TO 39', 'sr_40 TO 42', 'sr_43 TO 45', 'sr_46 TO 48',
       'sr_49 TO 51', 'fm_Adjoined flat', 'fm_Apartment', 'fm_DBSS',
       'fm_Improved', 'fm_Improved-Maisonette', 'fm_Maisonette', 'fm_Model A',
       'fm_Model A-Maisonette', 'fm_Model A2', 'fm_Multi Generation',
       'fm_New Generation', 'fm_Premium Apartment',
       'fm_Premium Apartment Loft', 'fm_Premium Maisonette', 'fm_Simplified',
       'fm_Standard', 'fm_Terrace', 'fm_Type S1', 'fm_Type S2', 'lon', 'lat'],
      dtype='object')
Current airbnb columns Index(['lon', 'lat', 'n_places_0', 'vacancy_rate_0', 'n_places_1',
       'vacancy_rate_1', 'n_places_2', 'vacancy_rate_2', 'n_places_3',
       'vacancy_rate_3'],
      dtype='object')
Loading data from cache
Done
Generating top1 dataset
Generating top1 dataset
Generating top1 dataset
X got 8 dimensions
Loading data
Prepare for training
Start training
=================================================================
                     Kernel Shape Output Shape  Params  Mult-Adds
Layer                                                            
0_fc_layers.Linear_0     [8, 400]  [4096, 400]    3600       3200
1_fc_layers.Linear_1   [400, 200]  [4096, 200]   80200      80000
2_fc_layers.Linear_2     [200, 1]    [4096, 1]     201        200
-----------------------------------------------------------------
                      Totals
Total params           84001
Trainable params       84001
Non-trainable params       0
Mult-Adds              83400
=================================================================
n_classes=2
task=regression
model_name=hdb_B_2022-05-21-21-23-54
sche_threshold=0.0001
sche_patience=10
sche_factor=0.1
use_scheduler=False
num_workers=4
device=cuda:2
test_batch_size=4096
train_batch_size=4096
learning_rate=0.01
weight_decay=1e-05
num_epochs=200
model_save_path=ckp/hdb_B_2022-05-21-21-23-54.pth
test_rate=0.2
val_rate=0.1
multiprocess_context=fork
metrics=['r2_score', 'rmse']
metrics_f=[<metric.r2_score.R2Score object at 0x7f99a25c96d0>, <metric.rmse.RMSE object at 0x7f99a25c9730>]
hidden_sizes=[400, 200]
model=MLP(
  (fc_layers): ModuleList(
    (0): Linear(in_features=8, out_features=400, bias=True)
    (1): Linear(in_features=400, out_features=200, bias=True)
    (2): Linear(in_features=200, out_features=1, bias=True)
  )
)
writer=<torch.utils.tensorboard.writer.SummaryWriter object at 0x7f99a25c9640>
Epoch 1: Loss:            : Train 0.0324, Val 0.0260, Test 0.0254
          R2_Score         : Train -0.6714, Val -0.2461, Test -0.2576
          RMSE             : Train 199.8921, Val 173.0975, Test 174.5210
Best:
          R2_Score         : Train -0.6714, Val -0.2461, Test -0.2576
          RMSE             : Train 199.8921, Val 173.0975, Test 174.5210
Epoch 2: Loss:            : Train 0.0209, Val 0.0203, Test 0.0196
          R2_Score         : Train -0.0747, Val 0.0041, Test 0.0170
          RMSE             : Train 160.2877, Val 154.7455, Test 154.3008
Best:
          R2_Score         : Train -0.0747, Val 0.0041, Test 0.0170
          RMSE             : Train 160.2877, Val 154.7455, Test 154.3008
Epoch 3: Loss:            : Train 0.0192, Val 0.0197, Test 0.0191
          R2_Score         : Train 0.0148, Val 0.0315, Test 0.0398
          RMSE             : Train 153.4723, Val 152.6023, Test 152.5015
Best:
          R2_Score         : Train 0.0148, Val 0.0315, Test 0.0398
          RMSE             : Train 153.4723, Val 152.6023, Test 152.5015
Epoch 4: Loss:            : Train 0.0185, Val 0.0192, Test 0.0186
          R2_Score         : Train 0.0513, Val 0.0532, Test 0.0668
          RMSE             : Train 150.5972, Val 150.8823, Test 150.3412
Best:
          R2_Score         : Train 0.0513, Val 0.0532, Test 0.0668
          RMSE             : Train 150.5972, Val 150.8823, Test 150.3412
Epoch 5: Loss:            : Train 0.0179, Val 0.0185, Test 0.0181
          R2_Score         : Train 0.0818, Val 0.0836, Test 0.0909
          RMSE             : Train 148.1578, Val 148.4372, Test 148.3864
Best:
          R2_Score         : Train 0.0818, Val 0.0836, Test 0.0909
          RMSE             : Train 148.1578, Val 148.4372, Test 148.3864
Epoch 6: Loss:            : Train 0.0175, Val 0.0184, Test 0.0179
          R2_Score         : Train 0.0992, Val 0.0969, Test 0.1051
          RMSE             : Train 146.7469, Val 147.3579, Test 147.2243
Best:
          R2_Score         : Train 0.0992, Val 0.0969, Test 0.1051
          RMSE             : Train 146.7469, Val 147.3579, Test 147.2243
Epoch 7: Loss:            : Train 0.0172, Val 0.0177, Test 0.0174
          R2_Score         : Train 0.1163, Val 0.1157, Test 0.1252
          RMSE             : Train 145.3492, Val 145.8176, Test 145.5586
Best:
          R2_Score         : Train 0.1163, Val 0.1157, Test 0.1252
          RMSE             : Train 145.3492, Val 145.8176, Test 145.5586
Epoch 8: Loss:            : Train 0.0170, Val 0.0181, Test 0.0178
          R2_Score         : Train 0.1274, Val 0.1097, Test 0.1098
          RMSE             : Train 144.4333, Val 146.3087, Test 146.8305
Best:
          R2_Score         : Train 0.1163, Val 0.1157, Test 0.1252
          RMSE             : Train 145.3492, Val 145.8176, Test 145.5586
Epoch 9: Loss:            : Train 0.0168, Val 0.0176, Test 0.0172
          R2_Score         : Train 0.1349, Val 0.1324, Test 0.1365
          RMSE             : Train 143.8105, Val 144.4300, Test 144.6149
Best:
          R2_Score         : Train 0.1349, Val 0.1324, Test 0.1365
          RMSE             : Train 143.8105, Val 144.4300, Test 144.6149
Epoch 10: Loss:            : Train 0.0165, Val 0.0174, Test 0.0172
          R2_Score         : Train 0.1519, Val 0.1417, Test 0.1427
          RMSE             : Train 142.3929, Val 143.6604, Test 144.0958
Best:
          R2_Score         : Train 0.1519, Val 0.1417, Test 0.1427
          RMSE             : Train 142.3929, Val 143.6604, Test 144.0958
Epoch 11: Loss:            : Train 0.0165, Val 0.0172, Test 0.0169
          R2_Score         : Train 0.1529, Val 0.1510, Test 0.1552
          RMSE             : Train 142.3110, Val 142.8764, Test 143.0440
Best:
          R2_Score         : Train 0.1529, Val 0.1510, Test 0.1552
          RMSE             : Train 142.3110, Val 142.8764, Test 143.0440
Epoch 12: Loss:            : Train 0.0163, Val 0.0174, Test 0.0169
          R2_Score         : Train 0.1613, Val 0.1505, Test 0.1570
          RMSE             : Train 141.5981, Val 142.9170, Test 142.8860
Best:
          R2_Score         : Train 0.1529, Val 0.1510, Test 0.1552
          RMSE             : Train 142.3110, Val 142.8764, Test 143.0440
Epoch 13: Loss:            : Train 0.0164, Val 0.0170, Test 0.0166
          R2_Score         : Train 0.1560, Val 0.1616, Test 0.1673
          RMSE             : Train 142.0457, Val 141.9840, Test 142.0137
Best:
          R2_Score         : Train 0.1560, Val 0.1616, Test 0.1673
          RMSE             : Train 142.0457, Val 141.9840, Test 142.0137
Epoch 14: Loss:            : Train 0.0162, Val 0.0169, Test 0.0167
          R2_Score         : Train 0.1664, Val 0.1585, Test 0.1640
          RMSE             : Train 141.1719, Val 142.2415, Test 142.2927
Best:
          R2_Score         : Train 0.1560, Val 0.1616, Test 0.1673
          RMSE             : Train 142.0457, Val 141.9840, Test 142.0137
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.56it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.46it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.00it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.92it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.54it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.41it/s]Test: 100%|██████████| 5/5 [00:00<00:00,  9.99it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 10.66it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.97it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 25.34it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.69it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.29it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.16it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.13it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.87it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.07it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 25.67it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.30it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.31it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.41it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.98it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.73it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 10.00it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 13.21it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 11.58it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.52it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 12.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.40it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.06it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.65it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 11.97it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 11.63it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.75it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 19.59it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.23it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.07it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.47it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.69it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.05it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  5.75it/s]Test:  80%|████████  | 4/5 [00:00<00:00,  8.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00,  9.95it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.71it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  7.26it/s]Train:  38%|███▊      | 6/16 [00:00<00:01,  9.87it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 12.18it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 10.63it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 16.69it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 10.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.10it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.54it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 12.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 26.54it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.28it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.46it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.11it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.11it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.40it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 35.05it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.92it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.16it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 13.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.47it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.18it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.94it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.98it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.60it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.48it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.70it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.03it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  9.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.49it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 30.28it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.31it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.80it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.81it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.15it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.25it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.85it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.01it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 12.31it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.13it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 26.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.87it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.99it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  6.12it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 10.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 10.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.02it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.85it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 14.27it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 11.19it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.04it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.55it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.65it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 16.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.61it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.27it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.24it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 17.18it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.90it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.50it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.42it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.60it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.81it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.45it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.19it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 15.54it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 17.04it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.82it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.12it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.38it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 38.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 28.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 36.45it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.37it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 12.03it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 15.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.88it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 78.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.24it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 20.46it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  6.22it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  8.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.51it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.82it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.32it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.62it/s]Train:  50%|█████     | 8/16 [00:00<00:00,  9.13it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00,  9.98it/s]Train:  75%|███████▌  | 12/16 [00:01<00:00, 10.85it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 11.52it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 12.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 92.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.22it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.88it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.77it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.83it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.82it/s]Train:  50%|█████     | 8/16 [00:00<00:00,  8.26it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 15.67it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 17.50it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 98.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.89it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.21it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.83it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.59it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.08it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 12.45it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 58.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.54it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 26.18it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.90it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 11.07it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 12.37it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 13.55it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 41.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.94it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.35it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.43it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 13.53it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 10.44it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 13.95it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.61it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.60it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.07it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 37.10it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.20it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 13.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.46it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 25.46it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.51it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.34it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.98it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 13.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.15it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 58.53it/s]
Epoch 15: Loss:            : Train 0.0163, Val 0.0171, Test 0.0168
          R2_Score         : Train 0.1612, Val 0.1467, Test 0.1546
          RMSE             : Train 141.6058, Val 143.2370, Test 143.0950
Best:
          R2_Score         : Train 0.1560, Val 0.1616, Test 0.1673
          RMSE             : Train 142.0457, Val 141.9840, Test 142.0137
Epoch 16: Loss:            : Train 0.0161, Val 0.0168, Test 0.0165
          R2_Score         : Train 0.1739, Val 0.1700, Test 0.1752
          RMSE             : Train 140.5351, Val 141.2698, Test 141.3365
Best:
          R2_Score         : Train 0.1739, Val 0.1700, Test 0.1752
          RMSE             : Train 140.5351, Val 141.2698, Test 141.3365
Epoch 17: Loss:            : Train 0.0159, Val 0.0167, Test 0.0163
          R2_Score         : Train 0.1829, Val 0.1683, Test 0.1804
          RMSE             : Train 139.7674, Val 141.4123, Test 140.8900
Best:
          R2_Score         : Train 0.1739, Val 0.1700, Test 0.1752
          RMSE             : Train 140.5351, Val 141.2698, Test 141.3365
Epoch 18: Loss:            : Train 0.0159, Val 0.0178, Test 0.0172
          R2_Score         : Train 0.1831, Val 0.1406, Test 0.1449
          RMSE             : Train 139.7473, Val 143.7483, Test 143.9137
Best:
          R2_Score         : Train 0.1739, Val 0.1700, Test 0.1752
          RMSE             : Train 140.5351, Val 141.2698, Test 141.3365
Epoch 19: Loss:            : Train 0.0158, Val 0.0163, Test 0.0163
          R2_Score         : Train 0.1905, Val 0.1870, Test 0.1836
          RMSE             : Train 139.1152, Val 139.8186, Test 140.6135
Best:
          R2_Score         : Train 0.1905, Val 0.1870, Test 0.1836
          RMSE             : Train 139.1152, Val 139.8186, Test 140.6135
Epoch 20: Loss:            : Train 0.0156, Val 0.0163, Test 0.0161
          R2_Score         : Train 0.1974, Val 0.1962, Test 0.1966
          RMSE             : Train 138.5179, Val 139.0239, Test 139.4948
Best:
          R2_Score         : Train 0.1974, Val 0.1962, Test 0.1966
          RMSE             : Train 138.5179, Val 139.0239, Test 139.4948
Epoch 21: Loss:            : Train 0.0155, Val 0.0163, Test 0.0158
          R2_Score         : Train 0.2015, Val 0.1995, Test 0.2088
          RMSE             : Train 138.1634, Val 138.7375, Test 138.4319
Best:
          R2_Score         : Train 0.2015, Val 0.1995, Test 0.2088
          RMSE             : Train 138.1634, Val 138.7375, Test 138.4319
Epoch 22: Loss:            : Train 0.0156, Val 0.0164, Test 0.0161
          R2_Score         : Train 0.1989, Val 0.1929, Test 0.1959
          RMSE             : Train 138.3909, Val 139.3020, Test 139.5512
Best:
          R2_Score         : Train 0.2015, Val 0.1995, Test 0.2088
          RMSE             : Train 138.1634, Val 138.7375, Test 138.4319
Epoch 23: Loss:            : Train 0.0155, Val 0.0161, Test 0.0158
          R2_Score         : Train 0.2040, Val 0.2023, Test 0.2075
          RMSE             : Train 137.9438, Val 138.4905, Test 138.5393
Best:
          R2_Score         : Train 0.2040, Val 0.2023, Test 0.2075
          RMSE             : Train 137.9438, Val 138.4905, Test 138.5393
Epoch 24: Loss:            : Train 0.0156, Val 0.0162, Test 0.0159
          R2_Score         : Train 0.2002, Val 0.2069, Test 0.2081
          RMSE             : Train 138.2758, Val 138.0939, Test 138.4903
Best:
          R2_Score         : Train 0.2002, Val 0.2069, Test 0.2081
          RMSE             : Train 138.2758, Val 138.0939, Test 138.4903
Epoch 25: Loss:            : Train 0.0154, Val 0.0160, Test 0.0157
          R2_Score         : Train 0.2113, Val 0.2097, Test 0.2152
          RMSE             : Train 137.3166, Val 137.8518, Test 137.8706
Best:
          R2_Score         : Train 0.2113, Val 0.2097, Test 0.2152
          RMSE             : Train 137.3166, Val 137.8518, Test 137.8706
Epoch 26: Loss:            : Train 0.0154, Val 0.0162, Test 0.0160
          R2_Score         : Train 0.2077, Val 0.1867, Test 0.1949
          RMSE             : Train 137.6271, Val 139.8360, Test 139.6434
Best:
          R2_Score         : Train 0.2113, Val 0.2097, Test 0.2152
          RMSE             : Train 137.3166, Val 137.8518, Test 137.8706
Epoch 27: Loss:            : Train 0.0153, Val 0.0166, Test 0.0160
          R2_Score         : Train 0.2120, Val 0.1946, Test 0.2026
          RMSE             : Train 137.2502, Val 139.1591, Test 138.9690
Best:
          R2_Score         : Train 0.2113, Val 0.2097, Test 0.2152
          RMSE             : Train 137.3166, Val 137.8518, Test 137.8706
Epoch 28: Loss:            : Train 0.0153, Val 0.0161, Test 0.0156
          R2_Score         : Train 0.2147, Val 0.2083, Test 0.2173
          RMSE             : Train 137.0166, Val 137.9738, Test 137.6848
Best:
          R2_Score         : Train 0.2113, Val 0.2097, Test 0.2152
          RMSE             : Train 137.3166, Val 137.8518, Test 137.8706
Epoch 29: Loss:            : Train 0.0152, Val 0.0162, Test 0.0157
          R2_Score         : Train 0.2202, Val 0.2088, Test 0.2149
          RMSE             : Train 136.5397, Val 137.9311, Test 137.8939
Best:
          R2_Score         : Train 0.2113, Val 0.2097, Test 0.2152
          RMSE             : Train 137.3166, Val 137.8518, Test 137.8706
Epoch 30: Loss:            : Train 0.0152, Val 0.0160, Test 0.0156
          R2_Score         : Train 0.2216, Val 0.2177, Test 0.2190
          RMSE             : Train 136.4183, Val 137.1527, Test 137.5370
Best:
          R2_Score         : Train 0.2216, Val 0.2177, Test 0.2190
          RMSE             : Train 136.4183, Val 137.1527, Test 137.5370
Epoch 31: Loss:            : Train 0.0152, Val 0.0161, Test 0.0157
          R2_Score         : Train 0.2212, Val 0.2170, Test 0.2155
          RMSE             : Train 136.4483, Val 137.2105, Test 137.8380
Best:
          R2_Score         : Train 0.2216, Val 0.2177, Test 0.2190
          RMSE             : Train 136.4183, Val 137.1527, Test 137.5370
Epoch 32: Loss:            : Train 0.0152, Val 0.0166, Test 0.0162
          R2_Score         : Train 0.2197, Val 0.1929, Test 0.1960
          RMSE             : Train 136.5811, Val 139.3104, Test 139.5424
Best:
          R2_Score         : Train 0.2216, Val 0.2177, Test 0.2190
          RMSE             : Train 136.4183, Val 137.1527, Test 137.5370
Epoch 33: Loss:            : Train 0.0152, Val 0.0157, Test 0.0155
          R2_Score         : Train 0.2175, Val 0.2254, Test 0.2259
          RMSE             : Train 136.7713, Val 136.4736, Test 136.9218
Best:
          R2_Score         : Train 0.2175, Val 0.2254, Test 0.2259
          RMSE             : Train 136.7713, Val 136.4736, Test 136.9218
Epoch 34: Loss:            : Train 0.0151, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2250, Val 0.2269, Test 0.2300
          RMSE             : Train 136.1185, Val 136.3396, Test 136.5575
Best:
          R2_Score         : Train 0.2250, Val 0.2269, Test 0.2300
          RMSE             : Train 136.1185, Val 136.3396, Test 136.5575
Epoch 35: Loss:            : Train 0.0151, Val 0.0163, Test 0.0157
          R2_Score         : Train 0.2270, Val 0.2132, Test 0.2196
          RMSE             : Train 135.9379, Val 137.5406, Test 137.4780
Best:
          R2_Score         : Train 0.2250, Val 0.2269, Test 0.2300
          RMSE             : Train 136.1185, Val 136.3396, Test 136.5575
Epoch 36: Loss:            : Train 0.0152, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2228, Val 0.2224, Test 0.2230
          RMSE             : Train 136.3121, Val 136.7368, Test 137.1810
Best:
          R2_Score         : Train 0.2250, Val 0.2269, Test 0.2300
          RMSE             : Train 136.1185, Val 136.3396, Test 136.5575
Epoch 37: Loss:            : Train 0.0151, Val 0.0160, Test 0.0154
          R2_Score         : Train 0.2255, Val 0.2194, Test 0.2280
          RMSE             : Train 136.0717, Val 137.0005, Test 136.7350
Best:
          R2_Score         : Train 0.2250, Val 0.2269, Test 0.2300
          RMSE             : Train 136.1185, Val 136.3396, Test 136.5575
Epoch 38: Loss:            : Train 0.0151, Val 0.0158, Test 0.0155
          R2_Score         : Train 0.2259, Val 0.2244, Test 0.2212
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.06it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.35it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 12.00it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.64it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.68it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.57it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 56.13it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.06it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.44it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.50it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 19.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  8.57it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.60it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.57it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.47it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.97it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 23.43it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.79it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.65it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 44.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.55it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.89it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.63it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.51it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 25.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.16it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 10.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.51it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 18.00it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 25.67it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.39it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 20.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.00it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.27it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 11.03it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.21it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.16it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.66it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.55it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.78it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.45it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 19.33it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.78it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 14.64it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.63it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.95it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.93it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.30it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.89it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 22.86it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 20.95it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.27it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.79it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 31.51it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.61it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.72it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.38it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.01it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.53it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 12.94it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.57it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.77it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.67it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.78it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.74it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.37it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.90it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.90it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.20it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  8.07it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.46it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.95it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 72.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.35it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.48it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.07it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 15.67it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 13.09it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 45.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.04it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 17.94it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.81it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.40it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 24.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.08it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.28it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 37.03it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.66it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 10.88it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 13.33it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.40it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.23it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.51it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.93it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.37it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 24.17it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.11it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  8.35it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.24it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.31it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.85it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.67it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.84it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.63it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.34it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 65.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  3.98it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.43it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 10.96it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 12.45it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 12.13it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 12.03it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.04it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.01it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.51it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.31it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 30.89it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 17.88it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 13.01it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 63.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.12it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 11.25it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.52it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 11.02it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.79it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 14.09it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.75it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.48it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.13it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.25it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 13.87it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.80it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 33.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 11.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.20it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 27.66it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 10.06it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.18it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.12it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 14.94it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 65.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.71it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.31it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 32.95it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.59it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 13.37it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 30.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.11it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 29.33it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 22.42it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.07it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.53it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.59it/s]
          RMSE             : Train 136.0337, Val 136.5621, Test 137.3371
Best:
          R2_Score         : Train 0.2250, Val 0.2269, Test 0.2300
          RMSE             : Train 136.1185, Val 136.3396, Test 136.5575
Epoch 39: Loss:            : Train 0.0151, Val 0.0165, Test 0.0158
          R2_Score         : Train 0.2235, Val 0.2066, Test 0.2153
          RMSE             : Train 136.2459, Val 138.1149, Test 137.8583
Best:
          R2_Score         : Train 0.2250, Val 0.2269, Test 0.2300
          RMSE             : Train 136.1185, Val 136.3396, Test 136.5575
Epoch 40: Loss:            : Train 0.0150, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2295, Val 0.2329, Test 0.2278
          RMSE             : Train 135.7178, Val 135.8136, Test 136.7545
Best:
          R2_Score         : Train 0.2295, Val 0.2329, Test 0.2278
          RMSE             : Train 135.7178, Val 135.8136, Test 136.7545
Epoch 41: Loss:            : Train 0.0150, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2302, Val 0.2201, Test 0.2218
          RMSE             : Train 135.6581, Val 136.9403, Test 137.2828
Best:
          R2_Score         : Train 0.2295, Val 0.2329, Test 0.2278
          RMSE             : Train 135.7178, Val 135.8136, Test 136.7545
Epoch 42: Loss:            : Train 0.0150, Val 0.0161, Test 0.0155
          R2_Score         : Train 0.2294, Val 0.2105, Test 0.2227
          RMSE             : Train 135.7269, Val 137.7830, Test 137.2079
Best:
          R2_Score         : Train 0.2295, Val 0.2329, Test 0.2278
          RMSE             : Train 135.7178, Val 135.8136, Test 136.7545
Epoch 43: Loss:            : Train 0.0150, Val 0.0160, Test 0.0154
          R2_Score         : Train 0.2285, Val 0.2187, Test 0.2277
          RMSE             : Train 135.8051, Val 137.0631, Test 136.7623
Best:
          R2_Score         : Train 0.2295, Val 0.2329, Test 0.2278
          RMSE             : Train 135.7178, Val 135.8136, Test 136.7545
Epoch 44: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2347, Val 0.2256, Test 0.2342
          RMSE             : Train 135.2600, Val 136.4533, Test 136.1922
Best:
          R2_Score         : Train 0.2295, Val 0.2329, Test 0.2278
          RMSE             : Train 135.7178, Val 135.8136, Test 136.7545
Epoch 45: Loss:            : Train 0.0150, Val 0.0159, Test 0.0154
          R2_Score         : Train 0.2292, Val 0.2283, Test 0.2310
          RMSE             : Train 135.7453, Val 136.2162, Test 136.4705
Best:
          R2_Score         : Train 0.2295, Val 0.2329, Test 0.2278
          RMSE             : Train 135.7178, Val 135.8136, Test 136.7545
Epoch 46: Loss:            : Train 0.0150, Val 0.0158, Test 0.0156
          R2_Score         : Train 0.2307, Val 0.2243, Test 0.2183
          RMSE             : Train 135.6171, Val 136.5668, Test 137.5989
Best:
          R2_Score         : Train 0.2295, Val 0.2329, Test 0.2278
          RMSE             : Train 135.7178, Val 135.8136, Test 136.7545
Epoch 47: Loss:            : Train 0.0150, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2314, Val 0.2338, Test 0.2311
          RMSE             : Train 135.5492, Val 135.7263, Test 136.4647
Best:
          R2_Score         : Train 0.2314, Val 0.2338, Test 0.2311
          RMSE             : Train 135.5492, Val 135.7263, Test 136.4647
Epoch 48: Loss:            : Train 0.0150, Val 0.0160, Test 0.0156
          R2_Score         : Train 0.2322, Val 0.2156, Test 0.2222
          RMSE             : Train 135.4782, Val 137.3356, Test 137.2528
Best:
          R2_Score         : Train 0.2314, Val 0.2338, Test 0.2311
          RMSE             : Train 135.5492, Val 135.7263, Test 136.4647
Epoch 49: Loss:            : Train 0.0149, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2314, Val 0.2289, Test 0.2275
          RMSE             : Train 135.5510, Val 136.1595, Test 136.7846
Best:
          R2_Score         : Train 0.2314, Val 0.2338, Test 0.2311
          RMSE             : Train 135.5492, Val 135.7263, Test 136.4647
Epoch 50: Loss:            : Train 0.0149, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2335, Val 0.2337, Test 0.2367
          RMSE             : Train 135.3654, Val 135.7422, Test 135.9679
Best:
          R2_Score         : Train 0.2314, Val 0.2338, Test 0.2311
          RMSE             : Train 135.5492, Val 135.7263, Test 136.4647
Epoch 51: Loss:            : Train 0.0149, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2340, Val 0.2286, Test 0.2309
          RMSE             : Train 135.3224, Val 136.1868, Test 136.4855
Best:
          R2_Score         : Train 0.2314, Val 0.2338, Test 0.2311
          RMSE             : Train 135.5492, Val 135.7263, Test 136.4647
Epoch 52: Loss:            : Train 0.0150, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2296, Val 0.2303, Test 0.2319
          RMSE             : Train 135.7126, Val 136.0441, Test 136.3938
Best:
          R2_Score         : Train 0.2314, Val 0.2338, Test 0.2311
          RMSE             : Train 135.5492, Val 135.7263, Test 136.4647
Epoch 53: Loss:            : Train 0.0150, Val 0.0160, Test 0.0155
          R2_Score         : Train 0.2304, Val 0.2230, Test 0.2291
          RMSE             : Train 135.6444, Val 136.6881, Test 136.6452
Best:
          R2_Score         : Train 0.2314, Val 0.2338, Test 0.2311
          RMSE             : Train 135.5492, Val 135.7263, Test 136.4647
Epoch 54: Loss:            : Train 0.0149, Val 0.0160, Test 0.0155
          R2_Score         : Train 0.2339, Val 0.2252, Test 0.2264
          RMSE             : Train 135.3315, Val 136.4913, Test 136.8763
Best:
          R2_Score         : Train 0.2314, Val 0.2338, Test 0.2311
          RMSE             : Train 135.5492, Val 135.7263, Test 136.4647
Epoch 55: Loss:            : Train 0.0150, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2317, Val 0.2344, Test 0.2354
          RMSE             : Train 135.5304, Val 135.6817, Test 136.0850
Best:
          R2_Score         : Train 0.2317, Val 0.2344, Test 0.2354
          RMSE             : Train 135.5304, Val 135.6817, Test 136.0850
Epoch 56: Loss:            : Train 0.0149, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2352, Val 0.2302, Test 0.2316
          RMSE             : Train 135.2215, Val 136.0493, Test 136.4177
Best:
          R2_Score         : Train 0.2317, Val 0.2344, Test 0.2354
          RMSE             : Train 135.5304, Val 135.6817, Test 136.0850
Epoch 57: Loss:            : Train 0.0149, Val 0.0161, Test 0.0155
          R2_Score         : Train 0.2342, Val 0.2202, Test 0.2261
          RMSE             : Train 135.3022, Val 136.9260, Test 136.9039
Best:
          R2_Score         : Train 0.2317, Val 0.2344, Test 0.2354
          RMSE             : Train 135.5304, Val 135.6817, Test 136.0850
Epoch 58: Loss:            : Train 0.0149, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2335, Val 0.2338, Test 0.2406
          RMSE             : Train 135.3692, Val 135.7291, Test 135.6184
Best:
          R2_Score         : Train 0.2317, Val 0.2344, Test 0.2354
          RMSE             : Train 135.5304, Val 135.6817, Test 136.0850
Epoch 59: Loss:            : Train 0.0149, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2375, Val 0.2273, Test 0.2266
          RMSE             : Train 135.0100, Val 136.3040, Test 136.8670
Best:
          R2_Score         : Train 0.2317, Val 0.2344, Test 0.2354
          RMSE             : Train 135.5304, Val 135.6817, Test 136.0850
Epoch 60: Loss:            : Train 0.0149, Val 0.0158, Test 0.0154
          R2_Score         : Train 0.2343, Val 0.2305, Test 0.2291
          RMSE             : Train 135.2974, Val 136.0235, Test 136.6412
Best:
          R2_Score         : Train 0.2317, Val 0.2344, Test 0.2354
          RMSE             : Train 135.5304, Val 135.6817, Test 136.0850
Epoch 61: Loss:            : Train 0.0148, Val 0.0158, Test 0.0152
          R2_Score         : Train 0.2370, Val 0.2311, Test 0.2392
          RMSE             : Train 135.0542, Val 135.9683, Test 135.7437

Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.29it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.18it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 25.42it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 14.23it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  6.21it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  9.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.13it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.04it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 28.88it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 13.57it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.89it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 12.88it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.72it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 58.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.29it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 24.59it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.28it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 21.31it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.95it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 29.87it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 28.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.17it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  7.53it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 12.74it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.16it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.49it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.04it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.72it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.77it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  8.71it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.92it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 15.47it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.93it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.88it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.67it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 24.70it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.01it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.35it/s]Test:  80%|████████  | 4/5 [00:00<00:00,  9.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 32.08it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.16it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 23.96it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.98it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.30it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  7.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 20.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 36.46it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 29.78it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.12it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.80it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.98it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 31.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.90it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.44it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.73it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.28it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 27.18it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 11.15it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.64it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.28it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 32.07it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.27it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.28it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 11.95it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 24.04it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.90it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.27it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.38it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.80it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01, 10.00it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.78it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.36it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 24.46it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 46.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.48it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 10.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.08it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  9.05it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.31it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.46it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.84it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.52it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.68it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 10.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 27.56it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.64it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.48it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.28it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 13.46it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.10it/s]Train:  38%|███▊      | 6/16 [00:00<00:01,  7.43it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 13.76it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.04it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.25it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 18.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.92it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.64it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.61it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 13.13it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 16.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  6.62it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  9.76it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.10it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 18.32it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 19.46it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 17.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  8.04it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.69it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.73it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.01it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.10it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.48it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 14.33it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.85it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.53it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  4.69it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  8.06it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.09it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 11.17it/s]Train:  75%|███████▌  | 12/16 [00:01<00:00, 13.92it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00,  9.92it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 10.92it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 48.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.11it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.22it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.33it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 19.29it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.26it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 46.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 14.22it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.69it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  7.74it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.47it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.66it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.67it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 44.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 15.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.04it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 11.33it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.03it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 16.68it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.81it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.75it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.39it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.93it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 25.24it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.24it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 11.37it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.28it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.88it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.06it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.66it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.37it/s]Best:
          R2_Score         : Train 0.2317, Val 0.2344, Test 0.2354
          RMSE             : Train 135.5304, Val 135.6817, Test 136.0850
Epoch 62: Loss:            : Train 0.0149, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2342, Val 0.2295, Test 0.2264
          RMSE             : Train 135.3044, Val 136.1127, Test 136.8815
Best:
          R2_Score         : Train 0.2317, Val 0.2344, Test 0.2354
          RMSE             : Train 135.5304, Val 135.6817, Test 136.0850
Epoch 63: Loss:            : Train 0.0149, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2329, Val 0.2367, Test 0.2369
          RMSE             : Train 135.4234, Val 135.4756, Test 135.9479
Best:
          R2_Score         : Train 0.2329, Val 0.2367, Test 0.2369
          RMSE             : Train 135.4234, Val 135.4756, Test 135.9479
Epoch 64: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2377, Val 0.2349, Test 0.2317
          RMSE             : Train 134.9950, Val 135.6323, Test 136.4067
Best:
          R2_Score         : Train 0.2329, Val 0.2367, Test 0.2369
          RMSE             : Train 135.4234, Val 135.4756, Test 135.9479
Epoch 65: Loss:            : Train 0.0149, Val 0.0157, Test 0.0154
          R2_Score         : Train 0.2345, Val 0.2375, Test 0.2310
          RMSE             : Train 135.2748, Val 135.4031, Test 136.4704
Best:
          R2_Score         : Train 0.2345, Val 0.2375, Test 0.2310
          RMSE             : Train 135.2748, Val 135.4031, Test 136.4704
Epoch 66: Loss:            : Train 0.0148, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2379, Val 0.2271, Test 0.2356
          RMSE             : Train 134.9758, Val 136.3253, Test 136.0609
Best:
          R2_Score         : Train 0.2345, Val 0.2375, Test 0.2310
          RMSE             : Train 135.2748, Val 135.4031, Test 136.4704
Epoch 67: Loss:            : Train 0.0149, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2367, Val 0.2366, Test 0.2327
          RMSE             : Train 135.0866, Val 135.4833, Test 136.3247
Best:
          R2_Score         : Train 0.2345, Val 0.2375, Test 0.2310
          RMSE             : Train 135.2748, Val 135.4031, Test 136.4704
Epoch 68: Loss:            : Train 0.0149, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2370, Val 0.2363, Test 0.2410
          RMSE             : Train 135.0549, Val 135.5121, Test 135.5854
Best:
          R2_Score         : Train 0.2345, Val 0.2375, Test 0.2310
          RMSE             : Train 135.2748, Val 135.4031, Test 136.4704
Epoch 69: Loss:            : Train 0.0148, Val 0.0156, Test 0.0153
          R2_Score         : Train 0.2387, Val 0.2321, Test 0.2333
          RMSE             : Train 134.9103, Val 135.8783, Test 136.2699
Best:
          R2_Score         : Train 0.2345, Val 0.2375, Test 0.2310
          RMSE             : Train 135.2748, Val 135.4031, Test 136.4704
Epoch 70: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2423, Val 0.2406, Test 0.2409
          RMSE             : Train 134.5911, Val 135.1267, Test 135.5952
Best:
          R2_Score         : Train 0.2423, Val 0.2406, Test 0.2409
          RMSE             : Train 134.5911, Val 135.1267, Test 135.5952
Epoch 71: Loss:            : Train 0.0149, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2361, Val 0.2386, Test 0.2414
          RMSE             : Train 135.1380, Val 135.3035, Test 135.5487
Best:
          R2_Score         : Train 0.2423, Val 0.2406, Test 0.2409
          RMSE             : Train 134.5911, Val 135.1267, Test 135.5952
Epoch 72: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2396, Val 0.2388, Test 0.2401
          RMSE             : Train 134.8290, Val 135.2907, Test 135.6618
Best:
          R2_Score         : Train 0.2423, Val 0.2406, Test 0.2409
          RMSE             : Train 134.5911, Val 135.1267, Test 135.5952
Epoch 73: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2400, Val 0.2333, Test 0.2335
          RMSE             : Train 134.7951, Val 135.7749, Test 136.2492
Best:
          R2_Score         : Train 0.2423, Val 0.2406, Test 0.2409
          RMSE             : Train 134.5911, Val 135.1267, Test 135.5952
Epoch 74: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2395, Val 0.2415, Test 0.2414
          RMSE             : Train 134.8401, Val 135.0427, Test 135.5484
Best:
          R2_Score         : Train 0.2395, Val 0.2415, Test 0.2414
          RMSE             : Train 134.8401, Val 135.0427, Test 135.5484
Epoch 75: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 76: Loss:            : Train 0.0148, Val 0.0159, Test 0.0153
          R2_Score         : Train 0.2385, Val 0.2269, Test 0.2341
          RMSE             : Train 134.9227, Val 136.3423, Test 136.1970
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 77: Loss:            : Train 0.0149, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2371, Val 0.2399, Test 0.2375
          RMSE             : Train 135.0489, Val 135.1880, Test 135.8917
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 78: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2421, Val 0.2370, Test 0.2363
          RMSE             : Train 134.6035, Val 135.4439, Test 136.0003
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 79: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2375, Val 0.2369, Test 0.2381
          RMSE             : Train 135.0124, Val 135.4580, Test 135.8384
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 80: Loss:            : Train 0.0149, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2371, Val 0.2357, Test 0.2395
          RMSE             : Train 135.0480, Val 135.5621, Test 135.7136
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 81: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2401, Val 0.2332, Test 0.2375
          RMSE             : Train 134.7850, Val 135.7814, Test 135.8920
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 82: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2398, Val 0.2286, Test 0.2278
          RMSE             : Train 134.8080, Val 136.1896, Test 136.7600
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 83: Loss:            : Train 0.0148, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2389, Val 0.2306, Test 0.2333
          RMSE             : Train 134.8929, Val 136.0160, Test 136.2719
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 84: Loss:            : Train 0.0148, Val 0.0159, Test 0.0152
          R2_Score         : Train 0.2384, Val 0.2310, Test 0.2392
          RMSE             : Train 134.9350, Val 135.9766, Test 135.7451
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 26.51it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.29it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.22it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.80it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.45it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 19.08it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.88it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 14.07it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 11.57it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 15.70it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 16.73it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 54.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.28it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 15.03it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.06it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.60it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.84it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.03it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.30it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.35it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 17.32it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.13it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.01it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 44.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 39.00it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.83it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.71it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.03it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.82it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.07it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.40it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.23it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 11.01it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.23it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.64it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.63it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 27.36it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.28it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 14.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.72it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 39.29it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.38it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.97it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.96it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 27.33it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 27.11it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.27it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 29.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.06it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.63it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.44it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.07it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 24.01it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.51it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.29it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.74it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 85.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.24it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 22.87it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.75it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.69it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.99it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 21.07it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.27it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.02it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.73it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 21.16it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 26.69it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.94it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 40.18it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  8.36it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 12.33it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 13.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.54it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 30.45it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.54it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.84it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 22.49it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 14.60it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.48it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.50it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 55.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  8.44it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.45it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 33.02it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 27.49it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 72.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 24.07it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.39it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.43it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 11.79it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.19it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 12.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.05it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  7.72it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.28it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 26.49it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.73it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.68it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 15.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.19it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 85.51it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 25.17it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.52it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 22.72it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.69it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 48.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 48.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.48it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.33it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.92it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 11.30it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 38.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  2.92it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  7.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00,  9.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.86it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 21.98it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 12.51it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 13.51it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.91it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 30.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  5.82it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.06it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 13.18it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 26.92it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 24.91it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 16.24it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 17.02it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.70it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.77it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.46it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.09it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 14.27it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.54it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.50it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.62it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 36.64it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.14it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.28it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.38it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 14.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.32it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 28.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 38.34it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 13.26it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 14.51it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.71it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.94it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.51it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.33it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.32it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.06it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.17it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 11.22it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 53.75it/s]
Epoch 85: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2400, Val 0.2330, Test 0.2400
          RMSE             : Train 134.7947, Val 135.8014, Test 135.6733
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 86: Loss:            : Train 0.0148, Val 0.0156, Test 0.0155
          R2_Score         : Train 0.2411, Val 0.2363, Test 0.2259
          RMSE             : Train 134.6917, Val 135.5085, Test 136.9258
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 87: Loss:            : Train 0.0148, Val 0.0161, Test 0.0155
          R2_Score         : Train 0.2377, Val 0.2235, Test 0.2299
          RMSE             : Train 134.9956, Val 136.6443, Test 136.5674
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 88: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2399, Val 0.2339, Test 0.2376
          RMSE             : Train 134.7976, Val 135.7217, Test 135.8902
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 89: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2384, Val 0.2360, Test 0.2353
          RMSE             : Train 134.9333, Val 135.5335, Test 136.0936
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 90: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2402, Val 0.2329, Test 0.2386
          RMSE             : Train 134.7765, Val 135.8072, Test 135.7951
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 91: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2415, Val 0.2430, Test 0.2422
          RMSE             : Train 134.6608, Val 134.9150, Test 135.4750
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 92: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2410, Val 0.2363, Test 0.2369
          RMSE             : Train 134.6995, Val 135.5113, Test 135.9504
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 93: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2396, Val 0.2408, Test 0.2389
          RMSE             : Train 134.8299, Val 135.1061, Test 135.7712
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 94: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2412, Val 0.2432, Test 0.2413
          RMSE             : Train 134.6901, Val 134.8953, Test 135.5528
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 95: Loss:            : Train 0.0148, Val 0.0158, Test 0.0152
          R2_Score         : Train 0.2392, Val 0.2327, Test 0.2386
          RMSE             : Train 134.8662, Val 135.8315, Test 135.7936
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 96: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2394, Val 0.2370, Test 0.2387
          RMSE             : Train 134.8474, Val 135.4462, Test 135.7839
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 97: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2396, Val 0.2383, Test 0.2386
          RMSE             : Train 134.8314, Val 135.3293, Test 135.8011
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 98: Loss:            : Train 0.0148, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2424, Val 0.2395, Test 0.2377
          RMSE             : Train 134.5766, Val 135.2268, Test 135.8808
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 99: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2398, Val 0.2382, Test 0.2437
          RMSE             : Train 134.8123, Val 135.3417, Test 135.3380
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 100: Loss:            : Train 0.0147, Val 0.0158, Test 0.0153
          R2_Score         : Train 0.2428, Val 0.2389, Test 0.2391
          RMSE             : Train 134.5401, Val 135.2743, Test 135.7558
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 101: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2409, Val 0.2403, Test 0.2437
          RMSE             : Train 134.7122, Val 135.1576, Test 135.3411
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 102: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2441, Val 0.2435, Test 0.2444
          RMSE             : Train 134.4291, Val 134.8691, Test 135.2825
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 103: Loss:            : Train 0.0148, Val 0.0161, Test 0.0154
          R2_Score         : Train 0.2415, Val 0.2282, Test 0.2321
          RMSE             : Train 134.6602, Val 136.2237, Test 136.3757
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 104: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2411, Val 0.2413, Test 0.2401
          RMSE             : Train 134.6989, Val 135.0663, Test 135.6613
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 105: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2417, Val 0.2385, Test 0.2403
          RMSE             : Train 134.6384, Val 135.3174, Test 135.6448
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 106: Loss:            : Train 0.0148, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2407, Val 0.2360, Test 0.2394
          RMSE             : Train 134.7263, Val 135.5339, Test 135.7251
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 107: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2404, Val 0.2356, Test 0.2390
          RMSE             : Train 134.7561, Val 135.5717, Test 135.7592
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 108: Loss:            : Train 0.0148, Val 0.0157, Test 0.0152
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.29it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  8.03it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 11.59it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.38it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 16.91it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 30.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.47it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 21.10it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.17it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 20.91it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.97it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 37.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  9.63it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.98it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 29.03it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 24.77it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.47it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 23.05it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 57.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 23.67it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 30.01it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.39it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.87it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.47it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 28.27it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 28.22it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.14it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 22.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 28.21it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.22it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 26.99it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.50it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.12it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.91it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.40it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.18it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 13.15it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.47it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.25it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.64it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.23it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.19it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.05it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.24it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.00it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 66.87it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 27.16it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 31.01it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.88it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 15.58it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 17.14it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 34.82it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 31.98it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 28.27it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.37it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.60it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.37it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.94it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 27.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.28it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.82it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 10.15it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.68it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 10.79it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 13.06it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.60it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.10it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.79it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00,  7.08it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 10.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 29.24it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 23.17it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 15.72it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 14.91it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 16.14it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.81it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 17.69it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.75it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.79it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 12.44it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 18.07it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 20.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 21.80it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 19.25it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.23it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 18.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.18it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 34.76it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 37.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.79it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.17it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 12.83it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 18.78it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.13it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.99it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.40it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 15.58it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 14.53it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 16.86it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.13it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.64it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  7.16it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 17.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.95it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.37it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.98it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.99it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 24.77it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.76it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 58.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.71it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.82it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.85it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 17.43it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.53it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.17it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 15.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.28it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 40.03it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.35it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 26.04it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 21.98it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.14it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.22it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.21it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 24.38it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 34.78it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.68it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.19it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.82it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.39it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.84it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 36.23it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.46it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 33.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.97it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 20.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.50it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 45.67it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 27.53it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 29.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.35it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.55it/s]
          R2_Score         : Train 0.2432, Val 0.2330, Test 0.2375
          RMSE             : Train 134.5048, Val 135.8024, Test 135.8958
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 109: Loss:            : Train 0.0148, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2416, Val 0.2401, Test 0.2389
          RMSE             : Train 134.6468, Val 135.1724, Test 135.7684
Best:
          R2_Score         : Train 0.2367, Val 0.2438, Test 0.2390
          RMSE             : Train 135.0802, Val 134.8445, Test 135.7595
Epoch 110: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Best:
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Epoch 111: Loss:            : Train 0.0148, Val 0.0159, Test 0.0155
          R2_Score         : Train 0.2392, Val 0.2324, Test 0.2282
          RMSE             : Train 134.8672, Val 135.8578, Test 136.7253
Best:
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Epoch 112: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2403, Val 0.2427, Test 0.2437
          RMSE             : Train 134.7643, Val 134.9413, Test 135.3373
Best:
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Epoch 113: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2446, Val 0.2401, Test 0.2424
          RMSE             : Train 134.3856, Val 135.1740, Test 135.4606
Best:
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Epoch 114: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2445, Val 0.2372, Test 0.2437
          RMSE             : Train 134.3912, Val 135.4276, Test 135.3452
Best:
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Epoch 115: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2442, Val 0.2361, Test 0.2406
          RMSE             : Train 134.4217, Val 135.5266, Test 135.6182
Best:
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Epoch 116: Loss:            : Train 0.0148, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2413, Val 0.2447, Test 0.2472
          RMSE             : Train 134.6729, Val 134.7609, Test 135.0260
Best:
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Epoch 117: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2442, Val 0.2369, Test 0.2417
          RMSE             : Train 134.4176, Val 135.4600, Test 135.5186
Best:
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Epoch 118: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2432, Val 0.2435, Test 0.2462
          RMSE             : Train 134.5103, Val 134.8649, Test 135.1209
Best:
          R2_Score         : Train 0.2410, Val 0.2454, Test 0.2415
          RMSE             : Train 134.7029, Val 134.7019, Test 135.5391
Epoch 119: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 120: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2427, Val 0.2428, Test 0.2467
          RMSE             : Train 134.5521, Val 134.9303, Test 135.0704
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 121: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2449, Val 0.2415, Test 0.2410
          RMSE             : Train 134.3591, Val 135.0465, Test 135.5799
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 122: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2447, Val 0.2465, Test 0.2468
          RMSE             : Train 134.3710, Val 134.6036, Test 135.0613
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 123: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2440, Val 0.2432, Test 0.2413
          RMSE             : Train 134.4359, Val 134.8980, Test 135.5543
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 124: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2441, Val 0.2383, Test 0.2437
          RMSE             : Train 134.4316, Val 135.3311, Test 135.3409
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 125: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2442, Val 0.2408, Test 0.2419
          RMSE             : Train 134.4177, Val 135.1061, Test 135.5038
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 126: Loss:            : Train 0.0147, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2436, Val 0.2349, Test 0.2381
          RMSE             : Train 134.4753, Val 135.6329, Test 135.8445
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 127: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2435, Val 0.2412, Test 0.2465
          RMSE             : Train 134.4836, Val 135.0720, Test 135.0906
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 128: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2450, Val 0.2457, Test 0.2471
          RMSE             : Train 134.3484, Val 134.6726, Test 135.0379
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 129: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2451, Val 0.2440, Test 0.2441
          RMSE             : Train 134.3423, Val 134.8209, Test 135.3094
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 130: Loss:            : Train 0.0147, Val 0.0155, Test 0.0153
          R2_Score         : Train 0.2453, Val 0.2394, Test 0.2340
          RMSE             : Train 134.3213, Val 135.2318, Test 136.2072
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 131: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2433, Val 0.2469, Test 0.2453
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.13it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.65it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 19.79it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 25.14it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.63it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.51it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 14.31it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 15.32it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  7.13it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.11it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.30it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.89it/s]Train:  50%|█████     | 8/16 [00:00<00:00,  9.57it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.83it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 13.54it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 45.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  8.21it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.25it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 31.26it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 25.45it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.66it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.22it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 98.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 10.53it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.35it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 23.91it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.26it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.38it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.18it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 20.04it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.28it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.53it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 17.87it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 23.02it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 23.15it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.27it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.85it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 22.97it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.20it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 29.85it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 20.74it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 22.57it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.84it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.72it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.20it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.16it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 43.63it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 19.47it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.94it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.02it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 21.93it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 87.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.45it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 13.92it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 15.13it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.52it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.98it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 47.98it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 47.74it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.63it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 13.38it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 11.45it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.80it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 14.60it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.50it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 43.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:01,  3.52it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 14.99it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.24it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 13.55it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.94it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 11.56it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.27it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 13.37it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.58it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 39.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.82it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.41it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.33it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  7.89it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.22it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 16.45it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 15.98it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 32.07it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  6.96it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 11.28it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 12.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.73it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 12.71it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 11.59it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.04it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 20.52it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.66it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 18.29it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 25.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 12.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.65it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 31.61it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.72it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.53it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.59it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 26.10it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.60it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 41.16it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.10it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.36it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.78it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 17.41it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.57it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.52it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 30.15it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.29it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 24.66it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.21it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.85it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 28.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.64it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:03,  4.76it/s]Train:  19%|█▉        | 3/16 [00:00<00:01,  9.29it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 12.35it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 13.92it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 23.25it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 22.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 68.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 36.19it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 41.93it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  6.76it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 14.08it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 15.33it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 22.27it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 73.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 48.10it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 48.01it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.69it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 24.66it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 17.03it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.39it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.82it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.48it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.48it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 28.43it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.26it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 24.88it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 19.92it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.87it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 25.79it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.39it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.82it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 19.01it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.95it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.24it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 69.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 13.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.71it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.57it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 16.76it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.75it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.40it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.12it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 20.43it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 23.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 41.33it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 29.00it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 27.72it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.83it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 18.30it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.60it/s]
          RMSE             : Train 134.5035, Val 134.5665, Test 135.1980
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 132: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2429, Val 0.2446, Test 0.2481
          RMSE             : Train 134.5383, Val 134.7737, Test 134.9497
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 133: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2456, Val 0.2415, Test 0.2435
          RMSE             : Train 134.2904, Val 135.0490, Test 135.3602
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 134: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2460, Val 0.2442, Test 0.2427
          RMSE             : Train 134.2595, Val 134.8097, Test 135.4263
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 135: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2444, Val 0.2430, Test 0.2445
          RMSE             : Train 134.4019, Val 134.9167, Test 135.2726
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 136: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2430, Val 0.2411, Test 0.2418
          RMSE             : Train 134.5271, Val 135.0852, Test 135.5111
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 137: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2446, Val 0.2451, Test 0.2395
          RMSE             : Train 134.3815, Val 134.7227, Test 135.7156
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 138: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2443, Val 0.2421, Test 0.2428
          RMSE             : Train 134.4080, Val 134.9937, Test 135.4180
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 139: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2462, Val 0.2397, Test 0.2415
          RMSE             : Train 134.2432, Val 135.2102, Test 135.5337
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 140: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2446, Val 0.2408, Test 0.2438
          RMSE             : Train 134.3799, Val 135.1122, Test 135.3354
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 141: Loss:            : Train 0.0147, Val 0.0156, Test 0.0150
          R2_Score         : Train 0.2448, Val 0.2447, Test 0.2508
          RMSE             : Train 134.3643, Val 134.7610, Test 134.7082
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 142: Loss:            : Train 0.0147, Val 0.0159, Test 0.0152
          R2_Score         : Train 0.2463, Val 0.2357, Test 0.2421
          RMSE             : Train 134.2330, Val 135.5645, Test 135.4820
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 143: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2455, Val 0.2412, Test 0.2435
          RMSE             : Train 134.3032, Val 135.0758, Test 135.3580
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 144: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2447, Val 0.2431, Test 0.2447
          RMSE             : Train 134.3781, Val 134.9052, Test 135.2505
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 145: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2451, Val 0.2352, Test 0.2374
          RMSE             : Train 134.3370, Val 135.6077, Test 135.9018
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 146: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2431, Val 0.2370, Test 0.2422
          RMSE             : Train 134.5180, Val 135.4494, Test 135.4717
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 147: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2438, Val 0.2398, Test 0.2454
          RMSE             : Train 134.4574, Val 135.2020, Test 135.1899
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 148: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2460, Val 0.2417, Test 0.2441
          RMSE             : Train 134.2622, Val 135.0315, Test 135.3019
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 149: Loss:            : Train 0.0146, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2473, Val 0.2456, Test 0.2446
          RMSE             : Train 134.1474, Val 134.6831, Test 135.2585
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 150: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2454, Val 0.2446, Test 0.2448
          RMSE             : Train 134.3170, Val 134.7697, Test 135.2400
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 151: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2447, Val 0.2433, Test 0.2468
          RMSE             : Train 134.3705, Val 134.8873, Test 135.0634
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 152: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2466, Val 0.2375, Test 0.2440
          RMSE             : Train 134.2095, Val 135.4058, Test 135.3183
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 153: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2462, Val 0.2392, Test 0.2463
          RMSE             : Train 134.2402, Val 135.2485, Test 135.1100
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 154: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2470, Val 0.2465, Test 0.2490
          RMSE             : Train 134.1684, Val 134.5995, Test 134.8663
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  5.29it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.61it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 18.41it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.34it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 18.18it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.05it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.75it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.42it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 15.65it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 47.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 47.77it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.87it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 30.81it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.13it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 18.53it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 20.69it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 37.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.59it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.67it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.43it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 35.79it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.66it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 16.08it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 19.75it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.68it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 12.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.96it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 16.62it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 29.46it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.57it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 16.31it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.49it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 84.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 15.47it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.22it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 18.24it/s]Train:  25%|██▌       | 4/16 [00:00<00:01,  7.38it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.73it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 17.24it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.73it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 10.66it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 15.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 14.12it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 20.76it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.22it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 15.59it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.14it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 24.33it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 19.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.57it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 35.94it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.18it/s]Test:  80%|████████  | 4/5 [00:00<00:00,  9.49it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 11.97it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.68it/s]Train:  31%|███▏      | 5/16 [00:00<00:01,  6.79it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 14.02it/s]Train:  81%|████████▏ | 13/16 [00:01<00:00, 13.70it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.37it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  3.12it/s]Val: 100%|██████████| 3/3 [00:00<00:00,  7.51it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 25.45it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.49it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 27.42it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 16.44it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 15.05it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 10.30it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 13.21it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.20it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.74it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.83it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.59it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:02,  6.43it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 16.81it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.49it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.49it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 13.30it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 15.75it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 15.95it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.80it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 12.96it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.40it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 15.76it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 18.50it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 18.60it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.97it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 20.55it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.86it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 23.80it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  4.86it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 18.38it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.07it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 26.81it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 18.96it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 17.94it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 17.62it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.44it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 31.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 19.46it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.14it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 19.96it/s]Train:  25%|██▌       | 4/16 [00:00<00:01, 11.85it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 12.70it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00,  9.87it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 11.47it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 14.97it/s]Train: 100%|██████████| 16/16 [00:01<00:00,  9.99it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 11.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 79.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 18.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.04it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 22.47it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 34.67it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 21.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 13.59it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 16.64it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 53.27it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.41it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.05it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 26.93it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.94it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 18.78it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 23.56it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 21.16it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 40.40it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.51it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.66it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 16.57it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.43it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 15.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 18.03it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  4.41it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 11.67it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.62it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.58it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 29.57it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 15.53it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 19.79it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 15.22it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 17.06it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 17.45it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  9.18it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  6.74it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 10.34it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 26.67it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 29.59it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  8.57it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.62it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 22.83it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 22.48it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.20it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.31it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.88it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 33.74it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 38.94it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  7.34it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 15.13it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 14.94it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 20.46it/s]Train:  94%|█████████▍| 15/16 [00:01<00:00, 12.91it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 14.14it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 52.88it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.22it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 24.33it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:02,  4.82it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 13.52it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00,  9.08it/s]Train:  88%|████████▊ | 14/16 [00:01<00:00, 13.67it/s]Train: 100%|██████████| 16/16 [00:01<00:00, 13.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 34.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 11.17it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.13it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.74it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 22.48it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 16.80it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 21.04it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 22.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 76.30it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.37it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 29.77it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 29.81it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 28.82it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 19.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 48.17it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 14.92it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 22.63it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 28.66it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 16.10it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 16.45it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 19.47it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  6.53it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.90it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.34it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 41.86it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 34.39it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.48it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 34.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 19.21it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.48it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.70it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 36.63it/s]
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 155: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2456, Val 0.2467, Test 0.2495
          RMSE             : Train 134.2924, Val 134.5840, Test 134.8208
Best:
          R2_Score         : Train 0.2428, Val 0.2472, Test 0.2429
          RMSE             : Train 134.5442, Val 134.5394, Test 135.4155
Epoch 156: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 157: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2448, Val 0.2485, Test 0.2481
          RMSE             : Train 134.3626, Val 134.4181, Test 134.9480
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 158: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2453, Val 0.2365, Test 0.2430
          RMSE             : Train 134.3248, Val 135.4868, Test 135.3997
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 159: Loss:            : Train 0.0146, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2475, Val 0.2424, Test 0.2476
          RMSE             : Train 134.1258, Val 134.9645, Test 134.9936
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 160: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2467, Val 0.2417, Test 0.2444
          RMSE             : Train 134.1971, Val 135.0269, Test 135.2750
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 161: Loss:            : Train 0.0147, Val 0.0154, Test 0.0149
          R2_Score         : Train 0.2465, Val 0.2486, Test 0.2524
          RMSE             : Train 134.2147, Val 134.4168, Test 134.5623
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 162: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2464, Val 0.2421, Test 0.2463
          RMSE             : Train 134.2206, Val 134.9973, Test 135.1113
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 163: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2469, Val 0.2463, Test 0.2487
          RMSE             : Train 134.1792, Val 134.6187, Test 134.8959
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 164: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2455, Val 0.2338, Test 0.2331
          RMSE             : Train 134.2997, Val 135.7321, Test 136.2899
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 165: Loss:            : Train 0.0148, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2411, Val 0.2467, Test 0.2455
          RMSE             : Train 134.6934, Val 134.5846, Test 135.1777
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 166: Loss:            : Train 0.0148, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2422, Val 0.2453, Test 0.2424
          RMSE             : Train 134.5937, Val 134.7096, Test 135.4576
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 167: Loss:            : Train 0.0147, Val 0.0157, Test 0.0153
          R2_Score         : Train 0.2443, Val 0.2377, Test 0.2355
          RMSE             : Train 134.4138, Val 135.3836, Test 136.0695
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 168: Loss:            : Train 0.0147, Val 0.0155, Test 0.0152
          R2_Score         : Train 0.2451, Val 0.2384, Test 0.2389
          RMSE             : Train 134.3360, Val 135.3189, Test 135.7687
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 169: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2454, Val 0.2477, Test 0.2488
          RMSE             : Train 134.3127, Val 134.4895, Test 134.8848
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 170: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2462, Val 0.2372, Test 0.2412
          RMSE             : Train 134.2385, Val 135.4311, Test 135.5646
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 171: Loss:            : Train 0.0147, Val 0.0157, Test 0.0152
          R2_Score         : Train 0.2443, Val 0.2416, Test 0.2405
          RMSE             : Train 134.4069, Val 135.0388, Test 135.6246
Best:
          R2_Score         : Train 0.2458, Val 0.2486, Test 0.2466
          RMSE             : Train 134.2775, Val 134.4137, Test 135.0833
Epoch 172: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 173: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2467, Val 0.2487, Test 0.2488
          RMSE             : Train 134.1966, Val 134.4029, Test 134.8870
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 174: Loss:            : Train 0.0146, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2481, Val 0.2454, Test 0.2480
          RMSE             : Train 134.0753, Val 134.7033, Test 134.9545
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 175: Loss:            : Train 0.0146, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2477, Val 0.2466, Test 0.2489
          RMSE             : Train 134.1081, Val 134.5952, Test 134.8772
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 176: Loss:            : Train 0.0146, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2477, Val 0.2456, Test 0.2476
          RMSE             : Train 134.1053, Val 134.6794, Test 134.9950
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 177: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2445, Val 0.2464, Test 0.2445
          RMSE             : Train 134.3924, Val 134.6077, Test 135.2689
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 43.14it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 38.59it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 35.60it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 38.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00,  9.65it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 14.12it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 27.32it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 34.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 29.43it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.76it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 35.12it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 36.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.36it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  5.00it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.12it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01, 10.44it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 23.32it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 25.25it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.81it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 66.02it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.42it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 26.55it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 14.34it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 22.16it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 27.51it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.56it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 64.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 17.14it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 30.06it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 18.82it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 28.40it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 26.34it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 21.92it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.74it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.13it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 24.54it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.12it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 23.25it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 30.43it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 29.43it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.70it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 40.23it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 21.48it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.25it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 24.72it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.42it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 24.54it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 31.78it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 26.61it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.36it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 23.58it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 27.92it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 43.13it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 35.93it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 28.00it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 14.53it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.78it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 25.08it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 33.70it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.88it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 27.33it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 29.63it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 22.11it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.05it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 13.78it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 19.86it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 49.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 49.68it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:   6%|▋         | 1/16 [00:00<00:01,  9.35it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.68it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 17.55it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 21.93it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.66it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 18.91it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.84it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.11it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 33.71it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 30.73it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 27.35it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.46it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 71.69it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.79it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 21.17it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 19.73it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 32.47it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 29.21it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.98it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  67%|██████▋   | 2/3 [00:00<00:00, 17.47it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 22.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00,  9.90it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 19.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:00, 25.27it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 25.37it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 26.15it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 30.90it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 30.10it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 30.29it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 16.13it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 13.81it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 17.24it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 25.14it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 32.46it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 29.67it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.84it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.02it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 26.99it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 23.85it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 28.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 26.97it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 36.41it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 31.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 31.33it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.60it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 13.15it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 27.11it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 31.83it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 45.78it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 39.46it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 36.86it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 38.89it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.17it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 29.09it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.36it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 14.52it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 21.74it/s]Train:  75%|███████▌  | 12/16 [00:00<00:00, 30.19it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.28it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.70it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 27.62it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 59.46it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:00, 16.84it/s]Train:  44%|████▍     | 7/16 [00:00<00:00, 34.13it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 33.00it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 32.32it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 32.47it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 36.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  20%|██        | 1/5 [00:00<00:00,  6.01it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 16.29it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 16.75it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  12%|█▎        | 2/16 [00:00<00:01,  9.31it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 24.06it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 28.85it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 27.87it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 61.25it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  40%|████      | 2/5 [00:00<00:00, 13.38it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 25.42it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  19%|█▉        | 3/16 [00:00<00:01, 11.43it/s]Train:  38%|███▊      | 6/16 [00:00<00:00, 17.65it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 20.62it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 27.96it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 24.38it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 91.59it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 28.55it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 39.19it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  25%|██▌       | 4/16 [00:00<00:00, 26.45it/s]Train:  56%|█████▋    | 9/16 [00:00<00:00, 36.37it/s]Train:  81%|████████▏ | 13/16 [00:00<00:00, 31.83it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 25.08it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 67.04it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  60%|██████    | 3/5 [00:00<00:00, 23.89it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 32.43it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 25.52it/s]Train:  50%|█████     | 8/16 [00:00<00:00, 27.05it/s]Train:  69%|██████▉   | 11/16 [00:00<00:00, 21.86it/s]Train:  94%|█████████▍| 15/16 [00:00<00:00, 25.42it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 23.55it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 70.77it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test:  80%|████████  | 4/5 [00:00<00:00, 30.60it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.45it/s]
Train:   0%|          | 0/16 [00:00<?, ?it/s]Train:  31%|███▏      | 5/16 [00:00<00:00, 27.19it/s]Train:  62%|██████▎   | 10/16 [00:00<00:00, 36.05it/s]Train:  88%|████████▊ | 14/16 [00:00<00:00, 24.71it/s]Train: 100%|██████████| 16/16 [00:00<00:00, 28.35it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Val:   0%|          | 0/3 [00:00<?, ?it/s]Val:  33%|███▎      | 1/3 [00:00<00:00,  5.91it/s]Val: 100%|██████████| 3/3 [00:00<00:00, 16.11it/s]
/home/zhaomin/project/FedSim/src/model/vertical_fl/OnePartyModel.py:370: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  val_dataset = TensorDataset(torch.tensor(val_X).float(), torch.tensor(val_y).float())
Test:   0%|          | 0/5 [00:00<?, ?it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.95it/s]Test: 100%|██████████| 5/5 [00:00<00:00, 35.88it/s]
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 178: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2457, Val 0.2469, Test 0.2472
          RMSE             : Train 134.2890, Val 134.5635, Test 135.0237
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 179: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2461, Val 0.2423, Test 0.2459
          RMSE             : Train 134.2466, Val 134.9752, Test 135.1422
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 180: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2460, Val 0.2449, Test 0.2469
          RMSE             : Train 134.2578, Val 134.7428, Test 135.0505
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 181: Loss:            : Train 0.0147, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2457, Val 0.2412, Test 0.2469
          RMSE             : Train 134.2837, Val 135.0773, Test 135.0576
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 182: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2474, Val 0.2411, Test 0.2432
          RMSE             : Train 134.1341, Val 135.0810, Test 135.3817
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 183: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2464, Val 0.2449, Test 0.2471
          RMSE             : Train 134.2224, Val 134.7418, Test 135.0380
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 184: Loss:            : Train 0.0147, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2466, Val 0.2453, Test 0.2481
          RMSE             : Train 134.2026, Val 134.7077, Test 134.9501
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 185: Loss:            : Train 0.0147, Val 0.0156, Test 0.0150
          R2_Score         : Train 0.2470, Val 0.2429, Test 0.2495
          RMSE             : Train 134.1700, Val 134.9242, Test 134.8180
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 186: Loss:            : Train 0.0146, Val 0.0156, Test 0.0151
          R2_Score         : Train 0.2485, Val 0.2368, Test 0.2426
          RMSE             : Train 134.0342, Val 135.4617, Test 135.4384
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 187: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2456, Val 0.2478, Test 0.2474
          RMSE             : Train 134.2942, Val 134.4812, Test 135.0056
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 188: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2467, Val 0.2452, Test 0.2447
          RMSE             : Train 134.1938, Val 134.7133, Test 135.2553
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 189: Loss:            : Train 0.0146, Val 0.0157, Test 0.0151
          R2_Score         : Train 0.2481, Val 0.2384, Test 0.2465
          RMSE             : Train 134.0720, Val 135.3200, Test 135.0915
Best:
          R2_Score         : Train 0.2450, Val 0.2488, Test 0.2509
          RMSE             : Train 134.3473, Val 134.3913, Test 134.6917
Epoch 190: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 191: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2445, Val 0.2417, Test 0.2421
          RMSE             : Train 134.3901, Val 135.0298, Test 135.4827
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 192: Loss:            : Train 0.0147, Val 0.0154, Test 0.0150
          R2_Score         : Train 0.2473, Val 0.2414, Test 0.2460
          RMSE             : Train 134.1442, Val 135.0530, Test 135.1369
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 193: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2467, Val 0.2407, Test 0.2421
          RMSE             : Train 134.1979, Val 135.1172, Test 135.4851
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 194: Loss:            : Train 0.0146, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2472, Val 0.2459, Test 0.2491
          RMSE             : Train 134.1545, Val 134.6521, Test 134.8616
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 195: Loss:            : Train 0.0147, Val 0.0155, Test 0.0151
          R2_Score         : Train 0.2459, Val 0.2413, Test 0.2460
          RMSE             : Train 134.2640, Val 135.0632, Test 135.1338
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 196: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2465, Val 0.2446, Test 0.2500
          RMSE             : Train 134.2174, Val 134.7746, Test 134.7795
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 197: Loss:            : Train 0.0147, Val 0.0154, Test 0.0151
          R2_Score         : Train 0.2457, Val 0.2432, Test 0.2448
          RMSE             : Train 134.2862, Val 134.8982, Test 135.2421
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 198: Loss:            : Train 0.0147, Val 0.0156, Test 0.0152
          R2_Score         : Train 0.2447, Val 0.2458, Test 0.2434
          RMSE             : Train 134.3756, Val 134.6633, Test 135.3715
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 199: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2446, Val 0.2476, Test 0.2497
          RMSE             : Train 134.3813, Val 134.5016, Test 134.8039
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623
Epoch 200: Loss:            : Train 0.0147, Val 0.0155, Test 0.0150
          R2_Score         : Train 0.2474, Val 0.2442, Test 0.2469
          RMSE             : Train 134.1348, Val 134.8091, Test 135.0579
Best:
          R2_Score         : Train 0.2452, Val 0.2521, Test 0.2490
          RMSE             : Train 134.3321, Val 134.1013, Test 134.8623

